// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = (typeof process === 'object' && typeof require === 'function') && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (typeof module !== 'undefined') {
	module['exports'] = Module;
}

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 28848;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__sub_I_VTFLib_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([0,0,0,0,80,0,0,0,1,0,0,0,2,0,0,0,78,54,115,113,117,105,115,104,49,48,67,108,117,115,116,101,114,70,105,116,69,0,0,0,78,54,115,113,117,105,115,104,57,67,111,108,111,117,114,70,105,116,69,0,0,0,0,0,120,105,0,0,48,0,0,0,8,106,0,0,24,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,152,0,0,0,4,0,0,0,5,0,0,0,78,54,115,113,117,105,115,104,56,82,97,110,103,101,70,105,116,69,0,0,0,0,0,0,8,106,0,0,128,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,248,24,0,0,6,0,0,0,7,0,0,0,200,0,0,0,200,6,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,2,0,0,2,0,0,3,0,1,1,0,0,4,0,1,0,1,0,3,0,1,1,1,0,2,0,1,2,1,0,1,0,2,1,1,0,0,0,2,0,1,0,1,0,2,1,1,0,2,0,2,2,1,0,3,0,3,1,1,0,4,0,3,0,2,0,3,0,3,1,2,0,2,0,3,2,2,0,1,0,4,1,2,0,0,0,4,0,2,0,1,0,4,1,2,0,2,0,4,2,2,0,3,0,5,1,2,0,4,0,5,0,3,0,3,0,5,1,3,0,2,0,5,2,3,0,1,0,6,1,3,0,0,0,6,0,3,0,1,0,6,1,3,0,2,0,6,2,3,0,3,0,7,1,3,0,4,0,7,0,4,0,4,0,7,1,4,0,3,0,7,2,4,0,2,1,7,1,4,0,1,1,7,0,4,0,0,0,8,0,4,0,1,0,8,1,4,0,2,2,7,1,4,0,3,2,7,0,4,0,4,0,9,0,5,0,3,0,9,1,5,0,2,3,7,1,5,0,1,3,7,0,5,0,0,0,10,0,5,0,1,0,10,1,5,0,2,0,10,2,5,0,3,0,11,1,5,0,4,0,11,0,6,0,3,0,11,1,6,0,2,0,11,2,6,0,1,0,12,1,6,0,0,0,12,0,6,0,1,0,12,1,6,0,2,0,12,2,6,0,3,0,13,1,6,0,4,0,13,0,7,0,3,0,13,1,7,0,2,0,13,2,7,0,1,0,14,1,7,0,0,0,14,0,7,0,1,0,14,1,7,0,2,0,14,2,7,0,3,0,15,1,7,0,4,0,15,0,8,0,4,0,15,1,8,0,3,0,15,2,8,0,2,1,15,1,8,0,1,1,15,0,8,0,0,0,16,0,8,0,1,0,16,1,8,0,2,2,15,1,8,0,3,2,15,0,8,0,4,0,17,0,9,0,3,0,17,1,9,0,2,3,15,1,9,0,1,3,15,0,9,0,0,0,18,0,9,0,1,0,18,1,9,0,2,0,18,2,9,0,3,0,19,1,9,0,4,0,19,0,10,0,3,0,19,1,10,0,2,0,19,2,10,0,1,0,20,1,10,0,0,0,20,0,10,0,1,0,20,1,10,0,2,0,20,2,10,0,3,0,21,1,10,0,4,0,21,0,11,0,3,0,21,1,11,0,2,0,21,2,11,0,1,0,22,1,11,0,0,0,22,0,11,0,1,0,22,1,11,0,2,0,22,2,11,0,3,0,23,1,11,0,4,0,23,0,12,0,4,0,23,1,12,0,3,0,23,2,12,0,2,1,23,1,12,0,1,1,23,0,12,0,0,0,24,0,12,0,1,0,24,1,12,0,2,2,23,1,12,0,3,2,23,0,12,0,4,0,25,0,13,0,3,0,25,1,13,0,2,3,23,1,13,0,1,3,23,0,13,0,0,0,26,0,13,0,1,0,26,1,13,0,2,0,26,2,13,0,3,0,27,1,13,0,4,0,27,0,14,0,3,0,27,1,14,0,2,0,27,2,14,0,1,0,28,1,14,0,0,0,28,0,14,0,1,0,28,1,14,0,2,0,28,2,14,0,3,0,29,1,14,0,4,0,29,0,15,0,3,0,29,1,15,0,2,0,29,2,15,0,1,0,30,1,15,0,0,0,30,0,15,0,1,0,30,1,15,0,2,0,30,2,15,0,3,0,31,1,15,0,4,0,31,0,16,0,4,0,31,1,16,0,3,0,31,2,16,0,2,1,31,1,16,0,1,1,31,0,16,0,0,4,28,0,16,0,1,4,28,1,16,0,2,2,31,1,16,0,3,2,31,0,16,0,4,4,29,0,17,0,3,4,29,1,17,0,2,3,31,1,17,0,1,3,31,0,17,0,0,4,30,0,17,0,1,4,30,1,17,0,2,4,30,2,17,0,3,4,31,1,17,0,4,4,31,0,18,0,3,4,31,1,18,0,2,4,31,2,18,0,1,5,31,1,18,0,0,5,31,0,18,0,1,5,31,1,18,0,2,5,31,2,18,0,3,6,31,1,18,0,4,6,31,0,19,0,3,6,31,1,19,0,2,6,31,2,19,0,1,7,31,1,19,0,0,7,31,0,19,0,1,7,31,1,19,0,2,7,31,2,19,0,3,8,31,1,19,0,4,8,31,0,20,0,4,8,31,1,20,0,3,8,31,2,20,0,2,9,31,1,20,0,1,9,31,0,20,0,0,12,28,0,20,0,1,12,28,1,20,0,2,10,31,1,20,0,3,10,31,0,20,0,4,12,29,0,21,0,3,12,29,1,21,0,2,11,31,1,21,0,1,11,31,0,21,0,0,12,30,0,21,0,1,12,30,1,21,0,2,12,30,2,21,0,3,12,31,1,21,0,4,12,31,0,22,0,3,12,31,1,22,0,2,12,31,2,22,0,1,13,31,1,22,0,0,13,31,0,22,0,1,13,31,1,22,0,2,13,31,2,22,0,3,14,31,1,22,0,4,14,31,0,23,0,3,14,31,1,23,0,2,14,31,2,23,0,1,15,31,1,23,0,0,15,31,0,23,0,1,15,31,1,23,0,2,15,31,2,23,0,3,16,31,1,23,0,4,16,31,0,24,0,4,16,31,1,24,0,3,16,31,2,24,0,2,17,31,1,24,0,1,17,31,0,24,0,0,20,28,0,24,0,1,20,28,1,24,0,2,18,31,1,24,0,3,18,31,0,24,0,4,20,29,0,25,0,3,20,29,1,25,0,2,19,31,1,25,0,1,19,31,0,25,0,0,20,30,0,25,0,1,20,30,1,25,0,2,20,30,2,25,0,3,20,31,1,25,0,4,20,31,0,26,0,3,20,31,1,26,0,2,20,31,2,26,0,1,21,31,1,26,0,0,21,31,0,26,0,1,21,31,1,26,0,2,21,31,2,26,0,3,22,31,1,26,0,4,22,31,0,27,0,3,22,31,1,27,0,2,22,31,2,27,0,1,23,31,1,27,0,0,23,31,0,27,0,1,23,31,1,27,0,2,23,31,2,27,0,3,24,31,1,27,0,4,24,31,0,28,0,4,24,31,1,28,0,3,24,31,2,28,0,2,25,31,1,28,0,1,25,31,0,28,0,0,28,28,0,28,0,1,28,28,1,28,0,2,26,31,1,28,0,3,26,31,0,28,0,4,28,29,0,29,0,3,28,29,1,29,0,2,27,31,1,29,0,1,27,31,0,29,0,0,28,30,0,29,0,1,28,30,1,29,0,2,28,30,2,29,0,3,28,31,1,29,0,4,28,31,0,30,0,3,28,31,1,30,0,2,28,31,2,30,0,1,29,31,1,30,0,0,29,31,0,30,0,1,29,31,1,30,0,2,29,31,2,30,0,3,30,31,1,30,0,4,30,31,0,31,0,3,30,31,1,31,0,2,30,31,2,31,0,1,31,31,1,31,0,0,31,31,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,2,0,1,0,1,0,1,0,2,1,1,0,0,0,2,0,1,0,1,0,3,1,1,0,2,0,3,0,2,0,1,0,4,1,2,0,0,0,4,0,2,0,1,0,5,1,2,0,2,0,5,0,3,0,1,0,6,1,3,0,0,0,6,0,3,0,1,0,7,1,3,0,2,0,7,0,4,0,1,0,8,1,4,0,0,0,8,0,4,0,1,0,9,1,4,0,2,0,9,0,5,0,1,0,10,1,5,0,0,0,10,0,5,0,1,0,11,1,5,0,2,0,11,0,6,0,1,0,12,1,6,0,0,0,12,0,6,0,1,0,13,1,6,0,2,0,13,0,7,0,1,0,14,1,7,0,0,0,14,0,7,0,1,0,15,1,7,0,2,0,15,0,8,0,1,0,16,1,8,0,0,0,16,0,8,0,1,0,17,1,8,0,2,0,17,0,9,0,1,0,18,1,9,0,0,0,18,0,9,0,1,0,19,1,9,0,2,0,19,0,10,0,1,0,20,1,10,0,0,0,20,0,10,0,1,0,21,1,10,0,2,0,21,0,11,0,1,0,22,1,11,0,0,0,22,0,11,0,1,0,23,1,11,0,2,0,23,0,12,0,1,0,24,1,12,0,0,0,24,0,12,0,1,0,25,1,12,0,2,0,25,0,13,0,1,0,26,1,13,0,0,0,26,0,13,0,1,0,27,1,13,0,2,0,27,0,14,0,1,0,28,1,14,0,0,0,28,0,14,0,1,0,29,1,14,0,2,0,29,0,15,0,1,0,30,1,15,0,0,0,30,0,15,0,1,0,31,1,15,0,2,0,31,0,16,0,2,1,31,1,16,0,1,1,31,0,16,0,0,0,32,0,16,0,1,2,31,0,16,0,2,0,33,0,17,0,1,3,31,0,17,0,0,0,34,0,17,0,1,4,31,0,17,0,2,0,35,0,18,0,1,5,31,0,18,0,0,0,36,0,18,0,1,6,31,0,18,0,2,0,37,0,19,0,1,7,31,0,19,0,0,0,38,0,19,0,1,8,31,0,19,0,2,0,39,0,20,0,1,9,31,0,20,0,0,0,40,0,20,0,1,10,31,0,20,0,2,0,41,0,21,0,1,11,31,0,21,0,0,0,42,0,21,0,1,12,31,0,21,0,2,0,43,0,22,0,1,13,31,0,22,0,0,0,44,0,22,0,1,14,31,0,22,0,2,0,45,0,23,0,1,15,31,0,23,0,0,0,46,0,23,0,1,0,47,1,23,0,2,0,47,0,24,0,1,0,48,1,24,0,0,0,48,0,24,0,1,0,49,1,24,0,2,0,49,0,25,0,1,0,50,1,25,0,0,0,50,0,25,0,1,0,51,1,25,0,2,0,51,0,26,0,1,0,52,1,26,0,0,0,52,0,26,0,1,0,53,1,26,0,2,0,53,0,27,0,1,0,54,1,27,0,0,0,54,0,27,0,1,0,55,1,27,0,2,0,55,0,28,0,1,0,56,1,28,0,0,0,56,0,28,0,1,0,57,1,28,0,2,0,57,0,29,0,1,0,58,1,29,0,0,0,58,0,29,0,1,0,59,1,29,0,2,0,59,0,30,0,1,0,60,1,30,0,0,0,60,0,30,0,1,0,61,1,30,0,2,0,61,0,31,0,1,0,62,1,31,0,0,0,62,0,31,0,1,0,63,1,31,0,2,0,63,0,32,0,2,1,63,1,32,0,1,1,63,0,32,0,0,16,48,0,32,0,1,2,63,0,32,0,2,16,49,0,33,0,1,3,63,0,33,0,0,16,50,0,33,0,1,4,63,0,33,0,2,16,51,0,34,0,1,5,63,0,34,0,0,16,52,0,34,0,1,6,63,0,34,0,2,16,53,0,35,0,1,7,63,0,35,0,0,16,54,0,35,0,1,8,63,0,35,0,2,16,55,0,36,0,1,9,63,0,36,0,0,16,56,0,36,0,1,10,63,0,36,0,2,16,57,0,37,0,1,11,63,0,37,0,0,16,58,0,37,0,1,12,63,0,37,0,2,16,59,0,38,0,1,13,63,0,38,0,0,16,60,0,38,0,1,14,63,0,38,0,2,16,61,0,39,0,1,15,63,0,39,0,0,16,62,0,39,0,1,16,63,1,39,0,2,16,63,0,40,0,1,17,63,1,40,0,0,17,63,0,40,0,1,18,63,1,40,0,2,18,63,0,41,0,1,19,63,1,41,0,0,19,63,0,41,0,1,20,63,1,41,0,2,20,63,0,42,0,1,21,63,1,42,0,0,21,63,0,42,0,1,22,63,1,42,0,2,22,63,0,43,0,1,23,63,1,43,0,0,23,63,0,43,0,1,24,63,1,43,0,2,24,63,0,44,0,1,25,63,1,44,0,0,25,63,0,44,0,1,26,63,1,44,0,2,26,63,0,45,0,1,27,63,1,45,0,0,27,63,0,45,0,1,28,63,1,45,0,2,28,63,0,46,0,1,29,63,1,46,0,0,29,63,0,46,0,1,30,63,1,46,0,2,30,63,0,47,0,1,31,63,1,47,0,0,31,63,0,47,0,1,32,63,1,47,0,2,32,63,0,48,0,2,33,63,1,48,0,1,33,63,0,48,0,0,48,48,0,48,0,1,34,63,0,48,0,2,48,49,0,49,0,1,35,63,0,49,0,0,48,50,0,49,0,1,36,63,0,49,0,2,48,51,0,50,0,1,37,63,0,50,0,0,48,52,0,50,0,1,38,63,0,50,0,2,48,53,0,51,0,1,39,63,0,51,0,0,48,54,0,51,0,1,40,63,0,51,0,2,48,55,0,52,0,1,41,63,0,52,0,0,48,56,0,52,0,1,42,63,0,52,0,2,48,57,0,53,0,1,43,63,0,53,0,0,48,58,0,53,0,1,44,63,0,53,0,2,48,59,0,54,0,1,45,63,0,54,0,0,48,60,0,54,0,1,46,63,0,54,0,2,48,61,0,55,0,1,47,63,0,55,0,0,48,62,0,55,0,1,48,63,1,55,0,2,48,63,0,56,0,1,49,63,1,56,0,0,49,63,0,56,0,1,50,63,1,56,0,2,50,63,0,57,0,1,51,63,1,57,0,0,51,63,0,57,0,1,52,63,1,57,0,2,52,63,0,58,0,1,53,63,1,58,0,0,53,63,0,58,0,1,54,63,1,58,0,2,54,63,0,59,0,1,55,63,1,59,0,0,55,63,0,59,0,1,56,63,1,59,0,2,56,63,0,60,0,1,57,63,1,60,0,0,57,63,0,60,0,1,58,63,1,60,0,2,58,63,0,61,0,1,59,63,1,61,0,0,59,63,0,61,0,1,60,63,1,61,0,2,60,63,0,62,0,1,61,63,1,62,0,0,61,63,0,62,0,1,62,63,1,62,0,2,62,63,0,63,0,1,63,63,1,63,0,0,63,63,0,216,12,0,0,216,18,0,0,216,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,2,0,1,0,0,0,3,0,1,1,0,0,4,0,2,1,1,0,3,0,2,0,1,0,2,0,2,1,1,0,1,0,3,1,1,0,0,0,3,0,1,0,1,1,2,1,1,0,2,1,2,0,1,0,3,0,4,0,1,0,4,0,5,1,2,0,3,0,5,0,2,0,2,0,5,1,2,0,1,0,6,1,2,0,0,0,6,0,2,0,1,2,3,1,2,0,2,2,3,0,2,0,3,0,7,0,2,0,4,1,6,1,3,0,3,1,6,0,3,0,2,0,8,0,3,0,1,0,9,1,3,0,0,0,9,0,3,0,1,0,9,1,3,0,2,0,10,1,3,0,3,0,10,0,3,0,4,2,7,1,4,0,4,2,7,0,4,0,3,0,11,0,4,0,2,1,10,1,4,0,1,1,10,0,4,0,0,0,12,0,4,0,1,0,13,1,4,0,2,0,13,0,4,0,3,0,13,1,4,0,4,0,14,1,5,0,3,0,14,0,5,0,2,2,11,1,5,0,1,2,11,0,5,0,0,0,15,0,5,0,1,1,14,1,5,0,2,1,14,0,5,0,3,0,16,0,5,0,4,0,17,1,6,0,3,0,17,0,6,0,2,0,17,1,6,0,1,0,18,1,6,0,0,0,18,0,6,0,1,2,15,1,6,0,2,2,15,0,6,0,3,0,19,0,6,0,4,1,18,1,7,0,3,1,18,0,7,0,2,0,20,0,7,0,1,0,21,1,7,0,0,0,21,0,7,0,1,0,21,1,7,0,2,0,22,1,7,0,3,0,22,0,7,0,4,2,19,1,8,0,4,2,19,0,8,0,3,0,23,0,8,0,2,1,22,1,8,0,1,1,22,0,8,0,0,0,24,0,8,0,1,0,25,1,8,0,2,0,25,0,8,0,3,0,25,1,8,0,4,0,26,1,9,0,3,0,26,0,9,0,2,2,23,1,9,0,1,2,23,0,9,0,0,0,27,0,9,0,1,1,26,1,9,0,2,1,26,0,9,0,3,0,28,0,9,0,4,0,29,1,10,0,3,0,29,0,10,0,2,0,29,1,10,0,1,0,30,1,10,0,0,0,30,0,10,0,1,2,27,1,10,0,2,2,27,0,10,0,3,0,31,0,10,0,4,1,30,1,11,0,3,1,30,0,11,0,2,4,24,0,11,0,1,1,31,1,11,0,0,1,31,0,11,0,1,1,31,1,11,0,2,2,30,1,11,0,3,2,30,0,11,0,4,2,31,1,12,0,4,2,31,0,12,0,3,4,27,0,12,0,2,3,30,1,12,0,1,3,30,0,12,0,0,4,28,0,12,0,1,3,31,1,12,0,2,3,31,0,12,0,3,3,31,1,12,0,4,4,30,1,13,0,3,4,30,0,13,0,2,6,27,1,13,0,1,6,27,0,13,0,0,4,31,0,13,0,1,5,30,1,13,0,2,5,30,0,13,0,3,8,24,0,13,0,4,5,31,1,14,0,3,5,31,0,14,0,2,5,31,1,14,0,1,6,30,1,14,0,0,6,30,0,14,0,1,6,31,1,14,0,2,6,31,0,14,0,3,8,27,0,14,0,4,7,30,1,15,0,3,7,30,0,15,0,2,8,28,0,15,0,1,7,31,1,15,0,0,7,31,0,15,0,1,7,31,1,15,0,2,8,30,1,15,0,3,8,30,0,15,0,4,10,27,1,16,0,4,10,27,0,16,0,3,8,31,0,16,0,2,9,30,1,16,0,1,9,30,0,16,0,0,12,24,0,16,0,1,9,31,1,16,0,2,9,31,0,16,0,3,9,31,1,16,0,4,10,30,1,17,0,3,10,30,0,17,0,2,10,31,1,17,0,1,10,31,0,17,0,0,12,27,0,17,0,1,11,30,1,17,0,2,11,30,0,17,0,3,12,28,0,17,0,4,11,31,1,18,0,3,11,31,0,18,0,2,11,31,1,18,0,1,12,30,1,18,0,0,12,30,0,18,0,1,14,27,1,18,0,2,14,27,0,18,0,3,12,31,0,18,0,4,13,30,1,19,0,3,13,30,0,19,0,2,16,24,0,19,0,1,13,31,1,19,0,0,13,31,0,19,0,1,13,31,1,19,0,2,14,30,1,19,0,3,14,30,0,19,0,4,14,31,1,20,0,4,14,31,0,20,0,3,16,27,0,20,0,2,15,30,1,20,0,1,15,30,0,20,0,0,16,28,0,20,0,1,15,31,1,20,0,2,15,31,0,20,0,3,15,31,1,20,0,4,16,30,1,21,0,3,16,30,0,21,0,2,18,27,1,21,0,1,18,27,0,21,0,0,16,31,0,21,0,1,17,30,1,21,0,2,17,30,0,21,0,3,20,24,0,21,0,4,17,31,1,22,0,3,17,31,0,22,0,2,17,31,1,22,0,1,18,30,1,22,0,0,18,30,0,22,0,1,18,31,1,22,0,2,18,31,0,22,0,3,20,27,0,22,0,4,19,30,1,23,0,3,19,30,0,23,0,2,20,28,0,23,0,1,19,31,1,23,0,0,19,31,0,23,0,1,19,31,1,23,0,2,20,30,1,23,0,3,20,30,0,23,0,4,22,27,1,24,0,4,22,27,0,24,0,3,20,31,0,24,0,2,21,30,1,24,0,1,21,30,0,24,0,0,24,24,0,24,0,1,21,31,1,24,0,2,21,31,0,24,0,3,21,31,1,24,0,4,22,30,1,25,0,3,22,30,0,25,0,2,22,31,1,25,0,1,22,31,0,25,0,0,24,27,0,25,0,1,23,30,1,25,0,2,23,30,0,25,0,3,24,28,0,25,0,4,23,31,1,26,0,3,23,31,0,26,0,2,23,31,1,26,0,1,24,30,1,26,0,0,24,30,0,26,0,1,26,27,1,26,0,2,26,27,0,26,0,3,24,31,0,26,0,4,25,30,1,27,0,3,25,30,0,27,0,2,28,24,0,27,0,1,25,31,1,27,0,0,25,31,0,27,0,1,25,31,1,27,0,2,26,30,1,27,0,3,26,30,0,27,0,4,26,31,1,28,0,4,26,31,0,28,0,3,28,27,0,28,0,2,27,30,1,28,0,1,27,30,0,28,0,0,28,28,0,28,0,1,27,31,1,28,0,2,27,31,0,28,0,3,27,31,1,28,0,4,28,30,1,29,0,3,28,30,0,29,0,2,30,27,1,29,0,1,30,27,0,29,0,0,28,31,0,29,0,1,29,30,1,29,0,2,29,30,0,29,0,3,29,30,1,29,0,4,29,31,1,30,0,3,29,31,0,30,0,2,29,31,1,30,0,1,30,30,1,30,0,0,30,30,0,30,0,1,30,31,1,30,0,2,30,31,0,30,0,3,30,31,1,30,0,4,31,30,1,31,0,3,31,30,0,31,0,2,31,30,1,31,0,1,31,31,1,31,0,0,31,31,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,2,0,2,0,1,0,1,0,3,1,1,0,0,0,3,0,1,0,1,0,4,0,1,0,2,0,5,0,2,0,1,0,6,1,2,0,0,0,6,0,2,0,1,0,7,0,2,0,2,0,8,0,3,0,1,0,9,1,3,0,0,0,9,0,3,0,1,0,10,0,3,0,2,0,11,0,4,0,1,0,12,1,4,0,0,0,12,0,4,0,1,0,13,0,4,0,2,0,14,0,5,0,1,0,15,1,5,0,0,0,15,0,5,0,1,0,16,0,5,0,2,1,15,0,6,0,1,0,17,0,6,0,0,0,18,0,6,0,1,0,19,0,6,0,2,3,14,0,7,0,1,0,20,0,7,0,0,0,21,0,7,0,1,0,22,0,7,0,2,4,15,0,8,0,1,0,23,0,8,0,0,0,24,0,8,0,1,0,25,0,8,0,2,6,14,0,9,0,1,0,26,0,9,0,0,0,27,0,9,0,1,0,28,0,9,0,2,7,15,0,10,0,1,0,29,0,10,0,0,0,30,0,10,0,1,0,31,0,10,0,2,9,14,0,11,0,1,0,32,0,11,0,0,0,33,0,11,0,1,2,30,0,11,0,2,0,34,0,12,0,1,0,35,0,12,0,0,0,36,0,12,0,1,3,31,0,12,0,2,0,37,0,13,0,1,0,38,0,13,0,0,0,39,0,13,0,1,5,30,0,13,0,2,0,40,0,14,0,1,0,41,0,14,0,0,0,42,0,14,0,1,6,31,0,14,0,2,0,43,0,15,0,1,0,44,0,15,0,0,0,45,0,15,0,1,8,30,0,15,0,2,0,46,0,16,0,2,0,47,0,16,0,1,1,46,0,16,0,0,0,48,0,16,0,1,0,49,0,16,0,2,0,50,0,17,0,1,2,47,0,17,0,0,0,51,0,17,0,1,0,52,0,17,0,2,0,53,0,18,0,1,4,46,0,18,0,0,0,54,0,18,0,1,0,55,0,18,0,2,0,56,0,19,0,1,5,47,0,19,0,0,0,57,0,19,0,1,0,58,0,19,0,2,0,59,0,20,0,1,7,46,0,20,0,0,0,60,0,20,0,1,0,61,0,20,0,2,0,62,0,21,0,1,8,47,0,21,0,0,0,63,0,21,0,1,1,62,0,21,0,2,1,63,0,22,0,1,10,46,0,22,0,0,2,62,0,22,0,1,2,63,0,22,0,2,3,62,0,23,0,1,11,47,0,23,0,0,3,63,0,23,0,1,4,62,0,23,0,2,4,63,0,24,0,1,13,46,0,24,0,0,5,62,0,24,0,1,5,63,0,24,0,2,6,62,0,25,0,1,14,47,0,25,0,0,6,63,0,25,0,1,7,62,0,25,0,2,7,63,0,26,0,1,16,45,0,26,0,0,8,62,0,26,0,1,8,63,0,26,0,2,9,62,0,27,0,1,16,48,0,27,0,0,9,63,0,27,0,1,10,62,0,27,0,2,10,63,0,28,0,1,16,51,0,28,0,0,11,62,0,28,0,1,11,63,0,28,0,2,12,62,0,29,0,1,16,54,0,29,0,0,12,63,0,29,0,1,13,62,0,29,0,2,13,63,0,30,0,1,16,57,0,30,0,0,14,62,0,30,0,1,14,63,0,30,0,2,15,62,0,31,0,1,16,60,0,31,0,0,15,63,0,31,0,1,24,46,0,31,0,2,16,62,0,32,0,2,16,63,0,32,0,1,17,62,0,32,0,0,25,47,0,32,0,1,17,63,0,32,0,2,18,62,0,33,0,1,18,63,0,33,0,0,27,46,0,33,0,1,19,62,0,33,0,2,19,63,0,34,0,1,20,62,0,34,0,0,28,47,0,34,0,1,20,63,0,34,0,2,21,62,0,35,0,1,21,63,0,35,0,0,30,46,0,35,0,1,22,62,0,35,0,2,22,63,0,36,0,1,23,62,0,36,0,0,31,47,0,36,0,1,23,63,0,36,0,2,24,62,0,37,0,1,24,63,0,37,0,0,32,47,0,37,0,1,25,62,0,37,0,2,25,63,0,38,0,1,26,62,0,38,0,0,32,50,0,38,0,1,26,63,0,38,0,2,27,62,0,39,0,1,27,63,0,39,0,0,32,53,0,39,0,1,28,62,0,39,0,2,28,63,0,40,0,1,29,62,0,40,0,0,32,56,0,40,0,1,29,63,0,40,0,2,30,62,0,41,0,1,30,63,0,41,0,0,32,59,0,41,0,1,31,62,0,41,0,2,31,63,0,42,0,1,32,61,0,42,0,0,32,62,0,42,0,1,32,63,0,42,0,2,41,46,0,43,0,1,33,62,0,43,0,0,33,63,0,43,0,1,34,62,0,43,0,2,42,47,0,44,0,1,34,63,0,44,0,0,35,62,0,44,0,1,35,63,0,44,0,2,44,46,0,45,0,1,36,62,0,45,0,0,36,63,0,45,0,1,37,62,0,45,0,2,45,47,0,46,0,1,37,63,0,46,0,0,38,62,0,46,0,1,38,63,0,46,0,2,47,46,0,47,0,1,39,62,0,47,0,0,39,63,0,47,0,1,40,62,0,47,0,2,48,46,0,48,0,2,40,63,0,48,0,1,41,62,0,48,0,0,41,63,0,48,0,1,48,49,0,48,0,2,42,62,0,49,0,1,42,63,0,49,0,0,43,62,0,49,0,1,48,52,0,49,0,2,43,63,0,50,0,1,44,62,0,50,0,0,44,63,0,50,0,1,48,55,0,50,0,2,45,62,0,51,0,1,45,63,0,51,0,0,46,62,0,51,0,1,48,58,0,51,0,2,46,63,0,52,0,1,47,62,0,52,0,0,47,63,0,52,0,1,48,61,0,52,0,2,48,62,0,53,0,1,56,47,0,53,0,0,48,63,0,53,0,1,49,62,0,53,0,2,49,63,0,54,0,1,58,46,0,54,0,0,50,62,0,54,0,1,50,63,0,54,0,2,51,62,0,55,0,1,59,47,0,55,0,0,51,63,0,55,0,1,52,62,0,55,0,2,52,63,0,56,0,1,61,46,0,56,0,0,53,62,0,56,0,1,53,63,0,56,0,2,54,62,0,57,0,1,62,47,0,57,0,0,54,63,0,57,0,1,55,62,0,57,0,2,55,63,0,58,0,1,56,62,1,58,0,0,56,62,0,58,0,1,56,63,0,58,0,2,57,62,0,59,0,1,57,63,1,59,0,0,57,63,0,59,0,1,58,62,0,59,0,2,58,63,0,60,0,1,59,62,1,60,0,0,59,62,0,60,0,1,59,63,0,60,0,2,60,62,0,61,0,1,60,63,1,61,0,0,60,63,0,61,0,1,61,62,0,61,0,2,61,63,0,62,0,1,62,62,1,62,0,0,62,62,0,62,0,1,62,63,0,62,0,2,63,62,0,63,0,1,63,63,1,63,0,0,63,63,0,78,54,115,113,117,105,115,104,49,53,83,105,110,103,108,101,67,111,108,111,117,114,70,105,116,69,0,0,0,0,0,0,8,106,0,0,216,24,0,0,72,0,0,0,0,0,0,0,69,114,114,111,114,58,10,37,115,10,10,83,121,115,116,101,109,32,69,114,114,111,114,58,32,48,120,37,46,56,120,46,0,0,0,0,0,0,0,0,69,114,114,111,114,58,10,37,115,0,0,0,0,0,0,0,0,0,0,0,232,25,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,77,101,109,111,114,121,32,115,116,114,101,97,109,32,105,115,32,110,117,108,108,46,0,0,69,110,100,32,111,102,32,109,101,109,111,114,121,32,115,116,114,101,97,109,46,0,0,0,78,54,86,84,70,76,105,98,50,73,79,55,87,114,105,116,101,114,115,49,51,67,77,101,109,111,114,121,87,114,105,116,101,114,69,0,0,0,0,0,78,54,86,84,70,76,105,98,50,73,79,55,87,114,105,116,101,114,115,55,73,87,114,105,116,101,114,69,0,0,0,0,120,105,0,0,192,25,0,0,8,106,0,0,152,25,0,0,224,25,0,0,0,0,0,0,0,0,0,0,224,25,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,46,32,32,87,105,100,116,104,32,109,117,115,116,32,98,101,32,110,111,110,122,101,114,111,46,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,32,37,117,46,32,32,87,105,100,116,104,32,109,117,115,116,32,98,101,32,97,32,112,111,119,101,114,32,111,102,32,116,119,111,32,40,110,101,97,114,101,115,116,32,112,111,119,101,114,115,32,97,114,101,32,37,117,32,97,110,100,32,37,117,41,46,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,46,32,32,72,101,105,103,104,116,32,109,117,115,116,32,98,101,32,110,111,110,122,101,114,111,46,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,32,37,117,46,32,32,72,101,105,103,104,116,32,109,117,115,116,32,98,101,32,97,32,112,111,119,101,114,32,111,102,32,116,119,111,32,40,110,101,97,114,101,115,116,32,112,111,119,101,114,115,32,97,114,101,32,37,117,32,97,110,100,32,37,117,41,46,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,100,101,112,116,104,46,32,32,68,101,112,116,104,32,109,117,115,116,32,98,101,32,110,111,110,122,101,114,111,46,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,100,101,112,116,104,32,37,117,46,32,32,68,101,112,116,104,32,109,117,115,116,32,98,101,32,97,32,112,111,119,101,114,32,111,102,32,116,119,111,32,40,110,101,97,114,101,115,116,32,112,111,119,101,114,115,32,97,114,101,32,37,117,32,97,110,100,32,37,117,41,46,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,102,111,114,109,97,116,46,0,0,0,73,109,97,103,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,102,114,97,109,101,32,99,111,117,110,116,32,37,117,46,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,102,97,99,101,32,99,111,117,110,116,32,37,117,46,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,102,97,99,101,32,99,111,117,110,116,32,37,117,32,102,111,114,32,118,101,114,115,105,111,110,32,37,100,46,37,100,46,0,0,86,84,70,0,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,102,114,97,109,101,44,32,102,97,99,101,32,97,110,100,32,115,108,105,99,101,32,99,111,117,110,116,32,99,111,109,98,105,110,97,116,105,111,110,46,32,32,70,117,110,99,116,105,111,110,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,105,109,97,103,101,115,32,119,105,116,104,32,97,110,121,32,99,111,109,98,105,110,97,116,105,111,110,32,111,102,32,109,117,108,116,105,112,108,101,32,102,114,97,109,101,115,32,111,114,32,102,97,99,101,115,32,111,114,32,115,108,105,99,101,115,46,0,0,0,0,70,105,108,101,32,118,101,114,115,105,111,110,32,37,117,46,37,117,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,37,100,46,37,100,32,116,111,32,37,100,46,37,100,46,0,0,0,0,0,0,0,86,111,108,117,109,101,32,116,101,120,116,117,114,101,115,32,97,114,101,32,111,110,108,121,32,115,117,112,112,111,114,116,101,100,32,105,110,32,118,101,114,115,105,111,110,32,37,100,46,37,100,32,97,110,100,32,117,112,46,0,0,0,0,0,83,112,104,101,114,101,32,109,97,112,115,32,97,114,101,32,111,110,108,121,32,115,117,112,112,111,114,116,101,100,32,105,110,32,118,101,114,115,105,111,110,32,37,100,46,37,100,32,97,110,100,32,117,112,46,0,77,105,112,109,97,112,32,103,101,110,101,114,97,116,105,111,110,32,102,111,114,32,100,101,112,116,104,32,116,101,120,116,117,114,101,115,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,40,117,105,78,101,119,87,105,100,116,104,32,38,32,40,117,105,78,101,119,87,105,100,116,104,32,45,32,49,41,41,32,61,61,32,48,0,0,0,0,46,47,86,84,70,70,105,108,101,46,99,112,112,0,0,0,67,114,101,97,116,101,0,0,40,117,105,78,101,119,72,101,105,103,104,116,32,38,32,40,117,105,78,101,119,72,101,105,103,104,116,32,45,32,49,41,41,32,61,61,32,48,0,0,78,86,68,88,84,32,115,117,112,112,111,114,116,32,114,101,113,117,105,114,101,100,32,102,111,114,32,67,86,84,70,70,105,108,101,58,58,71,101,110,101,114,97,116,101,77,105,112,109,97,112,115,40,41,46,0,78,111,32,105,109,97,103,101,32,116,111,32,115,97,118,101,46,0,0,0,0,0,0,0,86,84,70,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,116,104,117,109,98,110,97,105,108,46,0,0,0,0,0,78,111,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,103,101,110,101,114,97,116,101,32,116,104,117,109,98,110,97,105,108,32,102,114,111,109,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,191,0,0,0,191,0,0,0,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,191,0,0,0,191,0,0,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,191,0,0,0,191,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,63,0,0,0,191,0,0,0,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,191,0,0,0,63,0,0,0,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,191,0,0,0,191,0,0,0,63,73,109,97,103,101,32,105,115,32,110,111,116,32,97,110,32,101,110,118,105,114,111,109,101,110,116,32,109,97,112,46,0,69,110,118,105,114,111,109,101,110,116,32,109,97,112,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,115,112,104,101,114,101,32,109,97,112,46,0,0,0,0,0,0,78,111,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,103,101,110,101,114,97,116,101,32,115,112,104,101,114,101,32,109,97,112,32,102,114,111,109,46,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,67,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,111,117,114,99,101,32,116,111,32,82,71,66,65,56,56,56,56,32,102,111,114,109,97,116,0,0,0,0,0,73,109,97,103,101,70,111,114,109,97,116,32,62,61,32,48,32,38,38,32,73,109,97,103,101,70,111,114,109,97,116,32,60,32,73,77,65,71,69,95,70,79,82,77,65,84,95,67,79,85,78,84,0,0,0,0,71,101,116,73,109,97,103,101,70,111,114,109,97,116,73,110,102,111,0,0,0,0,0,0,168,49,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,1,184,49,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,1,200,49,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,1,208,49,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,1,216,49,0,0,16,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,0,0,0,0,0,1,224,49,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,232,49,0,0,16,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,1,240,49,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,49,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,1,0,50,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,1,24,50,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,1,48,50,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,1,64,50,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,1,80,50,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,88,50,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,1,96,50,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,1,104,50,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,1,120,50,0,0,16,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,0,0,0,0,0,1,128,50,0,0,16,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,1,144,50,0,0,16,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,1,160,50,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,184,50,0,0,16,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,0,1,200,50,0,0,16,0,0,0,2,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,1,208,50,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,1,224,50,0,0,64,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,1,240,50,0,0,64,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,1,0,51,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,1,16,51,0,0,32,0,0,0,4,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,24,51,0,0,96,0,0,0,12,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,1,40,51,0,0,128,0,0,0,16,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,1,56,51,0,0,16,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,72,51,0,0,24,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,88,51,0,0,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,104,51,0,0,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,120,51,0,0,16,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,136,51,0,0,24,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,51,0,0,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,168,51,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,176,51,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,117,105,87,105,100,116,104,32,33,61,32,48,32,38,38,32,117,105,72,101,105,103,104,116,32,33,61,32,48,32,38,38,32,117,105,68,101,112,116,104,32,33,61,32,48,0,0,0,67,111,109,112,117,116,101,73,109,97,103,101,83,105,122,101,0,0,0,0,0,0,0,0,67,111,109,112,117,116,101,77,105,112,109,97,112,67,111,117,110,116,0,0,0,0,0,0,117,105,79,102,102,115,101,116,32,60,32,116,104,105,115,45,62,117,105,73,109,97,103,101,66,117,102,102,101,114,83,105,122,101,0,0,0,0,0,0,67,111,109,112,117,116,101,68,97,116,97,79,102,102,115,101,116,0,0,0,0,0,0,0,68,101,115,116,105,110,97,116,105,111,110,32,105,109,97,103,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,0,0,0,108,112,83,111,117,114,99,101,32,33,61,32,48,0,0,0,67,111,110,118,101,114,116,0,108,112,68,101,115,116,32,33,61,32,48,0,0,0,0,0,83,111,117,114,99,101,70,111,114,109,97,116,32,62,61,32,48,32,38,38,32,83,111,117,114,99,101,70,111,114,109,97,116,32,60,32,73,77,65,71,69,95,70,79,82,77,65,84,95,67,79,85,78,84,0,0,68,101,115,116,70,111,114,109,97,116,32,62,61,32,48,32,38,38,32,68,101,115,116,70,111,114,109,97,116,32,60,32,73,77,65,71,69,95,70,79,82,77,65,84,95,67,79,85,78,84,0,0,0,0,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([2,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,3,0,0,0,16,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,1,0,0,16,0,0,0,17,0,0,0,5,0,0,0,16,0,0,0,2,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,1,0,0,0,0,1,0,0,16,0,0,0,17,0,0,0,6,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,0,1,0,0,18,0,0,0,19,0,0,0,9,0,0,0,24,0,0,0,3,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,1,0,0,18,0,0,0,19,0,0,0,10,0,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,11,0,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,1,0,0,0,0,0,0,0,0,0,0,13,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,1,0,0,0,0,0,0,0,0,0,0,14,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,1,0,0,0,0,0,0,0,0,0,0,15,0,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,17,0,0,0,16,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,18,0,0,0,16,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,19,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,1,0,0,0,0,0,0,0,0,0,0,20,0,0,0,16,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,21,0,0,0,16,0,0,0,2,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,22,0,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,23,0,0,0,64,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,1,0,0,20,0,0,0,21,0,0,0,24,0,0,0,64,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,25,0,0,0,32,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,26,0,0,0,32,0,0,0,4,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,96,0,0,0,12,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,128,0,0,0,16,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,16,0,0,0,2,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,30,0,0,0,24,0,0,0,3,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,31,0,0,0,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,24,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,16,0,0,0,2,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,34,0,0,0,24,0,0,0,3,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,1,0,0,0,0,0,0,0,0,0,0,35,0,0,0,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,109,97,103,101,32,102,111,114,109,97,116,32,99,111,110,118,101,114,115,105,111,110,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,75,101,114,110,101,108,70,105,108,116,101,114,32,62,61,32,48,32,38,38,32,75,101,114,110,101,108,70,105,108,116,101,114,32,60,32,75,69,82,78,69,76,95,70,73,76,84,69,82,95,67,79,85,78,84,0,67,111,110,118,101,114,116,84,111,78,111,114,109,97,108,77,97,112,0,0,0,0,0,0,72,101,105,103,104,116,67,111,110,118,101,114,115,105,111,110,77,101,116,104,111,100,32,62,61,32,48,32,38,38,32,72,101,105,103,104,116,67,111,110,118,101,114,115,105,111,110,77,101,116,104,111,100,32,60,32,72,69,73,71,72,84,95,67,79,78,86,69,82,83,73,79,78,95,77,69,84,72,79,68,95,67,79,85,78,84,0,0,78,111,114,109,97,108,65,108,112,104,97,82,101,115,117,108,116,32,62,61,32,48,32,38,38,32,78,111,114,109,97,108,65,108,112,104,97,82,101,115,117,108,116,32,60,32,78,79,82,77,65,76,95,65,76,80,72,65,95,82,69,83,85,76,84,95,67,79,85,78,84,0,78,86,68,88,84,32,115,117,112,112,111,114,116,32,114,101,113,117,105,114,101,100,32,102,111,114,32,67,86,84,70,70,105,108,101,58,58,67,111,110,118,101,114,116,84,111,78,111,114,109,97,108,77,97,112,40,41,46,0,0,0,0,0,0,82,101,115,105,122,101,70,105,108,116,101,114,32,62,61,32,48,32,38,38,32,82,101,115,105,122,101,70,105,108,116,101,114,32,60,32,77,73,80,77,65,80,95,70,73,76,84,69,82,95,67,79,85,78,84,0,82,101,115,105,122,101,0,0,83,104,97,114,112,101,110,70,105,108,116,101,114,32,62,61,32,48,32,38,38,32,83,104,97,114,112,101,110,70,105,108,116,101,114,32,60,32,83,72,65,82,80,69,78,95,70,73,76,84,69,82,95,67,79,85,78,84,0,0,0,0,0,0,82,71,66,65,56,56,56,56,0,0,0,0,0,0,0,0,65,66,71,82,56,56,56,56,0,0,0,0,0,0,0,0,82,71,66,56,56,56,0,0,66,71,82,56,56,56,0,0,82,71,66,53,54,53,0,0,73,56,0,0,0,0,0,0,73,65,56,56,0,0,0,0,80,56,0,0,0,0,0,0,65,56,0,0,0,0,0,0,82,71,66,56,56,56,32,66,108,117,101,115,99,114,101,101,110,0,0,0,0,0,0,0,66,71,82,56,56,56,32,66,108,117,101,115,99,114,101,101,110,0,0,0,0,0,0,0,65,82,71,66,56,56,56,56,0,0,0,0,0,0,0,0,66,71,82,65,56,56,56,56,0,0,0,0,0,0,0,0,68,88,84,49,0,0,0,0,68,88,84,51,0,0,0,0,68,88,84,53,0,0,0,0,66,71,82,88,56,56,56,56,0,0,0,0,0,0,0,0,66,71,82,53,54,53,0,0,66,71,82,88,53,53,53,49,0,0,0,0,0,0,0,0,66,71,82,65,52,52,52,52,0,0,0,0,0,0,0,0,68,88,84,49,32,79,110,101,32,66,105,116,32,65,108,112,104,97,0,0,0,0,0,0,66,71,82,65,53,53,53,49,0,0,0,0,0,0,0,0,85,86,56,56,0,0,0,0,85,86,87,81,56,56,56,56,0,0,0,0,0,0,0,0,82,71,66,65,49,54,49,54,49,54,49,54,70,0,0,0,82,71,66,65,49,54,49,54,49,54,49,54,0,0,0,0,85,86,76,88,56,56,56,56,0,0,0,0,0,0,0,0,82,51,50,70,0,0,0,0,82,71,66,51,50,51,50,51,50,70,0,0,0,0,0,0,82,71,66,65,51,50,51,50,51,50,51,50,70,0,0,0,110,86,105,100,105,97,32,68,83,84,49,54,0,0,0,0,110,86,105,100,105,97,32,68,83,84,50,52,0,0,0,0,110,86,105,100,105,97,32,73,78,84,90,0,0,0,0,0,110,86,105,100,105,97,32,82,65,87,90,0,0,0,0,0,65,84,73,32,68,83,84,49,54,0,0,0,0,0,0,0,65,84,73,32,68,83,84,50,52,0,0,0,0,0,0,0,110,86,105,100,105,97,32,78,85,76,76,0,0,0,0,0,65,84,73,49,78,0,0,0,65,84,73,50,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,22,153,62,0,0,0,0,162,69,22,63,0,0,0,0,213,120,233,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,86,84,70,76,105,98,32,97,108,114,101,97,100,121,32,105,110,105,116,105,97,108,105,122,101,100,46,0,0,0,0,0,86,84,70,76,105,98,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,100,46,0,73,110,118,97,108,105,100,32,105,109,97,103,101,46,0,0,78,111,32,105,109,97,103,101,32,98,111,117,110,100,46], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([24,57,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,8,106,0,0,248,56,0,0,144,62,0,0,0,0,0,0,0,0,0,0,128,57,0,0,22,0,0,0,36,0,0,0,37,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,38,0,0,0,29,0,0,0,30,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,8,106,0,0,104,57,0,0,144,62,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,24,58,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,8,106,0,0,248,57,0,0,80,62,0,0,0,0,0,0,0,0,0,0,128,58,0,0,44,0,0,0,58,0,0,0,59,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,60,0,0,0,51,0,0,0,52,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,8,106,0,0,104,58,0,0,80,62,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,120,105,0,0,144,58,0,0,58,32,0,0,0,0,0,0,0,0,0,0,240,58,0,0,66,0,0,0,67,0,0,0,68,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,8,106,0,0,216,58,0,0,32,104,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,120,105,0,0,0,59,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,8,106,0,0,40,59,0,0,32,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,80,62,0,0,69,0,0,0,70,0,0,0,71,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,60,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,64,0,0,0,65,0,0,0,0,0,0,0,144,62,0,0,72,0,0,0,73,0,0,0,74,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,38,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,42,0,0,0,43,0,0,0,8,0,0,0,0,0,0,0,200,62,0,0,75,0,0,0,76,0,0,0,248,255,255,255,248,255,255,255,200,62,0,0,77,0,0,0,78,0,0,0,8,0,0,0,0,0,0,0,16,63,0,0,79,0,0,0,80,0,0,0,248,255,255,255,248,255,255,255,16,63,0,0,81,0,0,0,82,0,0,0,4,0,0,0,0,0,0,0,88,63,0,0,83,0,0,0,84,0,0,0,252,255,255,255,252,255,255,255,88,63,0,0,85,0,0,0,86,0,0,0,4,0,0,0,0,0,0,0,160,63,0,0,87,0,0,0,88,0,0,0,252,255,255,255,252,255,255,255,160,63,0,0,89,0,0,0,90,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,61,0,0,91,0,0,0,92,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,144,61,0,0,93,0,0,0,94,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,8,106,0,0,72,61,0,0,240,58,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,120,105,0,0,120,61,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,8,106,0,0,152,61,0,0,144,61,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,8,106,0,0,216,61,0,0,144,61,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,120,105,0,0,24,62,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,120,105,0,0,88,62,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,104,106,0,0,152,62,0,0,0,0,0,0,1,0,0,0,200,61,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,104,106,0,0,224,62,0,0,0,0,0,0,1,0,0,0,8,62,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,104,106,0,0,40,63,0,0,0,0,0,0,1,0,0,0,200,61,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,104,106,0,0,112,63,0,0,0,0,0,0,1,0,0,0,8,62,0,0,3,244,255,255,0,0,0,0,0,64,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,8,106,0,0,224,63,0,0,64,59,0,0,0,0,0,0,0,0,0,0,72,78,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,78,0,0,108,0,0,0,109,0,0,0,104,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,80,0,0,113,0,0,0,114,0,0,0,104,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,216,80,0,0,126,0,0,0,127,0,0,0,104,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,81,0,0,139,0,0,0,140,0,0,0,104,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,48,82,0,0,149,0,0,0,150,0,0,0,104,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,232,82,0,0,159,0,0,0,160,0,0,0,104,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,248,255,255,255,232,82,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,136,83,0,0,175,0,0,0,176,0,0,0,104,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,248,255,255,255,136,83,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,24,84,0,0,191,0,0,0,192,0,0,0,104,0,0,0,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,84,0,0,194,0,0,0,195,0,0,0,104,0,0,0,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,78,0,0,197,0,0,0,198,0,0,0,104,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,208,0,0,0,209,0,0,0,104,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,79,0,0,219,0,0,0,220,0,0,0,104,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,79,0,0,230,0,0,0,231,0,0,0,104,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,85,0,0,241,0,0,0,242,0,0,0,104,0,0,0,243,0,0,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,160,85,0,0,245,0,0,0,246,0,0,0,104,0,0,0,247,0,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,48,86,0,0,249,0,0,0,250,0,0,0,104,0,0,0,251,0,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,192,86,0,0,253,0,0,0,254,0,0,0,104,0,0,0,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,87,0,0,1,1,0,0,2,1,0,0,104,0,0,0,3,1,0,0,4,1,0,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,87,0,0,6,1,0,0,7,1,0,0,104,0,0,0,8,1,0,0,9,1,0,0,10,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,32,78,0,0,11,1,0,0,12,1,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,74,0,0,13,1,0,0,14,1,0,0,104,0,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,75,0,0,23,1,0,0,24,1,0,0,104,0,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,77,0,0,32,1,0,0,33,1,0,0,104,0,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,0,0,0,0,248,77,0,0,39,1,0,0,40,1,0,0,104,0,0,0,41,1,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,48,74,0,0,46,1,0,0,47,1,0,0,104,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,8,106,0,0,24,74,0,0,176,58,0,0,0,0,0,0,0,0,0,0,192,74,0,0,46,1,0,0,48,1,0,0,104,0,0,0,49,1,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,120,105,0,0,160,74,0,0,104,106,0,0,136,74,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,184,74,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,104,106,0,0,224,74,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,184,74,0,0,2,0,0,0,0,0,0,0,144,75,0,0,46,1,0,0,61,1,0,0,104,0,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,120,105,0,0,112,75,0,0,104,106,0,0,72,75,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,136,75,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,104,106,0,0,176,75,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,136,75,0,0,2,0,0,0,0,0,0,0,80,76,0,0,46,1,0,0,69,1,0,0,104,0,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,104,106,0,0,40,76,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,136,75,0,0,2,0,0,0,0,0,0,0,200,76,0,0,46,1,0,0,77,1,0,0,104,0,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,104,106,0,0,160,76,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,136,75,0,0,2,0,0,0,0,0,0,0,64,77,0,0,46,1,0,0,85,1,0,0,104,0,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,8,106,0,0,24,77,0,0,200,76,0,0,0,0,0,0,0,0,0,0,168,77,0,0,46,1,0,0,86,1,0,0,104,0,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,8,106,0,0,128,77,0,0,200,76,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,8,106,0,0,184,77,0,0,48,74,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,8,106,0,0,224,77,0,0,48,74,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,8,106,0,0,8,78,0,0,48,74,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,8,106,0,0,48,78,0,0,48,74,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,8,106,0,0,88,78,0,0,48,74,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,120,105,0,0,160,78,0,0,104,106,0,0,128,78,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,184,78,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,104,106,0,0,224,78,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,184,78,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,104,106,0,0,32,79,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,184,78,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,104,106,0,0,96,79,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,184,78,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,120,105,0,0,0,80,0,0,104,106,0,0,232,79,0,0,0,0,0,0,1,0,0,0,32,80,0,0,0,0,0,0,104,106,0,0,160,79,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,40,80,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,104,106,0,0,168,80,0,0,0,0,0,0,1,0,0,0,32,80,0,0,0,0,0,0,104,106,0,0,96,80,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,192,80,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,120,105,0,0,88,81,0,0,104,106,0,0,64,81,0,0,0,0,0,0,1,0,0,0,120,81,0,0,0,0,0,0,104,106,0,0,248,80,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,128,81,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,104,106,0,0,0,82,0,0,0,0,0,0,1,0,0,0,120,81,0,0,0,0,0,0,104,106,0,0,184,81,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,24,82,0,0,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,120,105,0,0,152,82,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,120,105,0,0,184,82,0,0,104,106,0,0,80,82,0,0,0,0,0,0,3,0,0,0,48,74,0,0,2,0,0,0,176,82,0,0,2,0,0,0,224,82,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,120,105,0,0,88,83,0,0,104,106,0,0,16,83,0,0,0,0,0,0,3,0,0,0,48,74,0,0,2,0,0,0,176,82,0,0,2,0,0,0,128,83,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,120,105,0,0,248,83,0,0,104,106,0,0,176,83,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,16,84,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,104,106,0,0,56,84,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,16,84,0,0,0,8,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,120,105,0,0,232,84,0,0,104,106,0,0,160,84,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,8,85,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,120,105,0,0,120,85,0,0,104,106,0,0,48,85,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,152,85,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,120,105,0,0,8,86,0,0,104,106,0,0,192,85,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,40,86,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,120,105,0,0,152,86,0,0,104,106,0,0,80,86,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,184,86,0,0,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,120,105,0,0,248,86,0,0,104,106,0,0,224,86,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,16,87,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,104,106,0,0,56,87,0,0,0,0,0,0,2,0,0,0,48,74,0,0,2,0,0,0,16,87,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+14516);
/* memory initializer */ allocate([70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,1,0,0,0,0,0,0,80,101,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,232,102,0,0,88,1,0,0,89,1,0,0,90,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,8,106,0,0,216,102,0,0,112,103,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,120,105,0,0,96,103,0,0,0,0,0,0,184,103,0,0,91,1,0,0,92,1,0,0,93,1,0,0,0,0,0,0,0,0,0,0,32,104,0,0,94,1,0,0,95,1,0,0,68,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,8,106,0,0,168,103,0,0,112,103,0,0,0,0,0,0,0,0,0,0,248,103,0,0,91,1,0,0,96,1,0,0,93,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,8,106,0,0,224,103,0,0,184,103,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,8,106,0,0,8,104,0,0,112,103,0,0,0,0,0,0,0,0,0,0,128,104,0,0,97,1,0,0,98,1,0,0,99,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,120,105,0,0,88,104,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,8,106,0,0,112,104,0,0,112,103,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,8,106,0,0,144,104,0,0,104,104,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,8,106,0,0,200,104,0,0,184,104,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,8,106,0,0,40,105,0,0,184,104,0,0,0,0,0,0,8,106,0,0,0,105,0,0,80,105,0,0,0,0,0,0,0,0,0,0,240,104,0,0,100,1,0,0,101,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,0,0,0,0,224,105,0,0,100,1,0,0,108,1,0,0,102,1,0,0,103,1,0,0,109,1,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,8,106,0,0,184,105,0,0,184,104,0,0,0,0,0,0,105,0,0,0,0,0,0,0,160,105,0,0,240,105,0,0,0,0,0,0,80,106,0,0,100,1,0,0,110,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,8,106,0,0,40,106,0,0,240,104,0,0,0,0,0,0,0,0,0,0,176,106,0,0,100,1,0,0,114,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,115,1,0,0,116,1,0,0,117,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,8,106,0,0,136,106,0,0,240,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+24760);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  var _floorf=Math_floor;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  var _emscripten_resume=true;

  var _emscripten_landingpad=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }

  var _sqrtf=Math_sqrt;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? null : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  var _llvm_pow_f32=Math_pow;

  function _pthread_mutex_lock() {}

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _canvasResize(sourceRGBA, targetRGBA, sourceWidth, sourceHeight, targetWidth, targetHeight) {
  		var resize = require('pica/lib/pure/resize');
  		var sourceSize = sourceWidth * sourceHeight * 4;
  		var sourceData = new Uint8Array(Module.HEAPU8.buffer, sourceRGBA, sourceSize);
  
  		var resultData = resize({
  			src     : sourceData,
  			width   : sourceWidth,
  			height  : sourceHeight,
  			toWidth : targetWidth,
  			toHeight: targetHeight,
  			alpha   : true,
  			quality : 3
  		});
  		Module.HEAPU8.set(resultData, targetRGBA);
  		return true;
  	}

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___cxa_guard_abort() {}

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  var _cosf=Math_cos;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var _sqrt=Math_sqrt;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  var _atan2f=Math_atan2;

  var _ceilf=Math_ceil;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;

  var _log=Math_log;


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiidiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiidiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13) {
  try {
    return Module["dynCall_iiiiiiiiidiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiiiiiii": nullFunc_iiiiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viddd": nullFunc_viddd, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiiiiiiiidiiii": nullFunc_iiiiiiiiidiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiiiiiiiidiiii": invoke_iiiiiiiiidiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viiid": invoke_viiid, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "_strftime_l": _strftime_l, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_sqrtf": _sqrtf, "_fread": _fread, "___ctype_b_loc": ___ctype_b_loc, "___cxa_guard_acquire": ___cxa_guard_acquire, "___setErrNo": ___setErrNo, "_vfprintf": _vfprintf, "__arraySum": __arraySum, "_ungetc": _ungetc, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "_atan2f": _atan2f, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sbrk": _sbrk, "___ctype_toupper_loc": ___ctype_toupper_loc, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_cosf": _cosf, "_pthread_mutex_lock": _pthread_mutex_lock, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_fabsf": _fabsf, "_ceilf": _ceilf, "_uselocale": _uselocale, "_llvm_pow_f32": _llvm_pow_f32, "_newlocale": _newlocale, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "_canvasResize": _canvasResize, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "__reallyNegative": __reallyNegative, "_pthread_getspecific": _pthread_getspecific, "___cxa_allocate_exception": ___cxa_allocate_exception, "_sinf": _sinf, "_calloc": _calloc, "___ctype_tolower_loc": ___ctype_tolower_loc, "_fileno": _fileno, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_pread": _pread, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_mkport": _mkport, "_floorf": _floorf, "_log": _log, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "___cxa_atexit": ___cxa_atexit, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_freelocale": _freelocale, "_read": _read, "___cxa_rethrow": ___cxa_rethrow, "_abort": _abort, "_catclose": _catclose, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_pthread_key_create": _pthread_key_create, "__formatString": __formatString, "_atexit": _atexit, "_sqrt": _sqrt, "_catopen": _catopen, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_guard_abort": ___cxa_guard_abort, "_catgets": _catgets, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiiiiiii=env.nullFunc_iiiiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiiiiiiiidiiii=env.nullFunc_iiiiiiiiidiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiiiiiiiidiiii=env.invoke_iiiiiiiiidiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _strftime_l=env._strftime_l;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _sqrtf=env._sqrtf;
  var _fread=env._fread;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var ___setErrNo=env.___setErrNo;
  var _vfprintf=env._vfprintf;
  var __arraySum=env.__arraySum;
  var _ungetc=env._ungetc;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var _atan2f=env._atan2f;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sbrk=env._sbrk;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _cosf=env._cosf;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _fabsf=env._fabsf;
  var _ceilf=env._ceilf;
  var _uselocale=env._uselocale;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _newlocale=env._newlocale;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var _canvasResize=env._canvasResize;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var __reallyNegative=env.__reallyNegative;
  var _pthread_getspecific=env._pthread_getspecific;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _sinf=env._sinf;
  var _calloc=env._calloc;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _fileno=env._fileno;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _mkport=env._mkport;
  var _floorf=env._floorf;
  var _log=env._log;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var ___cxa_atexit=env.___cxa_atexit;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _freelocale=env._freelocale;
  var _read=env._read;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _pthread_key_create=env._pthread_key_create;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _sqrt=env._sqrt;
  var _catopen=env._catopen;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _catgets=env._catgets;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN6squish17CompressAlphaDxt3EPKhiPv($rgba,$mask,$block) {
 $rgba = $rgba|0;
 $mask = $mask|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alpha1 = 0.0, $alpha2 = 0.0, $bit1 = 0, $bit2 = 0, $bytes = 0, $i = 0, $quant1 = 0, $quant2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgba;
 $1 = $mask;
 $2 = $block;
 $3 = $2;
 $bytes = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $6<<3;
  $8 = (($7) + 3)|0;
  $9 = $0;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = (+($11&255));
  $13 = $12 * 0.058823529630899429;
  $alpha1 = $13;
  $14 = $i;
  $15 = $14<<3;
  $16 = (($15) + 7)|0;
  $17 = $0;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = (+($19&255));
  $21 = $20 * 0.058823529630899429;
  $alpha2 = $21;
  $22 = $alpha1;
  $23 = (__ZN6squishL10FloatToIntEfi($22,15)|0);
  $quant1 = $23;
  $24 = $alpha2;
  $25 = (__ZN6squishL10FloatToIntEfi($24,15)|0);
  $quant2 = $25;
  $26 = $i;
  $27 = $26<<1;
  $28 = 1 << $27;
  $bit1 = $28;
  $29 = $i;
  $30 = $29<<1;
  $31 = (($30) + 1)|0;
  $32 = 1 << $31;
  $bit2 = $32;
  $33 = $1;
  $34 = $bit1;
  $35 = $33 & $34;
  $36 = ($35|0)==(0);
  if ($36) {
   $quant1 = 0;
  }
  $37 = $1;
  $38 = $bit2;
  $39 = $37 & $38;
  $40 = ($39|0)==(0);
  if ($40) {
   $quant2 = 0;
  }
  $41 = $quant1;
  $42 = $quant2;
  $43 = $42 << 4;
  $44 = $41 | $43;
  $45 = $44&255;
  $46 = $i;
  $47 = $bytes;
  $48 = (($47) + ($46)|0);
  HEAP8[$48>>0] = $45;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 STACKTOP = sp;return;
}
function __ZN6squishL10FloatToIntEfi($a,$limit) {
 $a = +$a;
 $limit = $limit|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $limit;
 $2 = $0;
 $3 = $2 + 0.5;
 $4 = (~~(($3)));
 $i = $4;
 $5 = $i;
 $6 = ($5|0)<(0);
 if ($6) {
  $i = 0;
  $11 = $i;
  STACKTOP = sp;return ($11|0);
 }
 $7 = $i;
 $8 = $1;
 $9 = ($7|0)>($8|0);
 if ($9) {
  $10 = $1;
  $i = $10;
 }
 $11 = $i;
 STACKTOP = sp;return ($11|0);
}
function __ZN6squish17CompressAlphaDxt5EPKhiPv($rgba,$mask,$block) {
 $rgba = $rgba|0;
 $mask = $mask|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $codes5 = 0, $codes7 = 0, $err5 = 0, $err7 = 0, $i = 0, $i1 = 0, $i2 = 0, $indices5 = 0, $indices7 = 0, $max5 = 0;
 var $max7 = 0, $min5 = 0, $min7 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $min5 = sp + 40|0;
 $max5 = sp + 36|0;
 $min7 = sp + 32|0;
 $max7 = sp + 28|0;
 $codes5 = sp + 96|0;
 $codes7 = sp + 88|0;
 $indices5 = sp + 72|0;
 $indices7 = sp + 56|0;
 $0 = $rgba;
 $1 = $mask;
 $2 = $block;
 HEAP32[$min5>>2] = 255;
 HEAP32[$max5>>2] = 0;
 HEAP32[$min7>>2] = 255;
 HEAP32[$max7>>2] = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(16);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = 1 << $5;
  $bit = $6;
  $7 = $1;
  $8 = $bit;
  $9 = $7 & $8;
  $10 = ($9|0)==(0);
  if ($10) {
  } else {
   $11 = $i;
   $12 = $11<<2;
   $13 = (($12) + 3)|0;
   $14 = $0;
   $15 = (($14) + ($13)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $value = $17;
   $18 = $value;
   $19 = HEAP32[$min7>>2]|0;
   $20 = ($18|0)<($19|0);
   if ($20) {
    $21 = $value;
    HEAP32[$min7>>2] = $21;
   }
   $22 = $value;
   $23 = HEAP32[$max7>>2]|0;
   $24 = ($22|0)>($23|0);
   if ($24) {
    $25 = $value;
    HEAP32[$max7>>2] = $25;
   }
   $26 = $value;
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = $value;
    $29 = HEAP32[$min5>>2]|0;
    $30 = ($28|0)<($29|0);
    if ($30) {
     $31 = $value;
     HEAP32[$min5>>2] = $31;
    }
   }
   $32 = $value;
   $33 = ($32|0)!=(255);
   if ($33) {
    $34 = $value;
    $35 = HEAP32[$max5>>2]|0;
    $36 = ($34|0)>($35|0);
    if ($36) {
     $37 = $value;
     HEAP32[$max5>>2] = $37;
    }
   }
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 $40 = HEAP32[$min5>>2]|0;
 $41 = HEAP32[$max5>>2]|0;
 $42 = ($40|0)>($41|0);
 if ($42) {
  $43 = HEAP32[$max5>>2]|0;
  HEAP32[$min5>>2] = $43;
 }
 $44 = HEAP32[$min7>>2]|0;
 $45 = HEAP32[$max7>>2]|0;
 $46 = ($44|0)>($45|0);
 if ($46) {
  $47 = HEAP32[$max7>>2]|0;
  HEAP32[$min7>>2] = $47;
 }
 __ZN6squishL8FixRangeERiS0_i($min5,$max5,5);
 __ZN6squishL8FixRangeERiS0_i($min7,$max7,7);
 $48 = HEAP32[$min5>>2]|0;
 $49 = $48&255;
 HEAP8[$codes5>>0] = $49;
 $50 = HEAP32[$max5>>2]|0;
 $51 = $50&255;
 $52 = (($codes5) + 1|0);
 HEAP8[$52>>0] = $51;
 $i1 = 1;
 while(1) {
  $53 = $i1;
  $54 = ($53|0)<(5);
  if (!($54)) {
   break;
  }
  $55 = $i1;
  $56 = (5 - ($55))|0;
  $57 = HEAP32[$min5>>2]|0;
  $58 = Math_imul($56, $57)|0;
  $59 = $i1;
  $60 = HEAP32[$max5>>2]|0;
  $61 = Math_imul($59, $60)|0;
  $62 = (($58) + ($61))|0;
  $63 = (($62|0) / 5)&-1;
  $64 = $63&255;
  $65 = $i1;
  $66 = (1 + ($65))|0;
  $67 = (($codes5) + ($66)|0);
  HEAP8[$67>>0] = $64;
  $68 = $i1;
  $69 = (($68) + 1)|0;
  $i1 = $69;
 }
 $70 = (($codes5) + 6|0);
 HEAP8[$70>>0] = 0;
 $71 = (($codes5) + 7|0);
 HEAP8[$71>>0] = -1;
 $72 = HEAP32[$min7>>2]|0;
 $73 = $72&255;
 HEAP8[$codes7>>0] = $73;
 $74 = HEAP32[$max7>>2]|0;
 $75 = $74&255;
 $76 = (($codes7) + 1|0);
 HEAP8[$76>>0] = $75;
 $i2 = 1;
 while(1) {
  $77 = $i2;
  $78 = ($77|0)<(7);
  if (!($78)) {
   break;
  }
  $79 = $i2;
  $80 = (7 - ($79))|0;
  $81 = HEAP32[$min7>>2]|0;
  $82 = Math_imul($80, $81)|0;
  $83 = $i2;
  $84 = HEAP32[$max7>>2]|0;
  $85 = Math_imul($83, $84)|0;
  $86 = (($82) + ($85))|0;
  $87 = (($86|0) / 7)&-1;
  $88 = $87&255;
  $89 = $i2;
  $90 = (1 + ($89))|0;
  $91 = (($codes7) + ($90)|0);
  HEAP8[$91>>0] = $88;
  $92 = $i2;
  $93 = (($92) + 1)|0;
  $i2 = $93;
 }
 $94 = $0;
 $95 = $1;
 $96 = (__ZN6squishL8FitCodesEPKhiS1_Ph($94,$95,$codes5,$indices5)|0);
 $err5 = $96;
 $97 = $0;
 $98 = $1;
 $99 = (__ZN6squishL8FitCodesEPKhiS1_Ph($97,$98,$codes7,$indices7)|0);
 $err7 = $99;
 $100 = $err5;
 $101 = $err7;
 $102 = ($100|0)<=($101|0);
 if ($102) {
  $103 = HEAP32[$min5>>2]|0;
  $104 = HEAP32[$max5>>2]|0;
  $105 = $2;
  __ZN6squishL16WriteAlphaBlock5EiiPKhPv($103,$104,$indices5,$105);
  STACKTOP = sp;return;
 } else {
  $106 = HEAP32[$min7>>2]|0;
  $107 = HEAP32[$max7>>2]|0;
  $108 = $2;
  __ZN6squishL16WriteAlphaBlock7EiiPKhPv($106,$107,$indices7,$108);
  STACKTOP = sp;return;
 }
}
function __ZN6squishL8FixRangeERiS0_i($min,$max,$steps) {
 $min = $min|0;
 $max = $max|0;
 $steps = $steps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 97|0;
 $14 = sp;
 $17 = sp + 96|0;
 $21 = sp + 24|0;
 $22 = sp + 20|0;
 $23 = sp + 16|0;
 $24 = sp + 12|0;
 $18 = $min;
 $19 = $max;
 $20 = $steps;
 $25 = $19;
 $26 = HEAP32[$25>>2]|0;
 $27 = $18;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) - ($28))|0;
 $30 = $20;
 $31 = ($29|0)<($30|0);
 if ($31) {
  $32 = $18;
  $33 = HEAP32[$32>>2]|0;
  $34 = $20;
  $35 = (($33) + ($34))|0;
  HEAP32[$21>>2] = $35;
  HEAP32[$22>>2] = 255;
  $15 = $21;
  $16 = $22;
  $36 = $15;
  $37 = $16;
  ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
  $12 = $36;
  $13 = $37;
  $38 = $13;
  $39 = $12;
  $9 = $14;
  $10 = $38;
  $11 = $39;
  $40 = $10;
  $41 = HEAP32[$40>>2]|0;
  $42 = $11;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)<($43|0);
  if ($44) {
   $45 = $13;
   $48 = $45;
  } else {
   $46 = $12;
   $48 = $46;
  }
  $47 = HEAP32[$48>>2]|0;
  $49 = $19;
  HEAP32[$49>>2] = $47;
 }
 $50 = $19;
 $51 = HEAP32[$50>>2]|0;
 $52 = $18;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) - ($53))|0;
 $55 = $20;
 $56 = ($54|0)<($55|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 HEAP32[$23>>2] = 0;
 $57 = $19;
 $58 = HEAP32[$57>>2]|0;
 $59 = $20;
 $60 = (($58) - ($59))|0;
 HEAP32[$24>>2] = $60;
 $6 = $23;
 $7 = $24;
 $61 = $6;
 $62 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $61;
 $4 = $62;
 $63 = $3;
 $64 = $4;
 $0 = $5;
 $1 = $63;
 $2 = $64;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = $2;
 $68 = HEAP32[$67>>2]|0;
 $69 = ($66|0)<($68|0);
 if ($69) {
  $70 = $4;
  $73 = $70;
 } else {
  $71 = $3;
  $73 = $71;
 }
 $72 = HEAP32[$73>>2]|0;
 $74 = $18;
 HEAP32[$74>>2] = $72;
 STACKTOP = sp;return;
}
function __ZN6squishL8FitCodesEPKhiS1_Ph($rgba,$mask,$codes,$indices) {
 $rgba = $rgba|0;
 $mask = $mask|0;
 $codes = $codes|0;
 $indices = $indices|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit = 0, $dist = 0, $err = 0, $i = 0, $index = 0, $j = 0, $least = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rgba;
 $1 = $mask;
 $2 = $codes;
 $3 = $indices;
 $err = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(16);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = 1 << $6;
  $bit = $7;
  $8 = $1;
  $9 = $bit;
  $10 = $8 & $9;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $i;
   $13 = $3;
   $14 = (($13) + ($12)|0);
   HEAP8[$14>>0] = 0;
  } else {
   $15 = $i;
   $16 = $15<<2;
   $17 = (($16) + 3)|0;
   $18 = $0;
   $19 = (($18) + ($17)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $value = $21;
   $least = 2147483647;
   $index = 0;
   $j = 0;
   while(1) {
    $22 = $j;
    $23 = ($22|0)<(8);
    if (!($23)) {
     break;
    }
    $24 = $value;
    $25 = $j;
    $26 = $2;
    $27 = (($26) + ($25)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = (($24) - ($29))|0;
    $dist = $30;
    $31 = $dist;
    $32 = $dist;
    $33 = Math_imul($32, $31)|0;
    $dist = $33;
    $34 = $dist;
    $35 = $least;
    $36 = ($34|0)<($35|0);
    if ($36) {
     $37 = $dist;
     $least = $37;
     $38 = $j;
     $index = $38;
    }
    $39 = $j;
    $40 = (($39) + 1)|0;
    $j = $40;
   }
   $41 = $index;
   $42 = $41&255;
   $43 = $i;
   $44 = $3;
   $45 = (($44) + ($43)|0);
   HEAP8[$45>>0] = $42;
   $46 = $least;
   $47 = $err;
   $48 = (($47) + ($46))|0;
   $err = $48;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $err;
 STACKTOP = sp;return ($51|0);
}
function __ZN6squishL16WriteAlphaBlock5EiiPKhPv($alpha0,$alpha1,$indices,$block) {
 $alpha0 = $alpha0|0;
 $alpha1 = $alpha1|0;
 $indices = $indices|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $index = 0, $swapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $swapped = sp + 24|0;
 $0 = $alpha0;
 $1 = $alpha1;
 $2 = $indices;
 $3 = $block;
 $4 = $0;
 $5 = $1;
 $6 = ($4|0)>($5|0);
 if (!($6)) {
  $40 = $0;
  $41 = $1;
  $42 = $2;
  $43 = $3;
  __ZN6squishL15WriteAlphaBlockEiiPKhPv($40,$41,$42,$43);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(16);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $2;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $index = $12;
  $13 = $index;
  $14 = $13&255;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $i;
   $17 = (($swapped) + ($16)|0);
   HEAP8[$17>>0] = 1;
  } else {
   $18 = $index;
   $19 = $18&255;
   $20 = ($19|0)==(1);
   if ($20) {
    $21 = $i;
    $22 = (($swapped) + ($21)|0);
    HEAP8[$22>>0] = 0;
   } else {
    $23 = $index;
    $24 = $23&255;
    $25 = ($24|0)<=(5);
    if ($25) {
     $26 = $index;
     $27 = $26&255;
     $28 = (7 - ($27))|0;
     $29 = $28&255;
     $30 = $i;
     $31 = (($swapped) + ($30)|0);
     HEAP8[$31>>0] = $29;
    } else {
     $32 = $index;
     $33 = $i;
     $34 = (($swapped) + ($33)|0);
     HEAP8[$34>>0] = $32;
    }
   }
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $37 = $1;
 $38 = $0;
 $39 = $3;
 __ZN6squishL15WriteAlphaBlockEiiPKhPv($37,$38,$swapped,$39);
 STACKTOP = sp;return;
}
function __ZN6squishL16WriteAlphaBlock7EiiPKhPv($alpha0,$alpha1,$indices,$block) {
 $alpha0 = $alpha0|0;
 $alpha1 = $alpha1|0;
 $indices = $indices|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $index = 0;
 var $swapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $swapped = sp + 24|0;
 $0 = $alpha0;
 $1 = $alpha1;
 $2 = $indices;
 $3 = $block;
 $4 = $0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if (!($6)) {
  $34 = $0;
  $35 = $1;
  $36 = $2;
  $37 = $3;
  __ZN6squishL15WriteAlphaBlockEiiPKhPv($34,$35,$36,$37);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(16);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $2;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $index = $12;
  $13 = $index;
  $14 = $13&255;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $i;
   $17 = (($swapped) + ($16)|0);
   HEAP8[$17>>0] = 1;
  } else {
   $18 = $index;
   $19 = $18&255;
   $20 = ($19|0)==(1);
   if ($20) {
    $21 = $i;
    $22 = (($swapped) + ($21)|0);
    HEAP8[$22>>0] = 0;
   } else {
    $23 = $index;
    $24 = $23&255;
    $25 = (9 - ($24))|0;
    $26 = $25&255;
    $27 = $i;
    $28 = (($swapped) + ($27)|0);
    HEAP8[$28>>0] = $26;
   }
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $1;
 $32 = $0;
 $33 = $3;
 __ZN6squishL15WriteAlphaBlockEiiPKhPv($31,$32,$swapped,$33);
 STACKTOP = sp;return;
}
function __ZN6squishL15WriteAlphaBlockEiiPKhPv($alpha0,$alpha1,$indices,$block) {
 $alpha0 = $alpha0|0;
 $alpha1 = $alpha1|0;
 $indices = $indices|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byte = 0, $bytes = 0, $dest = 0, $i = 0, $index = 0, $j = 0, $j1 = 0, $src = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $alpha0;
 $1 = $alpha1;
 $2 = $indices;
 $3 = $block;
 $4 = $3;
 $bytes = $4;
 $5 = $0;
 $6 = $5&255;
 $7 = $bytes;
 HEAP8[$7>>0] = $6;
 $8 = $1;
 $9 = $8&255;
 $10 = $bytes;
 $11 = (($10) + 1|0);
 HEAP8[$11>>0] = $9;
 $12 = $bytes;
 $13 = (($12) + 2|0);
 $dest = $13;
 $14 = $2;
 $src = $14;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(2);
  if (!($16)) {
   break;
  }
  $value = 0;
  $j = 0;
  while(1) {
   $17 = $j;
   $18 = ($17|0)<(8);
   if (!($18)) {
    break;
   }
   $19 = $src;
   $20 = (($19) + 1|0);
   $src = $20;
   $21 = HEAP8[$19>>0]|0;
   $22 = $21&255;
   $index = $22;
   $23 = $index;
   $24 = $j;
   $25 = ($24*3)|0;
   $26 = $23 << $25;
   $27 = $value;
   $28 = $27 | $26;
   $value = $28;
   $29 = $j;
   $30 = (($29) + 1)|0;
   $j = $30;
  }
  $j1 = 0;
  while(1) {
   $31 = $j1;
   $32 = ($31|0)<(3);
   if (!($32)) {
    break;
   }
   $33 = $value;
   $34 = $j1;
   $35 = $34<<3;
   $36 = $33 >> $35;
   $37 = $36 & 255;
   $byte = $37;
   $38 = $byte;
   $39 = $38&255;
   $40 = $dest;
   $41 = (($40) + 1|0);
   $dest = $41;
   HEAP8[$40>>0] = $39;
   $42 = $j1;
   $43 = (($42) + 1)|0;
   $j1 = $43;
  }
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 STACKTOP = sp;return;
}
function __ZN6squish10ClusterFitC2EPKNS_9ColourSetEi($this,$colours,$flags) {
 $this = $this|0;
 $colours = $colours|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $covariance = 0, $perceptual = 0, $values = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 80|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $covariance = sp + 16|0;
 $6 = sp;
 $0 = $this;
 $1 = $colours;
 $2 = $flags;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN6squish9ColourFitC2EPKNS_9ColourSetEi($7,$8,$9);
 $10 = (8 + 8|0);
 HEAP32[$7>>2] = $10;
 $11 = (($7) + 16|0);
 __ZN6squish4Vec3C2Ev($11);
 $12 = (($7) + 156|0);
 $13 = (($12) + 256|0);
 $14 = $12;
 while(1) {
  __ZN6squish4Vec4C2Ev($14);
  $15 = (($14) + 16|0);
  $16 = ($15|0)==($13|0);
  if ($16) {
   break;
  } else {
   $14 = $15;
  }
 }
 $17 = (($7) + 412|0);
 __ZN6squish4Vec4C2Ev($17);
 $18 = (($7) + 428|0);
 __ZN6squish4Vec4C2Ev($18);
 $19 = (($7) + 444|0);
 __ZN6squish4Vec4C2Ev($19);
 $20 = (($7) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 256;
 $23 = ($22|0)!=(0);
 $24 = $23 ? 8 : 1;
 $25 = (($7) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = (($7) + 444|0);
 __ZN6squish4Vec4C2Ef($3,3.4028234663852886E+38);
 ;HEAP32[$26+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$3+12>>2]|0;
 $27 = (($7) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 32;
 $30 = ($29|0)!=(0);
 $31 = $30&1;
 $perceptual = $31;
 $32 = $perceptual;
 $33 = $32&1;
 if ($33) {
  $34 = (($7) + 428|0);
  __ZN6squish4Vec4C2Effff($4,0.2125999927520752,0.71520000696182251,0.072200000286102295,0.0);
  ;HEAP32[$34+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$34+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$34+12>>2]=HEAP32[$4+12>>2]|0;
 } else {
  $35 = (($7) + 428|0);
  __ZN6squish4Vec4C2Ef($5,1.0);
  ;HEAP32[$35+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$35+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$5+12>>2]|0;
 }
 $36 = (($7) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (__ZNK6squish9ColourSet8GetCountEv($37)|0);
 $count = $38;
 $39 = (($7) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (__ZNK6squish9ColourSet9GetPointsEv($40)|0);
 $values = $41;
 $42 = $count;
 $43 = $values;
 $44 = (($7) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (__ZNK6squish9ColourSet10GetWeightsEv($45)|0);
 __ZN6squish25ComputeWeightedCovarianceEiPKNS_4Vec3EPKf($covariance,$42,$43,$46);
 $47 = (($7) + 16|0);
 __ZN6squish25ComputePrincipleComponentERKNS_6Sym3x3E($6,$covariance);
 ;HEAP32[$47+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$6+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish10ClusterFit17ConstructOrderingERKNS_4Vec3Ei($this,$axis,$iteration) {
 $this = $this|0;
 $axis = $axis|0;
 $iteration = $iteration|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i5 = 0, $count = 0, $dps = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $it = 0, $j = 0, $j4 = 0, $order = 0, $p = 0, $prev = 0, $same = 0, $unweighted = 0, $values = 0, $w = 0;
 var $weights = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 242|0;
 $__t$i = sp + 196|0;
 $dps = sp + 112|0;
 $14 = sp + 56|0;
 $p = sp + 32|0;
 $w = sp + 16|0;
 $x = sp;
 $11 = $this;
 $12 = $axis;
 $13 = $iteration;
 $15 = $11;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZNK6squish9ColourSet8GetCountEv($17)|0);
 $count = $18;
 $19 = (($15) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZNK6squish9ColourSet9GetPointsEv($20)|0);
 $values = $21;
 $22 = (($15) + 28|0);
 $23 = $13;
 $24 = $23<<4;
 $25 = (($22) + ($24)|0);
 $order = $25;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = $count;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $i;
  $30 = $values;
  $31 = (($30) + (($29*12)|0)|0);
  $32 = $12;
  $33 = (+__ZN6squish3DotERKNS_4Vec3ES2_($31,$32));
  $34 = $i;
  $35 = (($dps) + ($34<<2)|0);
  HEAPF32[$35>>2] = $33;
  $36 = $i;
  $37 = $36&255;
  $38 = $i;
  $39 = $order;
  $40 = (($39) + ($38)|0);
  HEAP8[$40>>0] = $37;
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $i1 = 0;
 while(1) {
  $43 = $i1;
  $44 = $count;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $i1;
  $j = $46;
  while(1) {
   $47 = $j;
   $48 = ($47|0)>(0);
   if ($48) {
    $49 = $j;
    $50 = (($dps) + ($49<<2)|0);
    $51 = +HEAPF32[$50>>2];
    $52 = $j;
    $53 = (($52) - 1)|0;
    $54 = (($dps) + ($53<<2)|0);
    $55 = +HEAPF32[$54>>2];
    $56 = $51 < $55;
    $158 = $56;
   } else {
    $158 = 0;
   }
   if (!($158)) {
    break;
   }
   $57 = $j;
   $58 = (($dps) + ($57<<2)|0);
   $59 = $j;
   $60 = (($59) - 1)|0;
   $61 = (($dps) + ($60<<2)|0);
   $8 = $58;
   $9 = $61;
   $62 = $8;
   $7 = $62;
   $63 = $7;
   $64 = +HEAPF32[$63>>2];
   HEAPF32[$__t$i>>2] = $64;
   $65 = $9;
   $5 = $65;
   $66 = $5;
   $67 = +HEAPF32[$66>>2];
   $68 = $8;
   HEAPF32[$68>>2] = $67;
   $6 = $__t$i;
   $69 = $6;
   $70 = +HEAPF32[$69>>2];
   $71 = $9;
   HEAPF32[$71>>2] = $70;
   $72 = $j;
   $73 = $order;
   $74 = (($73) + ($72)|0);
   $75 = $j;
   $76 = (($75) - 1)|0;
   $77 = $order;
   $78 = (($77) + ($76)|0);
   $3 = $74;
   $4 = $78;
   $79 = $3;
   $2 = $79;
   $80 = $2;
   $81 = HEAP8[$80>>0]|0;
   HEAP8[$__t$i5>>0] = $81;
   $82 = $4;
   $0 = $82;
   $83 = $0;
   $84 = HEAP8[$83>>0]|0;
   $85 = $3;
   HEAP8[$85>>0] = $84;
   $1 = $__t$i5;
   $86 = $1;
   $87 = HEAP8[$86>>0]|0;
   $88 = $4;
   HEAP8[$88>>0] = $87;
   $89 = $j;
   $90 = (($89) + -1)|0;
   $j = $90;
  }
  $91 = $i1;
  $92 = (($91) + 1)|0;
  $i1 = $92;
 }
 $it = 0;
 while(1) {
  $93 = $it;
  $94 = $13;
  $95 = ($93|0)<($94|0);
  if (!($95)) {
   break;
  }
  $96 = (($15) + 28|0);
  $97 = $it;
  $98 = $97<<4;
  $99 = (($96) + ($98)|0);
  $prev = $99;
  $same = 1;
  $i2 = 0;
  while(1) {
   $100 = $i2;
   $101 = $count;
   $102 = ($100|0)<($101|0);
   if (!($102)) {
    break;
   }
   $103 = $i2;
   $104 = $order;
   $105 = (($104) + ($103)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $i2;
   $109 = $prev;
   $110 = (($109) + ($108)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = ($107|0)!=($112|0);
   if ($113) {
    label = 20;
    break;
   }
   $114 = $i2;
   $115 = (($114) + 1)|0;
   $i2 = $115;
  }
  if ((label|0) == 20) {
   label = 0;
   $same = 0;
  }
  $116 = $same;
  $117 = $116&1;
  if ($117) {
   label = 24;
   break;
  }
  $118 = $it;
  $119 = (($118) + 1)|0;
  $it = $119;
 }
 if ((label|0) == 24) {
  $$expand_i1_val = 0;
  $10 = $$expand_i1_val;
  $$pre_trunc = $10;
  $157 = $$pre_trunc&1;
  STACKTOP = sp;return ($157|0);
 }
 $120 = (($15) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (__ZNK6squish9ColourSet9GetPointsEv($121)|0);
 $unweighted = $122;
 $123 = (($15) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (__ZNK6squish9ColourSet10GetWeightsEv($124)|0);
 $weights = $125;
 $126 = (($15) + 412|0);
 __ZN6squish4Vec4C2Ef($14,0.0);
 ;HEAP32[$126+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$126+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$126+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$126+12>>2]=HEAP32[$14+12>>2]|0;
 $i3 = 0;
 while(1) {
  $127 = $i3;
  $128 = $count;
  $129 = ($127|0)<($128|0);
  if (!($129)) {
   break;
  }
  $130 = $i3;
  $131 = $order;
  $132 = (($131) + ($130)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $j4 = $134;
  $135 = $j4;
  $136 = $unweighted;
  $137 = (($136) + (($135*12)|0)|0);
  $138 = (+__ZNK6squish4Vec31XEv($137));
  $139 = $j4;
  $140 = $unweighted;
  $141 = (($140) + (($139*12)|0)|0);
  $142 = (+__ZNK6squish4Vec31YEv($141));
  $143 = $j4;
  $144 = $unweighted;
  $145 = (($144) + (($143*12)|0)|0);
  $146 = (+__ZNK6squish4Vec31ZEv($145));
  __ZN6squish4Vec4C2Effff($p,$138,$142,$146,1.0);
  $147 = $j4;
  $148 = $weights;
  $149 = (($148) + ($147<<2)|0);
  $150 = +HEAPF32[$149>>2];
  __ZN6squish4Vec4C2Ef($w,$150);
  __ZN6squishmlERKNS_4Vec4ES2_($x,$p,$w);
  $151 = $i3;
  $152 = (($15) + 156|0);
  $153 = (($152) + ($151<<4)|0);
  ;HEAP32[$153+0>>2]=HEAP32[$x+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$153+8>>2]=HEAP32[$x+8>>2]|0;HEAP32[$153+12>>2]=HEAP32[$x+12>>2]|0;
  $154 = (($15) + 412|0);
  (__ZN6squish4Vec4pLERKS0_($154,$x)|0);
  $155 = $i3;
  $156 = (($155) + 1)|0;
  $i3 = $156;
 }
 $$expand_i1_val2 = 1;
 $10 = $$expand_i1_val2;
 $$pre_trunc = $10;
 $157 = $$pre_trunc&1;
 STACKTOP = sp;return ($157|0);
}
function __ZN6squish10ClusterFit9Compress3EPv($this,$block) {
 $this = $this|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $alpha2_sum = 0, $alphabeta_sum = 0, $alphax_sum = 0, $axis = 0, $b = 0, $bestend = 0, $besterror = 0, $besti = 0, $bestindices = 0, $bestiteration = 0, $bestj = 0, $beststart = 0, $beta2_sum = 0, $betax_sum = 0, $count = 0;
 var $e1 = 0, $e2 = 0, $e3 = 0, $e4 = 0, $e5 = 0, $error = 0, $factor = 0, $grid = 0, $gridrcp = 0, $half = 0, $half_half2 = 0, $i = 0, $iterationIndex = 0, $j = 0, $jmin = 0, $m = 0, $m1 = 0, $m2 = 0, $one = 0, $order = 0;
 var $part0 = 0, $part1 = 0, $part2 = 0, $two = 0, $unordered = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $two = sp + 952|0;
 $one = sp + 936|0;
 $half_half2 = sp + 920|0;
 $zero = sp + 904|0;
 $half = sp + 888|0;
 $grid = sp + 872|0;
 $gridrcp = sp + 856|0;
 $beststart = sp + 840|0;
 $bestend = sp + 824|0;
 $besterror = sp + 808|0;
 $bestindices = sp + 1000|0;
 $part0 = sp + 776|0;
 $part1 = sp + 752|0;
 $part2 = sp + 728|0;
 $2 = sp + 712|0;
 $alphax_sum = sp + 696|0;
 $alpha2_sum = sp + 680|0;
 $betax_sum = sp + 664|0;
 $beta2_sum = sp + 648|0;
 $alphabeta_sum = sp + 632|0;
 $3 = sp + 616|0;
 $factor = sp + 600|0;
 $4 = sp + 584|0;
 $5 = sp + 568|0;
 $a = sp + 552|0;
 $6 = sp + 536|0;
 $7 = sp + 520|0;
 $b = sp + 504|0;
 $8 = sp + 488|0;
 $9 = sp + 472|0;
 $10 = sp + 456|0;
 $11 = sp + 440|0;
 $12 = sp + 424|0;
 $13 = sp + 408|0;
 $14 = sp + 392|0;
 $15 = sp + 376|0;
 $16 = sp + 360|0;
 $17 = sp + 344|0;
 $18 = sp + 328|0;
 $19 = sp + 312|0;
 $e1 = sp + 296|0;
 $20 = sp + 280|0;
 $21 = sp + 264|0;
 $22 = sp + 248|0;
 $e2 = sp + 232|0;
 $23 = sp + 216|0;
 $24 = sp + 200|0;
 $e3 = sp + 184|0;
 $e4 = sp + 168|0;
 $e5 = sp + 152|0;
 $error = sp + 136|0;
 $25 = sp + 120|0;
 $26 = sp + 104|0;
 $27 = sp + 88|0;
 $28 = sp + 72|0;
 $axis = sp + 56|0;
 $29 = sp + 40|0;
 $unordered = sp + 984|0;
 $30 = sp + 12|0;
 $31 = sp;
 $0 = $this;
 $1 = $block;
 $32 = $0;
 $33 = (($32) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (__ZNK6squish9ColourSet8GetCountEv($34)|0);
 $count = $35;
 __ZN6squish4Vec4C2Ef($two,2.0);
 __ZN6squish4Vec4C2Ef($one,1.0);
 __ZN6squish4Vec4C2Effff($half_half2,0.5,0.5,0.5,0.25);
 __ZN6squish4Vec4C2Ef($zero,0.0);
 __ZN6squish4Vec4C2Ef($half,0.5);
 __ZN6squish4Vec4C2Effff($grid,31.0,63.0,31.0,0.0);
 __ZN6squish4Vec4C2Effff($gridrcp,0.032258063554763794,0.01587301678955555,0.032258063554763794,0.0);
 $36 = (($32) + 16|0);
 (__ZN6squish10ClusterFit17ConstructOrderingERKNS_4Vec3Ei($32,$36,0)|0);
 __ZN6squish4Vec4C2Ef($beststart,0.0);
 __ZN6squish4Vec4C2Ef($bestend,0.0);
 $37 = (($32) + 444|0);
 ;HEAP32[$besterror+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$besterror+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$besterror+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$besterror+12>>2]=HEAP32[$37+12>>2]|0;
 $bestiteration = 0;
 $besti = 0;
 $bestj = 0;
 $iterationIndex = 0;
 while(1) {
  __ZN6squish4Vec4C2Ef($part0,0.0);
  $i = 0;
  while(1) {
   $38 = $i;
   $39 = $count;
   $40 = ($38|0)<($39|0);
   if (!($40)) {
    break;
   }
   $41 = $i;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = (($32) + 156|0);
    ;HEAP32[$part1+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$part1+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$part1+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$part1+12>>2]=HEAP32[$43+12>>2]|0;
   } else {
    __ZN6squish4Vec4C2Ef($part1,0.0);
   }
   $44 = $i;
   $45 = ($44|0)==(0);
   if ($45) {
    $47 = 1;
   } else {
    $46 = $i;
    $47 = $46;
   }
   $jmin = $47;
   $48 = $jmin;
   $j = $48;
   while(1) {
    $49 = (($32) + 412|0);
    __ZN6squishmiERKNS_4Vec4ES2_($2,$49,$part1);
    __ZN6squishmiERKNS_4Vec4ES2_($part2,$2,$part0);
    __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($alphax_sum,$part1,$half_half2,$part0);
    __ZNK6squish4Vec46SplatWEv($alpha2_sum,$alphax_sum);
    __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($betax_sum,$part1,$half_half2,$part2);
    __ZNK6squish4Vec46SplatWEv($beta2_sum,$betax_sum);
    __ZN6squishmlERKNS_4Vec4ES2_($3,$part1,$half_half2);
    __ZNK6squish4Vec46SplatWEv($alphabeta_sum,$3);
    __ZN6squishmlERKNS_4Vec4ES2_($5,$alpha2_sum,$beta2_sum);
    __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($4,$alphabeta_sum,$alphabeta_sum,$5);
    __ZN6squish10ReciprocalERKNS_4Vec4E($factor,$4);
    __ZN6squishmlERKNS_4Vec4ES2_($7,$alphax_sum,$beta2_sum);
    __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($6,$betax_sum,$alphabeta_sum,$7);
    __ZN6squishmlERKNS_4Vec4ES2_($a,$6,$factor);
    __ZN6squishmlERKNS_4Vec4ES2_($9,$betax_sum,$alpha2_sum);
    __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($8,$alphax_sum,$alphabeta_sum,$9);
    __ZN6squishmlERKNS_4Vec4ES2_($b,$8,$factor);
    __ZN6squish3MaxERKNS_4Vec4ES2_($11,$zero,$a);
    __ZN6squish3MinERKNS_4Vec4ES2_($10,$one,$11);
    ;HEAP32[$a+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$a+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$a+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$a+12>>2]=HEAP32[$10+12>>2]|0;
    __ZN6squish3MaxERKNS_4Vec4ES2_($13,$zero,$b);
    __ZN6squish3MinERKNS_4Vec4ES2_($12,$one,$13);
    ;HEAP32[$b+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$b+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$b+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$b+12>>2]=HEAP32[$12+12>>2]|0;
    __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($16,$grid,$a,$half);
    __ZN6squish8TruncateERKNS_4Vec4E($15,$16);
    __ZN6squishmlERKNS_4Vec4ES2_($14,$15,$gridrcp);
    ;HEAP32[$a+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$a+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$a+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$a+12>>2]=HEAP32[$14+12>>2]|0;
    __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($19,$grid,$b,$half);
    __ZN6squish8TruncateERKNS_4Vec4E($18,$19);
    __ZN6squishmlERKNS_4Vec4ES2_($17,$18,$gridrcp);
    ;HEAP32[$b+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$b+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$b+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$b+12>>2]=HEAP32[$17+12>>2]|0;
    __ZN6squishmlERKNS_4Vec4ES2_($20,$a,$a);
    __ZN6squishmlERKNS_4Vec4ES2_($22,$b,$b);
    __ZN6squishmlERKNS_4Vec4ES2_($21,$22,$beta2_sum);
    __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($e1,$20,$alpha2_sum,$21);
    __ZN6squishmlERKNS_4Vec4ES2_($24,$a,$b);
    __ZN6squishmlERKNS_4Vec4ES2_($23,$24,$alphabeta_sum);
    __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($e2,$a,$alphax_sum,$23);
    __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($e3,$b,$betax_sum,$e2);
    __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($e4,$two,$e3,$e1);
    $50 = (($32) + 428|0);
    __ZN6squishmlERKNS_4Vec4ES2_($e5,$e4,$50);
    __ZNK6squish4Vec46SplatXEv($26,$e5);
    __ZNK6squish4Vec46SplatYEv($27,$e5);
    __ZN6squishplERKNS_4Vec4ES2_($25,$26,$27);
    __ZNK6squish4Vec46SplatZEv($28,$e5);
    __ZN6squishplERKNS_4Vec4ES2_($error,$25,$28);
    $51 = (__ZN6squish18CompareAnyLessThanERKNS_4Vec4ES2_($error,$besterror)|0);
    if ($51) {
     ;HEAP32[$beststart+0>>2]=HEAP32[$a+0>>2]|0;HEAP32[$beststart+4>>2]=HEAP32[$a+4>>2]|0;HEAP32[$beststart+8>>2]=HEAP32[$a+8>>2]|0;HEAP32[$beststart+12>>2]=HEAP32[$a+12>>2]|0;
     ;HEAP32[$bestend+0>>2]=HEAP32[$b+0>>2]|0;HEAP32[$bestend+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$bestend+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$bestend+12>>2]=HEAP32[$b+12>>2]|0;
     $52 = $i;
     $besti = $52;
     $53 = $j;
     $bestj = $53;
     ;HEAP32[$besterror+0>>2]=HEAP32[$error+0>>2]|0;HEAP32[$besterror+4>>2]=HEAP32[$error+4>>2]|0;HEAP32[$besterror+8>>2]=HEAP32[$error+8>>2]|0;HEAP32[$besterror+12>>2]=HEAP32[$error+12>>2]|0;
     $54 = $iterationIndex;
     $bestiteration = $54;
    }
    $55 = $j;
    $56 = $count;
    $57 = ($55|0)==($56|0);
    if ($57) {
     break;
    }
    $58 = $j;
    $59 = (($32) + 156|0);
    $60 = (($59) + ($58<<4)|0);
    (__ZN6squish4Vec4pLERKS0_($part1,$60)|0);
    $61 = $j;
    $62 = (($61) + 1)|0;
    $j = $62;
   }
   $63 = $i;
   $64 = (($32) + 156|0);
   $65 = (($64) + ($63<<4)|0);
   (__ZN6squish4Vec4pLERKS0_($part0,$65)|0);
   $66 = $i;
   $67 = (($66) + 1)|0;
   $i = $67;
  }
  $68 = $bestiteration;
  $69 = $iterationIndex;
  $70 = ($68|0)!=($69|0);
  if ($70) {
   label = 19;
   break;
  }
  $71 = $iterationIndex;
  $72 = (($71) + 1)|0;
  $iterationIndex = $72;
  $73 = $iterationIndex;
  $74 = (($32) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   label = 21;
   break;
  }
  __ZN6squishmiERKNS_4Vec4ES2_($29,$bestend,$beststart);
  __ZNK6squish4Vec47GetVec3Ev($axis,$29);
  $77 = $iterationIndex;
  $78 = (__ZN6squish10ClusterFit17ConstructOrderingERKNS_4Vec3Ei($32,$axis,$77)|0);
  if (!($78)) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 19) {
 }
 else if ((label|0) == 21) {
 }
 else if ((label|0) == 23) {
 }
 $79 = (($32) + 444|0);
 $80 = (__ZN6squish18CompareAnyLessThanERKNS_4Vec4ES2_($besterror,$79)|0);
 if (!($80)) {
  STACKTOP = sp;return;
 }
 $81 = (($32) + 28|0);
 $82 = $bestiteration;
 $83 = $82<<4;
 $84 = (($81) + ($83)|0);
 $order = $84;
 $m = 0;
 while(1) {
  $85 = $m;
  $86 = $besti;
  $87 = ($85|0)<($86|0);
  if (!($87)) {
   break;
  }
  $88 = $m;
  $89 = $order;
  $90 = (($89) + ($88)|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = (($unordered) + ($92)|0);
  HEAP8[$93>>0] = 0;
  $94 = $m;
  $95 = (($94) + 1)|0;
  $m = $95;
 }
 $96 = $besti;
 $m1 = $96;
 while(1) {
  $97 = $m1;
  $98 = $bestj;
  $99 = ($97|0)<($98|0);
  if (!($99)) {
   break;
  }
  $100 = $m1;
  $101 = $order;
  $102 = (($101) + ($100)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = (($unordered) + ($104)|0);
  HEAP8[$105>>0] = 2;
  $106 = $m1;
  $107 = (($106) + 1)|0;
  $m1 = $107;
 }
 $108 = $bestj;
 $m2 = $108;
 while(1) {
  $109 = $m2;
  $110 = $count;
  $111 = ($109|0)<($110|0);
  if (!($111)) {
   break;
  }
  $112 = $m2;
  $113 = $order;
  $114 = (($113) + ($112)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = (($unordered) + ($116)|0);
  HEAP8[$117>>0] = 1;
  $118 = $m2;
  $119 = (($118) + 1)|0;
  $m2 = $119;
 }
 $120 = (($32) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 __ZNK6squish9ColourSet12RemapIndicesEPKhPh($121,$unordered,$bestindices);
 __ZNK6squish4Vec47GetVec3Ev($30,$beststart);
 __ZNK6squish4Vec47GetVec3Ev($31,$bestend);
 $122 = $1;
 __ZN6squish17WriteColourBlock3ERKNS_4Vec3ES2_PKhPv($30,$31,$bestindices,$122);
 $123 = (($32) + 444|0);
 ;HEAP32[$123+0>>2]=HEAP32[$besterror+0>>2]|0;HEAP32[$123+4>>2]=HEAP32[$besterror+4>>2]|0;HEAP32[$123+8>>2]=HEAP32[$besterror+8>>2]|0;HEAP32[$123+12>>2]=HEAP32[$besterror+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish10ClusterFit9Compress4EPv($this,$block) {
 $this = $this|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $alpha2_sum = 0, $alphabeta_sum = 0, $alphax_sum = 0, $axis = 0, $b = 0, $bestend = 0, $besterror = 0, $besti = 0, $bestindices = 0;
 var $bestiteration = 0, $bestj = 0, $bestk = 0, $beststart = 0, $beta2_sum = 0, $betax_sum = 0, $count = 0, $e1 = 0, $e2 = 0, $e3 = 0, $e4 = 0, $e5 = 0, $error = 0, $factor = 0, $grid = 0, $gridrcp = 0, $half = 0, $i = 0, $iterationIndex = 0, $j = 0;
 var $k = 0, $kmin = 0, $m = 0, $m1 = 0, $m2 = 0, $m3 = 0, $one = 0, $onethird_onethird2 = 0, $order = 0, $part0 = 0, $part1 = 0, $part2 = 0, $part3 = 0, $two = 0, $twonineths = 0, $twothirds_twothirds2 = 0, $unordered = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $two = sp + 1088|0;
 $one = sp + 1072|0;
 $onethird_onethird2 = sp + 1056|0;
 $twothirds_twothirds2 = sp + 1040|0;
 $twonineths = sp + 1024|0;
 $zero = sp + 1008|0;
 $half = sp + 992|0;
 $grid = sp + 976|0;
 $gridrcp = sp + 960|0;
 $beststart = sp + 944|0;
 $bestend = sp + 928|0;
 $besterror = sp + 912|0;
 $bestindices = sp + 1136|0;
 $part0 = sp + 872|0;
 $part1 = sp + 848|0;
 $part2 = sp + 824|0;
 $part3 = sp + 800|0;
 $2 = sp + 784|0;
 $3 = sp + 768|0;
 $alphax_sum = sp + 752|0;
 $4 = sp + 736|0;
 $alpha2_sum = sp + 720|0;
 $betax_sum = sp + 704|0;
 $5 = sp + 688|0;
 $beta2_sum = sp + 672|0;
 $alphabeta_sum = sp + 656|0;
 $6 = sp + 640|0;
 $7 = sp + 624|0;
 $factor = sp + 608|0;
 $8 = sp + 592|0;
 $9 = sp + 576|0;
 $a = sp + 560|0;
 $10 = sp + 544|0;
 $11 = sp + 528|0;
 $b = sp + 512|0;
 $12 = sp + 496|0;
 $13 = sp + 480|0;
 $14 = sp + 464|0;
 $15 = sp + 448|0;
 $16 = sp + 432|0;
 $17 = sp + 416|0;
 $18 = sp + 400|0;
 $19 = sp + 384|0;
 $20 = sp + 368|0;
 $21 = sp + 352|0;
 $22 = sp + 336|0;
 $23 = sp + 320|0;
 $e1 = sp + 304|0;
 $24 = sp + 288|0;
 $25 = sp + 272|0;
 $26 = sp + 256|0;
 $e2 = sp + 240|0;
 $27 = sp + 224|0;
 $28 = sp + 208|0;
 $e3 = sp + 192|0;
 $e4 = sp + 176|0;
 $e5 = sp + 160|0;
 $error = sp + 144|0;
 $29 = sp + 128|0;
 $30 = sp + 112|0;
 $31 = sp + 96|0;
 $32 = sp + 80|0;
 $axis = sp + 64|0;
 $33 = sp + 48|0;
 $unordered = sp + 1120|0;
 $34 = sp + 12|0;
 $35 = sp;
 $0 = $this;
 $1 = $block;
 $36 = $0;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (__ZNK6squish9ColourSet8GetCountEv($38)|0);
 $count = $39;
 __ZN6squish4Vec4C2Ef($two,2.0);
 __ZN6squish4Vec4C2Ef($one,1.0);
 __ZN6squish4Vec4C2Effff($onethird_onethird2,0.3333333432674408,0.3333333432674408,0.3333333432674408,0.1111111119389534);
 __ZN6squish4Vec4C2Effff($twothirds_twothirds2,0.66666668653488159,0.66666668653488159,0.66666668653488159,0.4444444477558136);
 __ZN6squish4Vec4C2Ef($twonineths,0.2222222238779068);
 __ZN6squish4Vec4C2Ef($zero,0.0);
 __ZN6squish4Vec4C2Ef($half,0.5);
 __ZN6squish4Vec4C2Effff($grid,31.0,63.0,31.0,0.0);
 __ZN6squish4Vec4C2Effff($gridrcp,0.032258063554763794,0.01587301678955555,0.032258063554763794,0.0);
 $40 = (($36) + 16|0);
 (__ZN6squish10ClusterFit17ConstructOrderingERKNS_4Vec3Ei($36,$40,0)|0);
 __ZN6squish4Vec4C2Ef($beststart,0.0);
 __ZN6squish4Vec4C2Ef($bestend,0.0);
 $41 = (($36) + 444|0);
 ;HEAP32[$besterror+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$besterror+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$besterror+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$besterror+12>>2]=HEAP32[$41+12>>2]|0;
 $bestiteration = 0;
 $besti = 0;
 $bestj = 0;
 $bestk = 0;
 $iterationIndex = 0;
 while(1) {
  __ZN6squish4Vec4C2Ef($part0,0.0);
  $i = 0;
  while(1) {
   $42 = $i;
   $43 = $count;
   $44 = ($42|0)<($43|0);
   if (!($44)) {
    break;
   }
   __ZN6squish4Vec4C2Ef($part1,0.0);
   $45 = $i;
   $j = $45;
   while(1) {
    $46 = $j;
    $47 = ($46|0)==(0);
    if ($47) {
     $48 = (($36) + 156|0);
     ;HEAP32[$part2+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$part2+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$part2+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$part2+12>>2]=HEAP32[$48+12>>2]|0;
    } else {
     __ZN6squish4Vec4C2Ef($part2,0.0);
    }
    $49 = $j;
    $50 = ($49|0)==(0);
    if ($50) {
     $52 = 1;
    } else {
     $51 = $j;
     $52 = $51;
    }
    $kmin = $52;
    $53 = $kmin;
    $k = $53;
    while(1) {
     $54 = (($36) + 412|0);
     __ZN6squishmiERKNS_4Vec4ES2_($3,$54,$part2);
     __ZN6squishmiERKNS_4Vec4ES2_($2,$3,$part1);
     __ZN6squishmiERKNS_4Vec4ES2_($part3,$2,$part0);
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($4,$part1,$twothirds_twothirds2,$part0);
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($alphax_sum,$part2,$onethird_onethird2,$4);
     __ZNK6squish4Vec46SplatWEv($alpha2_sum,$alphax_sum);
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($5,$part2,$twothirds_twothirds2,$part3);
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($betax_sum,$part1,$onethird_onethird2,$5);
     __ZNK6squish4Vec46SplatWEv($beta2_sum,$betax_sum);
     __ZN6squishplERKNS_4Vec4ES2_($7,$part1,$part2);
     __ZNK6squish4Vec46SplatWEv($6,$7);
     __ZN6squishmlERKNS_4Vec4ES2_($alphabeta_sum,$twonineths,$6);
     __ZN6squishmlERKNS_4Vec4ES2_($9,$alpha2_sum,$beta2_sum);
     __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($8,$alphabeta_sum,$alphabeta_sum,$9);
     __ZN6squish10ReciprocalERKNS_4Vec4E($factor,$8);
     __ZN6squishmlERKNS_4Vec4ES2_($11,$alphax_sum,$beta2_sum);
     __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($10,$betax_sum,$alphabeta_sum,$11);
     __ZN6squishmlERKNS_4Vec4ES2_($a,$10,$factor);
     __ZN6squishmlERKNS_4Vec4ES2_($13,$betax_sum,$alpha2_sum);
     __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($12,$alphax_sum,$alphabeta_sum,$13);
     __ZN6squishmlERKNS_4Vec4ES2_($b,$12,$factor);
     __ZN6squish3MaxERKNS_4Vec4ES2_($15,$zero,$a);
     __ZN6squish3MinERKNS_4Vec4ES2_($14,$one,$15);
     ;HEAP32[$a+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$a+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$a+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$a+12>>2]=HEAP32[$14+12>>2]|0;
     __ZN6squish3MaxERKNS_4Vec4ES2_($17,$zero,$b);
     __ZN6squish3MinERKNS_4Vec4ES2_($16,$one,$17);
     ;HEAP32[$b+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$b+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$b+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$b+12>>2]=HEAP32[$16+12>>2]|0;
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($20,$grid,$a,$half);
     __ZN6squish8TruncateERKNS_4Vec4E($19,$20);
     __ZN6squishmlERKNS_4Vec4ES2_($18,$19,$gridrcp);
     ;HEAP32[$a+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$a+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$a+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$a+12>>2]=HEAP32[$18+12>>2]|0;
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($23,$grid,$b,$half);
     __ZN6squish8TruncateERKNS_4Vec4E($22,$23);
     __ZN6squishmlERKNS_4Vec4ES2_($21,$22,$gridrcp);
     ;HEAP32[$b+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$b+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$b+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$b+12>>2]=HEAP32[$21+12>>2]|0;
     __ZN6squishmlERKNS_4Vec4ES2_($24,$a,$a);
     __ZN6squishmlERKNS_4Vec4ES2_($26,$b,$b);
     __ZN6squishmlERKNS_4Vec4ES2_($25,$26,$beta2_sum);
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($e1,$24,$alpha2_sum,$25);
     __ZN6squishmlERKNS_4Vec4ES2_($28,$a,$b);
     __ZN6squishmlERKNS_4Vec4ES2_($27,$28,$alphabeta_sum);
     __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($e2,$a,$alphax_sum,$27);
     __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($e3,$b,$betax_sum,$e2);
     __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($e4,$two,$e3,$e1);
     $55 = (($36) + 428|0);
     __ZN6squishmlERKNS_4Vec4ES2_($e5,$e4,$55);
     __ZNK6squish4Vec46SplatXEv($30,$e5);
     __ZNK6squish4Vec46SplatYEv($31,$e5);
     __ZN6squishplERKNS_4Vec4ES2_($29,$30,$31);
     __ZNK6squish4Vec46SplatZEv($32,$e5);
     __ZN6squishplERKNS_4Vec4ES2_($error,$29,$32);
     $56 = (__ZN6squish18CompareAnyLessThanERKNS_4Vec4ES2_($error,$besterror)|0);
     if ($56) {
      ;HEAP32[$beststart+0>>2]=HEAP32[$a+0>>2]|0;HEAP32[$beststart+4>>2]=HEAP32[$a+4>>2]|0;HEAP32[$beststart+8>>2]=HEAP32[$a+8>>2]|0;HEAP32[$beststart+12>>2]=HEAP32[$a+12>>2]|0;
      ;HEAP32[$bestend+0>>2]=HEAP32[$b+0>>2]|0;HEAP32[$bestend+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$bestend+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$bestend+12>>2]=HEAP32[$b+12>>2]|0;
      ;HEAP32[$besterror+0>>2]=HEAP32[$error+0>>2]|0;HEAP32[$besterror+4>>2]=HEAP32[$error+4>>2]|0;HEAP32[$besterror+8>>2]=HEAP32[$error+8>>2]|0;HEAP32[$besterror+12>>2]=HEAP32[$error+12>>2]|0;
      $57 = $i;
      $besti = $57;
      $58 = $j;
      $bestj = $58;
      $59 = $k;
      $bestk = $59;
      $60 = $iterationIndex;
      $bestiteration = $60;
     }
     $61 = $k;
     $62 = $count;
     $63 = ($61|0)==($62|0);
     if ($63) {
      break;
     }
     $64 = $k;
     $65 = (($36) + 156|0);
     $66 = (($65) + ($64<<4)|0);
     (__ZN6squish4Vec4pLERKS0_($part2,$66)|0);
     $67 = $k;
     $68 = (($67) + 1)|0;
     $k = $68;
    }
    $69 = $j;
    $70 = $count;
    $71 = ($69|0)==($70|0);
    if ($71) {
     break;
    }
    $72 = $j;
    $73 = (($36) + 156|0);
    $74 = (($73) + ($72<<4)|0);
    (__ZN6squish4Vec4pLERKS0_($part1,$74)|0);
    $75 = $j;
    $76 = (($75) + 1)|0;
    $j = $76;
   }
   $77 = $i;
   $78 = (($36) + 156|0);
   $79 = (($78) + ($77<<4)|0);
   (__ZN6squish4Vec4pLERKS0_($part0,$79)|0);
   $80 = $i;
   $81 = (($80) + 1)|0;
   $i = $81;
  }
  $82 = $bestiteration;
  $83 = $iterationIndex;
  $84 = ($82|0)!=($83|0);
  if ($84) {
   label = 23;
   break;
  }
  $85 = $iterationIndex;
  $86 = (($85) + 1)|0;
  $iterationIndex = $86;
  $87 = $iterationIndex;
  $88 = (($36) + 12|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($87|0)==($89|0);
  if ($90) {
   label = 25;
   break;
  }
  __ZN6squishmiERKNS_4Vec4ES2_($33,$bestend,$beststart);
  __ZNK6squish4Vec47GetVec3Ev($axis,$33);
  $91 = $iterationIndex;
  $92 = (__ZN6squish10ClusterFit17ConstructOrderingERKNS_4Vec3Ei($36,$axis,$91)|0);
  if (!($92)) {
   label = 27;
   break;
  }
 }
 if ((label|0) == 23) {
 }
 else if ((label|0) == 25) {
 }
 else if ((label|0) == 27) {
 }
 $93 = (($36) + 444|0);
 $94 = (__ZN6squish18CompareAnyLessThanERKNS_4Vec4ES2_($besterror,$93)|0);
 if (!($94)) {
  STACKTOP = sp;return;
 }
 $95 = (($36) + 28|0);
 $96 = $bestiteration;
 $97 = $96<<4;
 $98 = (($95) + ($97)|0);
 $order = $98;
 $m = 0;
 while(1) {
  $99 = $m;
  $100 = $besti;
  $101 = ($99|0)<($100|0);
  if (!($101)) {
   break;
  }
  $102 = $m;
  $103 = $order;
  $104 = (($103) + ($102)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = (($unordered) + ($106)|0);
  HEAP8[$107>>0] = 0;
  $108 = $m;
  $109 = (($108) + 1)|0;
  $m = $109;
 }
 $110 = $besti;
 $m1 = $110;
 while(1) {
  $111 = $m1;
  $112 = $bestj;
  $113 = ($111|0)<($112|0);
  if (!($113)) {
   break;
  }
  $114 = $m1;
  $115 = $order;
  $116 = (($115) + ($114)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($unordered) + ($118)|0);
  HEAP8[$119>>0] = 2;
  $120 = $m1;
  $121 = (($120) + 1)|0;
  $m1 = $121;
 }
 $122 = $bestj;
 $m2 = $122;
 while(1) {
  $123 = $m2;
  $124 = $bestk;
  $125 = ($123|0)<($124|0);
  if (!($125)) {
   break;
  }
  $126 = $m2;
  $127 = $order;
  $128 = (($127) + ($126)|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = (($unordered) + ($130)|0);
  HEAP8[$131>>0] = 3;
  $132 = $m2;
  $133 = (($132) + 1)|0;
  $m2 = $133;
 }
 $134 = $bestk;
 $m3 = $134;
 while(1) {
  $135 = $m3;
  $136 = $count;
  $137 = ($135|0)<($136|0);
  if (!($137)) {
   break;
  }
  $138 = $m3;
  $139 = $order;
  $140 = (($139) + ($138)|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = (($unordered) + ($142)|0);
  HEAP8[$143>>0] = 1;
  $144 = $m3;
  $145 = (($144) + 1)|0;
  $m3 = $145;
 }
 $146 = (($36) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 __ZNK6squish9ColourSet12RemapIndicesEPKhPh($147,$unordered,$bestindices);
 __ZNK6squish4Vec47GetVec3Ev($34,$beststart);
 __ZNK6squish4Vec47GetVec3Ev($35,$bestend);
 $148 = $1;
 __ZN6squish17WriteColourBlock4ERKNS_4Vec3ES2_PKhPv($34,$35,$bestindices,$148);
 $149 = (($36) + 444|0);
 ;HEAP32[$149+0>>2]=HEAP32[$besterror+0>>2]|0;HEAP32[$149+4>>2]=HEAP32[$besterror+4>>2]|0;HEAP32[$149+8>>2]=HEAP32[$besterror+8>>2]|0;HEAP32[$149+12>>2]=HEAP32[$besterror+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish4Vec3C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN6squish4Vec4C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN6squish4Vec4C2Ef($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 HEAPF32[$2>>2] = $3;
 $4 = (($2) + 4|0);
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = (($2) + 8|0);
 $7 = $1;
 HEAPF32[$6>>2] = $7;
 $8 = (($2) + 12|0);
 $9 = $1;
 HEAPF32[$8>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN6squish4Vec4C2Effff($this,$x,$y,$z,$w) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $w = +$w;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $w;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = (($5) + 4|0);
 $8 = $2;
 HEAPF32[$7>>2] = $8;
 $9 = (($5) + 8|0);
 $10 = $3;
 HEAPF32[$9>>2] = $10;
 $11 = (($5) + 12|0);
 $12 = $4;
 HEAPF32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNK6squish9ColourSet8GetCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNK6squish9ColourSet9GetPointsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK6squish9ColourSet10GetWeightsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 196|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish3DotERKNS_4Vec3ES2_($left,$right) {
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $right;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function __ZNK6squish4Vec31XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 STACKTOP = sp;return (+$2);
}
function __ZNK6squish4Vec31YEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function __ZNK6squish4Vec31ZEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function __ZN6squishmlERKNS_4Vec4ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp;
 $0 = $left;
 $1 = $right;
 $2 = $0;
 ;HEAP32[$copy+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$copy+12>>2]=HEAP32[$2+12>>2]|0;
 $3 = $1;
 $4 = (__ZN6squish4Vec4mLERKS0_($copy,$3)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish4Vec4pLERKS0_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 + $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 + $9;
 HEAPF32[$10>>2] = $12;
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 + $15;
 HEAPF32[$16>>2] = $18;
 $19 = $1;
 $20 = (($19) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (($2) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 + $21;
 HEAPF32[$22>>2] = $24;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squishmiERKNS_4Vec4ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp;
 $0 = $left;
 $1 = $right;
 $2 = $0;
 ;HEAP32[$copy+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$copy+12>>2]=HEAP32[$2+12>>2]|0;
 $3 = $1;
 $4 = (__ZN6squish4Vec4mIERKS0_($copy,$3)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish11MultiplyAddERKNS_4Vec4ES2_S2_($agg$result,$a,$b,$c) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $4 = $0;
 $5 = $1;
 __ZN6squishmlERKNS_4Vec4ES2_($3,$4,$5);
 $6 = $2;
 __ZN6squishplERKNS_4Vec4ES2_($agg$result,$3,$6);
 STACKTOP = sp;return;
}
function __ZNK6squish4Vec46SplatWEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = +HEAPF32[$2>>2];
 __ZN6squish4Vec4C2Ef($agg$result,$3);
 STACKTOP = sp;return;
}
function __ZN6squish24NegativeMultiplySubtractERKNS_4Vec4ES2_S2_($agg$result,$a,$b,$c) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $4 = $2;
 $5 = $0;
 $6 = $1;
 __ZN6squishmlERKNS_4Vec4ES2_($3,$5,$6);
 __ZN6squishmiERKNS_4Vec4ES2_($agg$result,$4,$3);
 STACKTOP = sp;return;
}
function __ZN6squish10ReciprocalERKNS_4Vec4E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = 1.0 / $2;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = 1.0 / $6;
 $8 = $0;
 $9 = (($8) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = 1.0 / $10;
 $12 = $0;
 $13 = (($12) + 12|0);
 $14 = +HEAPF32[$13>>2];
 $15 = 1.0 / $14;
 __ZN6squish4Vec4C2Effff($agg$result,$3,$7,$11,$15);
 STACKTOP = sp;return;
}
function __ZN6squish3MaxERKNS_4Vec4ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $8 = sp + 151|0;
 $14 = sp + 16|0;
 $17 = sp + 150|0;
 $23 = sp + 8|0;
 $26 = sp + 149|0;
 $32 = sp;
 $35 = sp + 148|0;
 $36 = $left;
 $37 = $right;
 $38 = $36;
 $39 = $37;
 $33 = $38;
 $34 = $39;
 $40 = $33;
 $41 = $34;
 ;HEAP8[$32+0>>0]=HEAP8[$35+0>>0]|0;
 $30 = $40;
 $31 = $41;
 $42 = $30;
 $43 = $31;
 $27 = $32;
 $28 = $42;
 $29 = $43;
 $44 = $28;
 $45 = +HEAPF32[$44>>2];
 $46 = $29;
 $47 = +HEAPF32[$46>>2];
 $48 = $45 < $47;
 if ($48) {
  $49 = $31;
  $52 = $49;
 } else {
  $50 = $30;
  $52 = $50;
 }
 $51 = +HEAPF32[$52>>2];
 $53 = $36;
 $54 = (($53) + 4|0);
 $55 = $37;
 $56 = (($55) + 4|0);
 $24 = $54;
 $25 = $56;
 $57 = $24;
 $58 = $25;
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;
 $21 = $57;
 $22 = $58;
 $59 = $21;
 $60 = $22;
 $18 = $23;
 $19 = $59;
 $20 = $60;
 $61 = $19;
 $62 = +HEAPF32[$61>>2];
 $63 = $20;
 $64 = +HEAPF32[$63>>2];
 $65 = $62 < $64;
 if ($65) {
  $66 = $22;
  $69 = $66;
 } else {
  $67 = $21;
  $69 = $67;
 }
 $68 = +HEAPF32[$69>>2];
 $70 = $36;
 $71 = (($70) + 8|0);
 $72 = $37;
 $73 = (($72) + 8|0);
 $6 = $71;
 $7 = $73;
 $74 = $6;
 $75 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $74;
 $4 = $75;
 $76 = $3;
 $77 = $4;
 $0 = $5;
 $1 = $76;
 $2 = $77;
 $78 = $1;
 $79 = +HEAPF32[$78>>2];
 $80 = $2;
 $81 = +HEAPF32[$80>>2];
 $82 = $79 < $81;
 if ($82) {
  $83 = $4;
  $86 = $83;
 } else {
  $84 = $3;
  $86 = $84;
 }
 $85 = +HEAPF32[$86>>2];
 $87 = $36;
 $88 = (($87) + 12|0);
 $89 = $37;
 $90 = (($89) + 12|0);
 $15 = $88;
 $16 = $90;
 $91 = $15;
 $92 = $16;
 ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
 $12 = $91;
 $13 = $92;
 $93 = $12;
 $94 = $13;
 $9 = $14;
 $10 = $93;
 $11 = $94;
 $95 = $10;
 $96 = +HEAPF32[$95>>2];
 $97 = $11;
 $98 = +HEAPF32[$97>>2];
 $99 = $96 < $98;
 if ($99) {
  $100 = $13;
  $103 = $100;
  $102 = +HEAPF32[$103>>2];
  __ZN6squish4Vec4C2Effff($agg$result,$51,$68,$85,$102);
  STACKTOP = sp;return;
 } else {
  $101 = $12;
  $103 = $101;
  $102 = +HEAPF32[$103>>2];
  __ZN6squish4Vec4C2Effff($agg$result,$51,$68,$85,$102);
  STACKTOP = sp;return;
 }
}
function __ZN6squish3MinERKNS_4Vec4ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $8 = sp + 151|0;
 $14 = sp + 16|0;
 $17 = sp + 150|0;
 $23 = sp + 8|0;
 $26 = sp + 149|0;
 $32 = sp;
 $35 = sp + 148|0;
 $36 = $left;
 $37 = $right;
 $38 = $36;
 $39 = $37;
 $33 = $38;
 $34 = $39;
 $40 = $33;
 $41 = $34;
 ;HEAP8[$32+0>>0]=HEAP8[$35+0>>0]|0;
 $30 = $40;
 $31 = $41;
 $42 = $31;
 $43 = $30;
 $27 = $32;
 $28 = $42;
 $29 = $43;
 $44 = $28;
 $45 = +HEAPF32[$44>>2];
 $46 = $29;
 $47 = +HEAPF32[$46>>2];
 $48 = $45 < $47;
 if ($48) {
  $49 = $31;
  $52 = $49;
 } else {
  $50 = $30;
  $52 = $50;
 }
 $51 = +HEAPF32[$52>>2];
 $53 = $36;
 $54 = (($53) + 4|0);
 $55 = $37;
 $56 = (($55) + 4|0);
 $24 = $54;
 $25 = $56;
 $57 = $24;
 $58 = $25;
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;
 $21 = $57;
 $22 = $58;
 $59 = $22;
 $60 = $21;
 $18 = $23;
 $19 = $59;
 $20 = $60;
 $61 = $19;
 $62 = +HEAPF32[$61>>2];
 $63 = $20;
 $64 = +HEAPF32[$63>>2];
 $65 = $62 < $64;
 if ($65) {
  $66 = $22;
  $69 = $66;
 } else {
  $67 = $21;
  $69 = $67;
 }
 $68 = +HEAPF32[$69>>2];
 $70 = $36;
 $71 = (($70) + 8|0);
 $72 = $37;
 $73 = (($72) + 8|0);
 $6 = $71;
 $7 = $73;
 $74 = $6;
 $75 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $74;
 $4 = $75;
 $76 = $4;
 $77 = $3;
 $0 = $5;
 $1 = $76;
 $2 = $77;
 $78 = $1;
 $79 = +HEAPF32[$78>>2];
 $80 = $2;
 $81 = +HEAPF32[$80>>2];
 $82 = $79 < $81;
 if ($82) {
  $83 = $4;
  $86 = $83;
 } else {
  $84 = $3;
  $86 = $84;
 }
 $85 = +HEAPF32[$86>>2];
 $87 = $36;
 $88 = (($87) + 12|0);
 $89 = $37;
 $90 = (($89) + 12|0);
 $15 = $88;
 $16 = $90;
 $91 = $15;
 $92 = $16;
 ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
 $12 = $91;
 $13 = $92;
 $93 = $13;
 $94 = $12;
 $9 = $14;
 $10 = $93;
 $11 = $94;
 $95 = $10;
 $96 = +HEAPF32[$95>>2];
 $97 = $11;
 $98 = +HEAPF32[$97>>2];
 $99 = $96 < $98;
 if ($99) {
  $100 = $13;
  $103 = $100;
  $102 = +HEAPF32[$103>>2];
  __ZN6squish4Vec4C2Effff($agg$result,$51,$68,$85,$102);
  STACKTOP = sp;return;
 } else {
  $101 = $12;
  $103 = $101;
  $102 = +HEAPF32[$103>>2];
  __ZN6squish4Vec4C2Effff($agg$result,$51,$68,$85,$102);
  STACKTOP = sp;return;
 }
}
function __ZN6squish8TruncateERKNS_4Vec4E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $v;
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $10 > 0.0;
 if ($11) {
  $12 = $8;
  $13 = +HEAPF32[$12>>2];
  $7 = $13;
  $14 = $7;
  $15 = (+Math_floor((+$14)));
  $62 = $15;
 } else {
  $16 = $8;
  $17 = +HEAPF32[$16>>2];
  $6 = $17;
  $18 = $6;
  $19 = (+Math_ceil((+$18)));
  $62 = $19;
 }
 $20 = $8;
 $21 = (($20) + 4|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $22 > 0.0;
 if ($23) {
  $24 = $8;
  $25 = (($24) + 4|0);
  $26 = +HEAPF32[$25>>2];
  $5 = $26;
  $27 = $5;
  $28 = (+Math_floor((+$27)));
  $63 = $28;
 } else {
  $29 = $8;
  $30 = (($29) + 4|0);
  $31 = +HEAPF32[$30>>2];
  $4 = $31;
  $32 = $4;
  $33 = (+Math_ceil((+$32)));
  $63 = $33;
 }
 $34 = $8;
 $35 = (($34) + 8|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $36 > 0.0;
 if ($37) {
  $38 = $8;
  $39 = (($38) + 8|0);
  $40 = +HEAPF32[$39>>2];
  $3 = $40;
  $41 = $3;
  $42 = (+Math_floor((+$41)));
  $64 = $42;
 } else {
  $43 = $8;
  $44 = (($43) + 8|0);
  $45 = +HEAPF32[$44>>2];
  $2 = $45;
  $46 = $2;
  $47 = (+Math_ceil((+$46)));
  $64 = $47;
 }
 $48 = $8;
 $49 = (($48) + 12|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $50 > 0.0;
 if ($51) {
  $52 = $8;
  $53 = (($52) + 12|0);
  $54 = +HEAPF32[$53>>2];
  $1 = $54;
  $55 = $1;
  $56 = (+Math_floor((+$55)));
  $65 = $56;
  __ZN6squish4Vec4C2Effff($agg$result,$62,$63,$64,$65);
  STACKTOP = sp;return;
 } else {
  $57 = $8;
  $58 = (($57) + 12|0);
  $59 = +HEAPF32[$58>>2];
  $0 = $59;
  $60 = $0;
  $61 = (+Math_ceil((+$60)));
  $65 = $61;
  __ZN6squish4Vec4C2Effff($agg$result,$62,$63,$64,$65);
  STACKTOP = sp;return;
 }
}
function __ZNK6squish4Vec46SplatXEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 __ZN6squish4Vec4C2Ef($agg$result,$2);
 STACKTOP = sp;return;
}
function __ZNK6squish4Vec46SplatYEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = +HEAPF32[$2>>2];
 __ZN6squish4Vec4C2Ef($agg$result,$3);
 STACKTOP = sp;return;
}
function __ZN6squishplERKNS_4Vec4ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp;
 $0 = $left;
 $1 = $right;
 $2 = $0;
 ;HEAP32[$copy+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$copy+12>>2]=HEAP32[$2+12>>2]|0;
 $3 = $1;
 $4 = (__ZN6squish4Vec4pLERKS0_($copy,$3)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK6squish4Vec46SplatZEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = +HEAPF32[$2>>2];
 __ZN6squish4Vec4C2Ef($agg$result,$3);
 STACKTOP = sp;return;
}
function __ZN6squish18CompareAnyLessThanERKNS_4Vec4ES2_($left,$right) {
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $right;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 < $5;
 if ($6) {
  $28 = 1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 < $12;
 if ($13) {
  $28 = 1;
  STACKTOP = sp;return ($28|0);
 }
 $14 = $0;
 $15 = (($14) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = (($17) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 < $19;
 if ($20) {
  $28 = 1;
  STACKTOP = sp;return ($28|0);
 }
 $21 = $0;
 $22 = (($21) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = (($24) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 < $26;
 $28 = $27;
 STACKTOP = sp;return ($28|0);
}
function __ZNK6squish4Vec47GetVec3Ev($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = (($1) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (($1) + 8|0);
 $6 = +HEAPF32[$5>>2];
 __ZN6squish4Vec3C2Efff($agg$result,$2,$4,$6);
 STACKTOP = sp;return;
}
function __ZN6squish4Vec4mLERKS0_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 * $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 * $9;
 HEAPF32[$10>>2] = $12;
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * $15;
 HEAPF32[$16>>2] = $18;
 $19 = $1;
 $20 = (($19) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (($2) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 * $21;
 HEAPF32[$22>>2] = $24;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish4Vec4mIERKS0_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 - $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 - $15;
 HEAPF32[$16>>2] = $18;
 $19 = $1;
 $20 = (($19) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (($2) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 - $21;
 HEAPF32[$22>>2] = $24;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish4Vec3C2Efff($this,$x,$y,$z) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = $2;
 $7 = (($4) + 4|0);
 HEAPF32[$7>>2] = $6;
 $8 = $3;
 $9 = (($4) + 8|0);
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN6squish17WriteColourBlock3ERKNS_4Vec3ES2_PKhPv($start,$end,$indices,$block) {
 $start = $start|0;
 $end = $end|0;
 $indices = $indices|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, $a = 0, $b = 0, $i = 0, $i1 = 0, $remapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 32|0;
 $a = sp + 12|0;
 $b = sp + 8|0;
 $remapped = sp + 56|0;
 $5 = $start;
 $6 = $end;
 $7 = $indices;
 $8 = $block;
 $9 = $5;
 $10 = (__ZN6squishL10FloatTo565ERKNS_4Vec3E($9)|0);
 HEAP32[$a>>2] = $10;
 $11 = $6;
 $12 = (__ZN6squishL10FloatTo565ERKNS_4Vec3E($11)|0);
 HEAP32[$b>>2] = $12;
 $13 = HEAP32[$a>>2]|0;
 $14 = HEAP32[$b>>2]|0;
 $15 = ($13|0)<=($14|0);
 if ($15) {
  $i = 0;
  while(1) {
   $16 = $i;
   $17 = ($16|0)<(16);
   if (!($17)) {
    break;
   }
   $18 = $i;
   $19 = $7;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $i;
   $23 = (($remapped) + ($22)|0);
   HEAP8[$23>>0] = $21;
   $24 = $i;
   $25 = (($24) + 1)|0;
   $i = $25;
  }
  $62 = HEAP32[$a>>2]|0;
  $63 = HEAP32[$b>>2]|0;
  $64 = $8;
  __ZN6squishL16WriteColourBlockEiiPhPv($62,$63,$remapped,$64);
  STACKTOP = sp;return;
 }
 $3 = $a;
 $4 = $b;
 $26 = $3;
 $2 = $26;
 $27 = $2;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$__t$i>>2] = $28;
 $29 = $4;
 $0 = $29;
 $30 = $0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $3;
 HEAP32[$32>>2] = $31;
 $1 = $__t$i;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = $4;
 HEAP32[$35>>2] = $34;
 $i1 = 0;
 while(1) {
  $36 = $i1;
  $37 = ($36|0)<(16);
  if (!($37)) {
   break;
  }
  $38 = $i1;
  $39 = $7;
  $40 = (($39) + ($38)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = $i1;
   $45 = (($remapped) + ($44)|0);
   HEAP8[$45>>0] = 1;
  } else {
   $46 = $i1;
   $47 = $7;
   $48 = (($47) + ($46)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)==(1);
   if ($51) {
    $52 = $i1;
    $53 = (($remapped) + ($52)|0);
    HEAP8[$53>>0] = 0;
   } else {
    $54 = $i1;
    $55 = $7;
    $56 = (($55) + ($54)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $i1;
    $59 = (($remapped) + ($58)|0);
    HEAP8[$59>>0] = $57;
   }
  }
  $60 = $i1;
  $61 = (($60) + 1)|0;
  $i1 = $61;
 }
 $62 = HEAP32[$a>>2]|0;
 $63 = HEAP32[$b>>2]|0;
 $64 = $8;
 __ZN6squishL16WriteColourBlockEiiPhPv($62,$63,$remapped,$64);
 STACKTOP = sp;return;
}
function __ZN6squish17WriteColourBlock4ERKNS_4Vec3ES2_PKhPv($start,$end,$indices,$block) {
 $start = $start|0;
 $end = $end|0;
 $indices = $indices|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__t$i = 0, $a = 0, $b = 0, $i = 0, $i1 = 0, $i2 = 0, $remapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 36|0;
 $a = sp + 16|0;
 $b = sp + 12|0;
 $remapped = sp + 64|0;
 $5 = $start;
 $6 = $end;
 $7 = $indices;
 $8 = $block;
 $9 = $5;
 $10 = (__ZN6squishL10FloatTo565ERKNS_4Vec3E($9)|0);
 HEAP32[$a>>2] = $10;
 $11 = $6;
 $12 = (__ZN6squishL10FloatTo565ERKNS_4Vec3E($11)|0);
 HEAP32[$b>>2] = $12;
 $13 = HEAP32[$a>>2]|0;
 $14 = HEAP32[$b>>2]|0;
 $15 = ($13|0)<($14|0);
 if ($15) {
  $3 = $a;
  $4 = $b;
  $16 = $3;
  $2 = $16;
  $17 = $2;
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$__t$i>>2] = $18;
  $19 = $4;
  $0 = $19;
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  HEAP32[$22>>2] = $21;
  $1 = $__t$i;
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  HEAP32[$25>>2] = $24;
  $i = 0;
  while(1) {
   $26 = $i;
   $27 = ($26|0)<(16);
   if (!($27)) {
    break;
   }
   $28 = $i;
   $29 = $7;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 ^ 1;
   $34 = $33 & 3;
   $35 = $34&255;
   $36 = $i;
   $37 = (($remapped) + ($36)|0);
   HEAP8[$37>>0] = $35;
   $38 = $i;
   $39 = (($38) + 1)|0;
   $i = $39;
  }
  $59 = HEAP32[$a>>2]|0;
  $60 = HEAP32[$b>>2]|0;
  $61 = $8;
  __ZN6squishL16WriteColourBlockEiiPhPv($59,$60,$remapped,$61);
  STACKTOP = sp;return;
 }
 $40 = HEAP32[$a>>2]|0;
 $41 = HEAP32[$b>>2]|0;
 $42 = ($40|0)==($41|0);
 if ($42) {
  $i1 = 0;
  while(1) {
   $43 = $i1;
   $44 = ($43|0)<(16);
   if (!($44)) {
    break;
   }
   $45 = $i1;
   $46 = (($remapped) + ($45)|0);
   HEAP8[$46>>0] = 0;
   $47 = $i1;
   $48 = (($47) + 1)|0;
   $i1 = $48;
  }
 } else {
  $i2 = 0;
  while(1) {
   $49 = $i2;
   $50 = ($49|0)<(16);
   if (!($50)) {
    break;
   }
   $51 = $i2;
   $52 = $7;
   $53 = (($52) + ($51)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $i2;
   $56 = (($remapped) + ($55)|0);
   HEAP8[$56>>0] = $54;
   $57 = $i2;
   $58 = (($57) + 1)|0;
   $i2 = $58;
  }
 }
 $59 = HEAP32[$a>>2]|0;
 $60 = HEAP32[$b>>2]|0;
 $61 = $8;
 __ZN6squishL16WriteColourBlockEiiPhPv($59,$60,$remapped,$61);
 STACKTOP = sp;return;
}
function __ZN6squishL10FloatTo565ERKNS_4Vec3E($colour) {
 $colour = $colour|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var $b = 0, $g = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $colour;
 $1 = $0;
 $2 = (+__ZNK6squish4Vec31XEv($1));
 $3 = 31.0 * $2;
 $4 = (__ZN6squishL10FloatToIntEfi5($3,31)|0);
 $r = $4;
 $5 = $0;
 $6 = (+__ZNK6squish4Vec31YEv($5));
 $7 = 63.0 * $6;
 $8 = (__ZN6squishL10FloatToIntEfi5($7,63)|0);
 $g = $8;
 $9 = $0;
 $10 = (+__ZNK6squish4Vec31ZEv($9));
 $11 = 31.0 * $10;
 $12 = (__ZN6squishL10FloatToIntEfi5($11,31)|0);
 $b = $12;
 $13 = $r;
 $14 = $13 << 11;
 $15 = $g;
 $16 = $15 << 5;
 $17 = $14 | $16;
 $18 = $b;
 $19 = $17 | $18;
 STACKTOP = sp;return ($19|0);
}
function __ZN6squishL16WriteColourBlockEiiPhPv($a,$b,$indices,$block) {
 $a = $a|0;
 $b = $b|0;
 $indices = $indices|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0;
 var $ind = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $indices;
 $3 = $block;
 $4 = $3;
 $bytes = $4;
 $5 = $0;
 $6 = $5 & 255;
 $7 = $6&255;
 $8 = $bytes;
 HEAP8[$8>>0] = $7;
 $9 = $0;
 $10 = $9 >> 8;
 $11 = $10&255;
 $12 = $bytes;
 $13 = (($12) + 1|0);
 HEAP8[$13>>0] = $11;
 $14 = $1;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $bytes;
 $18 = (($17) + 2|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = $19 >> 8;
 $21 = $20&255;
 $22 = $bytes;
 $23 = (($22) + 3|0);
 HEAP8[$23>>0] = $21;
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(4);
  if (!($25)) {
   break;
  }
  $26 = $2;
  $27 = $i;
  $28 = $27<<2;
  $29 = (($26) + ($28)|0);
  $ind = $29;
  $30 = $ind;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $ind;
  $34 = (($33) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 << 2;
  $38 = $32 | $37;
  $39 = $ind;
  $40 = (($39) + 2|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $42 << 4;
  $44 = $38 | $43;
  $45 = $ind;
  $46 = (($45) + 3|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 6;
  $50 = $44 | $49;
  $51 = $50&255;
  $52 = $i;
  $53 = (4 + ($52))|0;
  $54 = $bytes;
  $55 = (($54) + ($53)|0);
  HEAP8[$55>>0] = $51;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 STACKTOP = sp;return;
}
function __ZN6squishL10FloatToIntEfi5($a,$limit) {
 $a = +$a;
 $limit = $limit|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $limit;
 $2 = $0;
 $3 = $2 + 0.5;
 $4 = (~~(($3)));
 $i = $4;
 $5 = $i;
 $6 = ($5|0)<(0);
 if ($6) {
  $i = 0;
  $11 = $i;
  STACKTOP = sp;return ($11|0);
 }
 $7 = $i;
 $8 = $1;
 $9 = ($7|0)>($8|0);
 if ($9) {
  $10 = $1;
  $i = $10;
 }
 $11 = $i;
 STACKTOP = sp;return ($11|0);
}
function __ZN6squish9ColourFitC2EPKNS_9ColourSetEi($this,$colours,$flags) {
 $this = $this|0;
 $colours = $colours|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $colours;
 $2 = $flags;
 $3 = $0;
 $4 = (96 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 4|0);
 $6 = $1;
 HEAP32[$5>>2] = $6;
 $7 = (($3) + 8|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN6squish9ColourFit8CompressEPv($this,$block) {
 $this = $this|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isDxt1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $block;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 $isDxt1 = $7;
 $8 = $isDxt1;
 $9 = $8&1;
 if (!($9)) {
  $20 = HEAP32[$2>>2]|0;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $1;
  FUNCTION_TABLE_vii[$22 & 1023]($2,$23);
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 FUNCTION_TABLE_vii[$11 & 1023]($2,$12);
 $13 = (($2) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZNK6squish9ColourSet13IsTransparentEv($14)|0);
 if (!($15)) {
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  FUNCTION_TABLE_vii[$18 & 1023]($2,$19);
 }
 STACKTOP = sp;return;
}
function __ZNK6squish9ColourSet13IsTransparentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 324|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZN6squish9ColourSetC2EPKhii($this,$rgba,$mask,$flags) {
 $this = $this|0;
 $rgba = $rgba|0;
 $mask = $mask|0;
 $flags = $flags|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $i = 0, $i2 = 0, $index = 0, $isDxt1 = 0, $j = 0, $match = 0, $oldbit = 0, $w = 0.0;
 var $w1 = 0.0, $weightByAlpha = 0, $x = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $1 = $this;
 $2 = $rgba;
 $3 = $mask;
 $4 = $flags;
 $6 = $1;
 HEAP32[$6>>2] = 0;
 $7 = (($6) + 4|0);
 $8 = (($7) + 192|0);
 $9 = $7;
 while(1) {
  __ZN6squish4Vec3C2Ev($9);
  $10 = (($9) + 12|0);
  $11 = ($10|0)==($8|0);
  if ($11) {
   break;
  } else {
   $9 = $10;
  }
 }
 $12 = (($6) + 324|0);
 HEAP8[$12>>0] = 0;
 $13 = $4;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 $16 = $15&1;
 $isDxt1 = $16;
 $17 = $4;
 $18 = $17 & 128;
 $19 = ($18|0)!=(0);
 $20 = $19&1;
 $weightByAlpha = $20;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = ($21|0)<(16);
  if (!($22)) {
   break;
  }
  $23 = $i;
  $24 = 1 << $23;
  $bit = $24;
  $25 = $3;
  $26 = $bit;
  $27 = $25 & $26;
  $28 = ($27|0)==(0);
  do {
   if ($28) {
    $29 = $i;
    $30 = (($6) + 260|0);
    $31 = (($30) + ($29<<2)|0);
    HEAP32[$31>>2] = -1;
   } else {
    $32 = $isDxt1;
    $33 = $32&1;
    if ($33) {
     $34 = $i;
     $35 = $34<<2;
     $36 = (($35) + 3)|0;
     $37 = $2;
     $38 = (($37) + ($36)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)<(128);
     if ($41) {
      $42 = $i;
      $43 = (($6) + 260|0);
      $44 = (($43) + ($42<<2)|0);
      HEAP32[$44>>2] = -1;
      $45 = (($6) + 324|0);
      HEAP8[$45>>0] = 1;
      break;
     }
    }
    $j = 0;
    while(1) {
     $46 = $j;
     $47 = $i;
     $48 = ($46|0)==($47|0);
     if ($48) {
      label = 12;
      break;
     }
     $101 = $j;
     $102 = 1 << $101;
     $oldbit = $102;
     $103 = $3;
     $104 = $oldbit;
     $105 = $103 & $104;
     $106 = ($105|0)!=(0);
     if ($106) {
      $107 = $i;
      $108 = $107<<2;
      $109 = $2;
      $110 = (($109) + ($108)|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111&255;
      $113 = $j;
      $114 = $113<<2;
      $115 = $2;
      $116 = (($115) + ($114)|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = ($112|0)==($118|0);
      if ($119) {
       $120 = $i;
       $121 = $120<<2;
       $122 = (($121) + 1)|0;
       $123 = $2;
       $124 = (($123) + ($122)|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = $125&255;
       $127 = $j;
       $128 = $127<<2;
       $129 = (($128) + 1)|0;
       $130 = $2;
       $131 = (($130) + ($129)|0);
       $132 = HEAP8[$131>>0]|0;
       $133 = $132&255;
       $134 = ($126|0)==($133|0);
       if ($134) {
        $135 = $i;
        $136 = $135<<2;
        $137 = (($136) + 2)|0;
        $138 = $2;
        $139 = (($138) + ($137)|0);
        $140 = HEAP8[$139>>0]|0;
        $141 = $140&255;
        $142 = $j;
        $143 = $142<<2;
        $144 = (($143) + 2)|0;
        $145 = $2;
        $146 = (($145) + ($144)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($141|0)==($148|0);
        if ($149) {
         $150 = $j;
         $151 = $150<<2;
         $152 = (($151) + 3)|0;
         $153 = $2;
         $154 = (($153) + ($152)|0);
         $155 = HEAP8[$154>>0]|0;
         $156 = $155&255;
         $157 = ($156|0)>=(128);
         if ($157) {
          $210 = 1;
         } else {
          $158 = $isDxt1;
          $159 = $158&1;
          $160 = $159 ^ 1;
          $210 = $160;
         }
         $162 = $210;
        } else {
         $162 = 0;
        }
       } else {
        $162 = 0;
       }
      } else {
       $162 = 0;
      }
     } else {
      $162 = 0;
     }
     $161 = $162&1;
     $match = $161;
     $163 = $match;
     $164 = $163&1;
     if ($164) {
      label = 24;
      break;
     }
     $192 = $j;
     $193 = (($192) + 1)|0;
     $j = $193;
    }
    if ((label|0) == 12) {
     label = 0;
     $49 = $i;
     $50 = $49<<2;
     $51 = $2;
     $52 = (($51) + ($50)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = (+($53&255));
     $55 = $54 / 255.0;
     $x = $55;
     $56 = $i;
     $57 = $56<<2;
     $58 = (($57) + 1)|0;
     $59 = $2;
     $60 = (($59) + ($58)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = (+($61&255));
     $63 = $62 / 255.0;
     $y = $63;
     $64 = $i;
     $65 = $64<<2;
     $66 = (($65) + 2)|0;
     $67 = $2;
     $68 = (($67) + ($66)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = (+($69&255));
     $71 = $70 / 255.0;
     $z = $71;
     $72 = $i;
     $73 = $72<<2;
     $74 = (($73) + 3)|0;
     $75 = $2;
     $76 = (($75) + ($74)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = (($78) + 1)|0;
     $80 = (+($79|0));
     $81 = $80 / 256.0;
     $w = $81;
     $82 = HEAP32[$6>>2]|0;
     $83 = (($6) + 4|0);
     $84 = (($83) + (($82*12)|0)|0);
     $85 = $x;
     $86 = $y;
     $87 = $z;
     __ZN6squish4Vec3C2Efff($5,$85,$86,$87);
     ;HEAP32[$84+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$5+8>>2]|0;
     $88 = $weightByAlpha;
     $89 = $88&1;
     if ($89) {
      $90 = $w;
      $94 = $90;
     } else {
      $94 = 1.0;
     }
     $91 = HEAP32[$6>>2]|0;
     $92 = (($6) + 196|0);
     $93 = (($92) + ($91<<2)|0);
     HEAPF32[$93>>2] = $94;
     $95 = HEAP32[$6>>2]|0;
     $96 = $i;
     $97 = (($6) + 260|0);
     $98 = (($97) + ($96<<2)|0);
     HEAP32[$98>>2] = $95;
     $99 = HEAP32[$6>>2]|0;
     $100 = (($99) + 1)|0;
     HEAP32[$6>>2] = $100;
    }
    else if ((label|0) == 24) {
     label = 0;
     $165 = $j;
     $166 = (($6) + 260|0);
     $167 = (($166) + ($165<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $index = $168;
     $169 = $i;
     $170 = $169<<2;
     $171 = (($170) + 3)|0;
     $172 = $2;
     $173 = (($172) + ($171)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = (($175) + 1)|0;
     $177 = (+($176|0));
     $178 = $177 / 256.0;
     $w1 = $178;
     $179 = $weightByAlpha;
     $180 = $179&1;
     if ($180) {
      $181 = $w1;
      $187 = $181;
     } else {
      $187 = 1.0;
     }
     $182 = $index;
     $183 = (($6) + 196|0);
     $184 = (($183) + ($182<<2)|0);
     $185 = +HEAPF32[$184>>2];
     $186 = $185 + $187;
     HEAPF32[$184>>2] = $186;
     $188 = $index;
     $189 = $i;
     $190 = (($6) + 260|0);
     $191 = (($190) + ($189<<2)|0);
     HEAP32[$191>>2] = $188;
    }
   }
  } while(0);
  $194 = $i;
  $195 = (($194) + 1)|0;
  $i = $195;
 }
 $i2 = 0;
 while(1) {
  $196 = $i2;
  $197 = HEAP32[$6>>2]|0;
  $198 = ($196|0)<($197|0);
  if (!($198)) {
   break;
  }
  $199 = $i2;
  $200 = (($6) + 196|0);
  $201 = (($200) + ($199<<2)|0);
  $202 = +HEAPF32[$201>>2];
  $0 = $202;
  $203 = $0;
  $204 = (+Math_sqrt((+$203)));
  $205 = $i2;
  $206 = (($6) + 196|0);
  $207 = (($206) + ($205<<2)|0);
  HEAPF32[$207>>2] = $204;
  $208 = $i2;
  $209 = (($208) + 1)|0;
  $i2 = $209;
 }
 STACKTOP = sp;return;
}
function __ZNK6squish9ColourSet12RemapIndicesEPKhPh($this,$source,$target) {
 $this = $this|0;
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $source;
 $2 = $target;
 $3 = $0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(16);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($3) + 260|0);
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $j = $9;
  $10 = $j;
  $11 = ($10|0)==(-1);
  if ($11) {
   $12 = $i;
   $13 = $2;
   $14 = (($13) + ($12)|0);
   HEAP8[$14>>0] = 3;
  } else {
   $15 = $j;
   $16 = $1;
   $17 = (($16) + ($15)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $i;
   $20 = $2;
   $21 = (($20) + ($19)|0);
   HEAP8[$21>>0] = $18;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 STACKTOP = sp;return;
}
function __ZN6squish25ComputeWeightedCovarianceEiPKNS_4Vec3EPKf($agg$result,$n,$points,$weights) {
 $agg$result = $agg$result|0;
 $n = $n|0;
 $points = $points|0;
 $weights = $weights|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $centroid = 0, $i = 0, $i1 = 0, $total = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $centroid = sp + 44|0;
 $3 = sp + 28|0;
 $a = sp + 12|0;
 $b = sp;
 $0 = $n;
 $1 = $points;
 $2 = $weights;
 $total = 0.0;
 __ZN6squish4Vec3C2Ef($centroid,0.0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $2;
  $9 = (($8) + ($7<<2)|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $total;
  $12 = $11 + $10;
  $total = $12;
  $13 = $i;
  $14 = $2;
  $15 = (($14) + ($13<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $i;
  $18 = $1;
  $19 = (($18) + (($17*12)|0)|0);
  __ZN6squishmlEfRKNS_4Vec3E($3,$16,$19);
  (__ZN6squish4Vec3pLERKS0_($centroid,$3)|0);
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = $total;
 (__ZN6squish4Vec3dVEf($centroid,$22)|0);
 __ZN6squish6Sym3x3C2Ef($agg$result,0.0);
 $i1 = 0;
 while(1) {
  $23 = $i1;
  $24 = $0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $i1;
  $27 = $1;
  $28 = (($27) + (($26*12)|0)|0);
  __ZN6squishmiERKNS_4Vec3ES2_($a,$28,$centroid);
  $29 = $i1;
  $30 = $2;
  $31 = (($30) + ($29<<2)|0);
  $32 = +HEAPF32[$31>>2];
  __ZN6squishmlEfRKNS_4Vec3E($b,$32,$a);
  $33 = (+__ZNK6squish4Vec31XEv($a));
  $34 = (+__ZNK6squish4Vec31XEv($b));
  $35 = $33 * $34;
  $36 = (__ZN6squish6Sym3x3ixEi($agg$result,0)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 + $35;
  HEAPF32[$36>>2] = $38;
  $39 = (+__ZNK6squish4Vec31XEv($a));
  $40 = (+__ZNK6squish4Vec31YEv($b));
  $41 = $39 * $40;
  $42 = (__ZN6squish6Sym3x3ixEi($agg$result,1)|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $43 + $41;
  HEAPF32[$42>>2] = $44;
  $45 = (+__ZNK6squish4Vec31XEv($a));
  $46 = (+__ZNK6squish4Vec31ZEv($b));
  $47 = $45 * $46;
  $48 = (__ZN6squish6Sym3x3ixEi($agg$result,2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49 + $47;
  HEAPF32[$48>>2] = $50;
  $51 = (+__ZNK6squish4Vec31YEv($a));
  $52 = (+__ZNK6squish4Vec31YEv($b));
  $53 = $51 * $52;
  $54 = (__ZN6squish6Sym3x3ixEi($agg$result,3)|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $55 + $53;
  HEAPF32[$54>>2] = $56;
  $57 = (+__ZNK6squish4Vec31YEv($a));
  $58 = (+__ZNK6squish4Vec31ZEv($b));
  $59 = $57 * $58;
  $60 = (__ZN6squish6Sym3x3ixEi($agg$result,4)|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $61 + $59;
  HEAPF32[$60>>2] = $62;
  $63 = (+__ZNK6squish4Vec31ZEv($a));
  $64 = (+__ZNK6squish4Vec31ZEv($b));
  $65 = $63 * $64;
  $66 = (__ZN6squish6Sym3x3ixEi($agg$result,5)|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $67 + $65;
  HEAPF32[$66>>2] = $68;
  $69 = $i1;
  $70 = (($69) + 1)|0;
  $i1 = $70;
 }
 STACKTOP = sp;return;
}
function __ZN6squish25ComputePrincipleComponentERKNS_6Sym3x3E($agg$result,$matrix) {
 $agg$result = $agg$result|0;
 $matrix = $matrix|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $Q = 0.0, $a = 0.0, $b = 0.0, $c0 = 0.0, $c1 = 0.0, $c2 = 0.0, $ct = 0.0, $l1 = 0.0, $l12 = 0.0, $l2 = 0.0;
 var $l23 = 0.0, $l3 = 0.0, $rho = 0.0, $rt = 0.0, $rt1 = 0.0, $st = 0.0, $theta = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $matrix;
 $19 = $18;
 $20 = (+__ZNK6squish6Sym3x3ixEi($19,0));
 $21 = $18;
 $22 = (+__ZNK6squish6Sym3x3ixEi($21,3));
 $23 = $20 * $22;
 $24 = $18;
 $25 = (+__ZNK6squish6Sym3x3ixEi($24,5));
 $26 = $23 * $25;
 $27 = $18;
 $28 = (+__ZNK6squish6Sym3x3ixEi($27,1));
 $29 = 2.0 * $28;
 $30 = $18;
 $31 = (+__ZNK6squish6Sym3x3ixEi($30,2));
 $32 = $29 * $31;
 $33 = $18;
 $34 = (+__ZNK6squish6Sym3x3ixEi($33,4));
 $35 = $32 * $34;
 $36 = $26 + $35;
 $37 = $18;
 $38 = (+__ZNK6squish6Sym3x3ixEi($37,0));
 $39 = $18;
 $40 = (+__ZNK6squish6Sym3x3ixEi($39,4));
 $41 = $38 * $40;
 $42 = $18;
 $43 = (+__ZNK6squish6Sym3x3ixEi($42,4));
 $44 = $41 * $43;
 $45 = $36 - $44;
 $46 = $18;
 $47 = (+__ZNK6squish6Sym3x3ixEi($46,3));
 $48 = $18;
 $49 = (+__ZNK6squish6Sym3x3ixEi($48,2));
 $50 = $47 * $49;
 $51 = $18;
 $52 = (+__ZNK6squish6Sym3x3ixEi($51,2));
 $53 = $50 * $52;
 $54 = $45 - $53;
 $55 = $18;
 $56 = (+__ZNK6squish6Sym3x3ixEi($55,5));
 $57 = $18;
 $58 = (+__ZNK6squish6Sym3x3ixEi($57,1));
 $59 = $56 * $58;
 $60 = $18;
 $61 = (+__ZNK6squish6Sym3x3ixEi($60,1));
 $62 = $59 * $61;
 $63 = $54 - $62;
 $c0 = $63;
 $64 = $18;
 $65 = (+__ZNK6squish6Sym3x3ixEi($64,0));
 $66 = $18;
 $67 = (+__ZNK6squish6Sym3x3ixEi($66,3));
 $68 = $65 * $67;
 $69 = $18;
 $70 = (+__ZNK6squish6Sym3x3ixEi($69,0));
 $71 = $18;
 $72 = (+__ZNK6squish6Sym3x3ixEi($71,5));
 $73 = $70 * $72;
 $74 = $68 + $73;
 $75 = $18;
 $76 = (+__ZNK6squish6Sym3x3ixEi($75,3));
 $77 = $18;
 $78 = (+__ZNK6squish6Sym3x3ixEi($77,5));
 $79 = $76 * $78;
 $80 = $74 + $79;
 $81 = $18;
 $82 = (+__ZNK6squish6Sym3x3ixEi($81,1));
 $83 = $18;
 $84 = (+__ZNK6squish6Sym3x3ixEi($83,1));
 $85 = $82 * $84;
 $86 = $80 - $85;
 $87 = $18;
 $88 = (+__ZNK6squish6Sym3x3ixEi($87,2));
 $89 = $18;
 $90 = (+__ZNK6squish6Sym3x3ixEi($89,2));
 $91 = $88 * $90;
 $92 = $86 - $91;
 $93 = $18;
 $94 = (+__ZNK6squish6Sym3x3ixEi($93,4));
 $95 = $18;
 $96 = (+__ZNK6squish6Sym3x3ixEi($95,4));
 $97 = $94 * $96;
 $98 = $92 - $97;
 $c1 = $98;
 $99 = $18;
 $100 = (+__ZNK6squish6Sym3x3ixEi($99,0));
 $101 = $18;
 $102 = (+__ZNK6squish6Sym3x3ixEi($101,3));
 $103 = $100 + $102;
 $104 = $18;
 $105 = (+__ZNK6squish6Sym3x3ixEi($104,5));
 $106 = $103 + $105;
 $c2 = $106;
 $107 = $c1;
 $108 = $c2;
 $109 = 0.3333333432674408 * $108;
 $110 = $c2;
 $111 = $109 * $110;
 $112 = $107 - $111;
 $a = $112;
 $113 = $c2;
 $114 = -0.074074074625968933 * $113;
 $115 = $c2;
 $116 = $114 * $115;
 $117 = $c2;
 $118 = $116 * $117;
 $119 = $c1;
 $120 = 0.3333333432674408 * $119;
 $121 = $c2;
 $122 = $120 * $121;
 $123 = $118 + $122;
 $124 = $c0;
 $125 = $123 - $124;
 $b = $125;
 $126 = $b;
 $127 = 0.25 * $126;
 $128 = $b;
 $129 = $127 * $128;
 $130 = $a;
 $131 = 0.037037037312984467 * $130;
 $132 = $a;
 $133 = $131 * $132;
 $134 = $a;
 $135 = $133 * $134;
 $136 = $129 + $135;
 $Q = $136;
 $137 = $Q;
 $138 = 1.1920928955078125E-7 < $137;
 if ($138) {
  __ZN6squish4Vec3C2Ef($agg$result,1.0);
  STACKTOP = sp;return;
 }
 $139 = $Q;
 $140 = $139 < -1.1920928955078125E-7;
 if ($140) {
  $141 = $Q;
  $142 = -$141;
  $17 = $142;
  $143 = $17;
  $144 = (+Math_sqrt((+$143)));
  $145 = $b;
  $146 = -0.5 * $145;
  $15 = $144;
  $16 = $146;
  $147 = $15;
  $148 = $16;
  $149 = (+Math_atan2((+$147),(+$148)));
  $theta = $149;
  $150 = $b;
  $151 = 0.25 * $150;
  $152 = $b;
  $153 = $151 * $152;
  $154 = $Q;
  $155 = $153 - $154;
  $14 = $155;
  $156 = $14;
  $157 = (+Math_sqrt((+$156)));
  $rho = $157;
  $158 = $rho;
  $12 = $158;
  $13 = 0.3333333432674408;
  $159 = $12;
  $160 = $13;
  $161 = (+Math_pow((+$159),(+$160)));
  $rt = $161;
  $162 = $theta;
  $163 = $162 / 3.0;
  $11 = $163;
  $164 = $11;
  $165 = (+Math_cos((+$164)));
  $ct = $165;
  $166 = $theta;
  $167 = $166 / 3.0;
  $10 = $167;
  $168 = $10;
  $169 = (+Math_sin((+$168)));
  $st = $169;
  $170 = $c2;
  $171 = 0.3333333432674408 * $170;
  $172 = $rt;
  $173 = 2.0 * $172;
  $174 = $ct;
  $175 = $173 * $174;
  $176 = $171 + $175;
  $l1 = $176;
  $177 = $c2;
  $178 = 0.3333333432674408 * $177;
  $179 = $rt;
  $180 = $ct;
  $181 = (+Math_sqrt(3.0));
  $182 = $181;
  $183 = $st;
  $184 = $182 * $183;
  $185 = $180 + $184;
  $186 = $179 * $185;
  $187 = $178 - $186;
  $l2 = $187;
  $188 = $c2;
  $189 = 0.3333333432674408 * $188;
  $190 = $rt;
  $191 = $ct;
  $192 = (+Math_sqrt(3.0));
  $193 = $192;
  $194 = $st;
  $195 = $193 * $194;
  $196 = $191 - $195;
  $197 = $190 * $196;
  $198 = $189 - $197;
  $l3 = $198;
  $199 = $l2;
  $9 = $199;
  $200 = $9;
  $201 = (+Math_abs((+$200)));
  $202 = $l1;
  $8 = $202;
  $203 = $8;
  $204 = (+Math_abs((+$203)));
  $205 = $201 > $204;
  if ($205) {
   $206 = $l2;
   $l1 = $206;
  }
  $207 = $l3;
  $7 = $207;
  $208 = $7;
  $209 = (+Math_abs((+$208)));
  $210 = $l1;
  $6 = $210;
  $211 = $6;
  $212 = (+Math_abs((+$211)));
  $213 = $209 > $212;
  if ($213) {
   $214 = $l3;
   $l1 = $214;
  }
  $215 = $18;
  $216 = $l1;
  __ZN6squishL23GetMultiplicity1EvectorERKNS_6Sym3x3Ef($agg$result,$215,$216);
  STACKTOP = sp;return;
 }
 $217 = $b;
 $218 = $217 < 0.0;
 if ($218) {
  $219 = $b;
  $220 = -0.5 * $219;
  $4 = $220;
  $5 = 0.3333333432674408;
  $221 = $4;
  $222 = $5;
  $223 = (+Math_pow((+$221),(+$222)));
  $224 = -$223;
  $rt1 = $224;
 } else {
  $225 = $b;
  $226 = 0.5 * $225;
  $2 = $226;
  $3 = 0.3333333432674408;
  $227 = $2;
  $228 = $3;
  $229 = (+Math_pow((+$227),(+$228)));
  $rt1 = $229;
 }
 $230 = $c2;
 $231 = 0.3333333432674408 * $230;
 $232 = $rt1;
 $233 = $231 + $232;
 $l12 = $233;
 $234 = $c2;
 $235 = 0.3333333432674408 * $234;
 $236 = $rt1;
 $237 = 2.0 * $236;
 $238 = $235 - $237;
 $l23 = $238;
 $239 = $l12;
 $0 = $239;
 $240 = $0;
 $241 = (+Math_abs((+$240)));
 $242 = $l23;
 $1 = $242;
 $243 = $1;
 $244 = (+Math_abs((+$243)));
 $245 = $241 > $244;
 if ($245) {
  $246 = $18;
  $247 = $l12;
  __ZN6squishL23GetMultiplicity2EvectorERKNS_6Sym3x3Ef($agg$result,$246,$247);
  STACKTOP = sp;return;
 } else {
  $248 = $18;
  $249 = $l23;
  __ZN6squishL23GetMultiplicity1EvectorERKNS_6Sym3x3Ef($agg$result,$248,$249);
  STACKTOP = sp;return;
 }
}
function __ZN6squish4Vec3C2Ef($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 HEAPF32[$2>>2] = $3;
 $4 = $1;
 $5 = (($2) + 4|0);
 HEAPF32[$5>>2] = $4;
 $6 = $1;
 $7 = (($2) + 8|0);
 HEAPF32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN6squishmlEfRKNS_4Vec3E($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = +$left;
 $right = $right|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp;
 $0 = $left;
 $1 = $right;
 $2 = $1;
 ;HEAP32[$copy+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$copy+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = $0;
 $4 = (__ZN6squish4Vec3mLEf($copy,$3)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish4Vec3pLERKS0_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 + $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 + $9;
 HEAPF32[$10>>2] = $12;
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 + $15;
 HEAPF32[$16>>2] = $18;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish4Vec3dVEf($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = 1.0 / $3;
 $t = $4;
 $5 = $t;
 $6 = +HEAPF32[$2>>2];
 $7 = $6 * $5;
 HEAPF32[$2>>2] = $7;
 $8 = $t;
 $9 = (($2) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10 * $8;
 HEAPF32[$9>>2] = $11;
 $12 = $t;
 $13 = (($2) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14 * $12;
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish6Sym3x3C2Ef($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(6);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = $i;
  $7 = (($2) + ($6<<2)|0);
  HEAPF32[$7>>2] = $5;
  $8 = $i;
  $9 = (($8) + 1)|0;
  $i = $9;
 }
 STACKTOP = sp;return;
}
function __ZN6squishmiERKNS_4Vec3ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp;
 $0 = $left;
 $1 = $right;
 $2 = $0;
 ;HEAP32[$copy+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$copy+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = $1;
 $4 = (__ZN6squish4Vec3mIERKS0_($copy,$3)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish6Sym3x3ixEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3<<2)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK6squish6Sym3x3ixEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3<<2)|0);
 $5 = +HEAPF32[$4>>2];
 STACKTOP = sp;return (+$5);
}
function __ZN6squishL23GetMultiplicity1EvectorERKNS_6Sym3x3Ef($agg$result,$matrix,$evalue) {
 $agg$result = $agg$result|0;
 $matrix = $matrix|0;
 $evalue = +$evalue;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $c = 0.0, $i = 0, $m = 0;
 var $mc = 0.0, $mi = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 40|0;
 $u = sp + 16|0;
 $2 = $matrix;
 $3 = $evalue;
 __ZN6squish6Sym3x3C2Ev($m);
 $4 = $2;
 $5 = (+__ZNK6squish6Sym3x3ixEi($4,0));
 $6 = $3;
 $7 = $5 - $6;
 $8 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
 HEAPF32[$8>>2] = $7;
 $9 = $2;
 $10 = (+__ZNK6squish6Sym3x3ixEi($9,1));
 $11 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
 HEAPF32[$11>>2] = $10;
 $12 = $2;
 $13 = (+__ZNK6squish6Sym3x3ixEi($12,2));
 $14 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
 HEAPF32[$14>>2] = $13;
 $15 = $2;
 $16 = (+__ZNK6squish6Sym3x3ixEi($15,3));
 $17 = $3;
 $18 = $16 - $17;
 $19 = (__ZN6squish6Sym3x3ixEi($m,3)|0);
 HEAPF32[$19>>2] = $18;
 $20 = $2;
 $21 = (+__ZNK6squish6Sym3x3ixEi($20,4));
 $22 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
 HEAPF32[$22>>2] = $21;
 $23 = $2;
 $24 = (+__ZNK6squish6Sym3x3ixEi($23,5));
 $25 = $3;
 $26 = $24 - $25;
 $27 = (__ZN6squish6Sym3x3ixEi($m,5)|0);
 HEAPF32[$27>>2] = $26;
 __ZN6squish6Sym3x3C2Ev($u);
 $28 = (__ZN6squish6Sym3x3ixEi($m,3)|0);
 $29 = +HEAPF32[$28>>2];
 $30 = (__ZN6squish6Sym3x3ixEi($m,5)|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $29 * $31;
 $33 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
 $34 = +HEAPF32[$33>>2];
 $35 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $34 * $36;
 $38 = $32 - $37;
 $39 = (__ZN6squish6Sym3x3ixEi($u,0)|0);
 HEAPF32[$39>>2] = $38;
 $40 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
 $41 = +HEAPF32[$40>>2];
 $42 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $41 * $43;
 $45 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
 $46 = +HEAPF32[$45>>2];
 $47 = (__ZN6squish6Sym3x3ixEi($m,5)|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $46 * $48;
 $50 = $44 - $49;
 $51 = (__ZN6squish6Sym3x3ixEi($u,1)|0);
 HEAPF32[$51>>2] = $50;
 $52 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
 $53 = +HEAPF32[$52>>2];
 $54 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $53 * $55;
 $57 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
 $58 = +HEAPF32[$57>>2];
 $59 = (__ZN6squish6Sym3x3ixEi($m,3)|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $58 * $60;
 $62 = $56 - $61;
 $63 = (__ZN6squish6Sym3x3ixEi($u,2)|0);
 HEAPF32[$63>>2] = $62;
 $64 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
 $65 = +HEAPF32[$64>>2];
 $66 = (__ZN6squish6Sym3x3ixEi($m,5)|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $65 * $67;
 $69 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
 $70 = +HEAPF32[$69>>2];
 $71 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $70 * $72;
 $74 = $68 - $73;
 $75 = (__ZN6squish6Sym3x3ixEi($u,3)|0);
 HEAPF32[$75>>2] = $74;
 $76 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
 $77 = +HEAPF32[$76>>2];
 $78 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $77 * $79;
 $81 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
 $82 = +HEAPF32[$81>>2];
 $83 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $82 * $84;
 $86 = $80 - $85;
 $87 = (__ZN6squish6Sym3x3ixEi($u,4)|0);
 HEAPF32[$87>>2] = $86;
 $88 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
 $89 = +HEAPF32[$88>>2];
 $90 = (__ZN6squish6Sym3x3ixEi($m,3)|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $89 * $91;
 $93 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
 $94 = +HEAPF32[$93>>2];
 $95 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $94 * $96;
 $98 = $92 - $97;
 $99 = (__ZN6squish6Sym3x3ixEi($u,5)|0);
 HEAPF32[$99>>2] = $98;
 $100 = (__ZN6squish6Sym3x3ixEi($u,0)|0);
 $101 = +HEAPF32[$100>>2];
 $1 = $101;
 $102 = $1;
 $103 = (+Math_abs((+$102)));
 $mc = $103;
 $mi = 0;
 $i = 1;
 while(1) {
  $104 = $i;
  $105 = ($104|0)<(6);
  if (!($105)) {
   break;
  }
  $106 = $i;
  $107 = (__ZN6squish6Sym3x3ixEi($u,$106)|0);
  $108 = +HEAPF32[$107>>2];
  $0 = $108;
  $109 = $0;
  $110 = (+Math_abs((+$109)));
  $c = $110;
  $111 = $c;
  $112 = $mc;
  $113 = $111 > $112;
  if ($113) {
   $114 = $c;
   $mc = $114;
   $115 = $i;
   $mi = $115;
  }
  $116 = $i;
  $117 = (($116) + 1)|0;
  $i = $117;
 }
 $118 = $mi;
 if ((($118|0) == 0)) {
  $119 = (__ZN6squish6Sym3x3ixEi($u,0)|0);
  $120 = +HEAPF32[$119>>2];
  $121 = (__ZN6squish6Sym3x3ixEi($u,1)|0);
  $122 = +HEAPF32[$121>>2];
  $123 = (__ZN6squish6Sym3x3ixEi($u,2)|0);
  $124 = +HEAPF32[$123>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$120,$122,$124);
  STACKTOP = sp;return;
 } else if ((($118|0) == 3) | (($118|0) == 1)) {
  $125 = (__ZN6squish6Sym3x3ixEi($u,1)|0);
  $126 = +HEAPF32[$125>>2];
  $127 = (__ZN6squish6Sym3x3ixEi($u,3)|0);
  $128 = +HEAPF32[$127>>2];
  $129 = (__ZN6squish6Sym3x3ixEi($u,4)|0);
  $130 = +HEAPF32[$129>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$126,$128,$130);
  STACKTOP = sp;return;
 } else {
  $131 = (__ZN6squish6Sym3x3ixEi($u,2)|0);
  $132 = +HEAPF32[$131>>2];
  $133 = (__ZN6squish6Sym3x3ixEi($u,4)|0);
  $134 = +HEAPF32[$133>>2];
  $135 = (__ZN6squish6Sym3x3ixEi($u,5)|0);
  $136 = +HEAPF32[$135>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$132,$134,$136);
  STACKTOP = sp;return;
 }
}
function __ZN6squishL23GetMultiplicity2EvectorERKNS_6Sym3x3Ef($agg$result,$matrix,$evalue) {
 $agg$result = $agg$result|0;
 $matrix = $matrix|0;
 $evalue = +$evalue;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $c = 0.0, $i = 0, $m = 0, $mc = 0.0, $mi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 16|0;
 $2 = $matrix;
 $3 = $evalue;
 __ZN6squish6Sym3x3C2Ev($m);
 $4 = $2;
 $5 = (+__ZNK6squish6Sym3x3ixEi($4,0));
 $6 = $3;
 $7 = $5 - $6;
 $8 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
 HEAPF32[$8>>2] = $7;
 $9 = $2;
 $10 = (+__ZNK6squish6Sym3x3ixEi($9,1));
 $11 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
 HEAPF32[$11>>2] = $10;
 $12 = $2;
 $13 = (+__ZNK6squish6Sym3x3ixEi($12,2));
 $14 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
 HEAPF32[$14>>2] = $13;
 $15 = $2;
 $16 = (+__ZNK6squish6Sym3x3ixEi($15,3));
 $17 = $3;
 $18 = $16 - $17;
 $19 = (__ZN6squish6Sym3x3ixEi($m,3)|0);
 HEAPF32[$19>>2] = $18;
 $20 = $2;
 $21 = (+__ZNK6squish6Sym3x3ixEi($20,4));
 $22 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
 HEAPF32[$22>>2] = $21;
 $23 = $2;
 $24 = (+__ZNK6squish6Sym3x3ixEi($23,5));
 $25 = $3;
 $26 = $24 - $25;
 $27 = (__ZN6squish6Sym3x3ixEi($m,5)|0);
 HEAPF32[$27>>2] = $26;
 $28 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
 $29 = +HEAPF32[$28>>2];
 $1 = $29;
 $30 = $1;
 $31 = (+Math_abs((+$30)));
 $mc = $31;
 $mi = 0;
 $i = 1;
 while(1) {
  $32 = $i;
  $33 = ($32|0)<(6);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = (__ZN6squish6Sym3x3ixEi($m,$34)|0);
  $36 = +HEAPF32[$35>>2];
  $0 = $36;
  $37 = $0;
  $38 = (+Math_abs((+$37)));
  $c = $38;
  $39 = $c;
  $40 = $mc;
  $41 = $39 > $40;
  if ($41) {
   $42 = $c;
   $mc = $42;
   $43 = $i;
   $mi = $43;
  }
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $mi;
 switch ($46|0) {
 case 4: case 3:  {
  $57 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
  $58 = +HEAPF32[$57>>2];
  $59 = -$58;
  $60 = (__ZN6squish6Sym3x3ixEi($m,3)|0);
  $61 = +HEAPF32[$60>>2];
  __ZN6squish4Vec3C2Efff($agg$result,0.0,$59,$61);
  STACKTOP = sp;return;
  break;
 }
 case 1: case 0:  {
  $47 = (__ZN6squish6Sym3x3ixEi($m,1)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = -$48;
  $50 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
  $51 = +HEAPF32[$50>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$49,$51,0.0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $52 = (__ZN6squish6Sym3x3ixEi($m,2)|0);
  $53 = +HEAPF32[$52>>2];
  $54 = (__ZN6squish6Sym3x3ixEi($m,0)|0);
  $55 = +HEAPF32[$54>>2];
  $56 = -$55;
  __ZN6squish4Vec3C2Efff($agg$result,$53,0.0,$56);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $62 = (__ZN6squish6Sym3x3ixEi($m,5)|0);
  $63 = +HEAPF32[$62>>2];
  $64 = -$63;
  $65 = (__ZN6squish6Sym3x3ixEi($m,4)|0);
  $66 = +HEAPF32[$65>>2];
  __ZN6squish4Vec3C2Efff($agg$result,0.0,$64,$66);
  STACKTOP = sp;return;
 }
 }
}
function __ZN6squish4Vec3mLEf($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$2>>2];
 $5 = $4 * $3;
 HEAPF32[$2>>2] = $5;
 $6 = $1;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $6;
 HEAPF32[$7>>2] = $9;
 $10 = $1;
 $11 = (($2) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 * $10;
 HEAPF32[$11>>2] = $13;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish4Vec3mIERKS0_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 - $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 - $15;
 HEAPF32[$16>>2] = $18;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish6Sym3x3C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN6squish8RangeFitC2EPKNS_9ColourSetEi($this,$colours,$flags) {
 $this = $this|0;
 $colours = $colours|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $count = 0, $covariance = 0, $end = 0, $grid = 0;
 var $gridrcp = 0, $half = 0, $i = 0, $max = 0.0, $min = 0.0, $one = 0, $perceptual = 0, $principle = 0, $start = 0, $val = 0.0, $values = 0, $weights = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 304|0;
 $4 = sp + 292|0;
 $covariance = sp + 256|0;
 $principle = sp + 244|0;
 $start = sp + 232|0;
 $end = sp + 220|0;
 $one = sp + 192|0;
 $zero = sp + 180|0;
 $5 = sp + 168|0;
 $6 = sp + 156|0;
 $7 = sp + 144|0;
 $8 = sp + 132|0;
 $grid = sp + 120|0;
 $gridrcp = sp + 108|0;
 $half = sp + 96|0;
 $9 = sp + 84|0;
 $10 = sp + 72|0;
 $11 = sp + 60|0;
 $12 = sp + 48|0;
 $13 = sp + 36|0;
 $14 = sp + 24|0;
 $15 = sp + 12|0;
 $16 = sp;
 $0 = $this;
 $1 = $colours;
 $2 = $flags;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 __ZN6squish9ColourFitC2EPKNS_9ColourSetEi($17,$18,$19);
 $20 = (112 + 8|0);
 HEAP32[$17>>2] = $20;
 $21 = (($17) + 12|0);
 __ZN6squish4Vec3C2Ev($21);
 $22 = (($17) + 24|0);
 __ZN6squish4Vec3C2Ev($22);
 $23 = (($17) + 36|0);
 __ZN6squish4Vec3C2Ev($23);
 $24 = (($17) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & 32;
 $27 = ($26|0)!=(0);
 $28 = $27&1;
 $perceptual = $28;
 $29 = $perceptual;
 $30 = $29&1;
 if ($30) {
  $31 = (($17) + 12|0);
  __ZN6squish4Vec3C2Efff($3,0.2125999927520752,0.71520000696182251,0.072200000286102295);
  ;HEAP32[$31+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$3+8>>2]|0;
 } else {
  $32 = (($17) + 12|0);
  __ZN6squish4Vec3C2Ef($4,1.0);
  ;HEAP32[$32+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$32+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$4+8>>2]|0;
 }
 $33 = (($17) + 48|0);
 HEAPF32[$33>>2] = 3.4028234663852886E+38;
 $34 = (($17) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (__ZNK6squish9ColourSet8GetCountEv($35)|0);
 $count = $36;
 $37 = (($17) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (__ZNK6squish9ColourSet9GetPointsEv($38)|0);
 $values = $39;
 $40 = (($17) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (__ZNK6squish9ColourSet10GetWeightsEv($41)|0);
 $weights = $42;
 $43 = $count;
 $44 = $values;
 $45 = $weights;
 __ZN6squish25ComputeWeightedCovarianceEiPKNS_4Vec3EPKf($covariance,$43,$44,$45);
 __ZN6squish25ComputePrincipleComponentERKNS_6Sym3x3E($principle,$covariance);
 __ZN6squish4Vec3C2Ef($start,0.0);
 __ZN6squish4Vec3C2Ef($end,0.0);
 $46 = $count;
 $47 = ($46|0)>(0);
 if ($47) {
  $48 = $values;
  ;HEAP32[$end+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$end+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$end+8>>2]=HEAP32[$48+8>>2]|0;
  ;HEAP32[$start+0>>2]=HEAP32[$end+0>>2]|0;HEAP32[$start+4>>2]=HEAP32[$end+4>>2]|0;HEAP32[$start+8>>2]=HEAP32[$end+8>>2]|0;
  $49 = $values;
  $50 = (+__ZN6squish3DotERKNS_4Vec3ES2_($49,$principle));
  $max = $50;
  $min = $50;
  $i = 1;
  while(1) {
   $51 = $i;
   $52 = $count;
   $53 = ($51|0)<($52|0);
   if (!($53)) {
    break;
   }
   $54 = $i;
   $55 = $values;
   $56 = (($55) + (($54*12)|0)|0);
   $57 = (+__ZN6squish3DotERKNS_4Vec3ES2_($56,$principle));
   $val = $57;
   $58 = $val;
   $59 = $min;
   $60 = $58 < $59;
   if ($60) {
    $61 = $i;
    $62 = $values;
    $63 = (($62) + (($61*12)|0)|0);
    ;HEAP32[$start+0>>2]=HEAP32[$63+0>>2]|0;HEAP32[$start+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$start+8>>2]=HEAP32[$63+8>>2]|0;
    $64 = $val;
    $min = $64;
   } else {
    $65 = $val;
    $66 = $max;
    $67 = $65 > $66;
    if ($67) {
     $68 = $i;
     $69 = $values;
     $70 = (($69) + (($68*12)|0)|0);
     ;HEAP32[$end+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$end+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$end+8>>2]=HEAP32[$70+8>>2]|0;
     $71 = $val;
     $max = $71;
    }
   }
   $72 = $i;
   $73 = (($72) + 1)|0;
   $i = $73;
  }
 }
 __ZN6squish4Vec3C2Ef($one,1.0);
 __ZN6squish4Vec3C2Ef($zero,0.0);
 __ZN6squish3MaxERKNS_4Vec3ES2_($6,$zero,$start);
 __ZN6squish3MinERKNS_4Vec3ES2_($5,$one,$6);
 ;HEAP32[$start+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$start+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$start+8>>2]=HEAP32[$5+8>>2]|0;
 __ZN6squish3MaxERKNS_4Vec3ES2_($8,$zero,$end);
 __ZN6squish3MinERKNS_4Vec3ES2_($7,$one,$8);
 ;HEAP32[$end+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$end+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$end+8>>2]=HEAP32[$7+8>>2]|0;
 __ZN6squish4Vec3C2Efff($grid,31.0,63.0,31.0);
 __ZN6squish4Vec3C2Efff($gridrcp,0.032258063554763794,0.01587301678955555,0.032258063554763794);
 __ZN6squish4Vec3C2Ef($half,0.5);
 $74 = (($17) + 24|0);
 __ZN6squishmlERKNS_4Vec3ES2_($12,$grid,$start);
 __ZN6squishplERKNS_4Vec3ES2_($11,$12,$half);
 __ZN6squish8TruncateERKNS_4Vec3E($10,$11);
 __ZN6squishmlERKNS_4Vec3ES2_($9,$10,$gridrcp);
 ;HEAP32[$74+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$74+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[$9+8>>2]|0;
 $75 = (($17) + 36|0);
 __ZN6squishmlERKNS_4Vec3ES2_($16,$grid,$end);
 __ZN6squishplERKNS_4Vec3ES2_($15,$16,$half);
 __ZN6squish8TruncateERKNS_4Vec3E($14,$15);
 __ZN6squishmlERKNS_4Vec3ES2_($13,$14,$gridrcp);
 ;HEAP32[$75+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$75+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$75+8>>2]=HEAP32[$13+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish8RangeFit9Compress3EPv($this,$block) {
 $this = $this|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $closest = 0, $codes = 0, $count = 0, $d = 0.0, $dist = 0.0, $error = 0.0, $i = 0, $idx = 0, $indices = 0, $j = 0, $values = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $codes = sp + 84|0;
 $2 = sp + 72|0;
 $3 = sp + 60|0;
 $4 = sp + 48|0;
 $closest = sp + 152|0;
 $5 = sp + 12|0;
 $6 = sp;
 $indices = sp + 136|0;
 $0 = $this;
 $1 = $block;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNK6squish9ColourSet8GetCountEv($9)|0);
 $count = $10;
 $11 = (($7) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZNK6squish9ColourSet9GetPointsEv($12)|0);
 $values = $13;
 $14 = (($codes) + 36|0);
 $15 = $codes;
 while(1) {
  __ZN6squish4Vec3C2Ev($15);
  $16 = (($15) + 12|0);
  $17 = ($16|0)==($14|0);
  if ($17) {
   break;
  } else {
   $15 = $16;
  }
 }
 $18 = (($7) + 24|0);
 ;HEAP32[$codes+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$codes+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$codes+8>>2]=HEAP32[$18+8>>2]|0;
 $19 = (($codes) + 12|0);
 $20 = (($7) + 36|0);
 ;HEAP32[$19+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;
 $21 = (($codes) + 24|0);
 $22 = (($7) + 24|0);
 __ZN6squishmlEfRKNS_4Vec3E($3,0.5,$22);
 $23 = (($7) + 36|0);
 __ZN6squishmlEfRKNS_4Vec3E($4,0.5,$23);
 __ZN6squishplERKNS_4Vec3ES2_($2,$3,$4);
 ;HEAP32[$21+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$21+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$2+8>>2]|0;
 $error = 0.0;
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = $count;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $dist = 3.4028234663852886E+38;
  $idx = 0;
  $j = 0;
  while(1) {
   $27 = $j;
   $28 = ($27|0)<(3);
   if (!($28)) {
    break;
   }
   $29 = (($7) + 12|0);
   $30 = $i;
   $31 = $values;
   $32 = (($31) + (($30*12)|0)|0);
   $33 = $j;
   $34 = (($codes) + (($33*12)|0)|0);
   __ZN6squishmiERKNS_4Vec3ES2_($6,$32,$34);
   __ZN6squishmlERKNS_4Vec3ES2_($5,$29,$6);
   $35 = (+__ZN6squish13LengthSquaredERKNS_4Vec3E($5));
   $d = $35;
   $36 = $d;
   $37 = $dist;
   $38 = $36 < $37;
   if ($38) {
    $39 = $d;
    $dist = $39;
    $40 = $j;
    $idx = $40;
   }
   $41 = $j;
   $42 = (($41) + 1)|0;
   $j = $42;
  }
  $43 = $idx;
  $44 = $43&255;
  $45 = $i;
  $46 = (($closest) + ($45)|0);
  HEAP8[$46>>0] = $44;
  $47 = $dist;
  $48 = $error;
  $49 = $48 + $47;
  $error = $49;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $error;
 $53 = (($7) + 48|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $52 < $54;
 if (!($55)) {
  STACKTOP = sp;return;
 }
 $56 = (($7) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 __ZNK6squish9ColourSet12RemapIndicesEPKhPh($57,$closest,$indices);
 $58 = (($7) + 24|0);
 $59 = (($7) + 36|0);
 $60 = $1;
 __ZN6squish17WriteColourBlock3ERKNS_4Vec3ES2_PKhPv($58,$59,$indices,$60);
 $61 = $error;
 $62 = (($7) + 48|0);
 HEAPF32[$62>>2] = $61;
 STACKTOP = sp;return;
}
function __ZN6squish8RangeFit9Compress4EPv($this,$block) {
 $this = $this|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $closest = 0, $codes = 0, $count = 0, $d = 0.0, $dist = 0.0, $error = 0.0, $i = 0, $idx = 0, $indices = 0, $j = 0, $values = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $codes = sp + 120|0;
 $2 = sp + 108|0;
 $3 = sp + 96|0;
 $4 = sp + 84|0;
 $5 = sp + 72|0;
 $6 = sp + 60|0;
 $7 = sp + 48|0;
 $closest = sp + 200|0;
 $8 = sp + 12|0;
 $9 = sp;
 $indices = sp + 184|0;
 $0 = $this;
 $1 = $block;
 $10 = $0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZNK6squish9ColourSet8GetCountEv($12)|0);
 $count = $13;
 $14 = (($10) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZNK6squish9ColourSet9GetPointsEv($15)|0);
 $values = $16;
 $17 = (($codes) + 48|0);
 $18 = $codes;
 while(1) {
  __ZN6squish4Vec3C2Ev($18);
  $19 = (($18) + 12|0);
  $20 = ($19|0)==($17|0);
  if ($20) {
   break;
  } else {
   $18 = $19;
  }
 }
 $21 = (($10) + 24|0);
 ;HEAP32[$codes+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$codes+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$codes+8>>2]=HEAP32[$21+8>>2]|0;
 $22 = (($codes) + 12|0);
 $23 = (($10) + 36|0);
 ;HEAP32[$22+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$23+8>>2]|0;
 $24 = (($codes) + 24|0);
 $25 = (($10) + 24|0);
 __ZN6squishmlEfRKNS_4Vec3E($3,0.66666668653488159,$25);
 $26 = (($10) + 36|0);
 __ZN6squishmlEfRKNS_4Vec3E($4,0.3333333432674408,$26);
 __ZN6squishplERKNS_4Vec3ES2_($2,$3,$4);
 ;HEAP32[$24+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$24+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$2+8>>2]|0;
 $27 = (($codes) + 36|0);
 $28 = (($10) + 24|0);
 __ZN6squishmlEfRKNS_4Vec3E($6,0.3333333432674408,$28);
 $29 = (($10) + 36|0);
 __ZN6squishmlEfRKNS_4Vec3E($7,0.66666668653488159,$29);
 __ZN6squishplERKNS_4Vec3ES2_($5,$6,$7);
 ;HEAP32[$27+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$5+8>>2]|0;
 $error = 0.0;
 $i = 0;
 while(1) {
  $30 = $i;
  $31 = $count;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $dist = 3.4028234663852886E+38;
  $idx = 0;
  $j = 0;
  while(1) {
   $33 = $j;
   $34 = ($33|0)<(4);
   if (!($34)) {
    break;
   }
   $35 = (($10) + 12|0);
   $36 = $i;
   $37 = $values;
   $38 = (($37) + (($36*12)|0)|0);
   $39 = $j;
   $40 = (($codes) + (($39*12)|0)|0);
   __ZN6squishmiERKNS_4Vec3ES2_($9,$38,$40);
   __ZN6squishmlERKNS_4Vec3ES2_($8,$35,$9);
   $41 = (+__ZN6squish13LengthSquaredERKNS_4Vec3E($8));
   $d = $41;
   $42 = $d;
   $43 = $dist;
   $44 = $42 < $43;
   if ($44) {
    $45 = $d;
    $dist = $45;
    $46 = $j;
    $idx = $46;
   }
   $47 = $j;
   $48 = (($47) + 1)|0;
   $j = $48;
  }
  $49 = $idx;
  $50 = $49&255;
  $51 = $i;
  $52 = (($closest) + ($51)|0);
  HEAP8[$52>>0] = $50;
  $53 = $dist;
  $54 = $error;
  $55 = $54 + $53;
  $error = $55;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 $58 = $error;
 $59 = (($10) + 48|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $58 < $60;
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = (($10) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 __ZNK6squish9ColourSet12RemapIndicesEPKhPh($63,$closest,$indices);
 $64 = (($10) + 24|0);
 $65 = (($10) + 36|0);
 $66 = $1;
 __ZN6squish17WriteColourBlock4ERKNS_4Vec3ES2_PKhPv($64,$65,$indices,$66);
 $67 = $error;
 $68 = (($10) + 48|0);
 HEAPF32[$68>>2] = $67;
 STACKTOP = sp;return;
}
function __ZN6squish3MaxERKNS_4Vec3ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $8 = sp + 114|0;
 $14 = sp + 8|0;
 $17 = sp + 113|0;
 $23 = sp;
 $26 = sp + 112|0;
 $27 = $left;
 $28 = $right;
 $29 = $27;
 $30 = $28;
 $24 = $29;
 $25 = $30;
 $31 = $24;
 $32 = $25;
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;
 $21 = $31;
 $22 = $32;
 $33 = $21;
 $34 = $22;
 $18 = $23;
 $19 = $33;
 $20 = $34;
 $35 = $19;
 $36 = +HEAPF32[$35>>2];
 $37 = $20;
 $38 = +HEAPF32[$37>>2];
 $39 = $36 < $38;
 if ($39) {
  $40 = $22;
  $43 = $40;
 } else {
  $41 = $21;
  $43 = $41;
 }
 $42 = +HEAPF32[$43>>2];
 $44 = $27;
 $45 = (($44) + 4|0);
 $46 = $28;
 $47 = (($46) + 4|0);
 $15 = $45;
 $16 = $47;
 $48 = $15;
 $49 = $16;
 ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
 $12 = $48;
 $13 = $49;
 $50 = $12;
 $51 = $13;
 $9 = $14;
 $10 = $50;
 $11 = $51;
 $52 = $10;
 $53 = +HEAPF32[$52>>2];
 $54 = $11;
 $55 = +HEAPF32[$54>>2];
 $56 = $53 < $55;
 if ($56) {
  $57 = $13;
  $60 = $57;
 } else {
  $58 = $12;
  $60 = $58;
 }
 $59 = +HEAPF32[$60>>2];
 $61 = $27;
 $62 = (($61) + 8|0);
 $63 = $28;
 $64 = (($63) + 8|0);
 $6 = $62;
 $7 = $64;
 $65 = $6;
 $66 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $65;
 $4 = $66;
 $67 = $3;
 $68 = $4;
 $0 = $5;
 $1 = $67;
 $2 = $68;
 $69 = $1;
 $70 = +HEAPF32[$69>>2];
 $71 = $2;
 $72 = +HEAPF32[$71>>2];
 $73 = $70 < $72;
 if ($73) {
  $74 = $4;
  $77 = $74;
  $76 = +HEAPF32[$77>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$42,$59,$76);
  STACKTOP = sp;return;
 } else {
  $75 = $3;
  $77 = $75;
  $76 = +HEAPF32[$77>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$42,$59,$76);
  STACKTOP = sp;return;
 }
}
function __ZN6squish3MinERKNS_4Vec3ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $8 = sp + 114|0;
 $14 = sp + 8|0;
 $17 = sp + 113|0;
 $23 = sp;
 $26 = sp + 112|0;
 $27 = $left;
 $28 = $right;
 $29 = $27;
 $30 = $28;
 $24 = $29;
 $25 = $30;
 $31 = $24;
 $32 = $25;
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;
 $21 = $31;
 $22 = $32;
 $33 = $22;
 $34 = $21;
 $18 = $23;
 $19 = $33;
 $20 = $34;
 $35 = $19;
 $36 = +HEAPF32[$35>>2];
 $37 = $20;
 $38 = +HEAPF32[$37>>2];
 $39 = $36 < $38;
 if ($39) {
  $40 = $22;
  $43 = $40;
 } else {
  $41 = $21;
  $43 = $41;
 }
 $42 = +HEAPF32[$43>>2];
 $44 = $27;
 $45 = (($44) + 4|0);
 $46 = $28;
 $47 = (($46) + 4|0);
 $15 = $45;
 $16 = $47;
 $48 = $15;
 $49 = $16;
 ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
 $12 = $48;
 $13 = $49;
 $50 = $13;
 $51 = $12;
 $9 = $14;
 $10 = $50;
 $11 = $51;
 $52 = $10;
 $53 = +HEAPF32[$52>>2];
 $54 = $11;
 $55 = +HEAPF32[$54>>2];
 $56 = $53 < $55;
 if ($56) {
  $57 = $13;
  $60 = $57;
 } else {
  $58 = $12;
  $60 = $58;
 }
 $59 = +HEAPF32[$60>>2];
 $61 = $27;
 $62 = (($61) + 8|0);
 $63 = $28;
 $64 = (($63) + 8|0);
 $6 = $62;
 $7 = $64;
 $65 = $6;
 $66 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $65;
 $4 = $66;
 $67 = $4;
 $68 = $3;
 $0 = $5;
 $1 = $67;
 $2 = $68;
 $69 = $1;
 $70 = +HEAPF32[$69>>2];
 $71 = $2;
 $72 = +HEAPF32[$71>>2];
 $73 = $70 < $72;
 if ($73) {
  $74 = $4;
  $77 = $74;
  $76 = +HEAPF32[$77>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$42,$59,$76);
  STACKTOP = sp;return;
 } else {
  $75 = $3;
  $77 = $75;
  $76 = +HEAPF32[$77>>2];
  __ZN6squish4Vec3C2Efff($agg$result,$42,$59,$76);
  STACKTOP = sp;return;
 }
}
function __ZN6squishmlERKNS_4Vec3ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp;
 $0 = $left;
 $1 = $right;
 $2 = $0;
 ;HEAP32[$copy+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$copy+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = $1;
 $4 = (__ZN6squish4Vec3mLERKS0_($copy,$3)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squishplERKNS_4Vec3ES2_($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp;
 $0 = $left;
 $1 = $right;
 $2 = $0;
 ;HEAP32[$copy+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$copy+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = $1;
 $4 = (__ZN6squish4Vec3pLERKS0_($copy,$3)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6squish8TruncateERKNS_4Vec3E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $v;
 $7 = $6;
 $8 = +HEAPF32[$7>>2];
 $9 = $8 > 0.0;
 if ($9) {
  $10 = $6;
  $11 = +HEAPF32[$10>>2];
  $5 = $11;
  $12 = $5;
  $13 = (+Math_floor((+$12)));
  $46 = $13;
 } else {
  $14 = $6;
  $15 = +HEAPF32[$14>>2];
  $4 = $15;
  $16 = $4;
  $17 = (+Math_ceil((+$16)));
  $46 = $17;
 }
 $18 = $6;
 $19 = (($18) + 4|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 > 0.0;
 if ($21) {
  $22 = $6;
  $23 = (($22) + 4|0);
  $24 = +HEAPF32[$23>>2];
  $3 = $24;
  $25 = $3;
  $26 = (+Math_floor((+$25)));
  $47 = $26;
 } else {
  $27 = $6;
  $28 = (($27) + 4|0);
  $29 = +HEAPF32[$28>>2];
  $2 = $29;
  $30 = $2;
  $31 = (+Math_ceil((+$30)));
  $47 = $31;
 }
 $32 = $6;
 $33 = (($32) + 8|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $34 > 0.0;
 if ($35) {
  $36 = $6;
  $37 = (($36) + 8|0);
  $38 = +HEAPF32[$37>>2];
  $1 = $38;
  $39 = $1;
  $40 = (+Math_floor((+$39)));
  $48 = $40;
  __ZN6squish4Vec3C2Efff($agg$result,$46,$47,$48);
  STACKTOP = sp;return;
 } else {
  $41 = $6;
  $42 = (($41) + 8|0);
  $43 = +HEAPF32[$42>>2];
  $0 = $43;
  $44 = $0;
  $45 = (+Math_ceil((+$44)));
  $48 = $45;
  __ZN6squish4Vec3C2Efff($agg$result,$46,$47,$48);
  STACKTOP = sp;return;
 }
}
function __ZN6squish13LengthSquaredERKNS_4Vec3E($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = $0;
 $3 = (+__ZN6squish3DotERKNS_4Vec3ES2_($1,$2));
 STACKTOP = sp;return (+$3);
}
function __ZN6squish4Vec3mLERKS0_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 * $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 * $9;
 HEAPF32[$10>>2] = $12;
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * $15;
 HEAPF32[$16>>2] = $18;
 STACKTOP = sp;return ($2|0);
}
function __ZN6squish15SingleColourFitC2EPKNS_9ColourSetEi($this,$colours,$flags) {
 $this = $this|0;
 $colours = $colours|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $values = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $colours;
 $2 = $flags;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN6squish9ColourFitC2EPKNS_9ColourSetEi($3,$4,$5);
 $6 = (168 + 8|0);
 HEAP32[$3>>2] = $6;
 $7 = (($3) + 16|0);
 __ZN6squish4Vec3C2Ev($7);
 $8 = (($3) + 28|0);
 __ZN6squish4Vec3C2Ev($8);
 $9 = (($3) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZNK6squish9ColourSet9GetPointsEv($10)|0);
 $values = $11;
 $12 = $values;
 $13 = (+__ZNK6squish4Vec31XEv($12));
 $14 = 255.0 * $13;
 $15 = (__ZN6squishL10FloatToIntEfi14($14,255)|0);
 $16 = $15&255;
 $17 = (($3) + 12|0);
 HEAP8[$17>>0] = $16;
 $18 = $values;
 $19 = (+__ZNK6squish4Vec31YEv($18));
 $20 = 255.0 * $19;
 $21 = (__ZN6squishL10FloatToIntEfi14($20,255)|0);
 $22 = $21&255;
 $23 = (($3) + 12|0);
 $24 = (($23) + 1|0);
 HEAP8[$24>>0] = $22;
 $25 = $values;
 $26 = (+__ZNK6squish4Vec31ZEv($25));
 $27 = 255.0 * $26;
 $28 = (__ZN6squishL10FloatToIntEfi14($27,255)|0);
 $29 = $28&255;
 $30 = (($3) + 12|0);
 $31 = (($30) + 2|0);
 HEAP8[$31>>0] = $29;
 $32 = (($3) + 48|0);
 HEAP32[$32>>2] = 2147483647;
 STACKTOP = sp;return;
}
function __ZN6squish15SingleColourFit9Compress3EPv($this,$block) {
 $this = $this|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $indices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $indices = sp + 8|0;
 $0 = $this;
 $1 = $block;
 $2 = $0;
 __ZN6squish15SingleColourFit16ComputeEndPointsEPKPKNS_18SingleColourLookupE($2,184);
 $3 = (($2) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($2) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + 40|0);
 __ZNK6squish9ColourSet12RemapIndicesEPKhPh($9,$10,$indices);
 $11 = (($2) + 16|0);
 $12 = (($2) + 28|0);
 $13 = $1;
 __ZN6squish17WriteColourBlock3ERKNS_4Vec3ES2_PKhPv($11,$12,$indices,$13);
 $14 = (($2) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + 48|0);
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN6squish15SingleColourFit16ComputeEndPointsEPKPKNS_18SingleColourLookupE($this,$lookups) {
 $this = $this|0;
 $lookups = $lookups|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $channel = 0, $diff = 0, $error = 0, $index = 0, $lookup = 0, $sources = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sources = sp + 44|0;
 $2 = sp + 12|0;
 $3 = sp;
 $0 = $this;
 $1 = $lookups;
 $4 = $0;
 $5 = (($4) + 44|0);
 HEAP32[$5>>2] = 2147483647;
 $index = 0;
 while(1) {
  $6 = $index;
  $7 = ($6|0)<(2);
  if (!($7)) {
   break;
  }
  $error = 0;
  $channel = 0;
  while(1) {
   $8 = $channel;
   $9 = ($8|0)<(3);
   if (!($9)) {
    break;
   }
   $10 = $channel;
   $11 = $1;
   $12 = (($11) + ($10<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $lookup = $13;
   $14 = $channel;
   $15 = (($4) + 12|0);
   $16 = (($15) + ($14)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $target = $18;
   $19 = $target;
   $20 = $lookup;
   $21 = (($20) + (($19*6)|0)|0);
   $22 = $index;
   $23 = (($21) + (($22*3)|0)|0);
   $24 = $channel;
   $25 = (($sources) + ($24<<2)|0);
   HEAP32[$25>>2] = $23;
   $26 = $channel;
   $27 = (($sources) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $diff = $31;
   $32 = $diff;
   $33 = $diff;
   $34 = Math_imul($32, $33)|0;
   $35 = $error;
   $36 = (($35) + ($34))|0;
   $error = $36;
   $37 = $channel;
   $38 = (($37) + 1)|0;
   $channel = $38;
  }
  $39 = $error;
  $40 = (($4) + 44|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)<($41|0);
  if ($42) {
   $43 = (($4) + 16|0);
   $44 = HEAP32[$sources>>2]|0;
   $45 = HEAP8[$44>>0]|0;
   $46 = (+($45&255));
   $47 = $46 / 31.0;
   $48 = (($sources) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP8[$49>>0]|0;
   $51 = (+($50&255));
   $52 = $51 / 63.0;
   $53 = (($sources) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP8[$54>>0]|0;
   $56 = (+($55&255));
   $57 = $56 / 31.0;
   __ZN6squish4Vec3C2Efff($2,$47,$52,$57);
   ;HEAP32[$43+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$43+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$2+8>>2]|0;
   $58 = (($4) + 28|0);
   $59 = HEAP32[$sources>>2]|0;
   $60 = (($59) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = (+($61&255));
   $63 = $62 / 31.0;
   $64 = (($sources) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + 1|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = (+($67&255));
   $69 = $68 / 63.0;
   $70 = (($sources) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 1|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = (+($73&255));
   $75 = $74 / 31.0;
   __ZN6squish4Vec3C2Efff($3,$63,$69,$75);
   ;HEAP32[$58+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$58+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$58+8>>2]=HEAP32[$3+8>>2]|0;
   $76 = $index;
   $77 = $76<<1;
   $78 = $77&255;
   $79 = (($4) + 40|0);
   HEAP8[$79>>0] = $78;
   $80 = $error;
   $81 = (($4) + 44|0);
   HEAP32[$81>>2] = $80;
  }
  $82 = $index;
  $83 = (($82) + 1)|0;
  $index = $83;
 }
 STACKTOP = sp;return;
}
function __ZN6squish15SingleColourFit9Compress4EPv($this,$block) {
 $this = $this|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $indices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $indices = sp + 8|0;
 $0 = $this;
 $1 = $block;
 $2 = $0;
 __ZN6squish15SingleColourFit16ComputeEndPointsEPKPKNS_18SingleColourLookupE($2,3272);
 $3 = (($2) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($2) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + 40|0);
 __ZNK6squish9ColourSet12RemapIndicesEPKhPh($9,$10,$indices);
 $11 = (($2) + 16|0);
 $12 = (($2) + 28|0);
 $13 = $1;
 __ZN6squish17WriteColourBlock4ERKNS_4Vec3ES2_PKhPv($11,$12,$indices,$13);
 $14 = (($2) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + 48|0);
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN6squishL10FloatToIntEfi14($a,$limit) {
 $a = +$a;
 $limit = $limit|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $limit;
 $2 = $0;
 $3 = $2 + 0.5;
 $4 = (~~(($3)));
 $i = $4;
 $5 = $i;
 $6 = ($5|0)<(0);
 if ($6) {
  $i = 0;
  $11 = $i;
  STACKTOP = sp;return ($11|0);
 }
 $7 = $i;
 $8 = $1;
 $9 = ($7|0)>($8|0);
 if ($9) {
  $10 = $1;
  $i = $10;
 }
 $11 = $i;
 STACKTOP = sp;return ($11|0);
}
function __ZN6squish14CompressMaskedEPKhiPvi($rgba,$mask,$block,$flags) {
 $rgba = $rgba|0;
 $mask = $mask|0;
 $block = $block|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $alphaBock = 0, $colourBlock = 0, $colours = 0, $fit = 0, $fit1 = 0, $fit2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 928|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $colours = sp + 568|0;
 $fit = sp + 512|0;
 $fit1 = sp + 460|0;
 $fit2 = sp;
 $0 = $rgba;
 $1 = $mask;
 $2 = $block;
 $3 = $flags;
 $4 = $3;
 $5 = (__ZN6squishL8FixFlagsEi($4)|0);
 $3 = $5;
 $6 = $2;
 $colourBlock = $6;
 $7 = $2;
 $alphaBock = $7;
 $8 = $3;
 $9 = $8 & 6;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $2;
  $12 = (($11) + 8|0);
  $colourBlock = $12;
 }
 $13 = $0;
 $14 = $1;
 $15 = $3;
 __ZN6squish9ColourSetC2EPKhii($colours,$13,$14,$15);
 $16 = (__ZNK6squish9ColourSet8GetCountEv($colours)|0);
 $17 = ($16|0)==(1);
 if ($17) {
  $18 = $3;
  __ZN6squish15SingleColourFitC2EPKNS_9ColourSetEi($fit,$colours,$18);
  $19 = $colourBlock;
  __ZN6squish9ColourFit8CompressEPv($fit,$19);
 } else {
  $20 = $3;
  $21 = $20 & 16;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 7;
  } else {
   $23 = (__ZNK6squish9ColourSet8GetCountEv($colours)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    label = 7;
   } else {
    $27 = $3;
    __ZN6squish10ClusterFitC2EPKNS_9ColourSetEi($fit2,$colours,$27);
    $28 = $colourBlock;
    __ZN6squish9ColourFit8CompressEPv($fit2,$28);
   }
  }
  if ((label|0) == 7) {
   $25 = $3;
   __ZN6squish8RangeFitC2EPKNS_9ColourSetEi($fit1,$colours,$25);
   $26 = $colourBlock;
   __ZN6squish9ColourFit8CompressEPv($fit1,$26);
  }
 }
 $29 = $3;
 $30 = $29 & 2;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $0;
  $33 = $1;
  $34 = $alphaBock;
  __ZN6squish17CompressAlphaDxt3EPKhiPv($32,$33,$34);
  STACKTOP = sp;return;
 }
 $35 = $3;
 $36 = $35 & 4;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $0;
  $39 = $1;
  $40 = $alphaBock;
  __ZN6squish17CompressAlphaDxt5EPKhiPv($38,$39,$40);
 }
 STACKTOP = sp;return;
}
function __ZN6squish13CompressImageEPKhiiPvi($rgba,$width,$height,$blocks,$flags) {
 $rgba = $rgba|0;
 $width = $width|0;
 $height = $height|0;
 $blocks = $blocks|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $bytesPerBlock = 0, $i = 0, $mask = 0, $px = 0, $py = 0, $sourcePixel = 0;
 var $sourceRgba = 0, $sx = 0, $sy = 0, $targetBlock = 0, $targetPixel = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sourceRgba = sp + 72|0;
 $0 = $rgba;
 $1 = $width;
 $2 = $height;
 $3 = $blocks;
 $4 = $flags;
 $5 = $4;
 $6 = (__ZN6squishL8FixFlagsEi($5)|0);
 $4 = $6;
 $7 = $3;
 $targetBlock = $7;
 $8 = $4;
 $9 = $8 & 1;
 $10 = ($9|0)!=(0);
 $11 = $10 ? 8 : 16;
 $bytesPerBlock = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $2;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $x = 0;
  while(1) {
   $15 = $x;
   $16 = $1;
   $17 = ($15|0)<($16|0);
   if (!($17)) {
    break;
   }
   $targetPixel = $sourceRgba;
   $mask = 0;
   $py = 0;
   while(1) {
    $18 = $py;
    $19 = ($18|0)<(4);
    if (!($19)) {
     break;
    }
    $px = 0;
    while(1) {
     $20 = $px;
     $21 = ($20|0)<(4);
     if (!($21)) {
      break;
     }
     $22 = $x;
     $23 = $px;
     $24 = (($22) + ($23))|0;
     $sx = $24;
     $25 = $y;
     $26 = $py;
     $27 = (($25) + ($26))|0;
     $sy = $27;
     $28 = $sx;
     $29 = $1;
     $30 = ($28|0)<($29|0);
     if ($30) {
      $31 = $sy;
      $32 = $2;
      $33 = ($31|0)<($32|0);
      if ($33) {
       $34 = $0;
       $35 = $1;
       $36 = $sy;
       $37 = Math_imul($35, $36)|0;
       $38 = $sx;
       $39 = (($37) + ($38))|0;
       $40 = $39<<2;
       $41 = (($34) + ($40)|0);
       $sourcePixel = $41;
       $i = 0;
       while(1) {
        $42 = $i;
        $43 = ($42|0)<(4);
        if (!($43)) {
         break;
        }
        $44 = $sourcePixel;
        $45 = (($44) + 1|0);
        $sourcePixel = $45;
        $46 = HEAP8[$44>>0]|0;
        $47 = $targetPixel;
        $48 = (($47) + 1|0);
        $targetPixel = $48;
        HEAP8[$47>>0] = $46;
        $49 = $i;
        $50 = (($49) + 1)|0;
        $i = $50;
       }
       $51 = $py;
       $52 = $51<<2;
       $53 = $px;
       $54 = (($52) + ($53))|0;
       $55 = 1 << $54;
       $56 = $mask;
       $57 = $56 | $55;
       $mask = $57;
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      label = 0;
      $58 = $targetPixel;
      $59 = (($58) + 4|0);
      $targetPixel = $59;
     }
     $60 = $px;
     $61 = (($60) + 1)|0;
     $px = $61;
    }
    $62 = $py;
    $63 = (($62) + 1)|0;
    $py = $63;
   }
   $64 = $mask;
   $65 = $targetBlock;
   $66 = $4;
   __ZN6squish14CompressMaskedEPKhiPvi($sourceRgba,$64,$65,$66);
   $67 = $bytesPerBlock;
   $68 = $targetBlock;
   $69 = (($68) + ($67)|0);
   $targetBlock = $69;
   $70 = $x;
   $71 = (($70) + 4)|0;
   $x = $71;
  }
  $72 = $y;
  $73 = (($72) + 4)|0;
  $y = $73;
 }
 STACKTOP = sp;return;
}
function __ZN6squishL8FixFlagsEi($flags) {
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extra = 0, $fit = 0, $method = 0, $metric = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flags;
 $1 = $0;
 $2 = $1 & 7;
 $method = $2;
 $3 = $0;
 $4 = $3 & 280;
 $fit = $4;
 $5 = $0;
 $6 = $5 & 96;
 $metric = $6;
 $7 = $0;
 $8 = $7 & 128;
 $extra = $8;
 $9 = $method;
 $10 = ($9|0)!=(2);
 if ($10) {
  $11 = $method;
  $12 = ($11|0)!=(4);
  if ($12) {
   $method = 1;
  }
 }
 $13 = $fit;
 $14 = ($13|0)!=(16);
 if ($14) {
  $fit = 8;
 }
 $15 = $metric;
 $16 = ($15|0)!=(64);
 if ($16) {
  $metric = 32;
 }
 $17 = $method;
 $18 = $fit;
 $19 = $17 | $18;
 $20 = $metric;
 $21 = $19 | $20;
 $22 = $extra;
 $23 = $21 | $22;
 STACKTOP = sp;return ($23|0);
}
function __ZN6VTFLib11Diagnostics6CErrorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6VTFLib11Diagnostics6CErrorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdaPv($2);
 }
 STACKTOP = sp;return;
}
function __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz($this,$cFormat,$varargs) {
 $this = $this|0;
 $cFormat = $cFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ArgumentList = 0, $cBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cBuffer = sp + 24|0;
 $ArgumentList = sp;
 $0 = $this;
 $1 = $cFormat;
 $2 = $0;
 HEAP32[$ArgumentList>>2] = $varargs;
 $3 = $1;
 (_vsprintf($cBuffer,$3,$ArgumentList)|0);
 __ZN6VTFLib11Diagnostics6CError3SetEPKch($2,$cBuffer,0);
 STACKTOP = sp;return;
}
function __ZN6VTFLib11Diagnostics6CError3SetEPKch($this,$cErrorMessage,$bSystemError) {
 $this = $this|0;
 $cErrorMessage = $cErrorMessage|0;
 $bSystemError = $bSystemError|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cBuffer = 0, $uiLastError = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $cBuffer = sp + 24|0;
 $0 = $this;
 $1 = $cErrorMessage;
 $2 = $bSystemError;
 $3 = $0;
 $4 = $2;
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $uiLastError = $7;
  $8 = $1;
  $9 = $uiLastError;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  (_sprintf($cBuffer,6408,$vararg_buffer)|0);
 } else {
  $10 = $1;
  HEAP32[$vararg_buffer2>>2] = $10;
  (_sprintf($cBuffer,6448,$vararg_buffer2)|0);
 }
 $11 = (_strlen(($cBuffer|0))|0);
 $12 = (($11) + 1)|0;
 $13 = (__Znaj($12)|0);
 HEAP32[$3>>2] = $13;
 $14 = HEAP32[$3>>2]|0;
 (_strcpy(($14|0),($cBuffer|0))|0);
 STACKTOP = sp;return;
}
function __ZN6VTFLib2IO7Writers13CMemoryWriterC2EPvj($this,$vData,$uiBufferSize) {
 $this = $this|0;
 $vData = $vData|0;
 $uiBufferSize = $uiBufferSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vData;
 $2 = $uiBufferSize;
 $3 = $0;
 __ZN6VTFLib2IO7Writers7IWriterC2Ev($3);
 $4 = (6464 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 4|0);
 HEAP8[$5>>0] = 0;
 $6 = $1;
 $7 = (($3) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = $2;
 $9 = (($3) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = (($3) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = (($3) + 20|0);
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6VTFLib2IO7Writers13CMemoryWriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNK6VTFLib2IO7Writers13CMemoryWriter6OpenedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6VTFLib2IO7Writers13CMemoryWriter4OpenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,6504,0);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = (($2) + 16|0);
  HEAP32[$6>>2] = 0;
  $7 = (($2) + 20|0);
  HEAP32[$7>>2] = 0;
  $8 = (($2) + 4|0);
  HEAP8[$8>>0] = 1;
  $0 = 1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN6VTFLib2IO7Writers13CMemoryWriter5CloseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 HEAP8[$2>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNK6VTFLib2IO7Writers13CMemoryWriter13GetStreamSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK6VTFLib2IO7Writers13CMemoryWriter16GetStreamPointerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  $6 = (($2) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $0 = $7;
 } else {
  $0 = 0;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __ZN6VTFLib2IO7Writers13CMemoryWriter4SeekElj($this,$lOffset,$uiMode) {
 $this = $this|0;
 $lOffset = $lOffset|0;
 $uiMode = $uiMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lPointer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $lOffset;
 $3 = $uiMode;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 if (!($7)) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $8 = $3;
 if ((($8|0) == 0)) {
  $9 = (($4) + 16|0);
  HEAP32[$9>>2] = 0;
 } else if ((($8|0) == 1)) {
 } else if ((($8|0) == -1)) {
  $10 = (($4) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($4) + 16|0);
  HEAP32[$12>>2] = $11;
 }
 $13 = (($4) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = (($14) + ($15))|0;
 $lPointer = $16;
 $17 = $lPointer;
 $18 = ($17|0)<(0);
 if ($18) {
  $lPointer = 0;
 }
 $19 = $lPointer;
 $20 = (($4) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)>($21|0);
 if ($22) {
  $23 = (($4) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $lPointer = $24;
 }
 $25 = $lPointer;
 $26 = (($4) + 16|0);
 HEAP32[$26>>2] = $25;
 $27 = (($4) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZN6VTFLib2IO7Writers13CMemoryWriter5WriteEc($this,$cChar) {
 $this = $this|0;
 $cChar = $cChar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $cChar;
 $3 = $1;
 $4 = (($3) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 if (!($6)) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $7 = (($3) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,6528,0);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $12 = $2;
  $13 = (($3) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($3) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
  $18 = (($14) + ($16)|0);
  HEAP8[$18>>0] = $12;
  $19 = (($3) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$19>>2] = $21;
  $0 = 1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __ZN6VTFLib2IO7Writers13CMemoryWriter5WriteEPvj($this,$vData,$uiBytes) {
 $this = $this|0;
 $vData = $vData|0;
 $uiBytes = $uiBytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $vData;
 $3 = $uiBytes;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 if (!($7)) {
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $8 = (($4) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($4) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $13 = (($4) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = (($14) + ($15))|0;
 $17 = (($4) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16>>>0)>($18>>>0);
 if ($19) {
  $20 = (($4) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($4) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) - ($23))|0;
  $3 = $24;
  $25 = (($4) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($4) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + ($28)|0);
  $30 = $2;
  $31 = $3;
  _memcpy(($29|0),($30|0),($31|0))|0;
  $32 = $3;
  $33 = (($4) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($32))|0;
  HEAP32[$33>>2] = $35;
  $36 = (($4) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($4) + 16|0);
  HEAP32[$38>>2] = $37;
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,6528,0);
  $39 = $3;
  $0 = $39;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 } else {
  $40 = (($4) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($4) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + ($43)|0);
  $45 = $2;
  $46 = $3;
  _memcpy(($44|0),($45|0),($46|0))|0;
  $47 = $3;
  $48 = (($4) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($47))|0;
  HEAP32[$48>>2] = $50;
  $51 = $3;
  $52 = (($4) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($51))|0;
  HEAP32[$52>>2] = $54;
  $55 = $3;
  $0 = $55;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function __ZN6VTFLib2IO7Writers7IWriterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (6648 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFileC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 16|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK6VTFLib8CVTFFile8IsLoadedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNK6VTFLib8CVTFFile11GetHasImageEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = (($2) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = $7&1;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZNK6VTFLib8CVTFFile15GetHasThumbnailEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + 57|0);
  $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
  $8 = ($7|0)!=(-1);
  $9 = $8&1;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile18GetImageFormatInfoE17tagVTFImageFormat($ImageFormat) {
 $ImageFormat = $ImageFormat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ImageFormat;
 $1 = $0;
 $2 = ($1|0)>=(0);
 if ($2) {
  $3 = $0;
  $4 = ($3|0)<(39);
  if ($4) {
   $5 = $0;
   $6 = (8520 + (($5*30)|0)|0);
   STACKTOP = sp;return ($6|0);
  }
 }
 ___assert_fail((8440|0),(7696|0),2878,(8496|0));
 // unreachable;
 return (0)|0;
}
function __ZNK6VTFLib8CVTFFile13GetFrameCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
  $8 = $7&65535;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZNK6VTFLib8CVTFFile12GetFaceCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 20|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 16384;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 26|0);
  $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
  $13 = $12&65535;
  $14 = ($13|0)!=(65535);
  if ($14) {
   $15 = HEAP32[$2>>2]|0;
   $16 = (($15) + 4|0);
   $17 = (($16) + 4|0);
   $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
   $19 = ($18>>>0)<(5);
   $20 = $19;
  } else {
   $20 = 0;
  }
  $21 = $20 ? 7 : 6;
  $22 = $21;
 } else {
  $22 = 1;
 }
 $0 = $22;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZNK6VTFLib8CVTFFile14GetMipmapCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + 56|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZNK6VTFLib8CVTFFile8GetDepthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + 63|0);
  $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
  $8 = $7&65535;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($uiWidth,$uiHeight,$uiDepth,$ImageFormat) {
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $uiDepth = $uiDepth|0;
 $ImageFormat = $ImageFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $uiWidth;
 $2 = $uiHeight;
 $3 = $uiDepth;
 $4 = $ImageFormat;
 $5 = $4;
 if ((($5|0) == 20) | (($5|0) == 13)) {
  $6 = $1;
  $7 = ($6>>>0)<(4);
  if ($7) {
   $8 = $1;
   $9 = ($8>>>0)>(0);
   if ($9) {
    $1 = 4;
   }
  }
  $10 = $2;
  $11 = ($10>>>0)<(4);
  if ($11) {
   $12 = $2;
   $13 = ($12>>>0)>(0);
   if ($13) {
    $2 = 4;
   }
  }
  $14 = $1;
  $15 = (($14) + 3)|0;
  $16 = (($15>>>0) / 4)&-1;
  $17 = $2;
  $18 = (($17) + 3)|0;
  $19 = (($18>>>0) / 4)&-1;
  $20 = Math_imul($16, $19)|0;
  $21 = $20<<3;
  $22 = $3;
  $23 = Math_imul($21, $22)|0;
  $0 = $23;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 } else if ((($5|0) == 15) | (($5|0) == 14)) {
  $24 = $1;
  $25 = ($24>>>0)<(4);
  if ($25) {
   $26 = $1;
   $27 = ($26>>>0)>(0);
   if ($27) {
    $1 = 4;
   }
  }
  $28 = $2;
  $29 = ($28>>>0)<(4);
  if ($29) {
   $30 = $2;
   $31 = ($30>>>0)>(0);
   if ($31) {
    $2 = 4;
   }
  }
  $32 = $1;
  $33 = (($32) + 3)|0;
  $34 = (($33>>>0) / 4)&-1;
  $35 = $2;
  $36 = (($35) + 3)|0;
  $37 = (($36>>>0) / 4)&-1;
  $38 = Math_imul($34, $37)|0;
  $39 = $38<<4;
  $40 = $3;
  $41 = Math_imul($39, $40)|0;
  $0 = $41;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 } else {
  $42 = $1;
  $43 = $2;
  $44 = Math_imul($42, $43)|0;
  $45 = $3;
  $46 = Math_imul($44, $45)|0;
  $47 = $4;
  $48 = (__ZN6VTFLib8CVTFFile18GetImageFormatInfoE17tagVTFImageFormat($47)|0);
  $49 = (($48) + 8|0);
  $50 = HEAPU8[$49>>0]|(HEAPU8[$49+1>>0]<<8)|(HEAPU8[$49+2>>0]<<16)|(HEAPU8[$49+3>>0]<<24);
  $51 = Math_imul($46, $50)|0;
  $0 = $51;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile23ComputeMipmapDimensionsEjjjjRjS1_S1_($uiWidth,$uiHeight,$uiDepth,$uiMipmapLevel,$uiMipmapWidth,$uiMipmapHeight,$uiMipmapDepth) {
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $uiDepth = $uiDepth|0;
 $uiMipmapLevel = $uiMipmapLevel|0;
 $uiMipmapWidth = $uiMipmapWidth|0;
 $uiMipmapHeight = $uiMipmapHeight|0;
 $uiMipmapDepth = $uiMipmapDepth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uiWidth;
 $1 = $uiHeight;
 $2 = $uiDepth;
 $3 = $uiMipmapLevel;
 $4 = $uiMipmapWidth;
 $5 = $uiMipmapHeight;
 $6 = $uiMipmapDepth;
 $7 = $0;
 $8 = $3;
 $9 = $7 >>> $8;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $1;
 $12 = $3;
 $13 = $11 >>> $12;
 $14 = $5;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = $3;
 $17 = $15 >>> $16;
 $18 = $6;
 HEAP32[$18>>2] = $17;
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)<(1);
 if ($21) {
  $22 = $4;
  HEAP32[$22>>2] = 1;
 }
 $23 = $5;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24>>>0)<(1);
 if ($25) {
  $26 = $5;
  HEAP32[$26>>2] = 1;
 }
 $27 = $6;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28>>>0)<(1);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $6;
 HEAP32[$30>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile7ConvertEPhS1_jj17tagVTFImageFormatS2_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceFormat,$DestFormat) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceFormat = $SourceFormat|0;
 $DestFormat = $DestFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DestInfo = 0, $SourceInfo = 0, $bResult = 0, $lpLast = 0, $lpLast1 = 0, $lpSourceRGBA = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lpSource;
 $2 = $lpDest;
 $3 = $uiWidth;
 $4 = $uiHeight;
 $5 = $SourceFormat;
 $6 = $DestFormat;
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((9904|0),(7696|0),3859,(9920|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((9928|0),(7696|0),3860,(9920|0));
  // unreachable;
 }
 $11 = $5;
 $12 = ($11|0)>=(0);
 if (!($12)) {
  ___assert_fail((9944|0),(7696|0),3862,(9920|0));
  // unreachable;
 }
 $13 = $5;
 $14 = ($13|0)<(39);
 if (!($14)) {
  ___assert_fail((9944|0),(7696|0),3862,(9920|0));
  // unreachable;
 }
 $15 = $6;
 $16 = ($15|0)>=(0);
 if (!($16)) {
  ___assert_fail((10000|0),(7696|0),3863,(9920|0));
  // unreachable;
 }
 $17 = $6;
 $18 = ($17|0)<(39);
 if (!($18)) {
  ___assert_fail((10000|0),(7696|0),3863,(9920|0));
  // unreachable;
 }
 $19 = $5;
 $20 = (10056 + (($19*56)|0)|0);
 $SourceInfo = $20;
 $21 = $6;
 $22 = (10056 + (($21*56)|0)|0);
 $DestInfo = $22;
 $23 = $SourceInfo;
 $24 = (($23) + 41|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25<<24>>24)!=(0);
 if ($26) {
  $27 = $DestInfo;
  $28 = (($27) + 41|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)!=(0);
  if ($30) {
   $31 = $5;
   $32 = $6;
   $33 = ($31|0)==($32|0);
   if ($33) {
    $34 = $2;
    $35 = $1;
    $36 = $3;
    $37 = $4;
    $38 = $6;
    $39 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($36,$37,1,$38)|0);
    _memcpy(($34|0),($35|0),($39|0))|0;
    $0 = 1;
    $352 = $0;
    STACKTOP = sp;return ($352|0);
   }
   $40 = $5;
   $41 = ($40|0)==(2);
   if ($41) {
    $42 = $6;
    $43 = ($42|0)==(0);
    if ($43) {
     $44 = $1;
     $45 = $3;
     $46 = $4;
     $47 = $5;
     $48 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($45,$46,1,$47)|0);
     $49 = (($44) + ($48)|0);
     $lpLast = $49;
     while(1) {
      $50 = $1;
      $51 = $lpLast;
      $52 = ($50>>>0)<($51>>>0);
      if (!($52)) {
       break;
      }
      $53 = $1;
      $54 = HEAP8[$53>>0]|0;
      $55 = $2;
      HEAP8[$55>>0] = $54;
      $56 = $1;
      $57 = (($56) + 1|0);
      $58 = HEAP8[$57>>0]|0;
      $59 = $2;
      $60 = (($59) + 1|0);
      HEAP8[$60>>0] = $58;
      $61 = $1;
      $62 = (($61) + 2|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $2;
      $65 = (($64) + 2|0);
      HEAP8[$65>>0] = $63;
      $66 = $2;
      $67 = (($66) + 3|0);
      HEAP8[$67>>0] = -1;
      $68 = $1;
      $69 = (($68) + 3|0);
      $1 = $69;
      $70 = $2;
      $71 = (($70) + 4|0);
      $2 = $71;
     }
     $0 = 1;
     $352 = $0;
     STACKTOP = sp;return ($352|0);
    }
   }
   $72 = $5;
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = $6;
    $75 = ($74|0)==(2);
    if ($75) {
     $76 = $1;
     $77 = $3;
     $78 = $4;
     $79 = $5;
     $80 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($77,$78,1,$79)|0);
     $81 = (($76) + ($80)|0);
     $lpLast1 = $81;
     while(1) {
      $82 = $1;
      $83 = $lpLast1;
      $84 = ($82>>>0)<($83>>>0);
      if (!($84)) {
       break;
      }
      $85 = $1;
      $86 = HEAP8[$85>>0]|0;
      $87 = $2;
      HEAP8[$87>>0] = $86;
      $88 = $1;
      $89 = (($88) + 1|0);
      $90 = HEAP8[$89>>0]|0;
      $91 = $2;
      $92 = (($91) + 1|0);
      HEAP8[$92>>0] = $90;
      $93 = $1;
      $94 = (($93) + 2|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = $2;
      $97 = (($96) + 2|0);
      HEAP8[$97>>0] = $95;
      $98 = $1;
      $99 = (($98) + 4|0);
      $1 = $99;
      $100 = $2;
      $101 = (($100) + 3|0);
      $2 = $101;
     }
     $0 = 1;
     $352 = $0;
     STACKTOP = sp;return ($352|0);
    }
   }
   $102 = $SourceInfo;
   $103 = (($102) + 40|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = ($104<<24>>24)!=(0);
   if (!($105)) {
    $106 = $DestInfo;
    $107 = (($106) + 40|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)!=(0);
    if (!($109)) {
     $160 = $SourceInfo;
     $161 = (($160) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162>>>0)<=(1);
     if ($163) {
      $164 = $DestInfo;
      $165 = (($164) + 4|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166>>>0)<=(1);
      if ($167) {
       $168 = $1;
       $169 = $2;
       $170 = $3;
       $171 = $4;
       $172 = $SourceInfo;
       $173 = $DestInfo;
       $174 = (__Z16ConvertTemplatedIhhEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($168,$169,$170,$171,$172,$173)|0);
       $0 = $174;
       $352 = $0;
       STACKTOP = sp;return ($352|0);
      }
      $175 = $DestInfo;
      $176 = (($175) + 4|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177>>>0)<=(2);
      if ($178) {
       $179 = $1;
       $180 = $2;
       $181 = $3;
       $182 = $4;
       $183 = $SourceInfo;
       $184 = $DestInfo;
       $185 = (__Z16ConvertTemplatedIhtEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($179,$180,$181,$182,$183,$184)|0);
       $0 = $185;
       $352 = $0;
       STACKTOP = sp;return ($352|0);
      }
      $186 = $DestInfo;
      $187 = (($186) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ($188>>>0)<=(4);
      if ($189) {
       $190 = $1;
       $191 = $2;
       $192 = $3;
       $193 = $4;
       $194 = $SourceInfo;
       $195 = $DestInfo;
       $196 = (__Z16ConvertTemplatedIhjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($190,$191,$192,$193,$194,$195)|0);
       $0 = $196;
       $352 = $0;
       STACKTOP = sp;return ($352|0);
      }
      $197 = $DestInfo;
      $198 = (($197) + 4|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ($199>>>0)<=(8);
      if ($200) {
       $201 = $1;
       $202 = $2;
       $203 = $3;
       $204 = $4;
       $205 = $SourceInfo;
       $206 = $DestInfo;
       $207 = (__Z16ConvertTemplatedIhyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($201,$202,$203,$204,$205,$206)|0);
       $0 = $207;
       $352 = $0;
       STACKTOP = sp;return ($352|0);
      }
     } else {
      $208 = $SourceInfo;
      $209 = (($208) + 4|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ($210>>>0)<=(2);
      if ($211) {
       $212 = $DestInfo;
       $213 = (($212) + 4|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($214>>>0)<=(1);
       if ($215) {
        $216 = $1;
        $217 = $2;
        $218 = $3;
        $219 = $4;
        $220 = $SourceInfo;
        $221 = $DestInfo;
        $222 = (__Z16ConvertTemplatedIthEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($216,$217,$218,$219,$220,$221)|0);
        $0 = $222;
        $352 = $0;
        STACKTOP = sp;return ($352|0);
       }
       $223 = $DestInfo;
       $224 = (($223) + 4|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = ($225>>>0)<=(2);
       if ($226) {
        $227 = $1;
        $228 = $2;
        $229 = $3;
        $230 = $4;
        $231 = $SourceInfo;
        $232 = $DestInfo;
        $233 = (__Z16ConvertTemplatedIttEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($227,$228,$229,$230,$231,$232)|0);
        $0 = $233;
        $352 = $0;
        STACKTOP = sp;return ($352|0);
       }
       $234 = $DestInfo;
       $235 = (($234) + 4|0);
       $236 = HEAP32[$235>>2]|0;
       $237 = ($236>>>0)<=(4);
       if ($237) {
        $238 = $1;
        $239 = $2;
        $240 = $3;
        $241 = $4;
        $242 = $SourceInfo;
        $243 = $DestInfo;
        $244 = (__Z16ConvertTemplatedItjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($238,$239,$240,$241,$242,$243)|0);
        $0 = $244;
        $352 = $0;
        STACKTOP = sp;return ($352|0);
       }
       $245 = $DestInfo;
       $246 = (($245) + 4|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = ($247>>>0)<=(8);
       if ($248) {
        $249 = $1;
        $250 = $2;
        $251 = $3;
        $252 = $4;
        $253 = $SourceInfo;
        $254 = $DestInfo;
        $255 = (__Z16ConvertTemplatedItyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($249,$250,$251,$252,$253,$254)|0);
        $0 = $255;
        $352 = $0;
        STACKTOP = sp;return ($352|0);
       }
      } else {
       $256 = $SourceInfo;
       $257 = (($256) + 4|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = ($258>>>0)<=(4);
       if ($259) {
        $260 = $DestInfo;
        $261 = (($260) + 4|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = ($262>>>0)<=(1);
        if ($263) {
         $264 = $1;
         $265 = $2;
         $266 = $3;
         $267 = $4;
         $268 = $SourceInfo;
         $269 = $DestInfo;
         $270 = (__Z16ConvertTemplatedIjhEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($264,$265,$266,$267,$268,$269)|0);
         $0 = $270;
         $352 = $0;
         STACKTOP = sp;return ($352|0);
        }
        $271 = $DestInfo;
        $272 = (($271) + 4|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ($273>>>0)<=(2);
        if ($274) {
         $275 = $1;
         $276 = $2;
         $277 = $3;
         $278 = $4;
         $279 = $SourceInfo;
         $280 = $DestInfo;
         $281 = (__Z16ConvertTemplatedIjtEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($275,$276,$277,$278,$279,$280)|0);
         $0 = $281;
         $352 = $0;
         STACKTOP = sp;return ($352|0);
        }
        $282 = $DestInfo;
        $283 = (($282) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = ($284>>>0)<=(4);
        if ($285) {
         $286 = $1;
         $287 = $2;
         $288 = $3;
         $289 = $4;
         $290 = $SourceInfo;
         $291 = $DestInfo;
         $292 = (__Z16ConvertTemplatedIjjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($286,$287,$288,$289,$290,$291)|0);
         $0 = $292;
         $352 = $0;
         STACKTOP = sp;return ($352|0);
        }
        $293 = $DestInfo;
        $294 = (($293) + 4|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($295>>>0)<=(8);
        if ($296) {
         $297 = $1;
         $298 = $2;
         $299 = $3;
         $300 = $4;
         $301 = $SourceInfo;
         $302 = $DestInfo;
         $303 = (__Z16ConvertTemplatedIjyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($297,$298,$299,$300,$301,$302)|0);
         $0 = $303;
         $352 = $0;
         STACKTOP = sp;return ($352|0);
        }
       } else {
        $304 = $SourceInfo;
        $305 = (($304) + 4|0);
        $306 = HEAP32[$305>>2]|0;
        $307 = ($306>>>0)<=(8);
        if ($307) {
         $308 = $DestInfo;
         $309 = (($308) + 4|0);
         $310 = HEAP32[$309>>2]|0;
         $311 = ($310>>>0)<=(1);
         if ($311) {
          $312 = $1;
          $313 = $2;
          $314 = $3;
          $315 = $4;
          $316 = $SourceInfo;
          $317 = $DestInfo;
          $318 = (__Z16ConvertTemplatedIyhEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($312,$313,$314,$315,$316,$317)|0);
          $0 = $318;
          $352 = $0;
          STACKTOP = sp;return ($352|0);
         }
         $319 = $DestInfo;
         $320 = (($319) + 4|0);
         $321 = HEAP32[$320>>2]|0;
         $322 = ($321>>>0)<=(2);
         if ($322) {
          $323 = $1;
          $324 = $2;
          $325 = $3;
          $326 = $4;
          $327 = $SourceInfo;
          $328 = $DestInfo;
          $329 = (__Z16ConvertTemplatedIytEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($323,$324,$325,$326,$327,$328)|0);
          $0 = $329;
          $352 = $0;
          STACKTOP = sp;return ($352|0);
         }
         $330 = $DestInfo;
         $331 = (($330) + 4|0);
         $332 = HEAP32[$331>>2]|0;
         $333 = ($332>>>0)<=(4);
         if ($333) {
          $334 = $1;
          $335 = $2;
          $336 = $3;
          $337 = $4;
          $338 = $SourceInfo;
          $339 = $DestInfo;
          $340 = (__Z16ConvertTemplatedIyjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($334,$335,$336,$337,$338,$339)|0);
          $0 = $340;
          $352 = $0;
          STACKTOP = sp;return ($352|0);
         }
         $341 = $DestInfo;
         $342 = (($341) + 4|0);
         $343 = HEAP32[$342>>2]|0;
         $344 = ($343>>>0)<=(8);
         if ($344) {
          $345 = $1;
          $346 = $2;
          $347 = $3;
          $348 = $4;
          $349 = $SourceInfo;
          $350 = $DestInfo;
          $351 = (__Z16ConvertTemplatedIyyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($345,$346,$347,$348,$349,$350)|0);
          $0 = $351;
          $352 = $0;
          STACKTOP = sp;return ($352|0);
         }
        }
       }
      }
     }
     $0 = 0;
     $352 = $0;
     STACKTOP = sp;return ($352|0);
    }
   }
   $110 = $1;
   $lpSourceRGBA = $110;
   $bResult = 1;
   $111 = $5;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $3;
    $114 = $4;
    $115 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($113,$114,1,0)|0);
    $116 = (__Znaj($115)|0);
    $lpSourceRGBA = $116;
   }
   $117 = $5;
   switch ($117|0) {
   case 0:  {
    break;
   }
   case 20: case 13:  {
    $118 = $1;
    $119 = $lpSourceRGBA;
    $120 = $3;
    $121 = $4;
    $122 = (__ZN6VTFLib8CVTFFile14DecompressDXT1EPhS1_jj($118,$119,$120,$121)|0);
    $bResult = $122;
    break;
   }
   case 14:  {
    $123 = $1;
    $124 = $lpSourceRGBA;
    $125 = $3;
    $126 = $4;
    $127 = (__ZN6VTFLib8CVTFFile14DecompressDXT3EPhS1_jj($123,$124,$125,$126)|0);
    $bResult = $127;
    break;
   }
   case 15:  {
    $128 = $1;
    $129 = $lpSourceRGBA;
    $130 = $3;
    $131 = $4;
    $132 = (__ZN6VTFLib8CVTFFile14DecompressDXT5EPhS1_jj($128,$129,$130,$131)|0);
    $bResult = $132;
    break;
   }
   default: {
    $133 = $1;
    $134 = $lpSourceRGBA;
    $135 = $3;
    $136 = $4;
    $137 = $5;
    $138 = (__ZN6VTFLib8CVTFFile7ConvertEPhS1_jj17tagVTFImageFormatS2_($133,$134,$135,$136,$137,0)|0);
    $bResult = $138;
   }
   }
   $139 = $bResult;
   $140 = ($139<<24>>24)!=(0);
   if ($140) {
    $141 = $6;
    if ((($141|0) == 15) | (($141|0) == 14) | (($141|0) == 20) | (($141|0) == 13)) {
     $142 = $lpSourceRGBA;
     $143 = $2;
     $144 = $3;
     $145 = $4;
     $146 = $6;
     $147 = (__ZN6VTFLib8CVTFFile12CompressDXTnEPhS1_jj17tagVTFImageFormat($142,$143,$144,$145,$146)|0);
     $bResult = $147;
    } else {
     $148 = $lpSourceRGBA;
     $149 = $2;
     $150 = $3;
     $151 = $4;
     $152 = $6;
     $153 = (__ZN6VTFLib8CVTFFile7ConvertEPhS1_jj17tagVTFImageFormatS2_($148,$149,$150,$151,0,$152)|0);
     $bResult = $153;
    }
   }
   $154 = $lpSourceRGBA;
   $155 = $1;
   $156 = ($154|0)!=($155|0);
   if ($156) {
    $157 = $lpSourceRGBA;
    $158 = ($157|0)==(0|0);
    if (!($158)) {
     __ZdaPv($157);
    }
   }
   $159 = $bResult;
   $0 = $159;
   $352 = $0;
   STACKTOP = sp;return ($352|0);
  }
 }
 __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,12240,0);
 $0 = 0;
 $352 = $0;
 STACKTOP = sp;return ($352|0);
}
function __ZNK6VTFLib8CVTFFile7GetDataEjjjj($this,$uiFrame,$uiFace,$uiSlice,$uiMipmapLevel) {
 $this = $this|0;
 $uiFrame = $uiFrame|0;
 $uiFace = $uiFace|0;
 $uiSlice = $uiSlice|0;
 $uiMipmapLevel = $uiMipmapLevel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $uiFrame;
 $3 = $uiFace;
 $4 = $uiSlice;
 $5 = $uiMipmapLevel;
 $6 = $1;
 $7 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($6)|0);
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  $9 = (($6) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = $3;
  $13 = $4;
  $14 = $5;
  $15 = HEAP32[$6>>2]|0;
  $16 = (($15) + 52|0);
  $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
  $18 = (__ZNK6VTFLib8CVTFFile17ComputeDataOffsetEjjjj17tagVTFImageFormat($6,$11,$12,$13,$14,$17)|0);
  $19 = (($10) + ($18)|0);
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6VTFLib8CVTFFile7DestroyEv($1);
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile7DestroyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = HEAP32[$1>>2]|0;
   $6 = (($5) + 68|0);
   $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
   $8 = ($4>>>0)<($7>>>0);
   if (!($8)) {
    break;
   }
   $9 = $i;
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 336|0);
   $12 = (($11) + ($9<<3)|0);
   $13 = (($12) + 4|0);
   $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8)|(HEAPU8[$13+2>>0]<<16)|(HEAPU8[$13+3>>0]<<24);
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    __ZdaPv($14);
   }
   $16 = $i;
   $17 = (($16) + 1)|0;
   $i = $17;
  }
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  __ZdlPv($18);
 }
 HEAP32[$1>>2] = 0;
 $20 = (($1) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = (($1) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  __ZdaPv($22);
 }
 $24 = (($1) + 8|0);
 HEAP32[$24>>2] = 0;
 $25 = (($1) + 12|0);
 HEAP32[$25>>2] = 0;
 $26 = (($1) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = (($1) + 16|0);
  HEAP32[$29>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdaPv($27);
 $29 = (($1) + 16|0);
 HEAP32[$29>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile6CreateEjjjjj17tagVTFImageFormathhh($this,$uiWidth,$uiHeight,$uiFrames,$uiFaces,$uiSlices,$ImageFormat,$bThumbnail,$bMipmaps,$bNullImageData) {
 $this = $this|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $uiFrames = $uiFrames|0;
 $uiFaces = $uiFaces|0;
 $uiSlices = $uiSlices|0;
 $ImageFormat = $ImageFormat|0;
 $bThumbnail = $bThumbnail|0;
 $bMipmaps = $bMipmaps|0;
 $bNullImageData = $bNullImageData|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $uiNextPowerOfTwo = 0, $uiNextPowerOfTwo1 = 0, $uiNextPowerOfTwo2 = 0, $uiThumbnailHeight = 0, $uiThumbnailWidth = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $this;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $uiFrames;
 $5 = $uiFaces;
 $6 = $uiSlices;
 $7 = $ImageFormat;
 $8 = $bThumbnail;
 $9 = $bMipmaps;
 $10 = $bNullImageData;
 $11 = $1;
 __ZN6VTFLib8CVTFFile7DestroyEv($11);
 $12 = $2;
 $13 = (__ZN6VTFLib8CVTFFile12IsPowerOfTwoEj($11,$12)|0);
 $14 = ($13<<24>>24)!=(0);
 if ($14) {
  $15 = $2;
  $16 = ($15>>>0)>(65535);
  if (!($16)) {
   $25 = $3;
   $26 = (__ZN6VTFLib8CVTFFile12IsPowerOfTwoEj($11,$25)|0);
   $27 = ($26<<24>>24)!=(0);
   if ($27) {
    $28 = $3;
    $29 = ($28>>>0)>(65535);
    if (!($29)) {
     $38 = $6;
     $39 = (__ZN6VTFLib8CVTFFile12IsPowerOfTwoEj($11,$38)|0);
     $40 = ($39<<24>>24)!=(0);
     if ($40) {
      $41 = $6;
      $42 = ($41>>>0)>(65535);
      if (!($42)) {
       $51 = $7;
       $52 = ($51|0)<=(-1);
       if (!($52)) {
        $53 = $7;
        $54 = ($53|0)>=(39);
        if (!($54)) {
         $55 = $7;
         $56 = (__ZN6VTFLib8CVTFFile18GetImageFormatInfoE17tagVTFImageFormat($55)|0);
         $57 = (($56) + 29|0);
         $58 = HEAP8[$57>>0]|0;
         $59 = ($58<<24>>24)!=(0);
         if (!($59)) {
          __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,7120,0);
          $0 = 0;
          $269 = $0;
          STACKTOP = sp;return ($269|0);
         }
         $60 = $4;
         $61 = ($60>>>0)<(1);
         if (!($61)) {
          $62 = $4;
          $63 = ($62>>>0)>(65535);
          if (!($63)) {
           $65 = $5;
           $66 = ($65|0)!=(1);
           if ($66) {
            $67 = $5;
            $68 = ($67|0)!=(6);
            if ($68) {
             $69 = $5;
             $70 = ($69|0)!=(7);
             if ($70) {
              $71 = $5;
              HEAP32[$vararg_buffer16>>2] = $71;
              __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,7184,$vararg_buffer16);
              $0 = 0;
              $269 = $0;
              STACKTOP = sp;return ($269|0);
             }
            }
           }
           $72 = $5;
           $73 = ($72|0)!=(1);
           if ($73) {
            $74 = $5;
            $75 = ($74|0)!=(6);
            if ($75) {
            }
           }
           $76 = (__Znwj(592)|0);
           HEAP32[$11>>2] = $76;
           $77 = HEAP32[$11>>2]|0;
           _memset(($77|0),0,592)|0;
           $78 = HEAP32[$11>>2]|0;
           (_strcpy(($78|0),(7264|0))|0);
           $79 = HEAP32[$11>>2]|0;
           $80 = (($79) + 4|0);
           HEAP8[$80>>0]=7&255;HEAP8[$80+1>>0]=(7>>8)&255;HEAP8[$80+2>>0]=(7>>16)&255;HEAP8[$80+3>>0]=7>>24;
           $81 = HEAP32[$11>>2]|0;
           $82 = (($81) + 4|0);
           $83 = (($82) + 4|0);
           HEAP8[$83>>0]=3&255;HEAP8[$83+1>>0]=(3>>8)&255;HEAP8[$83+2>>0]=(3>>16)&255;HEAP8[$83+3>>0]=3>>24;
           $84 = HEAP32[$11>>2]|0;
           $85 = (($84) + 12|0);
           HEAP8[$85>>0]=0&255;HEAP8[$85+1>>0]=(0>>8)&255;HEAP8[$85+2>>0]=(0>>16)&255;HEAP8[$85+3>>0]=0>>24;
           $86 = $2;
           $87 = $86&65535;
           $88 = HEAP32[$11>>2]|0;
           $89 = (($88) + 16|0);
           HEAP8[$89>>0]=$87&255;HEAP8[$89+1>>0]=$87>>8;
           $90 = $3;
           $91 = $90&65535;
           $92 = HEAP32[$11>>2]|0;
           $93 = (($92) + 18|0);
           HEAP8[$93>>0]=$91&255;HEAP8[$93+1>>0]=$91>>8;
           $94 = $7;
           $95 = (__ZN6VTFLib8CVTFFile18GetImageFormatInfoE17tagVTFImageFormat($94)|0);
           $96 = (($95) + 24|0);
           $97 = HEAPU8[$96>>0]|(HEAPU8[$96+1>>0]<<8)|(HEAPU8[$96+2>>0]<<16)|(HEAPU8[$96+3>>0]<<24);
           $98 = ($97|0)==(1);
           $99 = $98 ? 4096 : 0;
           $100 = $7;
           $101 = (__ZN6VTFLib8CVTFFile18GetImageFormatInfoE17tagVTFImageFormat($100)|0);
           $102 = (($101) + 24|0);
           $103 = HEAPU8[$102>>0]|(HEAPU8[$102+1>>0]<<8)|(HEAPU8[$102+2>>0]<<16)|(HEAPU8[$102+3>>0]<<24);
           $104 = ($103>>>0)>(1);
           $105 = $104 ? 8192 : 0;
           $106 = $99 | $105;
           $107 = $5;
           $108 = ($107|0)==(1);
           $109 = $108 ? 0 : 16384;
           $110 = $106 | $109;
           $111 = $9;
           $112 = ($111<<24>>24)!=(0);
           $113 = $112 ? 0 : 768;
           $114 = $110 | $113;
           $115 = HEAP32[$11>>2]|0;
           $116 = (($115) + 20|0);
           HEAP8[$116>>0]=$114&255;HEAP8[$116+1>>0]=($114>>8)&255;HEAP8[$116+2>>0]=($114>>16)&255;HEAP8[$116+3>>0]=$114>>24;
           $117 = $4;
           $118 = $117&65535;
           $119 = HEAP32[$11>>2]|0;
           $120 = (($119) + 24|0);
           HEAP8[$120>>0]=$118&255;HEAP8[$120+1>>0]=$118>>8;
           $121 = $5;
           $122 = ($121|0)!=(6);
           if ($122) {
            $123 = 1;
           } else {
            $123 = 0;
           }
           $124 = $123 ? 0 : 65535;
           $125 = $124&65535;
           $126 = HEAP32[$11>>2]|0;
           $127 = (($126) + 26|0);
           HEAP8[$127>>0]=$125&255;HEAP8[$127+1>>0]=$125>>8;
           $128 = HEAP32[$11>>2]|0;
           $129 = (($128) + 32|0);
           HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$129>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$129+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$129+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$129+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $130 = HEAP32[$11>>2]|0;
           $131 = (($130) + 32|0);
           $132 = (($131) + 4|0);
           HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$132>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$132+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$132+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$132+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $133 = HEAP32[$11>>2]|0;
           $134 = (($133) + 32|0);
           $135 = (($134) + 8|0);
           HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$135>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$135+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$135+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$135+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $136 = HEAP32[$11>>2]|0;
           $137 = (($136) + 48|0);
           HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$137>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$137+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$137+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$137+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $138 = $7;
           $139 = HEAP32[$11>>2]|0;
           $140 = (($139) + 52|0);
           HEAP8[$140>>0]=$138&255;HEAP8[$140+1>>0]=($138>>8)&255;HEAP8[$140+2>>0]=($138>>16)&255;HEAP8[$140+3>>0]=$138>>24;
           $141 = $9;
           $142 = ($141<<24>>24)!=(0);
           if ($142) {
            $143 = $2;
            $144 = $3;
            $145 = $6;
            $146 = (__ZN6VTFLib8CVTFFile18ComputeMipmapCountEjjj($143,$144,$145)|0);
            $147 = $146&255;
            $148 = $147&255;
            $150 = $148;
           } else {
            $150 = 1;
           }
           $149 = $150&255;
           $151 = HEAP32[$11>>2]|0;
           $152 = (($151) + 56|0);
           HEAP8[$152>>0] = $149;
           $153 = $6;
           $154 = $153&65535;
           $155 = HEAP32[$11>>2]|0;
           $156 = (($155) + 63|0);
           HEAP8[$156>>0]=$154&255;HEAP8[$156+1>>0]=$154>>8;
           $157 = HEAP32[$11>>2]|0;
           $158 = (($157) + 68|0);
           HEAP8[$158>>0]=0&255;HEAP8[$158+1>>0]=(0>>8)&255;HEAP8[$158+2>>0]=(0>>16)&255;HEAP8[$158+3>>0]=0>>24;
           $159 = $8;
           $160 = ($159<<24>>24)!=(0);
           if ($160) {
            $161 = HEAP32[$11>>2]|0;
            $162 = (($161) + 57|0);
            HEAP8[$162>>0]=13&255;HEAP8[$162+1>>0]=(13>>8)&255;HEAP8[$162+2>>0]=(13>>16)&255;HEAP8[$162+3>>0]=13>>24;
            $163 = HEAP32[$11>>2]|0;
            $164 = (($163) + 16|0);
            $165 = HEAPU8[$164>>0]|(HEAPU8[$164+1>>0]<<8);
            $166 = $165&65535;
            $uiThumbnailWidth = $166;
            $167 = HEAP32[$11>>2]|0;
            $168 = (($167) + 18|0);
            $169 = HEAPU8[$168>>0]|(HEAPU8[$168+1>>0]<<8);
            $170 = $169&65535;
            $uiThumbnailHeight = $170;
            while(1) {
             $171 = $uiThumbnailWidth;
             $172 = ($171>>>0)<=(16);
             if ($172) {
              $173 = $uiThumbnailHeight;
              $174 = ($173>>>0)<=(16);
              if ($174) {
               break;
              }
             }
             $175 = $uiThumbnailWidth;
             $176 = $175 >>> 1;
             $uiThumbnailWidth = $176;
             $177 = $uiThumbnailHeight;
             $178 = $177 >>> 1;
             $uiThumbnailHeight = $178;
             $179 = $uiThumbnailWidth;
             $180 = ($179>>>0)<(1);
             if ($180) {
              $uiThumbnailWidth = 1;
             }
             $181 = $uiThumbnailHeight;
             $182 = ($181>>>0)<(1);
             if ($182) {
              $uiThumbnailHeight = 1;
             }
            }
            $183 = $uiThumbnailWidth;
            $184 = $183&255;
            $185 = HEAP32[$11>>2]|0;
            $186 = (($185) + 61|0);
            HEAP8[$186>>0] = $184;
            $187 = $uiThumbnailHeight;
            $188 = $187&255;
            $189 = HEAP32[$11>>2]|0;
            $190 = (($189) + 62|0);
            HEAP8[$190>>0] = $188;
            $191 = HEAP32[$11>>2]|0;
            $192 = (($191) + 61|0);
            $193 = HEAP8[$192>>0]|0;
            $194 = $193&255;
            $195 = HEAP32[$11>>2]|0;
            $196 = (($195) + 62|0);
            $197 = HEAP8[$196>>0]|0;
            $198 = $197&255;
            $199 = HEAP32[$11>>2]|0;
            $200 = (($199) + 57|0);
            $201 = HEAPU8[$200>>0]|(HEAPU8[$200+1>>0]<<8)|(HEAPU8[$200+2>>0]<<16)|(HEAPU8[$200+3>>0]<<24);
            $202 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($194,$198,1,$201)|0);
            $203 = (($11) + 12|0);
            HEAP32[$203>>2] = $202;
            $204 = (($11) + 12|0);
            $205 = HEAP32[$204>>2]|0;
            $206 = (__Znaj($205)|0);
            $207 = (($11) + 16|0);
            HEAP32[$207>>2] = $206;
            $208 = HEAP32[$11>>2]|0;
            $209 = (($208) + 68|0);
            $210 = HEAPU8[$209>>0]|(HEAPU8[$209+1>>0]<<8)|(HEAPU8[$209+2>>0]<<16)|(HEAPU8[$209+3>>0]<<24);
            $211 = (($210) + 1)|0;
            HEAP8[$209>>0]=$211&255;HEAP8[$209+1>>0]=($211>>8)&255;HEAP8[$209+2>>0]=($211>>16)&255;HEAP8[$209+3>>0]=$211>>24;
            $212 = HEAP32[$11>>2]|0;
            $213 = (($212) + 80|0);
            $214 = (($213) + ($210<<3)|0);
            HEAP8[$214>>0]=1&255;HEAP8[$214+1>>0]=(1>>8)&255;HEAP8[$214+2>>0]=(1>>16)&255;HEAP8[$214+3>>0]=1>>24;
           } else {
            $215 = HEAP32[$11>>2]|0;
            $216 = (($215) + 57|0);
            HEAP8[$216>>0]=-1&255;HEAP8[$216+1>>0]=(-1>>8)&255;HEAP8[$216+2>>0]=(-1>>16)&255;HEAP8[$216+3>>0]=-1>>24;
            $217 = HEAP32[$11>>2]|0;
            $218 = (($217) + 61|0);
            HEAP8[$218>>0] = 0;
            $219 = HEAP32[$11>>2]|0;
            $220 = (($219) + 62|0);
            HEAP8[$220>>0] = 0;
            $221 = (($11) + 12|0);
            HEAP32[$221>>2] = 0;
            $222 = (($11) + 16|0);
            HEAP32[$222>>2] = 0;
           }
           $223 = HEAP32[$11>>2]|0;
           $224 = (($223) + 16|0);
           $225 = HEAPU8[$224>>0]|(HEAPU8[$224+1>>0]<<8);
           $226 = $225&65535;
           $227 = HEAP32[$11>>2]|0;
           $228 = (($227) + 18|0);
           $229 = HEAPU8[$228>>0]|(HEAPU8[$228+1>>0]<<8);
           $230 = $229&65535;
           $231 = HEAP32[$11>>2]|0;
           $232 = (($231) + 63|0);
           $233 = HEAPU8[$232>>0]|(HEAPU8[$232+1>>0]<<8);
           $234 = $233&65535;
           $235 = HEAP32[$11>>2]|0;
           $236 = (($235) + 56|0);
           $237 = HEAP8[$236>>0]|0;
           $238 = $237&255;
           $239 = HEAP32[$11>>2]|0;
           $240 = (($239) + 52|0);
           $241 = HEAPU8[$240>>0]|(HEAPU8[$240+1>>0]<<8)|(HEAPU8[$240+2>>0]<<16)|(HEAPU8[$240+3>>0]<<24);
           $242 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjjj17tagVTFImageFormat($226,$230,$234,$238,$241)|0);
           $243 = $4;
           $244 = Math_imul($242, $243)|0;
           $245 = $5;
           $246 = Math_imul($244, $245)|0;
           $247 = (($11) + 4|0);
           HEAP32[$247>>2] = $246;
           $248 = (($11) + 4|0);
           $249 = HEAP32[$248>>2]|0;
           $250 = (__Znaj($249)|0);
           $251 = (($11) + 8|0);
           HEAP32[$251>>2] = $250;
           $252 = HEAP32[$11>>2]|0;
           $253 = (($252) + 68|0);
           $254 = HEAPU8[$253>>0]|(HEAPU8[$253+1>>0]<<8)|(HEAPU8[$253+2>>0]<<16)|(HEAPU8[$253+3>>0]<<24);
           $255 = (($254) + 1)|0;
           HEAP8[$253>>0]=$255&255;HEAP8[$253+1>>0]=($255>>8)&255;HEAP8[$253+2>>0]=($255>>16)&255;HEAP8[$253+3>>0]=$255>>24;
           $256 = HEAP32[$11>>2]|0;
           $257 = (($256) + 80|0);
           $258 = (($257) + ($254<<3)|0);
           HEAP8[$258>>0]=48&255;HEAP8[$258+1>>0]=(48>>8)&255;HEAP8[$258+2>>0]=(48>>16)&255;HEAP8[$258+3>>0]=48>>24;
           $259 = $10;
           $260 = ($259<<24>>24)!=(0);
           if ($260) {
            $261 = (($11) + 16|0);
            $262 = HEAP32[$261>>2]|0;
            $263 = (($11) + 12|0);
            $264 = HEAP32[$263>>2]|0;
            _memset(($262|0),0,($264|0))|0;
            $265 = (($11) + 8|0);
            $266 = HEAP32[$265>>2]|0;
            $267 = (($11) + 4|0);
            $268 = HEAP32[$267>>2]|0;
            _memset(($266|0),0,($268|0))|0;
           }
           __ZN6VTFLib8CVTFFile16ComputeResourcesEv($11);
           $0 = 1;
           $269 = $0;
           STACKTOP = sp;return ($269|0);
          }
         }
         $64 = $4;
         HEAP32[$vararg_buffer13>>2] = $64;
         __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,7152,$vararg_buffer13);
         $0 = 0;
         $269 = $0;
         STACKTOP = sp;return ($269|0);
        }
       }
       __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,7096,0);
       $0 = 0;
       $269 = $0;
       STACKTOP = sp;return ($269|0);
      }
     }
     $43 = $3;
     $44 = ($43|0)==(0);
     if ($44) {
      __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,6960,0);
     } else {
      $45 = $6;
      $46 = (__ZN6VTFLib8CVTFFile14NextPowerOfTwoEj($11,$45)|0);
      $uiNextPowerOfTwo2 = $46;
      $47 = $6;
      $48 = $uiNextPowerOfTwo2;
      $49 = $48 >>> 1;
      $50 = $uiNextPowerOfTwo2;
      HEAP32[$vararg_buffer8>>2] = $47;
      $vararg_ptr11 = (($vararg_buffer8) + 4|0);
      HEAP32[$vararg_ptr11>>2] = $49;
      $vararg_ptr12 = (($vararg_buffer8) + 8|0);
      HEAP32[$vararg_ptr12>>2] = $50;
      __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,7008,$vararg_buffer8);
     }
     $0 = 0;
     $269 = $0;
     STACKTOP = sp;return ($269|0);
    }
   }
   $30 = $3;
   $31 = ($30|0)==(0);
   if ($31) {
    __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,6824,0);
   } else {
    $32 = $3;
    $33 = (__ZN6VTFLib8CVTFFile14NextPowerOfTwoEj($11,$32)|0);
    $uiNextPowerOfTwo1 = $33;
    $34 = $3;
    $35 = $uiNextPowerOfTwo1;
    $36 = $35 >>> 1;
    $37 = $uiNextPowerOfTwo1;
    HEAP32[$vararg_buffer3>>2] = $34;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $36;
    $vararg_ptr7 = (($vararg_buffer3) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $37;
    __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,6872,$vararg_buffer3);
   }
   $0 = 0;
   $269 = $0;
   STACKTOP = sp;return ($269|0);
  }
 }
 $17 = $2;
 $18 = ($17|0)==(0);
 if ($18) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,6688,0);
 } else {
  $19 = $2;
  $20 = (__ZN6VTFLib8CVTFFile14NextPowerOfTwoEj($11,$19)|0);
  $uiNextPowerOfTwo = $20;
  $21 = $2;
  $22 = $uiNextPowerOfTwo;
  $23 = $22 >>> 1;
  $24 = $uiNextPowerOfTwo;
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $23;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $24;
  __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,6736,$vararg_buffer);
 }
 $0 = 0;
 $269 = $0;
 STACKTOP = sp;return ($269|0);
}
function __ZN6VTFLib8CVTFFile12IsPowerOfTwoEj($this,$uiSize) {
 $this = $this|0;
 $uiSize = $uiSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $uiSize;
 $2 = $1;
 $3 = ($2>>>0)>(0);
 if ($3) {
  $4 = $1;
  $5 = $1;
  $6 = (($5) - 1)|0;
  $7 = $4 & $6;
  $8 = ($7|0)==(0);
  $10 = $8;
 } else {
  $10 = 0;
 }
 $9 = $10&1;
 STACKTOP = sp;return ($9|0);
}
function __ZN6VTFLib8CVTFFile14NextPowerOfTwoEj($this,$uiSize) {
 $this = $this|0;
 $uiSize = $uiSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $uiSize;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $6 = $2;
 $7 = (__ZN6VTFLib8CVTFFile12IsPowerOfTwoEj($3,$6)|0);
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  $9 = $2;
  $0 = $9;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $10 = $2;
 $11 = (($10) + -1)|0;
 $2 = $11;
 $i = 1;
 while(1) {
  $12 = $i;
  $13 = ($12>>>0)<=(16);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $2;
  $16 = $i;
  $17 = $15 >>> $16;
  $18 = $14 | $17;
  $2 = $18;
  $19 = $i;
  $20 = $19 << 1;
  $i = $20;
 }
 $21 = $2;
 $22 = (($21) + 1)|0;
 $2 = $22;
 $23 = $2;
 $0 = $23;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN6VTFLib8CVTFFile18ComputeMipmapCountEjjj($uiWidth,$uiHeight,$uiDepth) {
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $uiDepth = $uiDepth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uiWidth;
 $1 = $uiHeight;
 $2 = $uiDepth;
 $uiCount = 0;
 $3 = $0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $2;
   $8 = ($7|0)!=(0);
   if ($8) {
    while(1) {
     $9 = $uiCount;
     $10 = (($9) + 1)|0;
     $uiCount = $10;
     $11 = $0;
     $12 = $11 >>> 1;
     $0 = $12;
     $13 = $1;
     $14 = $13 >>> 1;
     $1 = $14;
     $15 = $2;
     $16 = $15 >>> 1;
     $2 = $16;
     $17 = $0;
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = $1;
      $20 = ($19|0)==(0);
      if ($20) {
       $21 = $2;
       $22 = ($21|0)==(0);
       if ($22) {
        break;
       }
      }
     }
    }
    $23 = $uiCount;
    STACKTOP = sp;return ($23|0);
   }
  }
 }
 ___assert_fail((9696|0),(7696|0),2958,(9768|0));
 // unreachable;
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile16ComputeImageSizeEjjjj17tagVTFImageFormat($uiWidth,$uiHeight,$uiDepth,$uiMipmaps,$ImageFormat) {
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $uiDepth = $uiDepth|0;
 $uiMipmaps = $uiMipmaps|0;
 $ImageFormat = $ImageFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $uiImageSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uiWidth;
 $1 = $uiHeight;
 $2 = $uiDepth;
 $3 = $uiMipmaps;
 $4 = $ImageFormat;
 $uiImageSize = 0;
 $5 = $0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___assert_fail((9696|0),(7696|0),2926,(9744|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  ___assert_fail((9696|0),(7696|0),2926,(9744|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  ___assert_fail((9696|0),(7696|0),2926,(9744|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $3;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = $1;
  $16 = $2;
  $17 = $4;
  $18 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($14,$15,$16,$17)|0);
  $19 = $uiImageSize;
  $20 = (($19) + ($18))|0;
  $uiImageSize = $20;
  $21 = $0;
  $22 = $21 >>> 1;
  $0 = $22;
  $23 = $1;
  $24 = $23 >>> 1;
  $1 = $24;
  $25 = $2;
  $26 = $25 >>> 1;
  $2 = $26;
  $27 = $0;
  $28 = ($27>>>0)<(1);
  if ($28) {
   $0 = 1;
  }
  $29 = $1;
  $30 = ($29>>>0)<(1);
  if ($30) {
   $1 = 1;
  }
  $31 = $2;
  $32 = ($31>>>0)<(1);
  if ($32) {
   $2 = 1;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $uiImageSize;
 STACKTOP = sp;return ($35|0);
}
function __ZN6VTFLib8CVTFFile16ComputeResourcesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $i = 0, $uiOffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($1)|0);
 $3 = ($2<<24>>24)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (__ZNK6VTFLib8CVTFFile20GetSupportsResourcesEv($1)|0);
 $5 = ($4<<24>>24)!=(0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = (($6) + 68|0);
  HEAP8[$7>>0]=0&255;HEAP8[$7+1>>0]=(0>>8)&255;HEAP8[$7+2>>0]=(0>>16)&255;HEAP8[$7+3>>0]=0>>24;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
 $cond = ($10|0)==(7);
 if ($cond) {
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 4|0);
  $13 = (($12) + 4|0);
  $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8)|(HEAPU8[$13+2>>0]<<16)|(HEAPU8[$13+3>>0]<<24);
  switch ($14|0) {
  case 4:  {
   $28 = HEAP32[$1>>2]|0;
   $29 = (($28) + 68|0);
   $30 = HEAPU8[$29>>0]|(HEAPU8[$29+1>>0]<<8)|(HEAPU8[$29+2>>0]<<16)|(HEAPU8[$29+3>>0]<<24);
   $31 = $30<<3;
   $32 = (80 + ($31))|0;
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + 12|0);
   HEAP8[$34>>0]=$32&255;HEAP8[$34+1>>0]=($32>>8)&255;HEAP8[$34+2>>0]=($32>>16)&255;HEAP8[$34+3>>0]=$32>>24;
   break;
  }
  case 1:  {
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 12|0);
   HEAP8[$18>>0]=64&255;HEAP8[$18+1>>0]=(64>>8)&255;HEAP8[$18+2>>0]=(64>>16)&255;HEAP8[$18+3>>0]=64>>24;
   break;
  }
  case 2:  {
   $19 = HEAP32[$1>>2]|0;
   $20 = (($19) + 12|0);
   HEAP8[$20>>0]=80&255;HEAP8[$20+1>>0]=(80>>8)&255;HEAP8[$20+2>>0]=(80>>16)&255;HEAP8[$20+3>>0]=80>>24;
   break;
  }
  case 5:  {
   $35 = HEAP32[$1>>2]|0;
   $36 = (($35) + 68|0);
   $37 = HEAPU8[$36>>0]|(HEAPU8[$36+1>>0]<<8)|(HEAPU8[$36+2>>0]<<16)|(HEAPU8[$36+3>>0]<<24);
   $38 = $37<<3;
   $39 = (80 + ($38))|0;
   $40 = HEAP32[$1>>2]|0;
   $41 = (($40) + 12|0);
   HEAP8[$41>>0]=$39&255;HEAP8[$41+1>>0]=($39>>8)&255;HEAP8[$41+2>>0]=($39>>16)&255;HEAP8[$41+3>>0]=$39>>24;
   break;
  }
  case 0:  {
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 12|0);
   HEAP8[$16>>0]=64&255;HEAP8[$16+1>>0]=(64>>8)&255;HEAP8[$16+2>>0]=(64>>16)&255;HEAP8[$16+3>>0]=64>>24;
   break;
  }
  case 3:  {
   $21 = HEAP32[$1>>2]|0;
   $22 = (($21) + 68|0);
   $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
   $24 = $23<<3;
   $25 = (80 + ($24))|0;
   $26 = HEAP32[$1>>2]|0;
   $27 = (($26) + 12|0);
   HEAP8[$27>>0]=$25&255;HEAP8[$27+1>>0]=($25>>8)&255;HEAP8[$27+2>>0]=($25>>16)&255;HEAP8[$27+3>>0]=$25>>24;
   break;
  }
  default: {
  }
  }
 }
 $42 = HEAP32[$1>>2]|0;
 $43 = (($42) + 12|0);
 $44 = HEAPU8[$43>>0]|(HEAPU8[$43+1>>0]<<8)|(HEAPU8[$43+2>>0]<<16)|(HEAPU8[$43+3>>0]<<24);
 $uiOffset = $44;
 $i = 0;
 while(1) {
  $45 = $i;
  $46 = HEAP32[$1>>2]|0;
  $47 = (($46) + 68|0);
  $48 = HEAPU8[$47>>0]|(HEAPU8[$47+1>>0]<<8)|(HEAPU8[$47+2>>0]<<16)|(HEAPU8[$47+3>>0]<<24);
  $49 = ($45>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) + 80|0);
  $53 = (($52) + ($50<<3)|0);
  $54 = HEAPU8[$53>>0]|(HEAPU8[$53+1>>0]<<8)|(HEAPU8[$53+2>>0]<<16)|(HEAPU8[$53+3>>0]<<24);
  if ((($54|0) == 1)) {
   $55 = $uiOffset;
   $56 = $i;
   $57 = HEAP32[$1>>2]|0;
   $58 = (($57) + 80|0);
   $59 = (($58) + ($56<<3)|0);
   $60 = (($59) + 4|0);
   HEAP8[$60>>0]=$55&255;HEAP8[$60+1>>0]=($55>>8)&255;HEAP8[$60+2>>0]=($55>>16)&255;HEAP8[$60+3>>0]=$55>>24;
   $61 = (($1) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $uiOffset;
   $64 = (($63) + ($62))|0;
   $uiOffset = $64;
  } else if ((($54|0) == 48)) {
   $65 = $uiOffset;
   $66 = $i;
   $67 = HEAP32[$1>>2]|0;
   $68 = (($67) + 80|0);
   $69 = (($68) + ($66<<3)|0);
   $70 = (($69) + 4|0);
   HEAP8[$70>>0]=$65&255;HEAP8[$70+1>>0]=($65>>8)&255;HEAP8[$70+2>>0]=($65>>16)&255;HEAP8[$70+3>>0]=$65>>24;
   $71 = (($1) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $uiOffset;
   $74 = (($73) + ($72))|0;
   $uiOffset = $74;
  } else {
   $75 = $i;
   $76 = HEAP32[$1>>2]|0;
   $77 = (($76) + 80|0);
   $78 = (($77) + ($75<<3)|0);
   $79 = (($78) + 3|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $81 & 2;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = $uiOffset;
    $85 = $i;
    $86 = HEAP32[$1>>2]|0;
    $87 = (($86) + 80|0);
    $88 = (($87) + ($85<<3)|0);
    $89 = (($88) + 4|0);
    HEAP8[$89>>0]=$84&255;HEAP8[$89+1>>0]=($84>>8)&255;HEAP8[$89+2>>0]=($84>>16)&255;HEAP8[$89+3>>0]=$84>>24;
    $90 = $i;
    $91 = HEAP32[$1>>2]|0;
    $92 = (($91) + 336|0);
    $93 = (($92) + ($90<<3)|0);
    $94 = HEAPU8[$93>>0]|(HEAPU8[$93+1>>0]<<8)|(HEAPU8[$93+2>>0]<<16)|(HEAPU8[$93+3>>0]<<24);
    $95 = (4 + ($94))|0;
    $96 = $uiOffset;
    $97 = (($96) + ($95))|0;
    $uiOffset = $97;
   }
  }
  $98 = $i;
  $99 = (($98) + 1)|0;
  $i = $99;
 }
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile6CreateEjjPhRK20tagSVTFCreateOptions($this,$uiWidth,$uiHeight,$lpImageDataRGBA8888,$VTFCreateOptions) {
 $this = $this|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $lpImageDataRGBA8888 = $lpImageDataRGBA8888|0;
 $VTFCreateOptions = $VTFCreateOptions|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $0 = $this;
 $1 = $uiWidth;
 $2 = $uiHeight;
 HEAP32[$3>>2] = $lpImageDataRGBA8888;
 $4 = $VTFCreateOptions;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $4;
 $9 = (__ZN6VTFLib8CVTFFile6CreateEjjjjjPPhRK20tagSVTFCreateOptions($5,$6,$7,1,1,1,$3,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN6VTFLib8CVTFFile6CreateEjjjjjPPhRK20tagSVTFCreateOptions($this,$uiWidth,$uiHeight,$uiFrames,$uiFaces,$uiSlices,$lpImageDataRGBA8888,$VTFCreateOptions) {
 $this = $this|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $uiFrames = $uiFrames|0;
 $uiFaces = $uiFaces|0;
 $uiSlices = $uiSlices|0;
 $lpImageDataRGBA8888 = $lpImageDataRGBA8888|0;
 $VTFCreateOptions = $VTFCreateOptions|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0.0;
 var $583 = 0, $584 = 0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0.0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0.0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $i11 = 0, $i12 = 0, $i2 = 0, $i5 = 0, $i8 = 0, $j = 0;
 var $j3 = 0, $j6 = 0, $j9 = 0, $k = 0, $k10 = 0, $k4 = 0, $k7 = 0, $lpNewImageDataRGBA8888 = 0, $sInverse = 0.0, $sX = 0, $sY = 0, $sZ = 0, $uiCount = 0, $uiFlag = 0, $uiNewHeight = 0, $uiNewWidth = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $sX = sp + 68|0;
 $sY = sp + 64|0;
 $sZ = sp + 60|0;
 $1 = $this;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $uiFrames;
 $5 = $uiFaces;
 $6 = $uiSlices;
 $7 = $lpImageDataRGBA8888;
 $8 = $VTFCreateOptions;
 $12 = $1;
 $uiCount = 0;
 $13 = $4;
 $14 = $uiCount;
 $15 = ($13>>>0)>($14>>>0);
 if ($15) {
  $16 = $4;
  $uiCount = $16;
 }
 $17 = $5;
 $18 = $uiCount;
 $19 = ($17>>>0)>($18>>>0);
 if ($19) {
  $20 = $5;
  $uiCount = $20;
 }
 $21 = $6;
 $22 = $uiCount;
 $23 = ($21>>>0)>($22>>>0);
 if ($23) {
  $24 = $6;
  $uiCount = $24;
 }
 $lpNewImageDataRGBA8888 = 0;
 $25 = $4;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $5;
  $28 = ($27>>>0)>(1);
  if ($28) {
   $29 = $6;
   $30 = ($29>>>0)>(1);
   if (!($30)) {
    label = 10;
   }
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 do {
  if ((label|0) == 10) {
   $31 = $4;
   $32 = ($31>>>0)>(1);
   if ($32) {
    $33 = $5;
    $34 = ($33|0)==(1);
    if ($34) {
     $35 = $6;
     $36 = ($35>>>0)>(1);
     if ($36) {
      break;
     }
    }
   }
   $37 = $4;
   $38 = ($37>>>0)>(1);
   if ($38) {
    $39 = $5;
    $40 = ($39>>>0)>(1);
    if ($40) {
     $41 = $6;
     $42 = ($41|0)==(1);
     if ($42) {
      break;
     }
    }
   }
   $43 = $8;
   $44 = HEAPU8[$43>>0]|(HEAPU8[$43+1>>0]<<8)|(HEAPU8[$43+2>>0]<<16)|(HEAPU8[$43+3>>0]<<24);
   $45 = ($44|0)!=(7);
   if (!($45)) {
    $46 = $8;
    $47 = (($46) + 4|0);
    $48 = HEAPU8[$47>>0]|(HEAPU8[$47+1>>0]<<8)|(HEAPU8[$47+2>>0]<<16)|(HEAPU8[$47+3>>0]<<24);
    $49 = ($48>>>0)<(0);
    if (!($49)) {
     $50 = $8;
     $51 = (($50) + 4|0);
     $52 = HEAPU8[$51>>0]|(HEAPU8[$51+1>>0]<<8)|(HEAPU8[$51+2>>0]<<16)|(HEAPU8[$51+3>>0]<<24);
     $53 = ($52>>>0)>(5);
     if (!($53)) {
      $59 = $8;
      $60 = HEAPU8[$59>>0]|(HEAPU8[$59+1>>0]<<8)|(HEAPU8[$59+2>>0]<<16)|(HEAPU8[$59+3>>0]<<24);
      $61 = ($60|0)==(7);
      if ($61) {
       $62 = $8;
       $63 = (($62) + 4|0);
       $64 = HEAPU8[$63>>0]|(HEAPU8[$63+1>>0]<<8)|(HEAPU8[$63+2>>0]<<16)|(HEAPU8[$63+3>>0]<<24);
       $65 = ($64>>>0)<(2);
       if ($65) {
        $66 = $6;
        $67 = ($66>>>0)>(1);
        if ($67) {
         HEAP32[$vararg_buffer6>>2] = 7;
         $vararg_ptr9 = (($vararg_buffer6) + 4|0);
         HEAP32[$vararg_ptr9>>2] = 2;
         __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,7480,$vararg_buffer6);
         $0 = 0;
         $645 = $0;
         STACKTOP = sp;return ($645|0);
        }
       }
      }
      $68 = $8;
      $69 = HEAPU8[$68>>0]|(HEAPU8[$68+1>>0]<<8)|(HEAPU8[$68+2>>0]<<16)|(HEAPU8[$68+3>>0]<<24);
      $70 = ($69|0)==(7);
      if ($70) {
       $71 = $8;
       $72 = (($71) + 4|0);
       $73 = HEAPU8[$72>>0]|(HEAPU8[$72+1>>0]<<8)|(HEAPU8[$72+2>>0]<<16)|(HEAPU8[$72+3>>0]<<24);
       $74 = ($73>>>0)<(1);
       if ($74) {
        $75 = $5;
        $76 = ($75|0)==(7);
        if ($76) {
         HEAP32[$vararg_buffer10>>2] = 7;
         $vararg_ptr13 = (($vararg_buffer10) + 4|0);
         HEAP32[$vararg_ptr13>>2] = 1;
         __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,7544,$vararg_buffer10);
         $0 = 0;
         $645 = $0;
         STACKTOP = sp;return ($645|0);
        }
       }
      }
      $77 = $8;
      $78 = (($77) + 36|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = ($79<<24>>24)!=(0);
      if ($80) {
       $81 = $6;
       $82 = ($81>>>0)>(1);
       if ($82) {
        __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,7600,0);
        $0 = 0;
        $645 = $0;
        STACKTOP = sp;return ($645|0);
       }
      }
      $83 = $8;
      $84 = (($83) + 47|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = ($85<<24>>24)!=(0);
      L44: do {
       if ($86) {
        $87 = $2;
        $uiNewWidth = $87;
        $88 = $3;
        $uiNewHeight = $88;
        $89 = $8;
        $90 = (($89) + 48|0);
        $91 = HEAPU8[$90>>0]|(HEAPU8[$90+1>>0]<<8)|(HEAPU8[$90+2>>0]<<16)|(HEAPU8[$90+3>>0]<<24);
        if ((($91|0) == 3)) {
         $195 = $8;
         $196 = (($195) + 60|0);
         $197 = HEAPU8[$196>>0]|(HEAPU8[$196+1>>0]<<8)|(HEAPU8[$196+2>>0]<<16)|(HEAPU8[$196+3>>0]<<24);
         $uiNewWidth = $197;
         $198 = $8;
         $199 = (($198) + 64|0);
         $200 = HEAPU8[$199>>0]|(HEAPU8[$199+1>>0]<<8)|(HEAPU8[$199+2>>0]<<16)|(HEAPU8[$199+3>>0]<<24);
         $uiNewHeight = $200;
        } else if ((($91|0) == 2) | (($91|0) == 1) | (($91|0) == 0)) {
         $92 = $2;
         __THREW__ = 0;
         $93 = (invoke_iii(375,($12|0),($92|0))|0);
         $94 = __THREW__; __THREW__ = 0;
         $95 = $94&1;
         if ($95) {
          break;
         }
         $96 = ($93<<24>>24)!=(0);
         if ($96) {
          $97 = $2;
          $uiNewWidth = $97;
         } else {
          $113 = $2;
          __THREW__ = 0;
          $114 = (invoke_iii(376,($12|0),($113|0))|0);
          $115 = __THREW__; __THREW__ = 0;
          $116 = $115&1;
          if ($116) {
           break;
          }
          $uiNewWidth = $114;
          $117 = $8;
          $118 = (($117) + 48|0);
          $119 = HEAPU8[$118>>0]|(HEAPU8[$118+1>>0]<<8)|(HEAPU8[$118+2>>0]<<16)|(HEAPU8[$118+3>>0]<<24);
          $120 = ($119|0)==(0);
          if ($120) {
           $121 = $2;
           $122 = $uiNewWidth;
           $123 = $122 >>> 1;
           $124 = (($121) - ($123))|0;
           $125 = $uiNewWidth;
           $126 = $2;
           $127 = (($125) - ($126))|0;
           $128 = ($124>>>0)<($127>>>0);
           if ($128) {
            $129 = $uiNewWidth;
            $130 = $129 >>> 1;
            $uiNewWidth = $130;
           }
          } else {
           $131 = $8;
           $132 = (($131) + 48|0);
           $133 = HEAPU8[$132>>0]|(HEAPU8[$132+1>>0]<<8)|(HEAPU8[$132+2>>0]<<16)|(HEAPU8[$132+3>>0]<<24);
           $134 = ($133|0)==(2);
           if ($134) {
            $135 = $uiNewWidth;
            $136 = $135 >>> 1;
            $uiNewWidth = $136;
           }
          }
          $137 = $uiNewWidth;
          $138 = ($137|0)==(0);
          if ($138) {
           $uiNewWidth = 1;
          }
         }
         $139 = $8;
         $140 = (($139) + 68|0);
         $141 = HEAP8[$140>>0]|0;
         $142 = ($141<<24>>24)!=(0);
         do {
          if ($142) {
           $143 = $uiNewWidth;
           $144 = $8;
           $145 = (($144) + 69|0);
           $146 = HEAPU8[$145>>0]|(HEAPU8[$145+1>>0]<<8)|(HEAPU8[$145+2>>0]<<16)|(HEAPU8[$145+3>>0]<<24);
           $147 = ($143>>>0)>($146>>>0);
           if (!($147)) {
            break;
           }
           $148 = $8;
           $149 = (($148) + 69|0);
           $150 = HEAPU8[$149>>0]|(HEAPU8[$149+1>>0]<<8)|(HEAPU8[$149+2>>0]<<16)|(HEAPU8[$149+3>>0]<<24);
           $uiNewWidth = $150;
          }
         } while(0);
         $151 = $3;
         __THREW__ = 0;
         $152 = (invoke_iii(375,($12|0),($151|0))|0);
         $153 = __THREW__; __THREW__ = 0;
         $154 = $153&1;
         if ($154) {
          break;
         }
         $155 = ($152<<24>>24)!=(0);
         if ($155) {
          $156 = $3;
          $uiNewHeight = $156;
         } else {
          $157 = $3;
          __THREW__ = 0;
          $158 = (invoke_iii(376,($12|0),($157|0))|0);
          $159 = __THREW__; __THREW__ = 0;
          $160 = $159&1;
          if ($160) {
           break;
          }
          $uiNewHeight = $158;
          $161 = $8;
          $162 = (($161) + 48|0);
          $163 = HEAPU8[$162>>0]|(HEAPU8[$162+1>>0]<<8)|(HEAPU8[$162+2>>0]<<16)|(HEAPU8[$162+3>>0]<<24);
          $164 = ($163|0)==(0);
          if ($164) {
           $165 = $3;
           $166 = $uiNewHeight;
           $167 = $166 >>> 1;
           $168 = (($165) - ($167))|0;
           $169 = $uiNewHeight;
           $170 = $3;
           $171 = (($169) - ($170))|0;
           $172 = ($168>>>0)<($171>>>0);
           if ($172) {
            $173 = $uiNewHeight;
            $174 = $173 >>> 1;
            $uiNewHeight = $174;
           }
          } else {
           $175 = $8;
           $176 = (($175) + 48|0);
           $177 = HEAPU8[$176>>0]|(HEAPU8[$176+1>>0]<<8)|(HEAPU8[$176+2>>0]<<16)|(HEAPU8[$176+3>>0]<<24);
           $178 = ($177|0)==(2);
           if ($178) {
            $179 = $uiNewHeight;
            $180 = $179 >>> 1;
            $uiNewHeight = $180;
           }
          }
          $181 = $uiNewHeight;
          $182 = ($181|0)==(0);
          if ($182) {
           $uiNewHeight = 1;
          }
         }
         $183 = $8;
         $184 = (($183) + 68|0);
         $185 = HEAP8[$184>>0]|0;
         $186 = ($185<<24>>24)!=(0);
         do {
          if ($186) {
           $187 = $uiNewHeight;
           $188 = $8;
           $189 = (($188) + 73|0);
           $190 = HEAPU8[$189>>0]|(HEAPU8[$189+1>>0]<<8)|(HEAPU8[$189+2>>0]<<16)|(HEAPU8[$189+3>>0]<<24);
           $191 = ($187>>>0)>($190>>>0);
           if (!($191)) {
            break;
           }
           $192 = $8;
           $193 = (($192) + 73|0);
           $194 = HEAPU8[$193>>0]|(HEAPU8[$193+1>>0]<<8)|(HEAPU8[$193+2>>0]<<16)|(HEAPU8[$193+3>>0]<<24);
           $uiNewHeight = $194;
          }
         } while(0);
        }
        $201 = $uiNewWidth;
        $202 = $uiNewWidth;
        $203 = (($202) - 1)|0;
        $204 = $201 & $203;
        $205 = ($204|0)==(0);
        if (!($205)) {
         __THREW__ = 0;
         invoke_viiii(377,(7656|0),(7696|0),656,(7712|0));
         $206 = __THREW__; __THREW__ = 0;
         $207 = $206&1;
         if ($207) {
          break;
         }
         // unreachable;
        }
        $208 = $uiNewHeight;
        $209 = $uiNewHeight;
        $210 = (($209) - 1)|0;
        $211 = $208 & $210;
        $212 = ($211|0)==(0);
        if (!($212)) {
         __THREW__ = 0;
         invoke_viiii(377,(7720|0),(7696|0),657,(7712|0));
         $213 = __THREW__; __THREW__ = 0;
         $214 = $213&1;
         if ($214) {
          break;
         }
         // unreachable;
        }
        $215 = $2;
        $216 = $uiNewWidth;
        $217 = ($215|0)!=($216|0);
        if ($217) {
         label = 86;
        } else {
         $218 = $3;
         $219 = $uiNewHeight;
         $220 = ($218|0)!=($219|0);
         if ($220) {
          label = 86;
         }
        }
        do {
         if ((label|0) == 86) {
          $221 = $uiCount;
          $$arith = $221<<2;
          $$overflow = ($221>>>0)>(1073741823);
          $222 = $$overflow ? -1 : $$arith;
          __THREW__ = 0;
          $223 = (invoke_ii(378,($222|0))|0);
          $224 = __THREW__; __THREW__ = 0;
          $225 = $224&1;
          if ($225) {
           break L44;
          }
          $lpNewImageDataRGBA8888 = $223;
          $226 = $lpNewImageDataRGBA8888;
          $227 = $uiCount;
          $228 = $227<<2;
          _memset(($226|0),0,($228|0))|0;
          $i = 0;
          while(1) {
           $229 = $i;
           $230 = $uiCount;
           $231 = ($229>>>0)<($230>>>0);
           if (!($231)) {
            label = 96;
            break;
           }
           $232 = $uiNewWidth;
           $233 = $uiNewHeight;
           __THREW__ = 0;
           $234 = (invoke_iiiii(379,($232|0),($233|0),1,0)|0);
           $235 = __THREW__; __THREW__ = 0;
           $236 = $235&1;
           if ($236) {
            break L44;
           }
           __THREW__ = 0;
           $237 = (invoke_ii(378,($234|0))|0);
           $238 = __THREW__; __THREW__ = 0;
           $239 = $238&1;
           if ($239) {
            break L44;
           }
           $240 = $i;
           $241 = $lpNewImageDataRGBA8888;
           $242 = (($241) + ($240<<2)|0);
           HEAP32[$242>>2] = $237;
           $243 = $i;
           $244 = $7;
           $245 = (($244) + ($243<<2)|0);
           $246 = HEAP32[$245>>2]|0;
           $247 = $i;
           $248 = $lpNewImageDataRGBA8888;
           $249 = (($248) + ($247<<2)|0);
           $250 = HEAP32[$249>>2]|0;
           $251 = $2;
           $252 = $3;
           $253 = $uiNewWidth;
           $254 = $uiNewHeight;
           $255 = $8;
           $256 = (($255) + 52|0);
           $257 = HEAPU8[$256>>0]|(HEAPU8[$256+1>>0]<<8)|(HEAPU8[$256+2>>0]<<16)|(HEAPU8[$256+3>>0]<<24);
           $258 = $8;
           $259 = (($258) + 56|0);
           $260 = HEAPU8[$259>>0]|(HEAPU8[$259+1>>0]<<8)|(HEAPU8[$259+2>>0]<<16)|(HEAPU8[$259+3>>0]<<24);
           __THREW__ = 0;
           $261 = (invoke_iiiiiiiii(380,($246|0),($250|0),($251|0),($252|0),($253|0),($254|0),($257|0),($260|0))|0);
           $262 = __THREW__; __THREW__ = 0;
           $263 = $262&1;
           if ($263) {
            break L44;
           }
           $264 = ($261<<24>>24)!=(0);
           if (!($264)) {
            break;
           }
           $268 = $i;
           $269 = (($268) + 1)|0;
           $i = $269;
          }
          if ((label|0) == 96) {
           $270 = $uiNewWidth;
           $2 = $270;
           $271 = $uiNewHeight;
           $3 = $271;
           $272 = $lpNewImageDataRGBA8888;
           $7 = $272;
           break;
          }
          $265 = (___cxa_allocate_exception(4)|0);
          HEAP32[$265>>2] = 0;
          __THREW__ = 0;
          invoke_viii(381,($265|0),(27128|0),(0|0));
          $266 = __THREW__; __THREW__ = 0;
          $267 = $266&1;
          if ($267) {
           break L44;
          }
          // unreachable;
         }
        } while(0);
        label = 98;
       } else {
        label = 98;
       }
      } while(0);
      L122: do {
       if ((label|0) == 98) {
        $273 = $2;
        $274 = $3;
        $275 = $4;
        $276 = $5;
        $277 = $8;
        $278 = (($277) + 104|0);
        $279 = HEAP8[$278>>0]|0;
        $280 = ($279<<24>>24)!=(0);
        if ($280) {
         $281 = $5;
         $282 = ($281|0)==(6);
         $283 = $282;
        } else {
         $283 = 0;
        }
        $284 = $283 ? 1 : 0;
        $285 = (($276) + ($284))|0;
        $286 = $6;
        $287 = $8;
        $288 = (($287) + 8|0);
        $289 = HEAPU8[$288>>0]|(HEAPU8[$288+1>>0]<<8)|(HEAPU8[$288+2>>0]<<16)|(HEAPU8[$288+3>>0]<<24);
        $290 = $8;
        $291 = (($290) + 45|0);
        $292 = HEAP8[$291>>0]|0;
        $293 = $8;
        $294 = (($293) + 36|0);
        $295 = HEAP8[$294>>0]|0;
        __THREW__ = 0;
        $296 = (invoke_iiiiiiiiiii(382,($12|0),($273|0),($274|0),($275|0),($285|0),($286|0),($289|0),($292|0),($295|0),0)|0);
        $297 = __THREW__; __THREW__ = 0;
        $298 = $297&1;
        if (!($298)) {
         $299 = ($296<<24>>24)!=(0);
         if (!($299)) {
          $300 = (___cxa_allocate_exception(4)|0);
          HEAP32[$300>>2] = 0;
          __THREW__ = 0;
          invoke_viii(381,($300|0),(27128|0),(0|0));
          $301 = __THREW__; __THREW__ = 0;
          $302 = $301&1;
          if ($302) {
           break;
          }
          // unreachable;
         }
         $303 = $8;
         $304 = HEAPU8[$303>>0]|(HEAPU8[$303+1>>0]<<8)|(HEAPU8[$303+2>>0]<<16)|(HEAPU8[$303+3>>0]<<24);
         $305 = HEAP32[$12>>2]|0;
         $306 = (($305) + 4|0);
         HEAP8[$306>>0]=$304&255;HEAP8[$306+1>>0]=($304>>8)&255;HEAP8[$306+2>>0]=($304>>16)&255;HEAP8[$306+3>>0]=$304>>24;
         $307 = $8;
         $308 = (($307) + 4|0);
         $309 = HEAPU8[$308>>0]|(HEAPU8[$308+1>>0]<<8)|(HEAPU8[$308+2>>0]<<16)|(HEAPU8[$308+3>>0]<<24);
         $310 = HEAP32[$12>>2]|0;
         $311 = (($310) + 4|0);
         $312 = (($311) + 4|0);
         HEAP8[$312>>0]=$309&255;HEAP8[$312+1>>0]=($309>>8)&255;HEAP8[$312+2>>0]=($309>>16)&255;HEAP8[$312+3>>0]=$309>>24;
         __THREW__ = 0;
         invoke_vi(383,($12|0));
         $313 = __THREW__; __THREW__ = 0;
         $314 = $313&1;
         if (!($314)) {
          $315 = $8;
          $316 = (($315) + 77|0);
          $317 = HEAP8[$316>>0]|0;
          $318 = ($317<<24>>24)!=(0);
          if ($318) {
           $i1 = 0;
           while(1) {
            $319 = $i1;
            $320 = $4;
            $321 = ($319>>>0)<($320>>>0);
            if (!($321)) {
             break;
            }
            $j = 0;
            while(1) {
             $322 = $j;
             $323 = $5;
             $324 = ($322>>>0)<($323>>>0);
             if (!($324)) {
              break;
             }
             $k = 0;
             while(1) {
              $325 = $k;
              $326 = $6;
              $327 = ($325>>>0)<($326>>>0);
              if (!($327)) {
               break;
              }
              $328 = $i1;
              $329 = $j;
              $330 = (($328) + ($329))|0;
              $331 = $k;
              $332 = (($330) + ($331))|0;
              $333 = $7;
              $334 = (($333) + ($332<<2)|0);
              $335 = HEAP32[$334>>2]|0;
              $336 = HEAP32[$12>>2]|0;
              $337 = (($336) + 16|0);
              $338 = HEAPU8[$337>>0]|(HEAPU8[$337+1>>0]<<8);
              $339 = $338&65535;
              $340 = HEAP32[$12>>2]|0;
              $341 = (($340) + 18|0);
              $342 = HEAPU8[$341>>0]|(HEAPU8[$341+1>>0]<<8);
              $343 = $342&65535;
              $344 = $8;
              $345 = (($344) + 78|0);
              HEAP8[tempDoublePtr>>0]=HEAP8[$345>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$345+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$345+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$345+3>>0];$346 = +HEAPF32[tempDoublePtr>>2];
              __THREW__ = 0;
              invoke_viiid(384,($335|0),($339|0),($343|0),(+$346));
              $347 = __THREW__; __THREW__ = 0;
              $348 = $347&1;
              if ($348) {
               break L122;
              }
              $349 = $k;
              $350 = (($349) + 1)|0;
              $k = $350;
             }
             $351 = $j;
             $352 = (($351) + 1)|0;
             $j = $352;
            }
            $353 = $i1;
            $354 = (($353) + 1)|0;
            $i1 = $354;
           }
          }
          $355 = $8;
          $356 = (($355) + 82|0);
          $357 = HEAP8[$356>>0]|0;
          $358 = ($357<<24>>24)!=(0);
          do {
           if ($358) {
            $359 = $5;
            $360 = ($359|0)==(1);
            if (!($360)) {
             break;
            }
            $361 = $8;
            $362 = (($361) + 83|0);
            $363 = HEAPU8[$362>>0]|(HEAPU8[$362+1>>0]<<8)|(HEAPU8[$362+2>>0]<<16)|(HEAPU8[$362+3>>0]<<24);
            $364 = ($363|0)==(5);
            if ($364) {
            } else {
             $365 = HEAP32[$12>>2]|0;
             $366 = (($365) + 20|0);
             $367 = HEAPU8[$366>>0]|(HEAPU8[$366+1>>0]<<8)|(HEAPU8[$366+2>>0]<<16)|(HEAPU8[$366+3>>0]<<24);
             $368 = $367 | 128;
             HEAP8[$366>>0]=$368&255;HEAP8[$366+1>>0]=($368>>8)&255;HEAP8[$366+2>>0]=($368>>16)&255;HEAP8[$366+3>>0]=$368>>24;
            }
            $i2 = 0;
            L159: while(1) {
             $369 = $i2;
             $370 = $4;
             $371 = ($369>>>0)<($370>>>0);
             if (!($371)) {
              label = 139;
              break;
             }
             $j3 = 0;
             while(1) {
              $372 = $j3;
              $373 = $5;
              $374 = ($372>>>0)<($373>>>0);
              if (!($374)) {
               break;
              }
              $k4 = 0;
              while(1) {
               $375 = $k4;
               $376 = $6;
               $377 = ($375>>>0)<($376>>>0);
               if (!($377)) {
                break;
               }
               $378 = $i2;
               $379 = $j3;
               $380 = (($378) + ($379))|0;
               $381 = $k4;
               $382 = (($380) + ($381))|0;
               $383 = $7;
               $384 = (($383) + ($382<<2)|0);
               $385 = HEAP32[$384>>2]|0;
               $386 = HEAP32[$12>>2]|0;
               $387 = (($386) + 16|0);
               $388 = HEAPU8[$387>>0]|(HEAPU8[$387+1>>0]<<8);
               $389 = $388&65535;
               $390 = HEAP32[$12>>2]|0;
               $391 = (($390) + 18|0);
               $392 = HEAPU8[$391>>0]|(HEAPU8[$391+1>>0]<<8);
               $393 = $392&65535;
               $394 = $8;
               $395 = (($394) + 83|0);
               $396 = HEAPU8[$395>>0]|(HEAPU8[$395+1>>0]<<8)|(HEAPU8[$395+2>>0]<<16)|(HEAPU8[$395+3>>0]<<24);
               $397 = $8;
               $398 = (($397) + 87|0);
               $399 = HEAPU8[$398>>0]|(HEAPU8[$398+1>>0]<<8)|(HEAPU8[$398+2>>0]<<16)|(HEAPU8[$398+3>>0]<<24);
               $400 = $8;
               $401 = (($400) + 91|0);
               $402 = HEAPU8[$401>>0]|(HEAPU8[$401+1>>0]<<8)|(HEAPU8[$401+2>>0]<<16)|(HEAPU8[$401+3>>0]<<24);
               $403 = $8;
               $404 = (($403) + 95|0);
               $405 = HEAP8[$404>>0]|0;
               $406 = $8;
               $407 = (($406) + 96|0);
               HEAP8[tempDoublePtr>>0]=HEAP8[$407>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$407+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$407+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$407+3>>0];$408 = +HEAPF32[tempDoublePtr>>2];
               $409 = $8;
               $410 = (($409) + 100|0);
               $411 = HEAP8[$410>>0]|0;
               $412 = $8;
               $413 = (($412) + 101|0);
               $414 = HEAP8[$413>>0]|0;
               $415 = $8;
               $416 = (($415) + 102|0);
               $417 = HEAP8[$416>>0]|0;
               $418 = $8;
               $419 = (($418) + 103|0);
               $420 = HEAP8[$419>>0]|0;
               __THREW__ = 0;
               $421 = (invoke_iiiiiiiiidiiii(385,($385|0),(0|0),($389|0),($393|0),($396|0),($399|0),($402|0),($405|0),(+$408),($411|0),($414|0),($417|0),($420|0))|0);
               $422 = __THREW__; __THREW__ = 0;
               $423 = $422&1;
               if ($423) {
                break L122;
               }
               $424 = ($421<<24>>24)!=(0);
               if (!($424)) {
                break L159;
               }
               $428 = $k4;
               $429 = (($428) + 1)|0;
               $k4 = $429;
              }
              $430 = $j3;
              $431 = (($430) + 1)|0;
              $j3 = $431;
             }
             $432 = $i2;
             $433 = (($432) + 1)|0;
             $i2 = $433;
            }
            if ((label|0) == 139) {
             break;
            }
            $425 = (___cxa_allocate_exception(4)|0);
            HEAP32[$425>>2] = 0;
            __THREW__ = 0;
            invoke_viii(381,($425|0),(27128|0),(0|0));
            $426 = __THREW__; __THREW__ = 0;
            $427 = $426&1;
            if ($427) {
             break L122;
            }
            // unreachable;
           }
          } while(0);
          $434 = $8;
          $435 = (($434) + 36|0);
          $436 = HEAP8[$435>>0]|0;
          $437 = ($436<<24>>24)!=(0);
          do {
           if ($437) {
            $438 = HEAP32[$12>>2]|0;
            $439 = (($438) + 56|0);
            $440 = HEAP8[$439>>0]|0;
            $441 = $440&255;
            $442 = ($441|0)!=(1);
            if (!($442)) {
             break;
            }
            __THREW__ = 0;
            invoke_viii(386,(13248|0),(7760|0),0);
            $443 = __THREW__; __THREW__ = 0;
            $444 = $443&1;
            if ($444) {
             break L122;
            }
            $445 = (___cxa_allocate_exception(4)|0);
            HEAP32[$445>>2] = 0;
            __THREW__ = 0;
            invoke_viii(381,($445|0),(27128|0),(0|0));
            $446 = __THREW__; __THREW__ = 0;
            $447 = $446&1;
            if ($447) {
             break L122;
            }
            // unreachable;
           }
          } while(0);
          $i5 = 0;
          L186: while(1) {
           $448 = $i5;
           $449 = $4;
           $450 = ($448>>>0)<($449>>>0);
           if (!($450)) {
            break;
           }
           $j6 = 0;
           while(1) {
            $451 = $j6;
            $452 = $5;
            $453 = ($451>>>0)<($452>>>0);
            if (!($453)) {
             break;
            }
            $k7 = 0;
            while(1) {
             $454 = $k7;
             $455 = $6;
             $456 = ($454>>>0)<($455>>>0);
             if (!($456)) {
              break;
             }
             $457 = $i5;
             $458 = $j6;
             $459 = (($457) + ($458))|0;
             $460 = $k7;
             $461 = (($459) + ($460))|0;
             $462 = $7;
             $463 = (($462) + ($461<<2)|0);
             $464 = HEAP32[$463>>2]|0;
             $465 = $i5;
             $466 = $j6;
             $467 = $k7;
             __THREW__ = 0;
             $468 = (invoke_iiiiii(387,($12|0),($465|0),($466|0),($467|0),0)|0);
             $469 = __THREW__; __THREW__ = 0;
             $470 = $469&1;
             if ($470) {
              break L122;
             }
             $471 = HEAP32[$12>>2]|0;
             $472 = (($471) + 16|0);
             $473 = HEAPU8[$472>>0]|(HEAPU8[$472+1>>0]<<8);
             $474 = $473&65535;
             $475 = HEAP32[$12>>2]|0;
             $476 = (($475) + 18|0);
             $477 = HEAPU8[$476>>0]|(HEAPU8[$476+1>>0]<<8);
             $478 = $477&65535;
             $479 = HEAP32[$12>>2]|0;
             $480 = (($479) + 52|0);
             $481 = HEAPU8[$480>>0]|(HEAPU8[$480+1>>0]<<8)|(HEAPU8[$480+2>>0]<<16)|(HEAPU8[$480+3>>0]<<24);
             __THREW__ = 0;
             $482 = (invoke_iiiiii(388,($464|0),($468|0),($474|0),($478|0),($481|0))|0);
             $483 = __THREW__; __THREW__ = 0;
             $484 = $483&1;
             if ($484) {
              break L122;
             }
             $485 = ($482<<24>>24)!=(0);
             if (!($485)) {
              label = 153;
              break L186;
             }
             $489 = $k7;
             $490 = (($489) + 1)|0;
             $k7 = $490;
            }
            $491 = $j6;
            $492 = (($491) + 1)|0;
            $j6 = $492;
           }
           $493 = $i5;
           $494 = (($493) + 1)|0;
           $i5 = $494;
          }
          if ((label|0) == 153) {
           $486 = (___cxa_allocate_exception(4)|0);
           HEAP32[$486>>2] = 0;
           __THREW__ = 0;
           invoke_viii(381,($486|0),(27128|0),(0|0));
           $487 = __THREW__; __THREW__ = 0;
           $488 = $487&1;
           if ($488) {
            break;
           }
           // unreachable;
          }
          $495 = $8;
          $496 = (($495) + 45|0);
          $497 = HEAP8[$496>>0]|0;
          $498 = ($497<<24>>24)!=(0);
          do {
           if ($498) {
            __THREW__ = 0;
            $499 = (invoke_ii(389,($12|0))|0);
            $500 = __THREW__; __THREW__ = 0;
            $501 = $500&1;
            if ($501) {
             break L122;
            }
            $502 = ($499<<24>>24)!=(0);
            if ($502) {
             break;
            }
            $503 = (___cxa_allocate_exception(4)|0);
            HEAP32[$503>>2] = 0;
            __THREW__ = 0;
            invoke_viii(381,($503|0),(27128|0),(0|0));
            $504 = __THREW__; __THREW__ = 0;
            $505 = $504&1;
            if ($505) {
             break L122;
            }
            // unreachable;
           }
          } while(0);
          $506 = $8;
          $507 = (($506) + 104|0);
          $508 = HEAP8[$507>>0]|0;
          $509 = ($508<<24>>24)!=(0);
          do {
           if ($509) {
            $510 = $5;
            $511 = ($510|0)==(6);
            if (!($511)) {
             break;
            }
            __THREW__ = 0;
            $512 = (invoke_ii(390,($12|0))|0);
            $513 = __THREW__; __THREW__ = 0;
            $514 = $513&1;
            if ($514) {
             break L122;
            }
            $515 = ($512<<24>>24)!=(0);
            if ($515) {
             break;
            }
            $516 = (___cxa_allocate_exception(4)|0);
            HEAP32[$516>>2] = 0;
            __THREW__ = 0;
            invoke_viii(381,($516|0),(27128|0),(0|0));
            $517 = __THREW__; __THREW__ = 0;
            $518 = $517&1;
            if ($518) {
             break L122;
            }
            // unreachable;
           }
          } while(0);
          $519 = $8;
          $520 = (($519) + 46|0);
          $521 = HEAP8[$520>>0]|0;
          $522 = ($521<<24>>24)!=(0);
          if ($522) {
           $523 = HEAP32[$12>>2]|0;
           $524 = (($523) + 32|0);
           HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$524>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$524+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$524+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$524+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $525 = HEAP32[$12>>2]|0;
           $526 = (($525) + 32|0);
           $527 = (($526) + 4|0);
           HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$527>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$527+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$527+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$527+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $528 = HEAP32[$12>>2]|0;
           $529 = (($528) + 32|0);
           $530 = (($529) + 8|0);
           HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$530>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$530+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$530+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$530+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $i8 = 0;
           while(1) {
            $531 = $i8;
            $532 = $4;
            $533 = ($531>>>0)<($532>>>0);
            if (!($533)) {
             break;
            }
            $j9 = 0;
            while(1) {
             $534 = $j9;
             $535 = $5;
             $536 = ($534>>>0)<($535>>>0);
             if (!($536)) {
              break;
             }
             $k10 = 0;
             while(1) {
              $537 = $k10;
              $538 = $6;
              $539 = ($537>>>0)<($538>>>0);
              if (!($539)) {
               break;
              }
              $540 = $i8;
              $541 = $j9;
              $542 = (($540) + ($541))|0;
              $543 = $k10;
              $544 = (($542) + ($543))|0;
              $545 = $7;
              $546 = (($545) + ($544<<2)|0);
              $547 = HEAP32[$546>>2]|0;
              $548 = $2;
              $549 = $3;
              __THREW__ = 0;
              invoke_viiiiii(391,($547|0),($548|0),($549|0),($sX|0),($sY|0),($sZ|0));
              $550 = __THREW__; __THREW__ = 0;
              $551 = $550&1;
              if ($551) {
               break L122;
              }
              $552 = +HEAPF32[$sX>>2];
              $553 = HEAP32[$12>>2]|0;
              $554 = (($553) + 32|0);
              HEAP8[tempDoublePtr>>0]=HEAP8[$554>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$554+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$554+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$554+3>>0];$555 = +HEAPF32[tempDoublePtr>>2];
              $556 = $555 + $552;
              HEAPF32[tempDoublePtr>>2]=$556;HEAP8[$554>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$554+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$554+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$554+3>>0]=HEAP8[tempDoublePtr+3>>0];
              $557 = +HEAPF32[$sY>>2];
              $558 = HEAP32[$12>>2]|0;
              $559 = (($558) + 32|0);
              $560 = (($559) + 4|0);
              HEAP8[tempDoublePtr>>0]=HEAP8[$560>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$560+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$560+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$560+3>>0];$561 = +HEAPF32[tempDoublePtr>>2];
              $562 = $561 + $557;
              HEAPF32[tempDoublePtr>>2]=$562;HEAP8[$560>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$560+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$560+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$560+3>>0]=HEAP8[tempDoublePtr+3>>0];
              $563 = +HEAPF32[$sZ>>2];
              $564 = HEAP32[$12>>2]|0;
              $565 = (($564) + 32|0);
              $566 = (($565) + 8|0);
              HEAP8[tempDoublePtr>>0]=HEAP8[$566>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$566+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$566+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$566+3>>0];$567 = +HEAPF32[tempDoublePtr>>2];
              $568 = $567 + $563;
              HEAPF32[tempDoublePtr>>2]=$568;HEAP8[$566>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$566+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$566+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$566+3>>0]=HEAP8[tempDoublePtr+3>>0];
              $569 = $k10;
              $570 = (($569) + 1)|0;
              $k10 = $570;
             }
             $571 = $j9;
             $572 = (($571) + 1)|0;
             $j9 = $572;
            }
            $573 = $i8;
            $574 = (($573) + 1)|0;
            $i8 = $574;
           }
           $575 = $4;
           $576 = $5;
           $577 = Math_imul($575, $576)|0;
           $578 = $6;
           $579 = Math_imul($577, $578)|0;
           $580 = (+($579>>>0));
           $581 = 1.0 / $580;
           $sInverse = $581;
           $582 = $sInverse;
           $583 = HEAP32[$12>>2]|0;
           $584 = (($583) + 32|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$584>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$584+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$584+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$584+3>>0];$585 = +HEAPF32[tempDoublePtr>>2];
           $586 = $585 * $582;
           HEAPF32[tempDoublePtr>>2]=$586;HEAP8[$584>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$584+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$584+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$584+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $587 = $sInverse;
           $588 = HEAP32[$12>>2]|0;
           $589 = (($588) + 32|0);
           $590 = (($589) + 4|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$590>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$590+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$590+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$590+3>>0];$591 = +HEAPF32[tempDoublePtr>>2];
           $592 = $591 * $587;
           HEAPF32[tempDoublePtr>>2]=$592;HEAP8[$590>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$590+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$590+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$590+3>>0]=HEAP8[tempDoublePtr+3>>0];
           $593 = $sInverse;
           $594 = HEAP32[$12>>2]|0;
           $595 = (($594) + 32|0);
           $596 = (($595) + 8|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$596>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$596+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$596+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$596+3>>0];$597 = +HEAPF32[tempDoublePtr>>2];
           $598 = $597 * $593;
           HEAPF32[tempDoublePtr>>2]=$598;HEAP8[$596>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$596+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$596+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$596+3>>0]=HEAP8[tempDoublePtr+3>>0];
          } else {
           $599 = $8;
           $600 = (($599) + 24|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$600>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$600+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$600+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$600+3>>0];$601 = +HEAPF32[tempDoublePtr>>2];
           $602 = $8;
           $603 = (($602) + 24|0);
           $604 = (($603) + 4|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$604>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$604+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$604+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$604+3>>0];$605 = +HEAPF32[tempDoublePtr>>2];
           $606 = $8;
           $607 = (($606) + 24|0);
           $608 = (($607) + 8|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$608>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$608+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$608+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$608+3>>0];$609 = +HEAPF32[tempDoublePtr>>2];
           __THREW__ = 0;
           invoke_viddd(392,($12|0),(+$601),(+$605),(+$609));
           $610 = __THREW__; __THREW__ = 0;
           $611 = $610&1;
           if ($611) {
            break;
           }
          }
          $i11 = 0;
          $uiFlag = 1;
          while(1) {
           $612 = $i11;
           $613 = ($612>>>0)<(30);
           if (!($613)) {
            break;
           }
           $614 = $8;
           $615 = (($614) + 12|0);
           $616 = HEAPU8[$615>>0]|(HEAPU8[$615+1>>0]<<8)|(HEAPU8[$615+2>>0]<<16)|(HEAPU8[$615+3>>0]<<24);
           $617 = $uiFlag;
           $618 = $616 & $617;
           $619 = ($618|0)!=(0);
           if ($619) {
            $620 = $uiFlag;
            __THREW__ = 0;
            invoke_viii(393,($12|0),($620|0),1);
            $621 = __THREW__; __THREW__ = 0;
            $622 = $621&1;
            if ($622) {
             break L122;
            }
           }
           $623 = $i11;
           $624 = (($623) + 1)|0;
           $i11 = $624;
           $625 = $uiFlag;
           $626 = $625 << 1;
           $uiFlag = $626;
          }
          $627 = $8;
          $628 = (($627) + 16|0);
          $629 = HEAPU8[$628>>0]|(HEAPU8[$628+1>>0]<<8)|(HEAPU8[$628+2>>0]<<16)|(HEAPU8[$628+3>>0]<<24);
          __THREW__ = 0;
          invoke_vii(394,($12|0),($629|0));
          $630 = __THREW__; __THREW__ = 0;
          $631 = $630&1;
          if ($631) {
           break;
          }
          $632 = $8;
          $633 = (($632) + 20|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$633>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$633+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$633+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$633+3>>0];$634 = +HEAPF32[tempDoublePtr>>2];
          __THREW__ = 0;
          invoke_vid(395,($12|0),(+$634));
          $635 = __THREW__; __THREW__ = 0;
          $636 = $635&1;
          if ($636) {
           break;
          }
          $0 = 1;
          $645 = $0;
          STACKTOP = sp;return ($645|0);
         }
        }
       }
      } while(0);
      $98 = ___cxa_find_matching_catch(0|0)|0;
      $99 = tempRet0;
      $9 = $98;
      $10 = $99;
      $100 = $9;
      (___cxa_begin_catch(($100|0))|0);
      $101 = $lpNewImageDataRGBA8888;
      $102 = ($101|0)!=(0|0);
      if ($102) {
       $i12 = 0;
       while(1) {
        $103 = $i12;
        $104 = $uiCount;
        $105 = ($103>>>0)<($104>>>0);
        if (!($105)) {
         break;
        }
        $106 = $i12;
        $107 = $lpNewImageDataRGBA8888;
        $108 = (($107) + ($106<<2)|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = ($109|0)==(0|0);
        if (!($110)) {
         __ZdaPv($109);
        }
        $111 = $i12;
        $112 = (($111) + 1)|0;
        $i12 = $112;
       }
       $637 = $lpNewImageDataRGBA8888;
       $638 = ($637|0)==(0|0);
       if (!($638)) {
        __ZdaPv($637);
       }
      }
      __THREW__ = 0;
      invoke_vi(396,($12|0));
      $639 = __THREW__; __THREW__ = 0;
      $640 = $639&1;
      if (!($640)) {
       $0 = 0;
       $11 = 1;
       ___cxa_end_catch();
       $645 = $0;
       STACKTOP = sp;return ($645|0);
      }
      $641 = ___cxa_find_matching_catch()|0;
      $642 = tempRet0;
      $9 = $641;
      $10 = $642;
      __THREW__ = 0;
      invoke_v(397);
      $643 = __THREW__; __THREW__ = 0;
      $644 = $643&1;
      if ($644) {
       $648 = ___cxa_find_matching_catch(0|0)|0;
       $649 = tempRet0;
       ___clang_call_terminate($648);
       // unreachable;
      }
      $646 = $9;
      $647 = $10;
      ___resumeException($646|0);
      // unreachable;
     }
    }
   }
   $54 = $8;
   $55 = HEAPU8[$54>>0]|(HEAPU8[$54+1>>0]<<8)|(HEAPU8[$54+2>>0]<<16)|(HEAPU8[$54+3>>0]<<24);
   $56 = $8;
   $57 = (($56) + 4|0);
   $58 = HEAPU8[$57>>0]|(HEAPU8[$57+1>>0]<<8)|(HEAPU8[$57+2>>0]<<16)|(HEAPU8[$57+3>>0]<<24);
   HEAP32[$vararg_buffer>>2] = $55;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $58;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 7;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = 0;
   $vararg_ptr4 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr4>>2] = 7;
   $vararg_ptr5 = (($vararg_buffer) + 20|0);
   HEAP32[$vararg_ptr5>>2] = 5;
   __ZN6VTFLib11Diagnostics6CError12SetFormattedEPKcz(13248,7424,$vararg_buffer);
   $0 = 0;
   $645 = $0;
   STACKTOP = sp;return ($645|0);
  }
 } while(0);
 __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,7272,0);
 $0 = 0;
 $645 = $0;
 STACKTOP = sp;return ($645|0);
}
function __ZN6VTFLib8CVTFFile6ResizeEPhS1_jjjj18tagVTFMipmapFilter19tagVTFSharpenFilter($lpSourceRGBA8888,$lpDestRGBA8888,$uiSourceWidth,$uiSourceHeight,$uiDestWidth,$uiDestHeight,$ResizeFilter,$SharpenFilter) {
 $lpSourceRGBA8888 = $lpSourceRGBA8888|0;
 $lpDestRGBA8888 = $lpDestRGBA8888|0;
 $uiSourceWidth = $uiSourceWidth|0;
 $uiSourceHeight = $uiSourceHeight|0;
 $uiDestWidth = $uiDestWidth|0;
 $uiDestHeight = $uiDestHeight|0;
 $ResizeFilter = $ResizeFilter|0;
 $SharpenFilter = $SharpenFilter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpSourceRGBA8888;
 $1 = $lpDestRGBA8888;
 $2 = $uiSourceWidth;
 $3 = $uiSourceHeight;
 $4 = $uiDestWidth;
 $5 = $uiDestHeight;
 $6 = $ResizeFilter;
 $7 = $SharpenFilter;
 $8 = $6;
 $9 = ($8|0)>=(0);
 if (!($9)) {
  ___assert_fail((12584|0),(7696|0),4070,(12640|0));
  // unreachable;
 }
 $10 = $6;
 $11 = ($10|0)<(14);
 if (!($11)) {
  ___assert_fail((12584|0),(7696|0),4070,(12640|0));
  // unreachable;
 }
 $12 = $7;
 $13 = ($12|0)>=(0);
 if (!($13)) {
  ___assert_fail((12648|0),(7696|0),4071,(12640|0));
  // unreachable;
 }
 $14 = $7;
 $15 = ($14|0)<(19);
 if ($15) {
  $16 = $0;
  $17 = $1;
  $18 = $2;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  _canvasResize(($16|0),($17|0),($18|0),($19|0),($20|0),($21|0));
  STACKTOP = sp;return 1;
 } else {
  ___assert_fail((12648|0),(7696|0),4071,(12640|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile17CorrectImageGammaEPhjjf($lpImageDataRGBA8888,$uiWidth,$uiHeight,$sGammaCorrection) {
 $lpImageDataRGBA8888 = $lpImageDataRGBA8888|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $sGammaCorrection = +$sGammaCorrection;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $bTable = 0, $i = 0, $lpImageDataRGBA8888End = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bTable = sp + 24|0;
 $0 = $lpImageDataRGBA8888;
 $1 = $uiWidth;
 $2 = $uiHeight;
 $3 = $sGammaCorrection;
 $4 = $3;
 $5 = $4 == 1.0;
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $3;
 $7 = 1.0 / $6;
 $3 = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8>>>0)<(256);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = (+($10>>>0));
  $12 = $11 / 255.0;
  $13 = $12;
  $14 = $3;
  $15 = $14;
  $16 = (+Math_pow((+$13),(+$15)));
  $17 = $16 * 255.0;
  $18 = (~~(($17))&255);
  $19 = $i;
  $20 = (($bTable) + ($19)|0);
  HEAP8[$20>>0] = $18;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $23 = $0;
 $24 = $1;
 $25 = $2;
 $26 = Math_imul($24, $25)|0;
 $27 = $26<<2;
 $28 = (($23) + ($27)|0);
 $lpImageDataRGBA8888End = $28;
 while(1) {
  $29 = $0;
  $30 = $lpImageDataRGBA8888End;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   break;
  }
  $32 = $0;
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($bTable) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $0;
  HEAP8[$37>>0] = $36;
  $38 = $0;
  $39 = (($38) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = (($bTable) + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $0;
  $45 = (($44) + 1|0);
  HEAP8[$45>>0] = $43;
  $46 = $0;
  $47 = (($46) + 2|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (($bTable) + ($49)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $0;
  $53 = (($52) + 2|0);
  HEAP8[$53>>0] = $51;
  $54 = $0;
  $55 = (($54) + 4|0);
  $0 = $55;
 }
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile18ConvertToNormalMapEPhS1_jj18tagVTFKernelFilter28tagVTFHeightConversionMethod23tagVTFNormalAlphaResulthfhhhh($lpSourceRGBA8888,$lpDestRGBA8888,$uiWidth,$uiHeight,$KernelFilter,$HeightConversionMethod,$NormalAlphaResult,$bMinimumZ,$sScale,$bWrap,$bInvertX,$bInvertY,$bInvertZ) {
 $lpSourceRGBA8888 = $lpSourceRGBA8888|0;
 $lpDestRGBA8888 = $lpDestRGBA8888|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $KernelFilter = $KernelFilter|0;
 $HeightConversionMethod = $HeightConversionMethod|0;
 $NormalAlphaResult = $NormalAlphaResult|0;
 $bMinimumZ = $bMinimumZ|0;
 $sScale = +$sScale;
 $bWrap = $bWrap|0;
 $bInvertX = $bInvertX|0;
 $bInvertY = $bInvertY|0;
 $bInvertZ = $bInvertZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpSourceRGBA8888;
 $1 = $lpDestRGBA8888;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $KernelFilter;
 $5 = $HeightConversionMethod;
 $6 = $NormalAlphaResult;
 $7 = $bMinimumZ;
 $8 = $sScale;
 $9 = $bWrap;
 $10 = $bInvertX;
 $11 = $bInvertY;
 $12 = $bInvertZ;
 $13 = $4;
 $14 = ($13|0)>=(0);
 if (!($14)) {
  ___assert_fail((12280|0),(7696|0),4024,(12336|0));
  // unreachable;
 }
 $15 = $4;
 $16 = ($15|0)<(6);
 if (!($16)) {
  ___assert_fail((12280|0),(7696|0),4024,(12336|0));
  // unreachable;
 }
 $17 = $5;
 $18 = ($17|0)>=(0);
 if (!($18)) {
  ___assert_fail((12360|0),(7696|0),4025,(12336|0));
  // unreachable;
 }
 $19 = $5;
 $20 = ($19|0)<(8);
 if (!($20)) {
  ___assert_fail((12360|0),(7696|0),4025,(12336|0));
  // unreachable;
 }
 $21 = $6;
 $22 = ($21|0)>=(0);
 if (!($22)) {
  ___assert_fail((12448|0),(7696|0),4026,(12336|0));
  // unreachable;
 }
 $23 = $6;
 $24 = ($23|0)<(4);
 if ($24) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,12520,0);
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((12448|0),(7696|0),4026,(12336|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile19ConvertFromRGBA8888EPhS1_jj17tagVTFImageFormat($lpSource,$lpDest,$uiWidth,$uiHeight,$DestFormat) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $DestFormat = $DestFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $DestFormat;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZN6VTFLib8CVTFFile7ConvertEPhS1_jj17tagVTFImageFormatS2_($5,$6,$7,$8,0,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN6VTFLib8CVTFFile17GenerateThumbnailEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $lpImageData = 0, $lpThumbnailImageData = 0, $uiMipmapDepth = 0, $uiMipmapHeight = 0, $uiMipmapWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiMipmapWidth = sp + 16|0;
 $uiMipmapHeight = sp + 12|0;
 $uiMipmapDepth = sp + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  $0 = 0;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 $5 = (__ZNK6VTFLib8CVTFFile15GetHasThumbnailEv($2)|0);
 $6 = ($5<<24>>24)!=(0);
 if (!($6)) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,7840,0);
  $0 = 0;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 $7 = (($2) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,7880,0);
  $0 = 0;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = HEAP32[$2>>2]|0;
  $12 = (($11) + 56|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($10>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + 16|0);
  $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
  $19 = $18&65535;
  $20 = HEAP32[$2>>2]|0;
  $21 = (($20) + 18|0);
  $22 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8);
  $23 = $22&65535;
  $24 = $i;
  __ZN6VTFLib8CVTFFile23ComputeMipmapDimensionsEjjjjRjS1_S1_($19,$23,1,$24,$uiMipmapWidth,$uiMipmapHeight,$uiMipmapDepth);
  $25 = HEAP32[$uiMipmapWidth>>2]|0;
  $26 = HEAP32[$2>>2]|0;
  $27 = (($26) + 61|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($25|0)==($29|0);
  if ($30) {
   $31 = HEAP32[$uiMipmapHeight>>2]|0;
   $32 = HEAP32[$2>>2]|0;
   $33 = (($32) + 62|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($31|0)==($35|0);
   if ($36) {
    label = 11;
    break;
   }
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 if ((label|0) == 11) {
  $37 = HEAP32[$2>>2]|0;
  $38 = (($37) + 52|0);
  $39 = HEAPU8[$38>>0]|(HEAPU8[$38+1>>0]<<8)|(HEAPU8[$38+2>>0]<<16)|(HEAPU8[$38+3>>0]<<24);
  $40 = HEAP32[$2>>2]|0;
  $41 = (($40) + 57|0);
  $42 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8)|(HEAPU8[$41+2>>0]<<16)|(HEAPU8[$41+3>>0]<<24);
  $43 = ($39|0)==($42|0);
  do {
   if ($43) {
    $44 = $i;
    $45 = (__ZNK6VTFLib8CVTFFile7GetDataEjjjj($2,0,0,0,$44)|0);
    __ZN6VTFLib8CVTFFile16SetThumbnailDataEPh($2,$45);
   } else {
    $46 = $i;
    $47 = (__ZNK6VTFLib8CVTFFile7GetDataEjjjj($2,0,0,0,$46)|0);
    $48 = (__ZNK6VTFLib8CVTFFile16GetThumbnailDataEv($2)|0);
    $49 = HEAP32[$uiMipmapWidth>>2]|0;
    $50 = HEAP32[$uiMipmapHeight>>2]|0;
    $51 = HEAP32[$2>>2]|0;
    $52 = (($51) + 52|0);
    $53 = HEAPU8[$52>>0]|(HEAPU8[$52+1>>0]<<8)|(HEAPU8[$52+2>>0]<<16)|(HEAPU8[$52+3>>0]<<24);
    $54 = HEAP32[$2>>2]|0;
    $55 = (($54) + 57|0);
    $56 = HEAPU8[$55>>0]|(HEAPU8[$55+1>>0]<<8)|(HEAPU8[$55+2>>0]<<16)|(HEAPU8[$55+3>>0]<<24);
    $57 = (__ZN6VTFLib8CVTFFile7ConvertEPhS1_jj17tagVTFImageFormatS2_($47,$48,$49,$50,$53,$56)|0);
    $58 = ($57<<24>>24)!=(0);
    if ($58) {
     break;
    }
    $0 = 0;
    $147 = $0;
    STACKTOP = sp;return ($147|0);
   }
  } while(0);
  $0 = 1;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 $61 = HEAP32[$2>>2]|0;
 $62 = (($61) + 16|0);
 $63 = HEAPU8[$62>>0]|(HEAPU8[$62+1>>0]<<8);
 $64 = $63&65535;
 $65 = HEAP32[$2>>2]|0;
 $66 = (($65) + 18|0);
 $67 = HEAPU8[$66>>0]|(HEAPU8[$66+1>>0]<<8);
 $68 = $67&65535;
 $69 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($64,$68,1,0)|0);
 $70 = (__Znaj($69)|0);
 $lpImageData = $70;
 $71 = HEAP32[$2>>2]|0;
 $72 = (($71) + 61|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = HEAP32[$2>>2]|0;
 $76 = (($75) + 62|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($74,$78,1,0)|0);
 $80 = (__Znaj($79)|0);
 $lpThumbnailImageData = $80;
 $81 = (__ZNK6VTFLib8CVTFFile7GetDataEjjjj($2,0,0,0,0)|0);
 $82 = $lpImageData;
 $83 = HEAP32[$2>>2]|0;
 $84 = (($83) + 16|0);
 $85 = HEAPU8[$84>>0]|(HEAPU8[$84+1>>0]<<8);
 $86 = $85&65535;
 $87 = HEAP32[$2>>2]|0;
 $88 = (($87) + 18|0);
 $89 = HEAPU8[$88>>0]|(HEAPU8[$88+1>>0]<<8);
 $90 = $89&65535;
 $91 = HEAP32[$2>>2]|0;
 $92 = (($91) + 52|0);
 $93 = HEAPU8[$92>>0]|(HEAPU8[$92+1>>0]<<8)|(HEAPU8[$92+2>>0]<<16)|(HEAPU8[$92+3>>0]<<24);
 $94 = (__ZN6VTFLib8CVTFFile17ConvertToRGBA8888EPhS1_jj17tagVTFImageFormat($81,$82,$86,$90,$93)|0);
 $95 = ($94<<24>>24)!=(0);
 if (!($95)) {
  $96 = $lpImageData;
  $97 = ($96|0)==(0|0);
  if (!($97)) {
   __ZdaPv($96);
  }
  $98 = $lpThumbnailImageData;
  $99 = ($98|0)==(0|0);
  if (!($99)) {
   __ZdaPv($98);
  }
  $0 = 0;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 $100 = $lpImageData;
 $101 = $lpThumbnailImageData;
 $102 = HEAP32[$2>>2]|0;
 $103 = (($102) + 16|0);
 $104 = HEAPU8[$103>>0]|(HEAPU8[$103+1>>0]<<8);
 $105 = $104&65535;
 $106 = HEAP32[$2>>2]|0;
 $107 = (($106) + 18|0);
 $108 = HEAPU8[$107>>0]|(HEAPU8[$107+1>>0]<<8);
 $109 = $108&65535;
 $110 = HEAP32[$2>>2]|0;
 $111 = (($110) + 61|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = $112&255;
 $114 = HEAP32[$2>>2]|0;
 $115 = (($114) + 62|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = (__ZN6VTFLib8CVTFFile6ResizeEPhS1_jjjj18tagVTFMipmapFilter19tagVTFSharpenFilter($100,$101,$105,$109,$113,$117,2,0)|0);
 $119 = ($118<<24>>24)!=(0);
 if (!($119)) {
  $120 = $lpImageData;
  $121 = ($120|0)==(0|0);
  if (!($121)) {
   __ZdaPv($120);
  }
  $122 = $lpThumbnailImageData;
  $123 = ($122|0)==(0|0);
  if (!($123)) {
   __ZdaPv($122);
  }
  $0 = 0;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 $124 = $lpThumbnailImageData;
 $125 = (__ZNK6VTFLib8CVTFFile16GetThumbnailDataEv($2)|0);
 $126 = HEAP32[$2>>2]|0;
 $127 = (($126) + 61|0);
 $128 = HEAP8[$127>>0]|0;
 $129 = $128&255;
 $130 = HEAP32[$2>>2]|0;
 $131 = (($130) + 62|0);
 $132 = HEAP8[$131>>0]|0;
 $133 = $132&255;
 $134 = HEAP32[$2>>2]|0;
 $135 = (($134) + 57|0);
 $136 = HEAPU8[$135>>0]|(HEAPU8[$135+1>>0]<<8)|(HEAPU8[$135+2>>0]<<16)|(HEAPU8[$135+3>>0]<<24);
 $137 = (__ZN6VTFLib8CVTFFile19ConvertFromRGBA8888EPhS1_jj17tagVTFImageFormat($124,$125,$129,$133,$136)|0);
 $138 = ($137<<24>>24)!=(0);
 if ($138) {
  $143 = $lpImageData;
  $144 = ($143|0)==(0|0);
  if (!($144)) {
   __ZdaPv($143);
  }
  $145 = $lpThumbnailImageData;
  $146 = ($145|0)==(0|0);
  if (!($146)) {
   __ZdaPv($145);
  }
  $0 = 1;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 } else {
  $139 = $lpImageData;
  $140 = ($139|0)==(0|0);
  if (!($140)) {
   __ZdaPv($139);
  }
  $141 = $lpThumbnailImageData;
  $142 = ($141|0)==(0|0);
  if (!($142)) {
   __ZdaPv($141);
  }
  $0 = 0;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile17GenerateSphereMapEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0;
 var $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $average = 0, $c = 0, $f = 0, $i = 0, $j = 0, $j1 = 0, $k = 0.0, $l = 0, $lpImageData = 0, $lpSourceEnd = 0, $lpSphereMapData = 0, $lpSphereMapDataPointer = 0, $map = 0, $p = 0, $p2 = 0, $pf = 0, $r = 0, $s = 0.0, $samples = 0, $src = 0;
 var $t = 0.0, $temp = 0.0, $texel = 0, $uiAvgB = 0, $uiAvgG = 0, $uiAvgR = 0, $uiHeight = 0, $uiPixelCount = 0, $uiWidth = 0, $v = 0, $x = 0, $xpos = 0, $y = 0, $ypos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lpImageData = sp + 200|0;
 $map = sp + 168|0;
 $c = sp + 128|0;
 $texel = sp + 116|0;
 $average = sp + 104|0;
 $v = sp + 92|0;
 $r = sp + 80|0;
 $p = sp + 68|0;
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  $0 = 0;
  $379 = $0;
  STACKTOP = sp;return ($379|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 20|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 16384;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,8240,0);
  $0 = 0;
  $379 = $0;
  STACKTOP = sp;return ($379|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + 26|0);
 $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
 $13 = $12&65535;
 $14 = ($13|0)==(65535);
 if ($14) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,8272,0);
  $0 = 0;
  $379 = $0;
  STACKTOP = sp;return ($379|0);
 }
 $15 = (($2) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,8320,0);
  $0 = 0;
  $379 = $0;
  STACKTOP = sp;return ($379|0);
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = (($18) + 16|0);
 $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
 $21 = $20&65535;
 $uiWidth = $21;
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + 18|0);
 $24 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
 $25 = $24&65535;
 $uiHeight = $25;
 ;HEAP32[$lpImageData+0>>2]=0|0;HEAP32[$lpImageData+4>>2]=0|0;HEAP32[$lpImageData+8>>2]=0|0;HEAP32[$lpImageData+12>>2]=0|0;HEAP32[$lpImageData+16>>2]=0|0;HEAP32[$lpImageData+20>>2]=0|0;
 $lpSphereMapData = 0;
 ;HEAP32[$map+0>>2]=HEAP32[8368+0>>2]|0;HEAP32[$map+4>>2]=HEAP32[8368+4>>2]|0;HEAP32[$map+8>>2]=HEAP32[8368+8>>2]|0;HEAP32[$map+12>>2]=HEAP32[8368+12>>2]|0;HEAP32[$map+16>>2]=HEAP32[8368+16>>2]|0;HEAP32[$map+20>>2]=HEAP32[8368+20>>2]|0;
 $samples = 4;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = ($26>>>0)<(6);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = (($map) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $j1 = $30;
  $31 = $uiWidth;
  $32 = $uiHeight;
  $33 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($31,$32,1,0)|0);
  $34 = (__Znaj($33)|0);
  $35 = $j1;
  $36 = (($lpImageData) + ($35<<2)|0);
  HEAP32[$36>>2] = $34;
  $37 = $i;
  $38 = (__ZNK6VTFLib8CVTFFile7GetDataEjjjj($2,0,$37,0,0)|0);
  $39 = $j1;
  $40 = (($lpImageData) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $uiWidth;
  $43 = $uiHeight;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 52|0);
  $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8)|(HEAPU8[$45+2>>0]<<16)|(HEAPU8[$45+3>>0]<<24);
  $47 = (__ZN6VTFLib8CVTFFile17ConvertToRGBA8888EPhS1_jj17tagVTFImageFormat($38,$41,$42,$43,$46)|0);
  $48 = ($47<<24>>24)!=(0);
  if (!($48)) {
   label = 12;
   break;
  }
  $57 = $j1;
  $58 = (($lpImageData) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $j1;
  $61 = (7928 + (($60*52)|0)|0);
  HEAP32[$61>>2] = $59;
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 if ((label|0) == 12) {
  $l = 0;
  while(1) {
   $49 = $l;
   $50 = ($49>>>0)<(6);
   if (!($50)) {
    break;
   }
   $51 = $l;
   $52 = (($lpImageData) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    __ZdaPv($53);
   }
   $55 = $l;
   $56 = (($55) + 1)|0;
   $l = $56;
  }
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,8392,0);
  $0 = 0;
  $379 = $0;
  STACKTOP = sp;return ($379|0);
 }
 $64 = $uiWidth;
 $65 = $uiHeight;
 $66 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($64,$65,1,0)|0);
 $67 = (__Znaj($66)|0);
 $lpSphereMapData = $67;
 $68 = HEAP32[$lpImageData>>2]|0;
 $69 = HEAP32[$2>>2]|0;
 $70 = (($69) + 16|0);
 $71 = HEAPU8[$70>>0]|(HEAPU8[$70+1>>0]<<8);
 $72 = $71&65535;
 $73 = HEAP32[$2>>2]|0;
 $74 = (($73) + 18|0);
 $75 = HEAPU8[$74>>0]|(HEAPU8[$74+1>>0]<<8);
 $76 = $75&65535;
 __ZN6VTFLib8CVTFFile11MirrorImageEPhjj($68,$72,$76);
 $77 = (($lpImageData) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$2>>2]|0;
 $80 = (($79) + 16|0);
 $81 = HEAPU8[$80>>0]|(HEAPU8[$80+1>>0]<<8);
 $82 = $81&65535;
 $83 = HEAP32[$2>>2]|0;
 $84 = (($83) + 18|0);
 $85 = HEAPU8[$84>>0]|(HEAPU8[$84+1>>0]<<8);
 $86 = $85&65535;
 __ZN6VTFLib8CVTFFile11MirrorImageEPhjj($78,$82,$86);
 $87 = (($lpImageData) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$2>>2]|0;
 $90 = (($89) + 16|0);
 $91 = HEAPU8[$90>>0]|(HEAPU8[$90+1>>0]<<8);
 $92 = $91&65535;
 $93 = HEAP32[$2>>2]|0;
 $94 = (($93) + 18|0);
 $95 = HEAPU8[$94>>0]|(HEAPU8[$94+1>>0]<<8);
 $96 = $95&65535;
 __ZN6VTFLib8CVTFFile11MirrorImageEPhjj($88,$92,$96);
 $97 = (($lpImageData) + 16|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = HEAP32[$2>>2]|0;
 $100 = (($99) + 16|0);
 $101 = HEAPU8[$100>>0]|(HEAPU8[$100+1>>0]<<8);
 $102 = $101&65535;
 $103 = HEAP32[$2>>2]|0;
 $104 = (($103) + 18|0);
 $105 = HEAPU8[$104>>0]|(HEAPU8[$104+1>>0]<<8);
 $106 = $105&65535;
 __ZN6VTFLib8CVTFFile9FlipImageEPhjj($98,$102,$106);
 $107 = (($lpImageData) + 20|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$2>>2]|0;
 $110 = (($109) + 16|0);
 $111 = HEAPU8[$110>>0]|(HEAPU8[$110+1>>0]<<8);
 $112 = $111&65535;
 $113 = HEAP32[$2>>2]|0;
 $114 = (($113) + 18|0);
 $115 = HEAPU8[$114>>0]|(HEAPU8[$114+1>>0]<<8);
 $116 = $115&65535;
 __ZN6VTFLib8CVTFFile9FlipImageEPhjj($108,$112,$116);
 $uiAvgR = 0;
 $uiAvgG = 0;
 $uiAvgB = 0;
 $117 = $uiWidth;
 $118 = $uiHeight;
 $119 = Math_imul($117, $118)|0;
 $uiPixelCount = $119;
 $120 = (($lpImageData) + 12|0);
 $121 = HEAP32[$120>>2]|0;
 $src = $121;
 $122 = $src;
 $123 = $uiWidth;
 $124 = $uiHeight;
 $125 = Math_imul($123, $124)|0;
 $126 = $125<<2;
 $127 = (($122) + ($126)|0);
 $lpSourceEnd = $127;
 while(1) {
  $128 = $src;
  $129 = $lpSourceEnd;
  $130 = ($128>>>0)<($129>>>0);
  if (!($130)) {
   break;
  }
  $131 = $src;
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $134 = $uiAvgR;
  $135 = (($134) + ($133))|0;
  $uiAvgR = $135;
  $136 = $src;
  $137 = (($136) + 1|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $uiAvgG;
  $141 = (($140) + ($139))|0;
  $uiAvgG = $141;
  $142 = $src;
  $143 = (($142) + 2|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144&255;
  $146 = $uiAvgB;
  $147 = (($146) + ($145))|0;
  $uiAvgB = $147;
  $148 = $src;
  $149 = (($148) + 4|0);
  $src = $149;
 }
 $150 = $uiPixelCount;
 $151 = $uiAvgR;
 $152 = (($151>>>0) / ($150>>>0))&-1;
 $uiAvgR = $152;
 $153 = $uiPixelCount;
 $154 = $uiAvgG;
 $155 = (($154>>>0) / ($153>>>0))&-1;
 $uiAvgG = $155;
 $156 = $uiPixelCount;
 $157 = $uiAvgB;
 $158 = (($157>>>0) / ($156>>>0))&-1;
 $uiAvgB = $158;
 $159 = $uiAvgR;
 $160 = (+($159>>>0));
 $161 = 0.0039209998212754726 * $160;
 HEAPF32[$average>>2] = $161;
 $162 = $uiAvgG;
 $163 = (+($162>>>0));
 $164 = 0.0039209998212754726 * $163;
 $165 = (($average) + 4|0);
 HEAPF32[$165>>2] = $164;
 $166 = $uiAvgB;
 $167 = (+($166>>>0));
 $168 = 0.0039209998212754726 * $167;
 $169 = (($average) + 8|0);
 HEAPF32[$169>>2] = $168;
 $170 = $lpSphereMapData;
 $lpSphereMapDataPointer = $170;
 $y = 0;
 while(1) {
  $171 = $y;
  $172 = $uiHeight;
  $173 = ($171>>>0)<($172>>>0);
  if (!($173)) {
   break;
  }
  $x = 0;
  while(1) {
   $174 = $x;
   $175 = $uiWidth;
   $176 = ($174>>>0)<($175>>>0);
   if (!($176)) {
    break;
   }
   $177 = (($texel) + 8|0);
   HEAPF32[$177>>2] = 0.0;
   $178 = (($texel) + 4|0);
   HEAPF32[$178>>2] = 0.0;
   HEAPF32[$texel>>2] = 0.0;
   $j = 0;
   while(1) {
    $179 = $j;
    $180 = $samples;
    $181 = ($179>>>0)<($180>>>0);
    if (!($181)) {
     break;
    }
    $182 = $x;
    $183 = (+($182>>>0));
    $184 = (_rand()|0);
    $185 = (+($184|0));
    $186 = $185 / 2147483648.0;
    $187 = $183 + $186;
    $188 = $uiWidth;
    $189 = (+($188>>>0));
    $190 = $187 / $189;
    $191 = $190 - 0.5;
    $s = $191;
    $192 = $y;
    $193 = (+($192>>>0));
    $194 = (_rand()|0);
    $195 = (+($194|0));
    $196 = $195 / 2147483648.0;
    $197 = $193 + $196;
    $198 = $uiHeight;
    $199 = (+($198>>>0));
    $200 = $197 / $199;
    $201 = $200 - 0.5;
    $t = $201;
    $202 = $s;
    $203 = $s;
    $204 = $202 * $203;
    $205 = $t;
    $206 = $t;
    $207 = $205 * $206;
    $208 = $204 + $207;
    $temp = $208;
    $209 = $temp;
    $210 = $209 >= 0.25;
    if ($210) {
     $211 = +HEAPF32[$average>>2];
     $212 = +HEAPF32[$texel>>2];
     $213 = $212 + $211;
     HEAPF32[$texel>>2] = $213;
     $214 = (($average) + 4|0);
     $215 = +HEAPF32[$214>>2];
     $216 = (($texel) + 4|0);
     $217 = +HEAPF32[$216>>2];
     $218 = $217 + $215;
     HEAPF32[$216>>2] = $218;
     $219 = (($average) + 8|0);
     $220 = +HEAPF32[$219>>2];
     $221 = (($texel) + 8|0);
     $222 = +HEAPF32[$221>>2];
     $223 = $222 + $220;
     HEAPF32[$221>>2] = $223;
    } else {
     $224 = $s;
     HEAPF32[$p>>2] = $224;
     $225 = $t;
     $226 = (($p) + 4|0);
     HEAPF32[$226>>2] = $225;
     $227 = $temp;
     $228 = 0.25 - $227;
     $229 = $228;
     $230 = (+Math_sqrt((+$229)));
     $231 = $230;
     $232 = (($p) + 8|0);
     HEAPF32[$232>>2] = $231;
     __Z8VecScaleP6Vectorf($p,2.0);
     HEAPF32[$v>>2] = 0.0;
     $233 = (($v) + 4|0);
     HEAPF32[$233>>2] = 0.0;
     $234 = (($v) + 8|0);
     HEAPF32[$234>>2] = 1.0;
     __Z10VecReflectP6VectorS0_S0_($p,$v,$r);
     $235 = (__Z9IntersectP6Vector($r)|0);
     $f = $235;
     $236 = $f;
     $237 = (7928 + (($236*52)|0)|0);
     $238 = (($237) + 40|0);
     $239 = $f;
     $240 = (7928 + (($239*52)|0)|0);
     $241 = (($240) + 28|0);
     $242 = (+__Z6VecDotP6VectorS0_($238,$241));
     $243 = $f;
     $244 = (7928 + (($243*52)|0)|0);
     $245 = (($244) + 28|0);
     $246 = (+__Z6VecDotP6VectorS0_($r,$245));
     $247 = $242 / $246;
     $k = $247;
     $248 = $k;
     __Z8VecScaleP6Vectorf($r,$248);
     $249 = $f;
     $250 = (7928 + (($249*52)|0)|0);
     $251 = (($250) + 40|0);
     __Z6VecSubP6VectorS0_S0_($r,$251,$v);
     $252 = $f;
     $253 = (7928 + (($252*52)|0)|0);
     $254 = (($253) + 4|0);
     $255 = (+__Z6VecDotP6VectorS0_($v,$254));
     $s = $255;
     $256 = $f;
     $257 = (7928 + (($256*52)|0)|0);
     $258 = (($257) + 16|0);
     $259 = (+__Z6VecDotP6VectorS0_($v,$258));
     $t = $259;
     $260 = $f;
     $261 = (7928 + (($260*52)|0)|0);
     $pf = $261;
     $262 = $s;
     $263 = $uiWidth;
     $264 = (+($263>>>0));
     $265 = $262 * $264;
     $266 = (~~(($265))>>>0);
     $xpos = $266;
     $267 = $t;
     $268 = $uiHeight;
     $269 = (+($268>>>0));
     $270 = $267 * $269;
     $271 = (~~(($270))>>>0);
     $ypos = $271;
     $272 = $ypos;
     $273 = $uiWidth;
     $274 = Math_imul($272, $273)|0;
     $275 = $xpos;
     $276 = (($274) + ($275))|0;
     $277 = $pf;
     $278 = HEAP32[$277>>2]|0;
     $279 = (($278) + ($276<<2)|0);
     $p2 = $279;
     $280 = $p2;
     $281 = HEAP8[$280>>0]|0;
     $282 = (+($281&255));
     $283 = $282 / 255.0;
     HEAPF32[$c>>2] = $283;
     $284 = $p2;
     $285 = (($284) + 1|0);
     $286 = HEAP8[$285>>0]|0;
     $287 = (+($286&255));
     $288 = $287 / 255.0;
     $289 = (($c) + 4|0);
     HEAPF32[$289>>2] = $288;
     $290 = $p2;
     $291 = (($290) + 2|0);
     $292 = HEAP8[$291>>0]|0;
     $293 = (+($292&255));
     $294 = $293 / 255.0;
     $295 = (($c) + 8|0);
     HEAPF32[$295>>2] = $294;
     $296 = +HEAPF32[$c>>2];
     $297 = +HEAPF32[$texel>>2];
     $298 = $297 + $296;
     HEAPF32[$texel>>2] = $298;
     $299 = (($c) + 4|0);
     $300 = +HEAPF32[$299>>2];
     $301 = (($texel) + 4|0);
     $302 = +HEAPF32[$301>>2];
     $303 = $302 + $300;
     HEAPF32[$301>>2] = $303;
     $304 = (($c) + 8|0);
     $305 = +HEAPF32[$304>>2];
     $306 = (($texel) + 8|0);
     $307 = +HEAPF32[$306>>2];
     $308 = $307 + $305;
     HEAPF32[$306>>2] = $308;
    }
    $309 = $j;
    $310 = (($309) + 1)|0;
    $j = $310;
   }
   $311 = +HEAPF32[$texel>>2];
   $312 = 255.0 * $311;
   $313 = $samples;
   $314 = (+($313>>>0));
   $315 = $312 / $314;
   $316 = (~~(($315))&255);
   $317 = $lpSphereMapDataPointer;
   HEAP8[$317>>0] = $316;
   $318 = (($texel) + 4|0);
   $319 = +HEAPF32[$318>>2];
   $320 = 255.0 * $319;
   $321 = $samples;
   $322 = (+($321>>>0));
   $323 = $320 / $322;
   $324 = (~~(($323))&255);
   $325 = $lpSphereMapDataPointer;
   $326 = (($325) + 1|0);
   HEAP8[$326>>0] = $324;
   $327 = (($texel) + 8|0);
   $328 = +HEAPF32[$327>>2];
   $329 = 255.0 * $328;
   $330 = $samples;
   $331 = (+($330>>>0));
   $332 = $329 / $331;
   $333 = (~~(($332))&255);
   $334 = $lpSphereMapDataPointer;
   $335 = (($334) + 2|0);
   HEAP8[$335>>0] = $333;
   $336 = $lpSphereMapDataPointer;
   $337 = (($336) + 3|0);
   HEAP8[$337>>0] = -1;
   $338 = $lpSphereMapDataPointer;
   $339 = (($338) + 4|0);
   $lpSphereMapDataPointer = $339;
   $340 = $x;
   $341 = (($340) + 1)|0;
   $x = $341;
  }
  $342 = $y;
  $343 = (($342) + 1)|0;
  $y = $343;
 }
 $344 = $lpSphereMapData;
 $345 = (__ZNK6VTFLib8CVTFFile7GetDataEjjjj($2,0,6,0,0)|0);
 $346 = HEAP32[$2>>2]|0;
 $347 = (($346) + 16|0);
 $348 = HEAPU8[$347>>0]|(HEAPU8[$347+1>>0]<<8);
 $349 = $348&65535;
 $350 = HEAP32[$2>>2]|0;
 $351 = (($350) + 18|0);
 $352 = HEAPU8[$351>>0]|(HEAPU8[$351+1>>0]<<8);
 $353 = $352&65535;
 $354 = HEAP32[$2>>2]|0;
 $355 = (($354) + 52|0);
 $356 = HEAPU8[$355>>0]|(HEAPU8[$355+1>>0]<<8)|(HEAPU8[$355+2>>0]<<16)|(HEAPU8[$355+3>>0]<<24);
 $357 = (__ZN6VTFLib8CVTFFile19ConvertFromRGBA8888EPhS1_jj17tagVTFImageFormat($344,$345,$349,$353,$356)|0);
 $358 = ($357<<24>>24)!=(0);
 if ($358) {
  $i = 0;
  while(1) {
   $369 = $i;
   $370 = ($369>>>0)<(6);
   if (!($370)) {
    break;
   }
   $371 = $i;
   $372 = (($lpImageData) + ($371<<2)|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = ($373|0)==(0|0);
   if (!($374)) {
    __ZdaPv($373);
   }
   $375 = $i;
   $376 = (($375) + 1)|0;
   $i = $376;
  }
  $377 = $lpSphereMapData;
  $378 = ($377|0)==(0|0);
  if (!($378)) {
   __ZdaPv($377);
  }
  $0 = 1;
  $379 = $0;
  STACKTOP = sp;return ($379|0);
 } else {
  $i = 0;
  while(1) {
   $359 = $i;
   $360 = ($359>>>0)<(6);
   if (!($360)) {
    break;
   }
   $361 = $i;
   $362 = (($lpImageData) + ($361<<2)|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = ($363|0)==(0|0);
   if (!($364)) {
    __ZdaPv($363);
   }
   $365 = $i;
   $366 = (($365) + 1)|0;
   $i = $366;
  }
  $367 = $lpSphereMapData;
  $368 = ($367|0)==(0|0);
  if (!($368)) {
   __ZdaPv($367);
  }
  $0 = 0;
  $379 = $0;
  STACKTOP = sp;return ($379|0);
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile24ComputeImageReflectivityEPhjjRfS2_S2_($lpImageDataRGBA8888,$uiWidth,$uiHeight,$sX,$sY,$sZ) {
 $lpImageDataRGBA8888 = $lpImageDataRGBA8888|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $sX = $sX|0;
 $sY = $sY|0;
 $sZ = $sZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $i = 0, $i1 = 0, $j = 0, $sInverse = 0.0, $sTable = 0, $sTempX = 0.0, $sTempY = 0.0, $sTempZ = 0.0, $uiIndex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sTable = sp + 32|0;
 $0 = $lpImageDataRGBA8888;
 $1 = $uiWidth;
 $2 = $uiHeight;
 $3 = $sX;
 $4 = $sY;
 $5 = $sZ;
 $6 = $5;
 HEAPF32[$6>>2] = 0.0;
 $7 = $4;
 HEAPF32[$7>>2] = 0.0;
 $8 = $3;
 HEAPF32[$8>>2] = 0.0;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9>>>0)<(256);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = (+($11>>>0));
  $13 = $12 / 255.0;
  $14 = $13;
  $15 = (+Math_pow((+$14),2.2000000476837158));
  $16 = $15;
  $17 = $i;
  $18 = (($sTable) + ($17<<2)|0);
  HEAPF32[$18>>2] = $16;
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 $j = 0;
 while(1) {
  $21 = $j;
  $22 = $2;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $sTempZ = 0.0;
  $sTempY = 0.0;
  $sTempX = 0.0;
  $i1 = 0;
  while(1) {
   $24 = $i1;
   $25 = $1;
   $26 = ($24>>>0)<($25>>>0);
   if (!($26)) {
    break;
   }
   $27 = $i1;
   $28 = $j;
   $29 = $1;
   $30 = Math_imul($28, $29)|0;
   $31 = (($27) + ($30))|0;
   $32 = $31<<2;
   $uiIndex = $32;
   $33 = $uiIndex;
   $34 = (($33) + 0)|0;
   $35 = $0;
   $36 = (($35) + ($34)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = (($sTable) + ($38<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $sTempX;
   $42 = $41 + $40;
   $sTempX = $42;
   $43 = $uiIndex;
   $44 = (($43) + 1)|0;
   $45 = $0;
   $46 = (($45) + ($44)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = (($sTable) + ($48<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $sTempY;
   $52 = $51 + $50;
   $sTempY = $52;
   $53 = $uiIndex;
   $54 = (($53) + 2)|0;
   $55 = $0;
   $56 = (($55) + ($54)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = (($sTable) + ($58<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $sTempZ;
   $62 = $61 + $60;
   $sTempZ = $62;
   $63 = $i1;
   $64 = (($63) + 1)|0;
   $i1 = $64;
  }
  $65 = $1;
  $66 = (+($65>>>0));
  $67 = 1.0 / $66;
  $sInverse = $67;
  $68 = $sTempX;
  $69 = $sInverse;
  $70 = $68 * $69;
  $71 = $3;
  $72 = +HEAPF32[$71>>2];
  $73 = $72 + $70;
  HEAPF32[$71>>2] = $73;
  $74 = $sTempY;
  $75 = $sInverse;
  $76 = $74 * $75;
  $77 = $4;
  $78 = +HEAPF32[$77>>2];
  $79 = $78 + $76;
  HEAPF32[$77>>2] = $79;
  $80 = $sTempZ;
  $81 = $sInverse;
  $82 = $80 * $81;
  $83 = $5;
  $84 = +HEAPF32[$83>>2];
  $85 = $84 + $82;
  HEAPF32[$83>>2] = $85;
  $86 = $j;
  $87 = (($86) + 1)|0;
  $j = $87;
 }
 $88 = $2;
 $89 = (+($88>>>0));
 $90 = 1.0 / $89;
 $sInverse = $90;
 $91 = $sInverse;
 $92 = $3;
 $93 = +HEAPF32[$92>>2];
 $94 = $93 * $91;
 HEAPF32[$92>>2] = $94;
 $95 = $sInverse;
 $96 = $4;
 $97 = +HEAPF32[$96>>2];
 $98 = $97 * $95;
 HEAPF32[$96>>2] = $98;
 $99 = $sInverse;
 $100 = $5;
 $101 = +HEAPF32[$100>>2];
 $102 = $101 * $99;
 HEAPF32[$100>>2] = $102;
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile15SetReflectivityEfff($this,$sX,$sY,$sZ) {
 $this = $this|0;
 $sX = +$sX;
 $sY = +$sY;
 $sZ = +$sZ;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sX;
 $2 = $sY;
 $3 = $sZ;
 $4 = $0;
 $5 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($4)|0);
 $6 = ($5<<24>>24)!=(0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + 32|0);
  HEAPF32[tempDoublePtr>>2]=$7;HEAP8[$9>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$9+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$9+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$9+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $10 = $2;
  $11 = HEAP32[$4>>2]|0;
  $12 = (($11) + 32|0);
  $13 = (($12) + 4|0);
  HEAPF32[tempDoublePtr>>2]=$10;HEAP8[$13>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$13+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$13+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$13+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $14 = $3;
  $15 = HEAP32[$4>>2]|0;
  $16 = (($15) + 32|0);
  $17 = (($16) + 8|0);
  HEAPF32[tempDoublePtr>>2]=$14;HEAP8[$17>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$17+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$17+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$17+3>>0]=HEAP8[tempDoublePtr+3>>0];
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6VTFLib8CVTFFile7SetFlagE15tagVTFImageFlagh($this,$ImageFlag,$bState) {
 $this = $this|0;
 $ImageFlag = $ImageFlag|0;
 $bState = $bState|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ImageFlag;
 $2 = $bState;
 $3 = $0;
 $4 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($3)|0);
 $5 = ($4<<24>>24)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ($6|0)==(4096);
 if (!($7)) {
  $8 = $1;
  $9 = ($8|0)==(8192);
  if (!($9)) {
   $10 = $1;
   $11 = ($10|0)==(16384);
   if (!($11)) {
    $12 = $2;
    $13 = ($12<<24>>24)!=(0);
    if ($13) {
     $14 = $1;
     $15 = HEAP32[$3>>2]|0;
     $16 = (($15) + 20|0);
     $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
     $18 = $17 | $14;
     HEAP8[$16>>0]=$18&255;HEAP8[$16+1>>0]=($18>>8)&255;HEAP8[$16+2>>0]=($18>>16)&255;HEAP8[$16+3>>0]=$18>>24;
     STACKTOP = sp;return;
    } else {
     $19 = $1;
     $20 = $19 ^ -1;
     $21 = HEAP32[$3>>2]|0;
     $22 = (($21) + 20|0);
     $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
     $24 = $23 & $20;
     HEAP8[$22>>0]=$24&255;HEAP8[$22+1>>0]=($24>>8)&255;HEAP8[$22+2>>0]=($24>>16)&255;HEAP8[$22+3>>0]=$24>>24;
     STACKTOP = sp;return;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile13SetStartFrameEj($this,$uiStartFrame) {
 $this = $this|0;
 $uiStartFrame = $uiStartFrame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $uiStartFrame;
 $2 = $0;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 20|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $7 & 16384;
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8);
 $14 = $13&65535;
 $15 = ($10>>>0)>=($14>>>0);
 if ($15) {
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + 24|0);
  $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
  $19 = $18&65535;
  $20 = (($19) - 1)|0;
  $1 = $20;
 }
 $21 = $1;
 $22 = $21&65535;
 $23 = HEAP32[$2>>2]|0;
 $24 = (($23) + 26|0);
 HEAP8[$24>>0]=$22&255;HEAP8[$24+1>>0]=$22>>8;
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile15SetBumpmapScaleEf($this,$sBumpmapScale) {
 $this = $this|0;
 $sBumpmapScale = +$sBumpmapScale;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sBumpmapScale;
 $2 = $0;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + 48|0);
  HEAPF32[tempDoublePtr>>2]=$5;HEAP8[$7>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$7+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$7+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$7+3>>0]=HEAP8[tempDoublePtr+3>>0];
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNK6VTFLib8CVTFFile4SaveEPvjRj($this,$lpData,$uiBufferSize,$uiSize) {
 $this = $this|0;
 $lpData = $lpData|0;
 $uiBufferSize = $uiBufferSize|0;
 $uiSize = $uiSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $MemoryWriter = 0, $bResult = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $MemoryWriter = sp + 16|0;
 $0 = $this;
 $1 = $lpData;
 $2 = $uiBufferSize;
 $3 = $uiSize;
 $7 = $0;
 $8 = $3;
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = $2;
 __ZN6VTFLib2IO7Writers13CMemoryWriterC2EPvj($MemoryWriter,$9,$10);
 __THREW__ = 0;
 $11 = (invoke_iii(398,($7|0),($MemoryWriter|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $bResult = $11;
  __THREW__ = 0;
  $14 = (invoke_ii(11,($MemoryWriter|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if (!($16)) {
   $17 = $3;
   HEAP32[$17>>2] = $14;
   $18 = $bResult;
   $6 = 1;
   __ZN6VTFLib2IO7Writers13CMemoryWriterD2Ev($MemoryWriter);
   STACKTOP = sp;return ($18|0);
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __THREW__ = 0;
 invoke_vi(399,($MemoryWriter|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 }
 $23 = $4;
 $24 = $5;
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZNK6VTFLib8CVTFFile4SaveEPNS_2IO7Writers7IWriterE($this,$Writer) {
 $this = $this|0;
 $Writer = $Writer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $Writer;
 $6 = $1;
 $7 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($6)|0);
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  $9 = (__ZNK6VTFLib8CVTFFile11GetHasImageEv($6)|0);
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   __THREW__ = 0;
   $15 = (invoke_ii($14|0,($11|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   L4: do {
    if (!($17)) {
     $18 = ($15<<24>>24)!=(0);
     if (!($18)) {
      $19 = (___cxa_allocate_exception(4)|0);
      HEAP32[$19>>2] = 0;
      __THREW__ = 0;
      invoke_viii(381,($19|0),(27128|0),(0|0));
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       break;
      }
      // unreachable;
     }
     $31 = $2;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + 28|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = HEAP32[$6>>2]|0;
     $36 = HEAP32[$6>>2]|0;
     $37 = (($36) + 12|0);
     $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
     __THREW__ = 0;
     $39 = (invoke_iiii($34|0,($31|0),($35|0),($38|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $42 = HEAP32[$6>>2]|0;
      $43 = (($42) + 12|0);
      $44 = HEAPU8[$43>>0]|(HEAPU8[$43+1>>0]<<8)|(HEAPU8[$43+2>>0]<<16)|(HEAPU8[$43+3>>0]<<24);
      $45 = ($39|0)!=($44|0);
      if ($45) {
       $46 = (___cxa_allocate_exception(4)|0);
       HEAP32[$46>>2] = 0;
       __THREW__ = 0;
       invoke_viii(381,($46|0),(27128|0),(0|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        break;
       }
       // unreachable;
      }
      __THREW__ = 0;
      $49 = (invoke_ii(400,($6|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if (!($51)) {
       $52 = ($49<<24>>24)!=(0);
       do {
        if ($52) {
         $i = 0;
         while(1) {
          $53 = $i;
          $54 = HEAP32[$6>>2]|0;
          $55 = (($54) + 68|0);
          $56 = HEAPU8[$55>>0]|(HEAPU8[$55+1>>0]<<8)|(HEAPU8[$55+2>>0]<<16)|(HEAPU8[$55+3>>0]<<24);
          $57 = ($53>>>0)<($56>>>0);
          if (!($57)) {
           label = 37;
           break;
          }
          $58 = $i;
          $59 = HEAP32[$6>>2]|0;
          $60 = (($59) + 80|0);
          $61 = (($60) + ($58<<3)|0);
          $62 = HEAPU8[$61>>0]|(HEAPU8[$61+1>>0]<<8)|(HEAPU8[$61+2>>0]<<16)|(HEAPU8[$61+3>>0]<<24);
          if ((($62|0) == 1)) {
           $63 = $2;
           $64 = HEAP32[$63>>2]|0;
           $65 = (($64) + 28|0);
           $66 = HEAP32[$65>>2]|0;
           $67 = (($6) + 16|0);
           $68 = HEAP32[$67>>2]|0;
           $69 = (($6) + 12|0);
           $70 = HEAP32[$69>>2]|0;
           __THREW__ = 0;
           $71 = (invoke_iiii($66|0,($63|0),($68|0),($70|0))|0);
           $72 = __THREW__; __THREW__ = 0;
           $73 = $72&1;
           if ($73) {
            break L4;
           }
           $74 = (($6) + 12|0);
           $75 = HEAP32[$74>>2]|0;
           $76 = ($71|0)!=($75|0);
           if ($76) {
            label = 20;
            break;
           }
          } else if ((($62|0) == 48)) {
           $80 = $2;
           $81 = HEAP32[$80>>2]|0;
           $82 = (($81) + 28|0);
           $83 = HEAP32[$82>>2]|0;
           $84 = (($6) + 8|0);
           $85 = HEAP32[$84>>2]|0;
           $86 = (($6) + 4|0);
           $87 = HEAP32[$86>>2]|0;
           __THREW__ = 0;
           $88 = (invoke_iiii($83|0,($80|0),($85|0),($87|0))|0);
           $89 = __THREW__; __THREW__ = 0;
           $90 = $89&1;
           if ($90) {
            break L4;
           }
           $91 = (($6) + 4|0);
           $92 = HEAP32[$91>>2]|0;
           $93 = ($88|0)!=($92|0);
           if ($93) {
            label = 24;
            break;
           }
          } else {
           $97 = $i;
           $98 = HEAP32[$6>>2]|0;
           $99 = (($98) + 80|0);
           $100 = (($99) + ($97<<3)|0);
           $101 = (($100) + 3|0);
           $102 = HEAP8[$101>>0]|0;
           $103 = $102&255;
           $104 = $103 & 2;
           $105 = ($104|0)==(0);
           if ($105) {
            $106 = $2;
            $107 = HEAP32[$106>>2]|0;
            $108 = (($107) + 28|0);
            $109 = HEAP32[$108>>2]|0;
            $110 = $i;
            $111 = HEAP32[$6>>2]|0;
            $112 = (($111) + 336|0);
            $113 = (($112) + ($110<<3)|0);
            __THREW__ = 0;
            $114 = (invoke_iiii($109|0,($106|0),($113|0),4)|0);
            $115 = __THREW__; __THREW__ = 0;
            $116 = $115&1;
            if ($116) {
             break L4;
            }
            $117 = ($114|0)!=(4);
            if ($117) {
             label = 29;
             break;
            }
            $121 = $2;
            $122 = HEAP32[$121>>2]|0;
            $123 = (($122) + 28|0);
            $124 = HEAP32[$123>>2]|0;
            $125 = $i;
            $126 = HEAP32[$6>>2]|0;
            $127 = (($126) + 336|0);
            $128 = (($127) + ($125<<3)|0);
            $129 = (($128) + 4|0);
            $130 = HEAPU8[$129>>0]|(HEAPU8[$129+1>>0]<<8)|(HEAPU8[$129+2>>0]<<16)|(HEAPU8[$129+3>>0]<<24);
            $131 = $i;
            $132 = HEAP32[$6>>2]|0;
            $133 = (($132) + 336|0);
            $134 = (($133) + ($131<<3)|0);
            $135 = HEAPU8[$134>>0]|(HEAPU8[$134+1>>0]<<8)|(HEAPU8[$134+2>>0]<<16)|(HEAPU8[$134+3>>0]<<24);
            __THREW__ = 0;
            $136 = (invoke_iiii($124|0,($121|0),($130|0),($135|0))|0);
            $137 = __THREW__; __THREW__ = 0;
            $138 = $137&1;
            if ($138) {
             break L4;
            }
            $139 = $i;
            $140 = HEAP32[$6>>2]|0;
            $141 = (($140) + 336|0);
            $142 = (($141) + ($139<<3)|0);
            $143 = HEAPU8[$142>>0]|(HEAPU8[$142+1>>0]<<8)|(HEAPU8[$142+2>>0]<<16)|(HEAPU8[$142+3>>0]<<24);
            $144 = ($136|0)!=($143|0);
            if ($144) {
             label = 32;
             break;
            }
           }
          }
          $148 = $i;
          $149 = (($148) + 1)|0;
          $i = $149;
         }
         if ((label|0) == 20) {
          $77 = (___cxa_allocate_exception(4)|0);
          HEAP32[$77>>2] = 0;
          __THREW__ = 0;
          invoke_viii(381,($77|0),(27128|0),(0|0));
          $78 = __THREW__; __THREW__ = 0;
          $79 = $78&1;
          if ($79) {
           break L4;
          }
          // unreachable;
         }
         else if ((label|0) == 24) {
          $94 = (___cxa_allocate_exception(4)|0);
          HEAP32[$94>>2] = 0;
          __THREW__ = 0;
          invoke_viii(381,($94|0),(27128|0),(0|0));
          $95 = __THREW__; __THREW__ = 0;
          $96 = $95&1;
          if ($96) {
           break L4;
          }
          // unreachable;
         }
         else if ((label|0) == 29) {
          $118 = (___cxa_allocate_exception(4)|0);
          HEAP32[$118>>2] = 0;
          __THREW__ = 0;
          invoke_viii(381,($118|0),(27128|0),(0|0));
          $119 = __THREW__; __THREW__ = 0;
          $120 = $119&1;
          if ($120) {
           break L4;
          }
          // unreachable;
         }
         else if ((label|0) == 32) {
          $145 = (___cxa_allocate_exception(4)|0);
          HEAP32[$145>>2] = 0;
          __THREW__ = 0;
          invoke_viii(381,($145|0),(27128|0),(0|0));
          $146 = __THREW__; __THREW__ = 0;
          $147 = $146&1;
          if ($147) {
           break L4;
          }
          // unreachable;
         }
         else if ((label|0) == 37) {
          break;
         }
        } else {
         $150 = HEAP32[$6>>2]|0;
         $151 = (($150) + 57|0);
         $152 = HEAPU8[$151>>0]|(HEAPU8[$151+1>>0]<<8)|(HEAPU8[$151+2>>0]<<16)|(HEAPU8[$151+3>>0]<<24);
         $153 = ($152|0)!=(-1);
         do {
          if ($153) {
           $154 = $2;
           $155 = HEAP32[$154>>2]|0;
           $156 = (($155) + 28|0);
           $157 = HEAP32[$156>>2]|0;
           $158 = (($6) + 16|0);
           $159 = HEAP32[$158>>2]|0;
           $160 = (($6) + 12|0);
           $161 = HEAP32[$160>>2]|0;
           __THREW__ = 0;
           $162 = (invoke_iiii($157|0,($154|0),($159|0),($161|0))|0);
           $163 = __THREW__; __THREW__ = 0;
           $164 = $163&1;
           if ($164) {
            break L4;
           }
           $165 = (($6) + 12|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = ($162|0)!=($166|0);
           if (!($167)) {
            break;
           }
           $168 = (___cxa_allocate_exception(4)|0);
           HEAP32[$168>>2] = 0;
           __THREW__ = 0;
           invoke_viii(381,($168|0),(27128|0),(0|0));
           $169 = __THREW__; __THREW__ = 0;
           $170 = $169&1;
           if ($170) {
            break L4;
           }
           // unreachable;
          }
         } while(0);
         $171 = HEAP32[$6>>2]|0;
         $172 = (($171) + 52|0);
         $173 = HEAPU8[$172>>0]|(HEAPU8[$172+1>>0]<<8)|(HEAPU8[$172+2>>0]<<16)|(HEAPU8[$172+3>>0]<<24);
         $174 = ($173|0)!=(-1);
         do {
          if ($174) {
           $175 = $2;
           $176 = HEAP32[$175>>2]|0;
           $177 = (($176) + 28|0);
           $178 = HEAP32[$177>>2]|0;
           $179 = (($6) + 8|0);
           $180 = HEAP32[$179>>2]|0;
           $181 = (($6) + 4|0);
           $182 = HEAP32[$181>>2]|0;
           __THREW__ = 0;
           $183 = (invoke_iiii($178|0,($175|0),($180|0),($182|0))|0);
           $184 = __THREW__; __THREW__ = 0;
           $185 = $184&1;
           if ($185) {
            break L4;
           }
           $186 = (($6) + 4|0);
           $187 = HEAP32[$186>>2]|0;
           $188 = ($183|0)!=($187|0);
           if (!($188)) {
            break;
           }
           $189 = (___cxa_allocate_exception(4)|0);
           HEAP32[$189>>2] = 0;
           __THREW__ = 0;
           invoke_viii(381,($189|0),(27128|0),(0|0));
           $190 = __THREW__; __THREW__ = 0;
           $191 = $190&1;
           if ($191) {
            break L4;
           }
           // unreachable;
          }
         } while(0);
        }
       } while(0);
       $196 = $2;
       $197 = HEAP32[$196>>2]|0;
       $198 = (($197) + 8|0);
       $199 = HEAP32[$198>>2]|0;
       FUNCTION_TABLE_vi[$199 & 1023]($196);
       $0 = 1;
       $200 = $0;
       STACKTOP = sp;return ($200|0);
      }
     }
    }
   } while(0);
   $22 = ___cxa_find_matching_catch(0|0)|0;
   $23 = tempRet0;
   $3 = $22;
   $4 = $23;
   $24 = $3;
   (___cxa_begin_catch(($24|0))|0);
   $25 = $2;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   invoke_vi($28|0,($25|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    $0 = 0;
    $5 = 1;
    ___cxa_end_catch();
    $200 = $0;
    STACKTOP = sp;return ($200|0);
   }
   $192 = ___cxa_find_matching_catch()|0;
   $193 = tempRet0;
   $3 = $192;
   $4 = $193;
   __THREW__ = 0;
   invoke_v(397);
   $194 = __THREW__; __THREW__ = 0;
   $195 = $194&1;
   if ($195) {
    $203 = ___cxa_find_matching_catch(0|0)|0;
    $204 = tempRet0;
    ___clang_call_terminate($203);
    // unreachable;
   }
   $201 = $3;
   $202 = $4;
   ___resumeException($201|0);
   // unreachable;
  }
 }
 __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,7816,0);
 $0 = 0;
 $200 = $0;
 STACKTOP = sp;return ($200|0);
}
function __ZNK6VTFLib8CVTFFile20GetSupportsResourcesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = ($7>>>0)>(7);
 if ($8) {
  $19 = 1;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + 4|0);
  $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8)|(HEAPU8[$10+2>>0]<<16)|(HEAPU8[$10+3>>0]<<24);
  $12 = ($11|0)==(7);
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = (($13) + 4|0);
   $15 = (($14) + 4|0);
   $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
   $17 = ($16>>>0)>=(3);
   $21 = $17;
  } else {
   $21 = 0;
  }
  $19 = $21;
 }
 $18 = $19&1;
 $0 = $18;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function __ZNK6VTFLib8CVTFFile7GetSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $uiResourceSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $uiResourceSize = 0;
 $5 = (__ZNK6VTFLib8CVTFFile20GetSupportsResourcesEv($2)|0);
 $6 = ($5<<24>>24)!=(0);
 if ($6) {
  $i = 0;
  while(1) {
   $7 = $i;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + 68|0);
   $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
   $11 = ($7>>>0)<($10>>>0);
   if (!($11)) {
    break;
   }
   $12 = $i;
   $13 = HEAP32[$2>>2]|0;
   $14 = (($13) + 80|0);
   $15 = (($14) + ($12<<3)|0);
   $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
   if ((($16|0) == 48) | (($16|0) == 1)) {
   } else {
    $17 = $i;
    $18 = HEAP32[$2>>2]|0;
    $19 = (($18) + 80|0);
    $20 = (($19) + ($17<<3)|0);
    $21 = (($20) + 3|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = $23 & 2;
    $25 = ($24|0)==(0);
    if ($25) {
     $26 = $i;
     $27 = HEAP32[$2>>2]|0;
     $28 = (($27) + 336|0);
     $29 = (($28) + ($26<<3)|0);
     $30 = HEAPU8[$29>>0]|(HEAPU8[$29+1>>0]<<8)|(HEAPU8[$29+2>>0]<<16)|(HEAPU8[$29+3>>0]<<24);
     $31 = (4 + ($30))|0;
     $32 = $uiResourceSize;
     $33 = (($32) + ($31))|0;
     $uiResourceSize = $33;
    }
   }
   $34 = $i;
   $35 = (($34) + 1)|0;
   $i = $35;
  }
 }
 $36 = HEAP32[$2>>2]|0;
 $37 = (($36) + 12|0);
 $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
 $39 = (($2) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + ($40))|0;
 $42 = (($2) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + ($43))|0;
 $45 = $uiResourceSize;
 $46 = (($44) + ($45))|0;
 $0 = $46;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function __ZNK6VTFLib8CVTFFile17ComputeDataOffsetEjjjj17tagVTFImageFormat($this,$uiFrame,$uiFace,$uiSlice,$uiMipLevel,$ImageFormat) {
 $this = $this|0;
 $uiFrame = $uiFrame|0;
 $uiFace = $uiFace|0;
 $uiSlice = $uiSlice|0;
 $uiMipLevel = $uiMipLevel|0;
 $ImageFormat = $ImageFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $uiFaceCount = 0, $uiFrameCount = 0, $uiMipCount = 0, $uiOffset = 0, $uiSliceCount = 0, $uiTemp1 = 0, $uiTemp2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $uiFrame;
 $2 = $uiFace;
 $3 = $uiSlice;
 $4 = $uiMipLevel;
 $5 = $ImageFormat;
 $6 = $0;
 $uiOffset = 0;
 $7 = (__ZNK6VTFLib8CVTFFile13GetFrameCountEv($6)|0);
 $uiFrameCount = $7;
 $8 = (__ZNK6VTFLib8CVTFFile12GetFaceCountEv($6)|0);
 $uiFaceCount = $8;
 $9 = (__ZNK6VTFLib8CVTFFile8GetDepthEv($6)|0);
 $uiSliceCount = $9;
 $10 = (__ZNK6VTFLib8CVTFFile14GetMipmapCountEv($6)|0);
 $uiMipCount = $10;
 $11 = $1;
 $12 = $uiFrameCount;
 $13 = ($11>>>0)>=($12>>>0);
 if ($13) {
  $14 = $uiFrameCount;
  $15 = (($14) - 1)|0;
  $1 = $15;
 }
 $16 = $2;
 $17 = $uiFaceCount;
 $18 = ($16>>>0)>=($17>>>0);
 if ($18) {
  $19 = $uiFaceCount;
  $20 = (($19) - 1)|0;
  $2 = $20;
 }
 $21 = $3;
 $22 = $uiSliceCount;
 $23 = ($21>>>0)>=($22>>>0);
 if ($23) {
  $24 = $uiSliceCount;
  $25 = (($24) - 1)|0;
  $3 = $25;
 }
 $26 = $4;
 $27 = $uiMipCount;
 $28 = ($26>>>0)>=($27>>>0);
 if ($28) {
  $29 = $uiMipCount;
  $30 = (($29) - 1)|0;
  $4 = $30;
 }
 $31 = $uiMipCount;
 $32 = (($31) - 1)|0;
 $i = $32;
 while(1) {
  $33 = $i;
  $34 = $4;
  $35 = ($33|0)>($34|0);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$6>>2]|0;
  $37 = (($36) + 16|0);
  $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8);
  $39 = $38&65535;
  $40 = HEAP32[$6>>2]|0;
  $41 = (($40) + 18|0);
  $42 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8);
  $43 = $42&65535;
  $44 = HEAP32[$6>>2]|0;
  $45 = (($44) + 63|0);
  $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8);
  $47 = $46&65535;
  $48 = $i;
  $49 = $5;
  $50 = (__ZN6VTFLib8CVTFFile17ComputeMipmapSizeEjjjj17tagVTFImageFormat($39,$43,$47,$48,$49)|0);
  $51 = $uiFrameCount;
  $52 = Math_imul($50, $51)|0;
  $53 = $uiFaceCount;
  $54 = Math_imul($52, $53)|0;
  $55 = $uiOffset;
  $56 = (($55) + ($54))|0;
  $uiOffset = $56;
  $57 = $i;
  $58 = (($57) + -1)|0;
  $i = $58;
 }
 $59 = HEAP32[$6>>2]|0;
 $60 = (($59) + 16|0);
 $61 = HEAPU8[$60>>0]|(HEAPU8[$60+1>>0]<<8);
 $62 = $61&65535;
 $63 = HEAP32[$6>>2]|0;
 $64 = (($63) + 18|0);
 $65 = HEAPU8[$64>>0]|(HEAPU8[$64+1>>0]<<8);
 $66 = $65&65535;
 $67 = HEAP32[$6>>2]|0;
 $68 = (($67) + 63|0);
 $69 = HEAPU8[$68>>0]|(HEAPU8[$68+1>>0]<<8);
 $70 = $69&65535;
 $71 = $4;
 $72 = $5;
 $73 = (__ZN6VTFLib8CVTFFile17ComputeMipmapSizeEjjjj17tagVTFImageFormat($62,$66,$70,$71,$72)|0);
 $uiTemp1 = $73;
 $74 = HEAP32[$6>>2]|0;
 $75 = (($74) + 16|0);
 $76 = HEAPU8[$75>>0]|(HEAPU8[$75+1>>0]<<8);
 $77 = $76&65535;
 $78 = HEAP32[$6>>2]|0;
 $79 = (($78) + 18|0);
 $80 = HEAPU8[$79>>0]|(HEAPU8[$79+1>>0]<<8);
 $81 = $80&65535;
 $82 = $4;
 $83 = $5;
 $84 = (__ZN6VTFLib8CVTFFile17ComputeMipmapSizeEjjjj17tagVTFImageFormat($77,$81,1,$82,$83)|0);
 $uiTemp2 = $84;
 $85 = $uiTemp1;
 $86 = $1;
 $87 = Math_imul($85, $86)|0;
 $88 = $uiFaceCount;
 $89 = Math_imul($87, $88)|0;
 $90 = $uiSliceCount;
 $91 = Math_imul($89, $90)|0;
 $92 = $uiOffset;
 $93 = (($92) + ($91))|0;
 $uiOffset = $93;
 $94 = $uiTemp1;
 $95 = $2;
 $96 = Math_imul($94, $95)|0;
 $97 = $uiSliceCount;
 $98 = Math_imul($96, $97)|0;
 $99 = $uiOffset;
 $100 = (($99) + ($98))|0;
 $uiOffset = $100;
 $101 = $uiTemp2;
 $102 = $3;
 $103 = Math_imul($101, $102)|0;
 $104 = $uiOffset;
 $105 = (($104) + ($103))|0;
 $uiOffset = $105;
 $106 = $uiOffset;
 $107 = (($6) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($106>>>0)<($108>>>0);
 if ($109) {
  $110 = $uiOffset;
  STACKTOP = sp;return ($110|0);
 } else {
  ___assert_fail((9792|0),(7696|0),3074,(9832|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN6VTFLib8CVTFFile17ComputeMipmapSizeEjjjj17tagVTFImageFormat($uiWidth,$uiHeight,$uiDepth,$uiMipmapLevel,$ImageFormat) {
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $uiDepth = $uiDepth|0;
 $uiMipmapLevel = $uiMipmapLevel|0;
 $ImageFormat = $ImageFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiMipmapDepth = 0, $uiMipmapHeight = 0, $uiMipmapWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiMipmapWidth = sp + 8|0;
 $uiMipmapHeight = sp + 4|0;
 $uiMipmapDepth = sp;
 $0 = $uiWidth;
 $1 = $uiHeight;
 $2 = $uiDepth;
 $3 = $uiMipmapLevel;
 $4 = $ImageFormat;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 __ZN6VTFLib8CVTFFile23ComputeMipmapDimensionsEjjjjRjS1_S1_($5,$6,$7,$8,$uiMipmapWidth,$uiMipmapHeight,$uiMipmapDepth);
 $9 = HEAP32[$uiMipmapWidth>>2]|0;
 $10 = HEAP32[$uiMipmapHeight>>2]|0;
 $11 = HEAP32[$uiMipmapDepth>>2]|0;
 $12 = $4;
 $13 = (__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat($9,$10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNK6VTFLib8CVTFFile16GetThumbnailDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = (($2) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
 } else {
  $0 = 0;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function __ZN6VTFLib8CVTFFile16SetThumbnailDataEPh($this,$lpData) {
 $this = $this|0;
 $lpData = $lpData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $lpData;
 $2 = $0;
 $3 = (__ZNK6VTFLib8CVTFFile8IsLoadedEv($2)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = (($2) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = (($2) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $1;
   $11 = (($2) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   _memcpy(($9|0),($10|0),($12|0))|0;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile17ConvertToRGBA8888EPhS1_jj17tagVTFImageFormat($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceFormat) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceFormat = $SourceFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceFormat;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZN6VTFLib8CVTFFile7ConvertEPhS1_jj17tagVTFImageFormatS2_($5,$6,$7,$8,$9,0)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN6VTFLib8CVTFFile11MirrorImageEPhjj($lpImageDataRGBA8888,$uiWidth,$uiHeight) {
 $lpImageDataRGBA8888 = $lpImageDataRGBA8888|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $j = 0, $lpImageData = 0, $pOne = 0, $pTwo = 0, $uiTemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpImageDataRGBA8888;
 $1 = $uiWidth;
 $2 = $uiHeight;
 $3 = $0;
 $lpImageData = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = (($5>>>0) / 2)&-1;
  $7 = ($4>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $j = 0;
  while(1) {
   $8 = $j;
   $9 = $2;
   $10 = ($8>>>0)<($9>>>0);
   if (!($10)) {
    break;
   }
   $11 = $lpImageData;
   $12 = $i;
   $13 = $j;
   $14 = $1;
   $15 = Math_imul($13, $14)|0;
   $16 = (($12) + ($15))|0;
   $17 = (($11) + ($16<<2)|0);
   $pOne = $17;
   $18 = $lpImageData;
   $19 = $1;
   $20 = $i;
   $21 = (($19) - ($20))|0;
   $22 = (($21) - 1)|0;
   $23 = $j;
   $24 = $1;
   $25 = Math_imul($23, $24)|0;
   $26 = (($22) + ($25))|0;
   $27 = (($18) + ($26<<2)|0);
   $pTwo = $27;
   $28 = $pOne;
   $29 = HEAP32[$28>>2]|0;
   $uiTemp = $29;
   $30 = $pTwo;
   $31 = HEAP32[$30>>2]|0;
   $32 = $pOne;
   HEAP32[$32>>2] = $31;
   $33 = $uiTemp;
   $34 = $pTwo;
   HEAP32[$34>>2] = $33;
   $35 = $j;
   $36 = (($35) + 1)|0;
   $j = $36;
  }
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile9FlipImageEPhjj($lpImageDataRGBA8888,$uiWidth,$uiHeight) {
 $lpImageDataRGBA8888 = $lpImageDataRGBA8888|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $j = 0, $lpImageData = 0, $pOne = 0, $pTwo = 0, $uiTemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpImageDataRGBA8888;
 $1 = $uiWidth;
 $2 = $uiHeight;
 $3 = $0;
 $lpImageData = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $j = 0;
  while(1) {
   $7 = $j;
   $8 = $2;
   $9 = (($8>>>0) / 2)&-1;
   $10 = ($7>>>0)<($9>>>0);
   if (!($10)) {
    break;
   }
   $11 = $lpImageData;
   $12 = $i;
   $13 = $j;
   $14 = $1;
   $15 = Math_imul($13, $14)|0;
   $16 = (($12) + ($15))|0;
   $17 = (($11) + ($16<<2)|0);
   $pOne = $17;
   $18 = $lpImageData;
   $19 = $i;
   $20 = $2;
   $21 = $j;
   $22 = (($20) - ($21))|0;
   $23 = (($22) - 1)|0;
   $24 = $1;
   $25 = Math_imul($23, $24)|0;
   $26 = (($19) + ($25))|0;
   $27 = (($18) + ($26<<2)|0);
   $pTwo = $27;
   $28 = $pOne;
   $29 = HEAP32[$28>>2]|0;
   $uiTemp = $29;
   $30 = $pTwo;
   $31 = HEAP32[$30>>2]|0;
   $32 = $pOne;
   HEAP32[$32>>2] = $31;
   $33 = $uiTemp;
   $34 = $pTwo;
   HEAP32[$34>>2] = $33;
   $35 = $j;
   $36 = (($35) + 1)|0;
   $j = $36;
  }
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 STACKTOP = sp;return;
}
function __ZN6VTFLib8CVTFFile14DecompressDXT1EPhS1_jj($src,$dst,$uiWidth,$uiHeight) {
 $src = $src|0;
 $dst = $dst|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Offset = 0, $Select = 0, $Temp = 0, $bitmask = 0, $col = 0, $color_0 = 0, $color_1 = 0, $colours = 0;
 var $i = 0, $iBps = 0, $j = 0, $k = 0, $nBpc = 0, $nBpp = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $colours = sp + 72|0;
 $0 = $src;
 $1 = $dst;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $nBpp = 4;
 $nBpc = 1;
 $4 = $nBpp;
 $5 = $4&255;
 $6 = $nBpc;
 $7 = $6&255;
 $8 = Math_imul($5, $7)|0;
 $9 = $2;
 $10 = Math_imul($8, $9)|0;
 $iBps = $10;
 $11 = $0;
 $Temp = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $3;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $x = 0;
  while(1) {
   $15 = $x;
   $16 = $2;
   $17 = ($15>>>0)<($16>>>0);
   if (!($17)) {
    break;
   }
   $18 = $Temp;
   $color_0 = $18;
   $19 = $Temp;
   $20 = (($19) + 2|0);
   $color_1 = $20;
   $21 = $Temp;
   $22 = (($21) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $bitmask = $23;
   $24 = $Temp;
   $25 = (($24) + 8|0);
   $Temp = $25;
   $26 = $color_0;
   $27 = HEAP16[$26>>1]|0;
   $28 = ($27&65535) >>> 11;
   $29 = $28&65535;
   $30 = $29 << 3;
   $31 = $30&255;
   HEAP8[$colours>>0] = $31;
   $32 = $color_0;
   $33 = HEAP16[$32>>1]|0;
   $34 = ($33&65535) >>> 5;
   $35 = $34 & 63;
   $36 = $35&65535;
   $37 = $36 << 2;
   $38 = $37&255;
   $39 = (($colours) + 1|0);
   HEAP8[$39>>0] = $38;
   $40 = $color_0;
   $41 = HEAP16[$40>>1]|0;
   $42 = $41 & 31;
   $43 = $42&65535;
   $44 = $43 << 3;
   $45 = $44&255;
   $46 = (($colours) + 2|0);
   HEAP8[$46>>0] = $45;
   $47 = (($colours) + 3|0);
   HEAP8[$47>>0] = -1;
   $48 = $color_1;
   $49 = HEAP16[$48>>1]|0;
   $50 = ($49&65535) >>> 11;
   $51 = $50&65535;
   $52 = $51 << 3;
   $53 = $52&255;
   $54 = (($colours) + 4|0);
   HEAP8[$54>>0] = $53;
   $55 = $color_1;
   $56 = HEAP16[$55>>1]|0;
   $57 = ($56&65535) >>> 5;
   $58 = $57 & 63;
   $59 = $58&65535;
   $60 = $59 << 2;
   $61 = $60&255;
   $62 = (($colours) + 4|0);
   $63 = (($62) + 1|0);
   HEAP8[$63>>0] = $61;
   $64 = $color_1;
   $65 = HEAP16[$64>>1]|0;
   $66 = $65 & 31;
   $67 = $66&65535;
   $68 = $67 << 3;
   $69 = $68&255;
   $70 = (($colours) + 4|0);
   $71 = (($70) + 2|0);
   HEAP8[$71>>0] = $69;
   $72 = (($colours) + 4|0);
   $73 = (($72) + 3|0);
   HEAP8[$73>>0] = -1;
   $74 = $color_0;
   $75 = HEAP16[$74>>1]|0;
   $76 = $75&65535;
   $77 = $color_1;
   $78 = HEAP16[$77>>1]|0;
   $79 = $78&65535;
   $80 = ($76|0)>($79|0);
   if ($80) {
    $81 = (($colours) + 2|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83<<1;
    $85 = (($colours) + 4|0);
    $86 = (($85) + 2|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = (($84) + ($88))|0;
    $90 = (($89) + 1)|0;
    $91 = (($90|0) / 3)&-1;
    $92 = $91&255;
    $93 = (($colours) + 8|0);
    $94 = (($93) + 2|0);
    HEAP8[$94>>0] = $92;
    $95 = (($colours) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97<<1;
    $99 = (($colours) + 4|0);
    $100 = (($99) + 1|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = (($98) + ($102))|0;
    $104 = (($103) + 1)|0;
    $105 = (($104|0) / 3)&-1;
    $106 = $105&255;
    $107 = (($colours) + 8|0);
    $108 = (($107) + 1|0);
    HEAP8[$108>>0] = $106;
    $109 = HEAP8[$colours>>0]|0;
    $110 = $109&255;
    $111 = $110<<1;
    $112 = (($colours) + 4|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = (($111) + ($114))|0;
    $116 = (($115) + 1)|0;
    $117 = (($116|0) / 3)&-1;
    $118 = $117&255;
    $119 = (($colours) + 8|0);
    HEAP8[$119>>0] = $118;
    $120 = (($colours) + 8|0);
    $121 = (($120) + 3|0);
    HEAP8[$121>>0] = -1;
    $122 = (($colours) + 2|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = (($colours) + 4|0);
    $126 = (($125) + 2|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = $128<<1;
    $130 = (($124) + ($129))|0;
    $131 = (($130) + 1)|0;
    $132 = (($131|0) / 3)&-1;
    $133 = $132&255;
    $134 = (($colours) + 12|0);
    $135 = (($134) + 2|0);
    HEAP8[$135>>0] = $133;
    $136 = (($colours) + 1|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = (($colours) + 4|0);
    $140 = (($139) + 1|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $142<<1;
    $144 = (($138) + ($143))|0;
    $145 = (($144) + 1)|0;
    $146 = (($145|0) / 3)&-1;
    $147 = $146&255;
    $148 = (($colours) + 12|0);
    $149 = (($148) + 1|0);
    HEAP8[$149>>0] = $147;
    $150 = HEAP8[$colours>>0]|0;
    $151 = $150&255;
    $152 = (($colours) + 4|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = $154<<1;
    $156 = (($151) + ($155))|0;
    $157 = (($156) + 1)|0;
    $158 = (($157|0) / 3)&-1;
    $159 = $158&255;
    $160 = (($colours) + 12|0);
    HEAP8[$160>>0] = $159;
    $161 = (($colours) + 12|0);
    $162 = (($161) + 3|0);
    HEAP8[$162>>0] = -1;
   } else {
    $163 = (($colours) + 2|0);
    $164 = HEAP8[$163>>0]|0;
    $165 = $164&255;
    $166 = (($colours) + 4|0);
    $167 = (($166) + 2|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = (($165) + ($169))|0;
    $171 = (($170|0) / 2)&-1;
    $172 = $171&255;
    $173 = (($colours) + 8|0);
    $174 = (($173) + 2|0);
    HEAP8[$174>>0] = $172;
    $175 = (($colours) + 1|0);
    $176 = HEAP8[$175>>0]|0;
    $177 = $176&255;
    $178 = (($colours) + 4|0);
    $179 = (($178) + 1|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    $182 = (($177) + ($181))|0;
    $183 = (($182|0) / 2)&-1;
    $184 = $183&255;
    $185 = (($colours) + 8|0);
    $186 = (($185) + 1|0);
    HEAP8[$186>>0] = $184;
    $187 = HEAP8[$colours>>0]|0;
    $188 = $187&255;
    $189 = (($colours) + 4|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = $190&255;
    $192 = (($188) + ($191))|0;
    $193 = (($192|0) / 2)&-1;
    $194 = $193&255;
    $195 = (($colours) + 8|0);
    HEAP8[$195>>0] = $194;
    $196 = (($colours) + 8|0);
    $197 = (($196) + 3|0);
    HEAP8[$197>>0] = -1;
    $198 = (($colours) + 2|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = $199&255;
    $201 = (($colours) + 4|0);
    $202 = (($201) + 2|0);
    $203 = HEAP8[$202>>0]|0;
    $204 = $203&255;
    $205 = $204<<1;
    $206 = (($200) + ($205))|0;
    $207 = (($206) + 1)|0;
    $208 = (($207|0) / 3)&-1;
    $209 = $208&255;
    $210 = (($colours) + 12|0);
    $211 = (($210) + 2|0);
    HEAP8[$211>>0] = $209;
    $212 = (($colours) + 1|0);
    $213 = HEAP8[$212>>0]|0;
    $214 = $213&255;
    $215 = (($colours) + 4|0);
    $216 = (($215) + 1|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = $217&255;
    $219 = $218<<1;
    $220 = (($214) + ($219))|0;
    $221 = (($220) + 1)|0;
    $222 = (($221|0) / 3)&-1;
    $223 = $222&255;
    $224 = (($colours) + 12|0);
    $225 = (($224) + 1|0);
    HEAP8[$225>>0] = $223;
    $226 = HEAP8[$colours>>0]|0;
    $227 = $226&255;
    $228 = (($colours) + 4|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = $229&255;
    $231 = $230<<1;
    $232 = (($227) + ($231))|0;
    $233 = (($232) + 1)|0;
    $234 = (($233|0) / 3)&-1;
    $235 = $234&255;
    $236 = (($colours) + 12|0);
    HEAP8[$236>>0] = $235;
    $237 = (($colours) + 12|0);
    $238 = (($237) + 3|0);
    HEAP8[$238>>0] = 0;
   }
   $j = 0;
   $k = 0;
   while(1) {
    $239 = $j;
    $240 = ($239>>>0)<(4);
    if (!($240)) {
     break;
    }
    $i = 0;
    while(1) {
     $241 = $i;
     $242 = ($241>>>0)<(4);
     if (!($242)) {
      break;
     }
     $243 = $bitmask;
     $244 = $k;
     $245 = $244<<1;
     $246 = 3 << $245;
     $247 = $243 & $246;
     $248 = $k;
     $249 = $248<<1;
     $250 = $247 >>> $249;
     $Select = $250;
     $251 = $Select;
     $252 = (($colours) + ($251<<2)|0);
     $col = $252;
     $253 = $x;
     $254 = $i;
     $255 = (($253) + ($254))|0;
     $256 = $2;
     $257 = ($255>>>0)<($256>>>0);
     if ($257) {
      $258 = $y;
      $259 = $j;
      $260 = (($258) + ($259))|0;
      $261 = $3;
      $262 = ($260>>>0)<($261>>>0);
      if ($262) {
       $263 = $y;
       $264 = $j;
       $265 = (($263) + ($264))|0;
       $266 = $iBps;
       $267 = Math_imul($265, $266)|0;
       $268 = $x;
       $269 = $i;
       $270 = (($268) + ($269))|0;
       $271 = $nBpp;
       $272 = $271&255;
       $273 = Math_imul($270, $272)|0;
       $274 = (($267) + ($273))|0;
       $Offset = $274;
       $275 = $col;
       $276 = HEAP8[$275>>0]|0;
       $277 = $Offset;
       $278 = (($277) + 0)|0;
       $279 = $1;
       $280 = (($279) + ($278)|0);
       HEAP8[$280>>0] = $276;
       $281 = $col;
       $282 = (($281) + 1|0);
       $283 = HEAP8[$282>>0]|0;
       $284 = $Offset;
       $285 = (($284) + 1)|0;
       $286 = $1;
       $287 = (($286) + ($285)|0);
       HEAP8[$287>>0] = $283;
       $288 = $col;
       $289 = (($288) + 2|0);
       $290 = HEAP8[$289>>0]|0;
       $291 = $Offset;
       $292 = (($291) + 2)|0;
       $293 = $1;
       $294 = (($293) + ($292)|0);
       HEAP8[$294>>0] = $290;
       $295 = $col;
       $296 = (($295) + 3|0);
       $297 = HEAP8[$296>>0]|0;
       $298 = $Offset;
       $299 = (($298) + 3)|0;
       $300 = $1;
       $301 = (($300) + ($299)|0);
       HEAP8[$301>>0] = $297;
      }
     }
     $302 = $i;
     $303 = (($302) + 1)|0;
     $i = $303;
     $304 = $k;
     $305 = (($304) + 1)|0;
     $k = $305;
    }
    $306 = $j;
    $307 = (($306) + 1)|0;
    $j = $307;
   }
   $308 = $x;
   $309 = (($308) + 4)|0;
   $x = $309;
  }
  $310 = $y;
  $311 = (($310) + 4)|0;
  $y = $311;
 }
 STACKTOP = sp;return 1;
}
function __ZN6VTFLib8CVTFFile14DecompressDXT3EPhS1_jj($src,$dst,$uiWidth,$uiHeight) {
 $src = $src|0;
 $dst = $dst|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Offset = 0, $Select = 0, $Temp = 0, $alpha = 0, $bitmask = 0, $col = 0, $color_0 = 0, $color_1 = 0, $colours = 0, $i = 0, $iBps = 0, $j = 0, $k = 0;
 var $nBpc = 0, $nBpp = 0, $word = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $colours = sp + 80|0;
 $0 = $src;
 $1 = $dst;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $nBpp = 4;
 $nBpc = 1;
 $4 = $nBpp;
 $5 = $4&255;
 $6 = $nBpc;
 $7 = $6&255;
 $8 = Math_imul($5, $7)|0;
 $9 = $2;
 $10 = Math_imul($8, $9)|0;
 $iBps = $10;
 $11 = $0;
 $Temp = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $3;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $x = 0;
  while(1) {
   $15 = $x;
   $16 = $2;
   $17 = ($15>>>0)<($16>>>0);
   if (!($17)) {
    break;
   }
   $18 = $Temp;
   $alpha = $18;
   $19 = $Temp;
   $20 = (($19) + 8|0);
   $Temp = $20;
   $21 = $Temp;
   $color_0 = $21;
   $22 = $Temp;
   $23 = (($22) + 2|0);
   $color_1 = $23;
   $24 = $Temp;
   $25 = (($24) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $bitmask = $26;
   $27 = $Temp;
   $28 = (($27) + 8|0);
   $Temp = $28;
   $29 = $color_0;
   $30 = HEAP16[$29>>1]|0;
   $31 = ($30&65535) >>> 11;
   $32 = $31&65535;
   $33 = $32 << 3;
   $34 = $33&255;
   HEAP8[$colours>>0] = $34;
   $35 = $color_0;
   $36 = HEAP16[$35>>1]|0;
   $37 = ($36&65535) >>> 5;
   $38 = $37 & 63;
   $39 = $38&65535;
   $40 = $39 << 2;
   $41 = $40&255;
   $42 = (($colours) + 1|0);
   HEAP8[$42>>0] = $41;
   $43 = $color_0;
   $44 = HEAP16[$43>>1]|0;
   $45 = $44 & 31;
   $46 = $45&65535;
   $47 = $46 << 3;
   $48 = $47&255;
   $49 = (($colours) + 2|0);
   HEAP8[$49>>0] = $48;
   $50 = (($colours) + 3|0);
   HEAP8[$50>>0] = -1;
   $51 = $color_1;
   $52 = HEAP16[$51>>1]|0;
   $53 = ($52&65535) >>> 11;
   $54 = $53&65535;
   $55 = $54 << 3;
   $56 = $55&255;
   $57 = (($colours) + 4|0);
   HEAP8[$57>>0] = $56;
   $58 = $color_1;
   $59 = HEAP16[$58>>1]|0;
   $60 = ($59&65535) >>> 5;
   $61 = $60 & 63;
   $62 = $61&65535;
   $63 = $62 << 2;
   $64 = $63&255;
   $65 = (($colours) + 4|0);
   $66 = (($65) + 1|0);
   HEAP8[$66>>0] = $64;
   $67 = $color_1;
   $68 = HEAP16[$67>>1]|0;
   $69 = $68 & 31;
   $70 = $69&65535;
   $71 = $70 << 3;
   $72 = $71&255;
   $73 = (($colours) + 4|0);
   $74 = (($73) + 2|0);
   HEAP8[$74>>0] = $72;
   $75 = (($colours) + 4|0);
   $76 = (($75) + 3|0);
   HEAP8[$76>>0] = -1;
   $77 = (($colours) + 2|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $79<<1;
   $81 = (($colours) + 4|0);
   $82 = (($81) + 2|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = (($80) + ($84))|0;
   $86 = (($85) + 1)|0;
   $87 = (($86|0) / 3)&-1;
   $88 = $87&255;
   $89 = (($colours) + 8|0);
   $90 = (($89) + 2|0);
   HEAP8[$90>>0] = $88;
   $91 = (($colours) + 1|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $93<<1;
   $95 = (($colours) + 4|0);
   $96 = (($95) + 1|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = (($94) + ($98))|0;
   $100 = (($99) + 1)|0;
   $101 = (($100|0) / 3)&-1;
   $102 = $101&255;
   $103 = (($colours) + 8|0);
   $104 = (($103) + 1|0);
   HEAP8[$104>>0] = $102;
   $105 = HEAP8[$colours>>0]|0;
   $106 = $105&255;
   $107 = $106<<1;
   $108 = (($colours) + 4|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = (($107) + ($110))|0;
   $112 = (($111) + 1)|0;
   $113 = (($112|0) / 3)&-1;
   $114 = $113&255;
   $115 = (($colours) + 8|0);
   HEAP8[$115>>0] = $114;
   $116 = (($colours) + 8|0);
   $117 = (($116) + 3|0);
   HEAP8[$117>>0] = -1;
   $118 = (($colours) + 2|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = (($colours) + 4|0);
   $122 = (($121) + 2|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = $124<<1;
   $126 = (($120) + ($125))|0;
   $127 = (($126) + 1)|0;
   $128 = (($127|0) / 3)&-1;
   $129 = $128&255;
   $130 = (($colours) + 12|0);
   $131 = (($130) + 2|0);
   HEAP8[$131>>0] = $129;
   $132 = (($colours) + 1|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($colours) + 4|0);
   $136 = (($135) + 1|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = $138<<1;
   $140 = (($134) + ($139))|0;
   $141 = (($140) + 1)|0;
   $142 = (($141|0) / 3)&-1;
   $143 = $142&255;
   $144 = (($colours) + 12|0);
   $145 = (($144) + 1|0);
   HEAP8[$145>>0] = $143;
   $146 = HEAP8[$colours>>0]|0;
   $147 = $146&255;
   $148 = (($colours) + 4|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = $150<<1;
   $152 = (($147) + ($151))|0;
   $153 = (($152) + 1)|0;
   $154 = (($153|0) / 3)&-1;
   $155 = $154&255;
   $156 = (($colours) + 12|0);
   HEAP8[$156>>0] = $155;
   $157 = (($colours) + 12|0);
   $158 = (($157) + 3|0);
   HEAP8[$158>>0] = -1;
   $k = 0;
   $j = 0;
   while(1) {
    $159 = $j;
    $160 = ($159>>>0)<(4);
    if (!($160)) {
     break;
    }
    $i = 0;
    while(1) {
     $161 = $i;
     $162 = ($161>>>0)<(4);
     if (!($162)) {
      break;
     }
     $163 = $bitmask;
     $164 = $k;
     $165 = $164<<1;
     $166 = 3 << $165;
     $167 = $163 & $166;
     $168 = $k;
     $169 = $168<<1;
     $170 = $167 >>> $169;
     $Select = $170;
     $171 = $Select;
     $172 = (($colours) + ($171<<2)|0);
     $col = $172;
     $173 = $x;
     $174 = $i;
     $175 = (($173) + ($174))|0;
     $176 = $2;
     $177 = ($175>>>0)<($176>>>0);
     if ($177) {
      $178 = $y;
      $179 = $j;
      $180 = (($178) + ($179))|0;
      $181 = $3;
      $182 = ($180>>>0)<($181>>>0);
      if ($182) {
       $183 = $y;
       $184 = $j;
       $185 = (($183) + ($184))|0;
       $186 = $iBps;
       $187 = Math_imul($185, $186)|0;
       $188 = $x;
       $189 = $i;
       $190 = (($188) + ($189))|0;
       $191 = $nBpp;
       $192 = $191&255;
       $193 = Math_imul($190, $192)|0;
       $194 = (($187) + ($193))|0;
       $Offset = $194;
       $195 = $col;
       $196 = HEAP8[$195>>0]|0;
       $197 = $Offset;
       $198 = (($197) + 0)|0;
       $199 = $1;
       $200 = (($199) + ($198)|0);
       HEAP8[$200>>0] = $196;
       $201 = $col;
       $202 = (($201) + 1|0);
       $203 = HEAP8[$202>>0]|0;
       $204 = $Offset;
       $205 = (($204) + 1)|0;
       $206 = $1;
       $207 = (($206) + ($205)|0);
       HEAP8[$207>>0] = $203;
       $208 = $col;
       $209 = (($208) + 2|0);
       $210 = HEAP8[$209>>0]|0;
       $211 = $Offset;
       $212 = (($211) + 2)|0;
       $213 = $1;
       $214 = (($213) + ($212)|0);
       HEAP8[$214>>0] = $210;
      }
     }
     $215 = $i;
     $216 = (($215) + 1)|0;
     $i = $216;
     $217 = $k;
     $218 = (($217) + 1)|0;
     $k = $218;
    }
    $219 = $j;
    $220 = (($219) + 1)|0;
    $j = $220;
   }
   $j = 0;
   while(1) {
    $221 = $j;
    $222 = ($221>>>0)<(4);
    if (!($222)) {
     break;
    }
    $223 = $j;
    $224 = $alpha;
    $225 = (($224) + ($223<<1)|0);
    $226 = HEAP16[$225>>1]|0;
    $word = $226;
    $i = 0;
    while(1) {
     $227 = $i;
     $228 = ($227>>>0)<(4);
     if (!($228)) {
      break;
     }
     $229 = $x;
     $230 = $i;
     $231 = (($229) + ($230))|0;
     $232 = $2;
     $233 = ($231>>>0)<($232>>>0);
     if ($233) {
      $234 = $y;
      $235 = $j;
      $236 = (($234) + ($235))|0;
      $237 = $3;
      $238 = ($236>>>0)<($237>>>0);
      if ($238) {
       $239 = $y;
       $240 = $j;
       $241 = (($239) + ($240))|0;
       $242 = $iBps;
       $243 = Math_imul($241, $242)|0;
       $244 = $x;
       $245 = $i;
       $246 = (($244) + ($245))|0;
       $247 = $nBpp;
       $248 = $247&255;
       $249 = Math_imul($246, $248)|0;
       $250 = (($243) + ($249))|0;
       $251 = (($250) + 3)|0;
       $Offset = $251;
       $252 = $word;
       $253 = $252&65535;
       $254 = $253 & 15;
       $255 = $254&255;
       $256 = $Offset;
       $257 = $1;
       $258 = (($257) + ($256)|0);
       HEAP8[$258>>0] = $255;
       $259 = $Offset;
       $260 = $1;
       $261 = (($260) + ($259)|0);
       $262 = HEAP8[$261>>0]|0;
       $263 = $262&255;
       $264 = $Offset;
       $265 = $1;
       $266 = (($265) + ($264)|0);
       $267 = HEAP8[$266>>0]|0;
       $268 = $267&255;
       $269 = $268 << 4;
       $270 = $263 | $269;
       $271 = $270&255;
       $272 = $Offset;
       $273 = $1;
       $274 = (($273) + ($272)|0);
       HEAP8[$274>>0] = $271;
      }
     }
     $275 = $word;
     $276 = $275&65535;
     $277 = $276 >> 4;
     $278 = $277&65535;
     $word = $278;
     $279 = $i;
     $280 = (($279) + 1)|0;
     $i = $280;
    }
    $281 = $j;
    $282 = (($281) + 1)|0;
    $j = $282;
   }
   $283 = $x;
   $284 = (($283) + 4)|0;
   $x = $284;
  }
  $285 = $y;
  $286 = (($285) + 4)|0;
  $y = $286;
 }
 STACKTOP = sp;return 1;
}
function __ZN6VTFLib8CVTFFile14DecompressDXT5EPhS1_jj($src,$dst,$uiWidth,$uiHeight) {
 $src = $src|0;
 $dst = $dst|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Offset = 0, $Select = 0, $Temp = 0, $alphamask = 0, $alphas = 0, $bitmask = 0, $bits = 0, $col = 0, $color_0 = 0, $color_1 = 0, $colours = 0, $i = 0, $iBps = 0, $j = 0, $k = 0;
 var $nBpc = 0, $nBpp = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $colours = sp + 88|0;
 $alphas = sp + 80|0;
 $0 = $src;
 $1 = $dst;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $nBpp = 4;
 $nBpc = 1;
 $4 = $nBpp;
 $5 = $4&255;
 $6 = $nBpc;
 $7 = $6&255;
 $8 = Math_imul($5, $7)|0;
 $9 = $2;
 $10 = Math_imul($8, $9)|0;
 $iBps = $10;
 $11 = $0;
 $Temp = $11;
 $y = 0;
 while(1) {
  $12 = $y;
  $13 = $3;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $x = 0;
  while(1) {
   $15 = $x;
   $16 = $2;
   $17 = ($15>>>0)<($16>>>0);
   if (!($17)) {
    break;
   }
   $18 = $Temp;
   $19 = HEAP8[$18>>0]|0;
   HEAP8[$alphas>>0] = $19;
   $20 = $Temp;
   $21 = (($20) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = (($alphas) + 1|0);
   HEAP8[$23>>0] = $22;
   $24 = $Temp;
   $25 = (($24) + 2|0);
   $alphamask = $25;
   $26 = $Temp;
   $27 = (($26) + 8|0);
   $Temp = $27;
   $28 = $Temp;
   $color_0 = $28;
   $29 = $Temp;
   $30 = (($29) + 2|0);
   $color_1 = $30;
   $31 = $Temp;
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $bitmask = $33;
   $34 = $Temp;
   $35 = (($34) + 8|0);
   $Temp = $35;
   $36 = $color_0;
   $37 = HEAP16[$36>>1]|0;
   $38 = ($37&65535) >>> 11;
   $39 = $38&65535;
   $40 = $39 << 3;
   $41 = $40&255;
   HEAP8[$colours>>0] = $41;
   $42 = $color_0;
   $43 = HEAP16[$42>>1]|0;
   $44 = ($43&65535) >>> 5;
   $45 = $44 & 63;
   $46 = $45&65535;
   $47 = $46 << 2;
   $48 = $47&255;
   $49 = (($colours) + 1|0);
   HEAP8[$49>>0] = $48;
   $50 = $color_0;
   $51 = HEAP16[$50>>1]|0;
   $52 = $51 & 31;
   $53 = $52&65535;
   $54 = $53 << 3;
   $55 = $54&255;
   $56 = (($colours) + 2|0);
   HEAP8[$56>>0] = $55;
   $57 = (($colours) + 3|0);
   HEAP8[$57>>0] = -1;
   $58 = $color_1;
   $59 = HEAP16[$58>>1]|0;
   $60 = ($59&65535) >>> 11;
   $61 = $60&65535;
   $62 = $61 << 3;
   $63 = $62&255;
   $64 = (($colours) + 4|0);
   HEAP8[$64>>0] = $63;
   $65 = $color_1;
   $66 = HEAP16[$65>>1]|0;
   $67 = ($66&65535) >>> 5;
   $68 = $67 & 63;
   $69 = $68&65535;
   $70 = $69 << 2;
   $71 = $70&255;
   $72 = (($colours) + 4|0);
   $73 = (($72) + 1|0);
   HEAP8[$73>>0] = $71;
   $74 = $color_1;
   $75 = HEAP16[$74>>1]|0;
   $76 = $75 & 31;
   $77 = $76&65535;
   $78 = $77 << 3;
   $79 = $78&255;
   $80 = (($colours) + 4|0);
   $81 = (($80) + 2|0);
   HEAP8[$81>>0] = $79;
   $82 = (($colours) + 4|0);
   $83 = (($82) + 3|0);
   HEAP8[$83>>0] = -1;
   $84 = (($colours) + 2|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = $86<<1;
   $88 = (($colours) + 4|0);
   $89 = (($88) + 2|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = (($87) + ($91))|0;
   $93 = (($92) + 1)|0;
   $94 = (($93|0) / 3)&-1;
   $95 = $94&255;
   $96 = (($colours) + 8|0);
   $97 = (($96) + 2|0);
   HEAP8[$97>>0] = $95;
   $98 = (($colours) + 1|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = $100<<1;
   $102 = (($colours) + 4|0);
   $103 = (($102) + 1|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = (($101) + ($105))|0;
   $107 = (($106) + 1)|0;
   $108 = (($107|0) / 3)&-1;
   $109 = $108&255;
   $110 = (($colours) + 8|0);
   $111 = (($110) + 1|0);
   HEAP8[$111>>0] = $109;
   $112 = HEAP8[$colours>>0]|0;
   $113 = $112&255;
   $114 = $113<<1;
   $115 = (($colours) + 4|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = (($114) + ($117))|0;
   $119 = (($118) + 1)|0;
   $120 = (($119|0) / 3)&-1;
   $121 = $120&255;
   $122 = (($colours) + 8|0);
   HEAP8[$122>>0] = $121;
   $123 = (($colours) + 8|0);
   $124 = (($123) + 3|0);
   HEAP8[$124>>0] = -1;
   $125 = (($colours) + 2|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = (($colours) + 4|0);
   $129 = (($128) + 2|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $131<<1;
   $133 = (($127) + ($132))|0;
   $134 = (($133) + 1)|0;
   $135 = (($134|0) / 3)&-1;
   $136 = $135&255;
   $137 = (($colours) + 12|0);
   $138 = (($137) + 2|0);
   HEAP8[$138>>0] = $136;
   $139 = (($colours) + 1|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = (($colours) + 4|0);
   $143 = (($142) + 1|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = $145<<1;
   $147 = (($141) + ($146))|0;
   $148 = (($147) + 1)|0;
   $149 = (($148|0) / 3)&-1;
   $150 = $149&255;
   $151 = (($colours) + 12|0);
   $152 = (($151) + 1|0);
   HEAP8[$152>>0] = $150;
   $153 = HEAP8[$colours>>0]|0;
   $154 = $153&255;
   $155 = (($colours) + 4|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = $157<<1;
   $159 = (($154) + ($158))|0;
   $160 = (($159) + 1)|0;
   $161 = (($160|0) / 3)&-1;
   $162 = $161&255;
   $163 = (($colours) + 12|0);
   HEAP8[$163>>0] = $162;
   $164 = (($colours) + 12|0);
   $165 = (($164) + 3|0);
   HEAP8[$165>>0] = -1;
   $k = 0;
   $j = 0;
   while(1) {
    $166 = $j;
    $167 = ($166>>>0)<(4);
    if (!($167)) {
     break;
    }
    $i = 0;
    while(1) {
     $168 = $i;
     $169 = ($168>>>0)<(4);
     if (!($169)) {
      break;
     }
     $170 = $bitmask;
     $171 = $k;
     $172 = $171<<1;
     $173 = 3 << $172;
     $174 = $170 & $173;
     $175 = $k;
     $176 = $175<<1;
     $177 = $174 >>> $176;
     $Select = $177;
     $178 = $Select;
     $179 = (($colours) + ($178<<2)|0);
     $col = $179;
     $180 = $x;
     $181 = $i;
     $182 = (($180) + ($181))|0;
     $183 = $2;
     $184 = ($182>>>0)<($183>>>0);
     if ($184) {
      $185 = $y;
      $186 = $j;
      $187 = (($185) + ($186))|0;
      $188 = $3;
      $189 = ($187>>>0)<($188>>>0);
      if ($189) {
       $190 = $y;
       $191 = $j;
       $192 = (($190) + ($191))|0;
       $193 = $iBps;
       $194 = Math_imul($192, $193)|0;
       $195 = $x;
       $196 = $i;
       $197 = (($195) + ($196))|0;
       $198 = $nBpp;
       $199 = $198&255;
       $200 = Math_imul($197, $199)|0;
       $201 = (($194) + ($200))|0;
       $Offset = $201;
       $202 = $col;
       $203 = HEAP8[$202>>0]|0;
       $204 = $Offset;
       $205 = (($204) + 0)|0;
       $206 = $1;
       $207 = (($206) + ($205)|0);
       HEAP8[$207>>0] = $203;
       $208 = $col;
       $209 = (($208) + 1|0);
       $210 = HEAP8[$209>>0]|0;
       $211 = $Offset;
       $212 = (($211) + 1)|0;
       $213 = $1;
       $214 = (($213) + ($212)|0);
       HEAP8[$214>>0] = $210;
       $215 = $col;
       $216 = (($215) + 2|0);
       $217 = HEAP8[$216>>0]|0;
       $218 = $Offset;
       $219 = (($218) + 2)|0;
       $220 = $1;
       $221 = (($220) + ($219)|0);
       HEAP8[$221>>0] = $217;
      }
     }
     $222 = $i;
     $223 = (($222) + 1)|0;
     $i = $223;
     $224 = $k;
     $225 = (($224) + 1)|0;
     $k = $225;
    }
    $226 = $j;
    $227 = (($226) + 1)|0;
    $j = $227;
   }
   $228 = HEAP8[$alphas>>0]|0;
   $229 = $228&255;
   $230 = (($alphas) + 1|0);
   $231 = HEAP8[$230>>0]|0;
   $232 = $231&255;
   $233 = ($229|0)>($232|0);
   if ($233) {
    $234 = HEAP8[$alphas>>0]|0;
    $235 = $234&255;
    $236 = ($235*6)|0;
    $237 = (($alphas) + 1|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238&255;
    $240 = $239;
    $241 = (($236) + ($240))|0;
    $242 = (($241) + 3)|0;
    $243 = (($242|0) / 7)&-1;
    $244 = $243&255;
    $245 = (($alphas) + 2|0);
    HEAP8[$245>>0] = $244;
    $246 = HEAP8[$alphas>>0]|0;
    $247 = $246&255;
    $248 = ($247*5)|0;
    $249 = (($alphas) + 1|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = $250&255;
    $252 = $251<<1;
    $253 = (($248) + ($252))|0;
    $254 = (($253) + 3)|0;
    $255 = (($254|0) / 7)&-1;
    $256 = $255&255;
    $257 = (($alphas) + 3|0);
    HEAP8[$257>>0] = $256;
    $258 = HEAP8[$alphas>>0]|0;
    $259 = $258&255;
    $260 = $259<<2;
    $261 = (($alphas) + 1|0);
    $262 = HEAP8[$261>>0]|0;
    $263 = $262&255;
    $264 = ($263*3)|0;
    $265 = (($260) + ($264))|0;
    $266 = (($265) + 3)|0;
    $267 = (($266|0) / 7)&-1;
    $268 = $267&255;
    $269 = (($alphas) + 4|0);
    HEAP8[$269>>0] = $268;
    $270 = HEAP8[$alphas>>0]|0;
    $271 = $270&255;
    $272 = ($271*3)|0;
    $273 = (($alphas) + 1|0);
    $274 = HEAP8[$273>>0]|0;
    $275 = $274&255;
    $276 = $275<<2;
    $277 = (($272) + ($276))|0;
    $278 = (($277) + 3)|0;
    $279 = (($278|0) / 7)&-1;
    $280 = $279&255;
    $281 = (($alphas) + 5|0);
    HEAP8[$281>>0] = $280;
    $282 = HEAP8[$alphas>>0]|0;
    $283 = $282&255;
    $284 = $283<<1;
    $285 = (($alphas) + 1|0);
    $286 = HEAP8[$285>>0]|0;
    $287 = $286&255;
    $288 = ($287*5)|0;
    $289 = (($284) + ($288))|0;
    $290 = (($289) + 3)|0;
    $291 = (($290|0) / 7)&-1;
    $292 = $291&255;
    $293 = (($alphas) + 6|0);
    HEAP8[$293>>0] = $292;
    $294 = HEAP8[$alphas>>0]|0;
    $295 = $294&255;
    $296 = $295;
    $297 = (($alphas) + 1|0);
    $298 = HEAP8[$297>>0]|0;
    $299 = $298&255;
    $300 = ($299*6)|0;
    $301 = (($296) + ($300))|0;
    $302 = (($301) + 3)|0;
    $303 = (($302|0) / 7)&-1;
    $304 = $303&255;
    $305 = (($alphas) + 7|0);
    HEAP8[$305>>0] = $304;
   } else {
    $306 = HEAP8[$alphas>>0]|0;
    $307 = $306&255;
    $308 = $307<<2;
    $309 = (($alphas) + 1|0);
    $310 = HEAP8[$309>>0]|0;
    $311 = $310&255;
    $312 = $311;
    $313 = (($308) + ($312))|0;
    $314 = (($313) + 2)|0;
    $315 = (($314|0) / 5)&-1;
    $316 = $315&255;
    $317 = (($alphas) + 2|0);
    HEAP8[$317>>0] = $316;
    $318 = HEAP8[$alphas>>0]|0;
    $319 = $318&255;
    $320 = ($319*3)|0;
    $321 = (($alphas) + 1|0);
    $322 = HEAP8[$321>>0]|0;
    $323 = $322&255;
    $324 = $323<<1;
    $325 = (($320) + ($324))|0;
    $326 = (($325) + 2)|0;
    $327 = (($326|0) / 5)&-1;
    $328 = $327&255;
    $329 = (($alphas) + 3|0);
    HEAP8[$329>>0] = $328;
    $330 = HEAP8[$alphas>>0]|0;
    $331 = $330&255;
    $332 = $331<<1;
    $333 = (($alphas) + 1|0);
    $334 = HEAP8[$333>>0]|0;
    $335 = $334&255;
    $336 = ($335*3)|0;
    $337 = (($332) + ($336))|0;
    $338 = (($337) + 2)|0;
    $339 = (($338|0) / 5)&-1;
    $340 = $339&255;
    $341 = (($alphas) + 4|0);
    HEAP8[$341>>0] = $340;
    $342 = HEAP8[$alphas>>0]|0;
    $343 = $342&255;
    $344 = $343;
    $345 = (($alphas) + 1|0);
    $346 = HEAP8[$345>>0]|0;
    $347 = $346&255;
    $348 = $347<<2;
    $349 = (($344) + ($348))|0;
    $350 = (($349) + 2)|0;
    $351 = (($350|0) / 5)&-1;
    $352 = $351&255;
    $353 = (($alphas) + 5|0);
    HEAP8[$353>>0] = $352;
    $354 = (($alphas) + 6|0);
    HEAP8[$354>>0] = 0;
    $355 = (($alphas) + 7|0);
    HEAP8[$355>>0] = -1;
   }
   $356 = $alphamask;
   $357 = HEAP32[$356>>2]|0;
   $bits = $357;
   $j = 0;
   while(1) {
    $358 = $j;
    $359 = ($358>>>0)<(2);
    if (!($359)) {
     break;
    }
    $i = 0;
    while(1) {
     $360 = $i;
     $361 = ($360>>>0)<(4);
     if (!($361)) {
      break;
     }
     $362 = $x;
     $363 = $i;
     $364 = (($362) + ($363))|0;
     $365 = $2;
     $366 = ($364>>>0)<($365>>>0);
     if ($366) {
      $367 = $y;
      $368 = $j;
      $369 = (($367) + ($368))|0;
      $370 = $3;
      $371 = ($369>>>0)<($370>>>0);
      if ($371) {
       $372 = $y;
       $373 = $j;
       $374 = (($372) + ($373))|0;
       $375 = $iBps;
       $376 = Math_imul($374, $375)|0;
       $377 = $x;
       $378 = $i;
       $379 = (($377) + ($378))|0;
       $380 = $nBpp;
       $381 = $380&255;
       $382 = Math_imul($379, $381)|0;
       $383 = (($376) + ($382))|0;
       $384 = (($383) + 3)|0;
       $Offset = $384;
       $385 = $bits;
       $386 = $385 & 7;
       $387 = (($alphas) + ($386)|0);
       $388 = HEAP8[$387>>0]|0;
       $389 = $Offset;
       $390 = $1;
       $391 = (($390) + ($389)|0);
       HEAP8[$391>>0] = $388;
      }
     }
     $392 = $bits;
     $393 = $392 >>> 3;
     $bits = $393;
     $394 = $i;
     $395 = (($394) + 1)|0;
     $i = $395;
    }
    $396 = $j;
    $397 = (($396) + 1)|0;
    $j = $397;
   }
   $398 = $alphamask;
   $399 = (($398) + 3|0);
   $400 = HEAP32[$399>>2]|0;
   $bits = $400;
   $j = 2;
   while(1) {
    $401 = $j;
    $402 = ($401>>>0)<(4);
    if (!($402)) {
     break;
    }
    $i = 0;
    while(1) {
     $403 = $i;
     $404 = ($403>>>0)<(4);
     if (!($404)) {
      break;
     }
     $405 = $x;
     $406 = $i;
     $407 = (($405) + ($406))|0;
     $408 = $2;
     $409 = ($407>>>0)<($408>>>0);
     if ($409) {
      $410 = $y;
      $411 = $j;
      $412 = (($410) + ($411))|0;
      $413 = $3;
      $414 = ($412>>>0)<($413>>>0);
      if ($414) {
       $415 = $y;
       $416 = $j;
       $417 = (($415) + ($416))|0;
       $418 = $iBps;
       $419 = Math_imul($417, $418)|0;
       $420 = $x;
       $421 = $i;
       $422 = (($420) + ($421))|0;
       $423 = $nBpp;
       $424 = $423&255;
       $425 = Math_imul($422, $424)|0;
       $426 = (($419) + ($425))|0;
       $427 = (($426) + 3)|0;
       $Offset = $427;
       $428 = $bits;
       $429 = $428 & 7;
       $430 = (($alphas) + ($429)|0);
       $431 = HEAP8[$430>>0]|0;
       $432 = $Offset;
       $433 = $1;
       $434 = (($433) + ($432)|0);
       HEAP8[$434>>0] = $431;
      }
     }
     $435 = $bits;
     $436 = $435 >>> 3;
     $bits = $436;
     $437 = $i;
     $438 = (($437) + 1)|0;
     $i = $438;
    }
    $439 = $j;
    $440 = (($439) + 1)|0;
    $j = $440;
   }
   $441 = $x;
   $442 = (($441) + 4)|0;
   $x = $442;
  }
  $443 = $y;
  $444 = (($443) + 4)|0;
  $y = $444;
 }
 STACKTOP = sp;return 1;
}
function __ZN6VTFLib8CVTFFile12CompressDXTnEPhS1_jj17tagVTFImageFormat($lpSource,$lpDest,$uiWidth,$uiHeight,$DestFormat) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $DestFormat = $DestFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $format = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lpSource;
 $2 = $lpDest;
 $3 = $uiWidth;
 $4 = $uiHeight;
 $5 = $DestFormat;
 $format = 0;
 $6 = $5;
 if ((($6|0) == 15)) {
  $format = 4;
 } else if ((($6|0) == 13)) {
  $format = 1;
 } else if ((($6|0) == 14)) {
  $format = 2;
 } else {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,9856,0);
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 $7 = $1;
 $8 = $3;
 $9 = $4;
 $10 = $2;
 $11 = $format;
 __ZN6squish13CompressImageEPKhiiPvi($7,$8,$9,$10,$11);
 $0 = 1;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function __Z11ToLuminanceRtS_S_S_($R,$G,$B,$A) {
 $R = $R|0;
 $G = $G|0;
 $B = $B|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $R;
 $1 = $G;
 $2 = $B;
 $3 = $A;
 $4 = +HEAPF32[13272>>2];
 $5 = $0;
 $6 = HEAP16[$5>>1]|0;
 $7 = (+($6&65535));
 $8 = $4 * $7;
 $9 = +HEAPF32[13280>>2];
 $10 = $1;
 $11 = HEAP16[$10>>1]|0;
 $12 = (+($11&65535));
 $13 = $9 * $12;
 $14 = $8 + $13;
 $15 = +HEAPF32[13288>>2];
 $16 = $2;
 $17 = HEAP16[$16>>1]|0;
 $18 = (+($17&65535));
 $19 = $15 * $18;
 $20 = $14 + $19;
 $21 = (~~(($20))&65535);
 $22 = $2;
 HEAP16[$22>>1] = $21;
 $23 = $1;
 HEAP16[$23>>1] = $21;
 $24 = $0;
 HEAP16[$24>>1] = $21;
 STACKTOP = sp;return;
}
function __Z13FromLuminanceRtS_S_S_($R,$G,$B,$A) {
 $R = $R|0;
 $G = $G|0;
 $B = $B|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $R;
 $1 = $G;
 $2 = $B;
 $3 = $A;
 $4 = $0;
 $5 = HEAP16[$4>>1]|0;
 $6 = $1;
 HEAP16[$6>>1] = $5;
 $7 = $2;
 HEAP16[$7>>1] = $5;
 STACKTOP = sp;return;
}
function __Z12ToBlueScreenRtS_S_S_($R,$G,$B,$A) {
 $R = $R|0;
 $G = $G|0;
 $B = $B|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $R;
 $1 = $G;
 $2 = $B;
 $3 = $A;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $14 = $3;
  HEAP16[$14>>1] = -1;
  STACKTOP = sp;return;
 }
 $8 = HEAP16[13296>>1]|0;
 $9 = $0;
 HEAP16[$9>>1] = $8;
 $10 = HEAP16[13304>>1]|0;
 $11 = $1;
 HEAP16[$11>>1] = $10;
 $12 = HEAP16[13312>>1]|0;
 $13 = $2;
 HEAP16[$13>>1] = $12;
 $14 = $3;
 HEAP16[$14>>1] = -1;
 STACKTOP = sp;return;
}
function __Z14FromBlueScreenRtS_S_S_($R,$G,$B,$A) {
 $R = $R|0;
 $G = $G|0;
 $B = $B|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $R;
 $1 = $G;
 $2 = $B;
 $3 = $A;
 $4 = $0;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = HEAP16[13296>>1]|0;
 $8 = $7&65535;
 $9 = ($6|0)==($8|0);
 if ($9) {
  $10 = $1;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = HEAP16[13304>>1]|0;
  $14 = $13&65535;
  $15 = ($12|0)==($14|0);
  if ($15) {
   $16 = $2;
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $19 = HEAP16[13312>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)==($20|0);
   if ($21) {
    $22 = HEAP16[13320>>1]|0;
    $23 = $0;
    HEAP16[$23>>1] = $22;
    $24 = HEAP16[13328>>1]|0;
    $25 = $1;
    HEAP16[$25>>1] = $24;
    $26 = HEAP16[13336>>1]|0;
    $27 = $2;
    HEAP16[$27>>1] = $26;
    $28 = $3;
    HEAP16[$28>>1] = 0;
    STACKTOP = sp;return;
   }
  }
 }
 $29 = $3;
 HEAP16[$29>>1] = -1;
 STACKTOP = sp;return;
}
function __Z6ToFP16RtS_S_S_($R,$G,$B,$A) {
 $R = $R|0;
 $G = $G|0;
 $B = $B|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $R;
 $1 = $G;
 $2 = $B;
 $3 = $A;
 STACKTOP = sp;return;
}
function __Z9ClampFP16f($sValue) {
 $sValue = +$sValue;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sValue;
 $1 = $0;
 $2 = $1 < 0.0;
 if ($2) {
  $0 = 0.0;
 }
 $3 = $0;
 $4 = $3 > 65335.0;
 if ($4) {
  $0 = 65335.0;
 }
 $5 = $0;
 STACKTOP = sp;return (+$5);
}
function __Z8FromFP16RtS_S_S_($R,$G,$B,$A) {
 $R = $R|0;
 $G = $G|0;
 $B = $B|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $sB = 0.0, $sG = 0.0, $sR = 0.0, $sTemp = 0.0;
 var $sU = 0.0, $sV = 0.0, $sY = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $R;
 $1 = $G;
 $2 = $B;
 $3 = $A;
 $4 = $0;
 $5 = HEAP16[$4>>1]|0;
 $6 = (+($5&65535));
 $sR = $6;
 $7 = $1;
 $8 = HEAP16[$7>>1]|0;
 $9 = (+($8&65535));
 $sG = $9;
 $10 = $2;
 $11 = HEAP16[$10>>1]|0;
 $12 = (+($11&65535));
 $sB = $12;
 $13 = $sR;
 $14 = $13 * 0.29899999499320984;
 $15 = $sG;
 $16 = $15 * 0.58700001239776611;
 $17 = $14 + $16;
 $18 = $sB;
 $19 = $18 * 0.11400000005960464;
 $20 = $17 + $19;
 $sY = $20;
 $21 = $sB;
 $22 = $sY;
 $23 = $21 - $22;
 $24 = $23 * 0.56499999761581421;
 $sU = $24;
 $25 = $sR;
 $26 = $sY;
 $27 = $25 - $26;
 $28 = $27 * 0.71299999952316284;
 $sV = $28;
 $29 = $sY;
 $sTemp = $29;
 $30 = +HEAPF32[13344>>2];
 $31 = $sTemp;
 $32 = $30 * $31;
 $33 = +HEAPF32[9896>>2];
 $34 = $32 / $33;
 $sTemp = $34;
 $35 = $sTemp;
 $36 = $sTemp;
 $37 = 1.0 + $36;
 $38 = $35 / $37;
 $sTemp = $38;
 $39 = $sTemp;
 $40 = $sY;
 $41 = $39 / $40;
 $sTemp = $41;
 $42 = $sY;
 $43 = $sV;
 $44 = 1.4029999971389771 * $43;
 $45 = $42 + $44;
 $46 = $sTemp;
 $47 = $45 * $46;
 $48 = +HEAPF32[13352>>2];
 $49 = $47 + $48;
 $50 = $49;
 $51 = +HEAPF32[13360>>2];
 $52 = $51;
 $53 = (+Math_pow((+$50),(+$52)));
 $54 = $53 * 65535.0;
 $55 = $54;
 $56 = (+__Z9ClampFP16f($55));
 $57 = (~~(($56))&65535);
 $58 = $0;
 HEAP16[$58>>1] = $57;
 $59 = $sY;
 $60 = $sU;
 $61 = 0.34400001168251038 * $60;
 $62 = $59 - $61;
 $63 = $sV;
 $64 = 0.71399998664855957 * $63;
 $65 = $62 - $64;
 $66 = $sTemp;
 $67 = $65 * $66;
 $68 = +HEAPF32[13352>>2];
 $69 = $67 + $68;
 $70 = $69;
 $71 = +HEAPF32[13360>>2];
 $72 = $71;
 $73 = (+Math_pow((+$70),(+$72)));
 $74 = $73 * 65535.0;
 $75 = $74;
 $76 = (+__Z9ClampFP16f($75));
 $77 = (~~(($76))&65535);
 $78 = $1;
 HEAP16[$78>>1] = $77;
 $79 = $sY;
 $80 = $sU;
 $81 = 1.7699999809265137 * $80;
 $82 = $79 + $81;
 $83 = $sTemp;
 $84 = $82 * $83;
 $85 = +HEAPF32[13352>>2];
 $86 = $84 + $85;
 $87 = $86;
 $88 = +HEAPF32[13360>>2];
 $89 = $88;
 $90 = (+Math_pow((+$87),(+$89)));
 $91 = $90 * 65535.0;
 $92 = $91;
 $93 = (+__Z9ClampFP16f($92));
 $94 = (~~(($93))&65535);
 $95 = $2;
 HEAP16[$95>>1] = $94;
 STACKTOP = sp;return;
}
function __Z16ConvertTemplatedIhhEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0;
 var $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0;
 var $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 94|0;
 $uiSourceGShift = sp + 92|0;
 $uiSourceBShift = sp + 90|0;
 $uiSourceAShift = sp + 88|0;
 $uiSourceRMask = sp + 86|0;
 $uiSourceGMask = sp + 84|0;
 $uiSourceBMask = sp + 82|0;
 $uiSourceAMask = sp + 80|0;
 $uiDestRShift = sp + 78|0;
 $uiDestGShift = sp + 76|0;
 $uiDestBShift = sp + 74|0;
 $uiDestAShift = sp + 72|0;
 $uiDestRMask = sp + 70|0;
 $uiDestGMask = sp + 68|0;
 $uiDestBMask = sp + 66|0;
 $uiDestAMask = sp + 64|0;
 $DR = sp + 54|0;
 $DG = sp + 52|0;
 $DB = sp + 50|0;
 $DA = sp + 48|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86&255;
   $88 = $87&255;
   $89 = $88<<3;
   $90 = $85 << $89;
   $91 = $Source;
   $92 = $91&255;
   $93 = $92 | $90;
   $94 = $93&255;
   $Source = $94;
   $95 = $i;
   $96 = (($95) + 1)|0;
   $i = $96;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $97 = HEAP16[$uiSourceRMask>>1]|0;
  $98 = ($97<<16>>16)!=(0);
  if ($98) {
   $99 = $Source;
   $100 = $99&255;
   $101 = HEAP16[$uiSourceRShift>>1]|0;
   $102 = $101&255;
   $103 = $102&255;
   $104 = $100 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&255;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&255;
   $117 = $116&255;
   $118 = $114 >> $117;
   $119 = $118&65535;
   $120 = $119&65535;
   $121 = HEAP16[$uiSourceGMask>>1]|0;
   $122 = $121&65535;
   $123 = $120 & $122;
   $124 = $123&65535;
   $SG = $124;
  }
  $125 = HEAP16[$uiSourceBMask>>1]|0;
  $126 = ($125<<16>>16)!=(0);
  if ($126) {
   $127 = $Source;
   $128 = $127&255;
   $129 = HEAP16[$uiSourceBShift>>1]|0;
   $130 = $129&255;
   $131 = $130&255;
   $132 = $128 >> $131;
   $133 = $132&65535;
   $134 = $133&65535;
   $135 = HEAP16[$uiSourceBMask>>1]|0;
   $136 = $135&65535;
   $137 = $134 & $136;
   $138 = $137&65535;
   $SB = $138;
  }
  $139 = HEAP16[$uiSourceAMask>>1]|0;
  $140 = ($139<<16>>16)!=(0);
  if ($140) {
   $141 = $Source;
   $142 = $141&255;
   $143 = HEAP16[$uiSourceAShift>>1]|0;
   $144 = $143&255;
   $145 = $144&255;
   $146 = $142 >> $145;
   $147 = $146&65535;
   $148 = $147&65535;
   $149 = HEAP16[$uiSourceAMask>>1]|0;
   $150 = $149&65535;
   $151 = $148 & $150;
   $152 = $151&65535;
   $SA = $152;
  }
  $153 = $4;
  $154 = (($153) + 48|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0|0);
  if ($156) {
   label = 23;
  } else {
   $157 = $5;
   $158 = (($157) + 44|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($159|0)!=(0|0);
   if ($160) {
    label = 23;
   } else {
    $203 = HEAP16[$uiSourceRMask>>1]|0;
    $204 = ($203<<16>>16)!=(0);
    if ($204) {
     $205 = HEAP16[$uiDestRMask>>1]|0;
     $206 = ($205<<16>>16)!=(0);
     if ($206) {
      $207 = $5;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $4;
      $211 = (($210) + 8|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($209>>>0)<($212>>>0);
      if ($213) {
       $214 = $SR;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $217&65535;
       $219 = $5;
       $220 = (($219) + 8|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $221&65535;
       $223 = (__Z6ShrinkItET_S0_S0_S0_($214,$218,$222)|0);
       HEAP16[$DR>>1] = $223;
      } else {
       $224 = $5;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = $4;
       $228 = (($227) + 8|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($226>>>0)>($229>>>0);
       if ($230) {
        $231 = $SR;
        $232 = $4;
        $233 = (($232) + 8|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = $234&65535;
        $236 = $5;
        $237 = (($236) + 8|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = $238&65535;
        $240 = (__Z6ExpandItET_S0_S0_S0_($231,$235,$239)|0);
        HEAP16[$DR>>1] = $240;
       } else {
        $241 = $SR;
        HEAP16[$DR>>1] = $241;
       }
      }
     }
    }
    $242 = HEAP16[$uiSourceGMask>>1]|0;
    $243 = ($242<<16>>16)!=(0);
    if ($243) {
     $244 = HEAP16[$uiDestGMask>>1]|0;
     $245 = ($244<<16>>16)!=(0);
     if ($245) {
      $246 = $5;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $4;
      $250 = (($249) + 12|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = ($248>>>0)<($251>>>0);
      if ($252) {
       $253 = $SG;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = $256&65535;
       $258 = $5;
       $259 = (($258) + 12|0);
       $260 = HEAP32[$259>>2]|0;
       $261 = $260&65535;
       $262 = (__Z6ShrinkItET_S0_S0_S0_($253,$257,$261)|0);
       HEAP16[$DG>>1] = $262;
      } else {
       $263 = $5;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $4;
       $267 = (($266) + 12|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = ($265>>>0)>($268>>>0);
       if ($269) {
        $270 = $SG;
        $271 = $4;
        $272 = (($271) + 12|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = $273&65535;
        $275 = $5;
        $276 = (($275) + 12|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277&65535;
        $279 = (__Z6ExpandItET_S0_S0_S0_($270,$274,$278)|0);
        HEAP16[$DG>>1] = $279;
       } else {
        $280 = $SG;
        HEAP16[$DG>>1] = $280;
       }
      }
     }
    }
    $281 = HEAP16[$uiSourceBMask>>1]|0;
    $282 = ($281<<16>>16)!=(0);
    if ($282) {
     $283 = HEAP16[$uiDestBMask>>1]|0;
     $284 = ($283<<16>>16)!=(0);
     if ($284) {
      $285 = $5;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = $4;
      $289 = (($288) + 16|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = ($287>>>0)<($290>>>0);
      if ($291) {
       $292 = $SB;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = $295&65535;
       $297 = $5;
       $298 = (($297) + 16|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = $299&65535;
       $301 = (__Z6ShrinkItET_S0_S0_S0_($292,$296,$300)|0);
       HEAP16[$DB>>1] = $301;
      } else {
       $302 = $5;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $4;
       $306 = (($305) + 16|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = ($304>>>0)>($307>>>0);
       if ($308) {
        $309 = $SB;
        $310 = $4;
        $311 = (($310) + 16|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312&65535;
        $314 = $5;
        $315 = (($314) + 16|0);
        $316 = HEAP32[$315>>2]|0;
        $317 = $316&65535;
        $318 = (__Z6ExpandItET_S0_S0_S0_($309,$313,$317)|0);
        HEAP16[$DB>>1] = $318;
       } else {
        $319 = $SB;
        HEAP16[$DB>>1] = $319;
       }
      }
     }
    }
    $320 = HEAP16[$uiSourceAMask>>1]|0;
    $321 = ($320<<16>>16)!=(0);
    if ($321) {
     $322 = HEAP16[$uiDestAMask>>1]|0;
     $323 = ($322<<16>>16)!=(0);
     if ($323) {
      $324 = $5;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = $4;
      $328 = (($327) + 20|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = ($326>>>0)<($329>>>0);
      if ($330) {
       $331 = $SA;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = $334&65535;
       $336 = $5;
       $337 = (($336) + 20|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = $338&65535;
       $340 = (__Z6ShrinkItET_S0_S0_S0_($331,$335,$339)|0);
       HEAP16[$DA>>1] = $340;
      } else {
       $341 = $5;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = $4;
       $345 = (($344) + 20|0);
       $346 = HEAP32[$345>>2]|0;
       $347 = ($343>>>0)>($346>>>0);
       if ($347) {
        $348 = $SA;
        $349 = $4;
        $350 = (($349) + 20|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = $351&65535;
        $353 = $5;
        $354 = (($353) + 20|0);
        $355 = HEAP32[$354>>2]|0;
        $356 = $355&65535;
        $357 = (__Z6ExpandItET_S0_S0_S0_($348,$352,$356)|0);
        HEAP16[$DA>>1] = $357;
       } else {
        $358 = $SA;
        HEAP16[$DA>>1] = $358;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $161 = $4;
   $162 = (($161) + 48|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $5;
   $165 = (($164) + 44|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $SR;
   $168 = $SG;
   $169 = $SB;
   $170 = $SA;
   $171 = $4;
   $172 = (($171) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $4;
   $176 = (($175) + 12|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $4;
   $180 = (($179) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $4;
   $184 = (($183) + 20|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   $191 = $5;
   $192 = (($191) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193&65535;
   $195 = $5;
   $196 = (($195) + 16|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197&65535;
   $199 = $5;
   $200 = (($199) + 20|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($163,$166,$167,$168,$169,$170,$174,$178,$182,$186,$DR,$DG,$DB,$DA,$190,$194,$198,$202);
  }
  $359 = HEAP16[$DR>>1]|0;
  $360 = $359&65535;
  $361 = HEAP16[$uiDestRMask>>1]|0;
  $362 = $361&65535;
  $363 = $360 & $362;
  $364 = $363&255;
  $365 = $364&255;
  $366 = HEAP16[$uiDestRShift>>1]|0;
  $367 = $366&255;
  $368 = $367&255;
  $369 = $365 << $368;
  $370 = HEAP16[$DG>>1]|0;
  $371 = $370&65535;
  $372 = HEAP16[$uiDestGMask>>1]|0;
  $373 = $372&65535;
  $374 = $371 & $373;
  $375 = $374&255;
  $376 = $375&255;
  $377 = HEAP16[$uiDestGShift>>1]|0;
  $378 = $377&255;
  $379 = $378&255;
  $380 = $376 << $379;
  $381 = $369 | $380;
  $382 = HEAP16[$DB>>1]|0;
  $383 = $382&65535;
  $384 = HEAP16[$uiDestBMask>>1]|0;
  $385 = $384&65535;
  $386 = $383 & $385;
  $387 = $386&255;
  $388 = $387&255;
  $389 = HEAP16[$uiDestBShift>>1]|0;
  $390 = $389&255;
  $391 = $390&255;
  $392 = $388 << $391;
  $393 = $381 | $392;
  $394 = HEAP16[$DA>>1]|0;
  $395 = $394&65535;
  $396 = HEAP16[$uiDestAMask>>1]|0;
  $397 = $396&65535;
  $398 = $395 & $397;
  $399 = $398&255;
  $400 = $399&255;
  $401 = HEAP16[$uiDestAShift>>1]|0;
  $402 = $401&255;
  $403 = $402&255;
  $404 = $400 << $403;
  $405 = $393 | $404;
  $406 = $405&255;
  $Dest = $406;
  $i = 0;
  while(1) {
   $407 = $i;
   $408 = $5;
   $409 = (($408) + 4|0);
   $410 = HEAP32[$409>>2]|0;
   $411 = ($407>>>0)<($410>>>0);
   if (!($411)) {
    break;
   }
   $412 = $Dest;
   $413 = $412&255;
   $414 = $i;
   $415 = $414&255;
   $416 = $415&255;
   $417 = $416<<3;
   $418 = $413 >> $417;
   $419 = $418 & 255;
   $420 = $419&255;
   $421 = $i;
   $422 = $1;
   $423 = (($422) + ($421)|0);
   HEAP8[$423>>0] = $420;
   $424 = $i;
   $425 = (($424) + 1)|0;
   $i = $425;
  }
  $426 = $4;
  $427 = (($426) + 4|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = $0;
  $430 = (($429) + ($428)|0);
  $0 = $430;
  $431 = $5;
  $432 = (($431) + 4|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = $1;
  $435 = (($434) + ($433)|0);
  $1 = $435;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIhtEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0;
 var $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0;
 var $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 96|0;
 $uiSourceGShift = sp + 94|0;
 $uiSourceBShift = sp + 92|0;
 $uiSourceAShift = sp + 90|0;
 $uiSourceRMask = sp + 88|0;
 $uiSourceGMask = sp + 86|0;
 $uiSourceBMask = sp + 84|0;
 $uiSourceAMask = sp + 82|0;
 $uiDestRShift = sp + 80|0;
 $uiDestGShift = sp + 78|0;
 $uiDestBShift = sp + 76|0;
 $uiDestAShift = sp + 74|0;
 $uiDestRMask = sp + 72|0;
 $uiDestGMask = sp + 70|0;
 $uiDestBMask = sp + 68|0;
 $uiDestAMask = sp + 66|0;
 $DR = sp + 56|0;
 $DG = sp + 54|0;
 $DB = sp + 52|0;
 $DA = sp + 50|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86&255;
   $88 = $87&255;
   $89 = $88<<3;
   $90 = $85 << $89;
   $91 = $Source;
   $92 = $91&255;
   $93 = $92 | $90;
   $94 = $93&255;
   $Source = $94;
   $95 = $i;
   $96 = (($95) + 1)|0;
   $i = $96;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $97 = HEAP16[$uiSourceRMask>>1]|0;
  $98 = ($97<<16>>16)!=(0);
  if ($98) {
   $99 = $Source;
   $100 = $99&255;
   $101 = HEAP16[$uiSourceRShift>>1]|0;
   $102 = $101&255;
   $103 = $102&255;
   $104 = $100 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&255;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&255;
   $117 = $116&255;
   $118 = $114 >> $117;
   $119 = $118&65535;
   $120 = $119&65535;
   $121 = HEAP16[$uiSourceGMask>>1]|0;
   $122 = $121&65535;
   $123 = $120 & $122;
   $124 = $123&65535;
   $SG = $124;
  }
  $125 = HEAP16[$uiSourceBMask>>1]|0;
  $126 = ($125<<16>>16)!=(0);
  if ($126) {
   $127 = $Source;
   $128 = $127&255;
   $129 = HEAP16[$uiSourceBShift>>1]|0;
   $130 = $129&255;
   $131 = $130&255;
   $132 = $128 >> $131;
   $133 = $132&65535;
   $134 = $133&65535;
   $135 = HEAP16[$uiSourceBMask>>1]|0;
   $136 = $135&65535;
   $137 = $134 & $136;
   $138 = $137&65535;
   $SB = $138;
  }
  $139 = HEAP16[$uiSourceAMask>>1]|0;
  $140 = ($139<<16>>16)!=(0);
  if ($140) {
   $141 = $Source;
   $142 = $141&255;
   $143 = HEAP16[$uiSourceAShift>>1]|0;
   $144 = $143&255;
   $145 = $144&255;
   $146 = $142 >> $145;
   $147 = $146&65535;
   $148 = $147&65535;
   $149 = HEAP16[$uiSourceAMask>>1]|0;
   $150 = $149&65535;
   $151 = $148 & $150;
   $152 = $151&65535;
   $SA = $152;
  }
  $153 = $4;
  $154 = (($153) + 48|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0|0);
  if ($156) {
   label = 23;
  } else {
   $157 = $5;
   $158 = (($157) + 44|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($159|0)!=(0|0);
   if ($160) {
    label = 23;
   } else {
    $203 = HEAP16[$uiSourceRMask>>1]|0;
    $204 = ($203<<16>>16)!=(0);
    if ($204) {
     $205 = HEAP16[$uiDestRMask>>1]|0;
     $206 = ($205<<16>>16)!=(0);
     if ($206) {
      $207 = $5;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $4;
      $211 = (($210) + 8|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($209>>>0)<($212>>>0);
      if ($213) {
       $214 = $SR;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $217&65535;
       $219 = $5;
       $220 = (($219) + 8|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $221&65535;
       $223 = (__Z6ShrinkItET_S0_S0_S0_($214,$218,$222)|0);
       HEAP16[$DR>>1] = $223;
      } else {
       $224 = $5;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = $4;
       $228 = (($227) + 8|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($226>>>0)>($229>>>0);
       if ($230) {
        $231 = $SR;
        $232 = $4;
        $233 = (($232) + 8|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = $234&65535;
        $236 = $5;
        $237 = (($236) + 8|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = $238&65535;
        $240 = (__Z6ExpandItET_S0_S0_S0_($231,$235,$239)|0);
        HEAP16[$DR>>1] = $240;
       } else {
        $241 = $SR;
        HEAP16[$DR>>1] = $241;
       }
      }
     }
    }
    $242 = HEAP16[$uiSourceGMask>>1]|0;
    $243 = ($242<<16>>16)!=(0);
    if ($243) {
     $244 = HEAP16[$uiDestGMask>>1]|0;
     $245 = ($244<<16>>16)!=(0);
     if ($245) {
      $246 = $5;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $4;
      $250 = (($249) + 12|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = ($248>>>0)<($251>>>0);
      if ($252) {
       $253 = $SG;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = $256&65535;
       $258 = $5;
       $259 = (($258) + 12|0);
       $260 = HEAP32[$259>>2]|0;
       $261 = $260&65535;
       $262 = (__Z6ShrinkItET_S0_S0_S0_($253,$257,$261)|0);
       HEAP16[$DG>>1] = $262;
      } else {
       $263 = $5;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $4;
       $267 = (($266) + 12|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = ($265>>>0)>($268>>>0);
       if ($269) {
        $270 = $SG;
        $271 = $4;
        $272 = (($271) + 12|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = $273&65535;
        $275 = $5;
        $276 = (($275) + 12|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277&65535;
        $279 = (__Z6ExpandItET_S0_S0_S0_($270,$274,$278)|0);
        HEAP16[$DG>>1] = $279;
       } else {
        $280 = $SG;
        HEAP16[$DG>>1] = $280;
       }
      }
     }
    }
    $281 = HEAP16[$uiSourceBMask>>1]|0;
    $282 = ($281<<16>>16)!=(0);
    if ($282) {
     $283 = HEAP16[$uiDestBMask>>1]|0;
     $284 = ($283<<16>>16)!=(0);
     if ($284) {
      $285 = $5;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = $4;
      $289 = (($288) + 16|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = ($287>>>0)<($290>>>0);
      if ($291) {
       $292 = $SB;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = $295&65535;
       $297 = $5;
       $298 = (($297) + 16|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = $299&65535;
       $301 = (__Z6ShrinkItET_S0_S0_S0_($292,$296,$300)|0);
       HEAP16[$DB>>1] = $301;
      } else {
       $302 = $5;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $4;
       $306 = (($305) + 16|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = ($304>>>0)>($307>>>0);
       if ($308) {
        $309 = $SB;
        $310 = $4;
        $311 = (($310) + 16|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312&65535;
        $314 = $5;
        $315 = (($314) + 16|0);
        $316 = HEAP32[$315>>2]|0;
        $317 = $316&65535;
        $318 = (__Z6ExpandItET_S0_S0_S0_($309,$313,$317)|0);
        HEAP16[$DB>>1] = $318;
       } else {
        $319 = $SB;
        HEAP16[$DB>>1] = $319;
       }
      }
     }
    }
    $320 = HEAP16[$uiSourceAMask>>1]|0;
    $321 = ($320<<16>>16)!=(0);
    if ($321) {
     $322 = HEAP16[$uiDestAMask>>1]|0;
     $323 = ($322<<16>>16)!=(0);
     if ($323) {
      $324 = $5;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = $4;
      $328 = (($327) + 20|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = ($326>>>0)<($329>>>0);
      if ($330) {
       $331 = $SA;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = $334&65535;
       $336 = $5;
       $337 = (($336) + 20|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = $338&65535;
       $340 = (__Z6ShrinkItET_S0_S0_S0_($331,$335,$339)|0);
       HEAP16[$DA>>1] = $340;
      } else {
       $341 = $5;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = $4;
       $345 = (($344) + 20|0);
       $346 = HEAP32[$345>>2]|0;
       $347 = ($343>>>0)>($346>>>0);
       if ($347) {
        $348 = $SA;
        $349 = $4;
        $350 = (($349) + 20|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = $351&65535;
        $353 = $5;
        $354 = (($353) + 20|0);
        $355 = HEAP32[$354>>2]|0;
        $356 = $355&65535;
        $357 = (__Z6ExpandItET_S0_S0_S0_($348,$352,$356)|0);
        HEAP16[$DA>>1] = $357;
       } else {
        $358 = $SA;
        HEAP16[$DA>>1] = $358;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $161 = $4;
   $162 = (($161) + 48|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $5;
   $165 = (($164) + 44|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $SR;
   $168 = $SG;
   $169 = $SB;
   $170 = $SA;
   $171 = $4;
   $172 = (($171) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $4;
   $176 = (($175) + 12|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $4;
   $180 = (($179) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $4;
   $184 = (($183) + 20|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   $191 = $5;
   $192 = (($191) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193&65535;
   $195 = $5;
   $196 = (($195) + 16|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197&65535;
   $199 = $5;
   $200 = (($199) + 20|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($163,$166,$167,$168,$169,$170,$174,$178,$182,$186,$DR,$DG,$DB,$DA,$190,$194,$198,$202);
  }
  $359 = HEAP16[$DR>>1]|0;
  $360 = $359&65535;
  $361 = HEAP16[$uiDestRMask>>1]|0;
  $362 = $361&65535;
  $363 = $360 & $362;
  $364 = $363&65535;
  $365 = $364&65535;
  $366 = HEAP16[$uiDestRShift>>1]|0;
  $367 = $366&65535;
  $368 = $365 << $367;
  $369 = HEAP16[$DG>>1]|0;
  $370 = $369&65535;
  $371 = HEAP16[$uiDestGMask>>1]|0;
  $372 = $371&65535;
  $373 = $370 & $372;
  $374 = $373&65535;
  $375 = $374&65535;
  $376 = HEAP16[$uiDestGShift>>1]|0;
  $377 = $376&65535;
  $378 = $375 << $377;
  $379 = $368 | $378;
  $380 = HEAP16[$DB>>1]|0;
  $381 = $380&65535;
  $382 = HEAP16[$uiDestBMask>>1]|0;
  $383 = $382&65535;
  $384 = $381 & $383;
  $385 = $384&65535;
  $386 = $385&65535;
  $387 = HEAP16[$uiDestBShift>>1]|0;
  $388 = $387&65535;
  $389 = $386 << $388;
  $390 = $379 | $389;
  $391 = HEAP16[$DA>>1]|0;
  $392 = $391&65535;
  $393 = HEAP16[$uiDestAMask>>1]|0;
  $394 = $393&65535;
  $395 = $392 & $394;
  $396 = $395&65535;
  $397 = $396&65535;
  $398 = HEAP16[$uiDestAShift>>1]|0;
  $399 = $398&65535;
  $400 = $397 << $399;
  $401 = $390 | $400;
  $402 = $401&65535;
  $Dest = $402;
  $i = 0;
  while(1) {
   $403 = $i;
   $404 = $5;
   $405 = (($404) + 4|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = ($403>>>0)<($406>>>0);
   if (!($407)) {
    break;
   }
   $408 = $Dest;
   $409 = $408&65535;
   $410 = $i;
   $411 = $410&255;
   $412 = $411&255;
   $413 = $412<<3;
   $414 = $409 >> $413;
   $415 = $414 & 255;
   $416 = $415&255;
   $417 = $i;
   $418 = $1;
   $419 = (($418) + ($417)|0);
   HEAP8[$419>>0] = $416;
   $420 = $i;
   $421 = (($420) + 1)|0;
   $i = $421;
  }
  $422 = $4;
  $423 = (($422) + 4|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = $0;
  $426 = (($425) + ($424)|0);
  $0 = $426;
  $427 = $5;
  $428 = (($427) + 4|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = $1;
  $431 = (($430) + ($429)|0);
  $1 = $431;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIhjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0;
 var $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 98|0;
 $uiSourceGShift = sp + 96|0;
 $uiSourceBShift = sp + 94|0;
 $uiSourceAShift = sp + 92|0;
 $uiSourceRMask = sp + 90|0;
 $uiSourceGMask = sp + 88|0;
 $uiSourceBMask = sp + 86|0;
 $uiSourceAMask = sp + 84|0;
 $uiDestRShift = sp + 82|0;
 $uiDestGShift = sp + 80|0;
 $uiDestBShift = sp + 78|0;
 $uiDestAShift = sp + 76|0;
 $uiDestRMask = sp + 74|0;
 $uiDestGMask = sp + 72|0;
 $uiDestBMask = sp + 70|0;
 $uiDestAMask = sp + 68|0;
 $DR = sp + 58|0;
 $DG = sp + 56|0;
 $DB = sp + 54|0;
 $DA = sp + 52|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86&255;
   $88 = $87&255;
   $89 = $88<<3;
   $90 = $85 << $89;
   $91 = $Source;
   $92 = $91&255;
   $93 = $92 | $90;
   $94 = $93&255;
   $Source = $94;
   $95 = $i;
   $96 = (($95) + 1)|0;
   $i = $96;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $97 = HEAP16[$uiSourceRMask>>1]|0;
  $98 = ($97<<16>>16)!=(0);
  if ($98) {
   $99 = $Source;
   $100 = $99&255;
   $101 = HEAP16[$uiSourceRShift>>1]|0;
   $102 = $101&255;
   $103 = $102&255;
   $104 = $100 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&255;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&255;
   $117 = $116&255;
   $118 = $114 >> $117;
   $119 = $118&65535;
   $120 = $119&65535;
   $121 = HEAP16[$uiSourceGMask>>1]|0;
   $122 = $121&65535;
   $123 = $120 & $122;
   $124 = $123&65535;
   $SG = $124;
  }
  $125 = HEAP16[$uiSourceBMask>>1]|0;
  $126 = ($125<<16>>16)!=(0);
  if ($126) {
   $127 = $Source;
   $128 = $127&255;
   $129 = HEAP16[$uiSourceBShift>>1]|0;
   $130 = $129&255;
   $131 = $130&255;
   $132 = $128 >> $131;
   $133 = $132&65535;
   $134 = $133&65535;
   $135 = HEAP16[$uiSourceBMask>>1]|0;
   $136 = $135&65535;
   $137 = $134 & $136;
   $138 = $137&65535;
   $SB = $138;
  }
  $139 = HEAP16[$uiSourceAMask>>1]|0;
  $140 = ($139<<16>>16)!=(0);
  if ($140) {
   $141 = $Source;
   $142 = $141&255;
   $143 = HEAP16[$uiSourceAShift>>1]|0;
   $144 = $143&255;
   $145 = $144&255;
   $146 = $142 >> $145;
   $147 = $146&65535;
   $148 = $147&65535;
   $149 = HEAP16[$uiSourceAMask>>1]|0;
   $150 = $149&65535;
   $151 = $148 & $150;
   $152 = $151&65535;
   $SA = $152;
  }
  $153 = $4;
  $154 = (($153) + 48|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0|0);
  if ($156) {
   label = 23;
  } else {
   $157 = $5;
   $158 = (($157) + 44|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($159|0)!=(0|0);
   if ($160) {
    label = 23;
   } else {
    $203 = HEAP16[$uiSourceRMask>>1]|0;
    $204 = ($203<<16>>16)!=(0);
    if ($204) {
     $205 = HEAP16[$uiDestRMask>>1]|0;
     $206 = ($205<<16>>16)!=(0);
     if ($206) {
      $207 = $5;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $4;
      $211 = (($210) + 8|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($209>>>0)<($212>>>0);
      if ($213) {
       $214 = $SR;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $217&65535;
       $219 = $5;
       $220 = (($219) + 8|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $221&65535;
       $223 = (__Z6ShrinkItET_S0_S0_S0_($214,$218,$222)|0);
       HEAP16[$DR>>1] = $223;
      } else {
       $224 = $5;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = $4;
       $228 = (($227) + 8|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($226>>>0)>($229>>>0);
       if ($230) {
        $231 = $SR;
        $232 = $4;
        $233 = (($232) + 8|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = $234&65535;
        $236 = $5;
        $237 = (($236) + 8|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = $238&65535;
        $240 = (__Z6ExpandItET_S0_S0_S0_($231,$235,$239)|0);
        HEAP16[$DR>>1] = $240;
       } else {
        $241 = $SR;
        HEAP16[$DR>>1] = $241;
       }
      }
     }
    }
    $242 = HEAP16[$uiSourceGMask>>1]|0;
    $243 = ($242<<16>>16)!=(0);
    if ($243) {
     $244 = HEAP16[$uiDestGMask>>1]|0;
     $245 = ($244<<16>>16)!=(0);
     if ($245) {
      $246 = $5;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $4;
      $250 = (($249) + 12|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = ($248>>>0)<($251>>>0);
      if ($252) {
       $253 = $SG;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = $256&65535;
       $258 = $5;
       $259 = (($258) + 12|0);
       $260 = HEAP32[$259>>2]|0;
       $261 = $260&65535;
       $262 = (__Z6ShrinkItET_S0_S0_S0_($253,$257,$261)|0);
       HEAP16[$DG>>1] = $262;
      } else {
       $263 = $5;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $4;
       $267 = (($266) + 12|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = ($265>>>0)>($268>>>0);
       if ($269) {
        $270 = $SG;
        $271 = $4;
        $272 = (($271) + 12|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = $273&65535;
        $275 = $5;
        $276 = (($275) + 12|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277&65535;
        $279 = (__Z6ExpandItET_S0_S0_S0_($270,$274,$278)|0);
        HEAP16[$DG>>1] = $279;
       } else {
        $280 = $SG;
        HEAP16[$DG>>1] = $280;
       }
      }
     }
    }
    $281 = HEAP16[$uiSourceBMask>>1]|0;
    $282 = ($281<<16>>16)!=(0);
    if ($282) {
     $283 = HEAP16[$uiDestBMask>>1]|0;
     $284 = ($283<<16>>16)!=(0);
     if ($284) {
      $285 = $5;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = $4;
      $289 = (($288) + 16|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = ($287>>>0)<($290>>>0);
      if ($291) {
       $292 = $SB;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = $295&65535;
       $297 = $5;
       $298 = (($297) + 16|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = $299&65535;
       $301 = (__Z6ShrinkItET_S0_S0_S0_($292,$296,$300)|0);
       HEAP16[$DB>>1] = $301;
      } else {
       $302 = $5;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $4;
       $306 = (($305) + 16|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = ($304>>>0)>($307>>>0);
       if ($308) {
        $309 = $SB;
        $310 = $4;
        $311 = (($310) + 16|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312&65535;
        $314 = $5;
        $315 = (($314) + 16|0);
        $316 = HEAP32[$315>>2]|0;
        $317 = $316&65535;
        $318 = (__Z6ExpandItET_S0_S0_S0_($309,$313,$317)|0);
        HEAP16[$DB>>1] = $318;
       } else {
        $319 = $SB;
        HEAP16[$DB>>1] = $319;
       }
      }
     }
    }
    $320 = HEAP16[$uiSourceAMask>>1]|0;
    $321 = ($320<<16>>16)!=(0);
    if ($321) {
     $322 = HEAP16[$uiDestAMask>>1]|0;
     $323 = ($322<<16>>16)!=(0);
     if ($323) {
      $324 = $5;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = $4;
      $328 = (($327) + 20|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = ($326>>>0)<($329>>>0);
      if ($330) {
       $331 = $SA;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = $334&65535;
       $336 = $5;
       $337 = (($336) + 20|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = $338&65535;
       $340 = (__Z6ShrinkItET_S0_S0_S0_($331,$335,$339)|0);
       HEAP16[$DA>>1] = $340;
      } else {
       $341 = $5;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = $4;
       $345 = (($344) + 20|0);
       $346 = HEAP32[$345>>2]|0;
       $347 = ($343>>>0)>($346>>>0);
       if ($347) {
        $348 = $SA;
        $349 = $4;
        $350 = (($349) + 20|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = $351&65535;
        $353 = $5;
        $354 = (($353) + 20|0);
        $355 = HEAP32[$354>>2]|0;
        $356 = $355&65535;
        $357 = (__Z6ExpandItET_S0_S0_S0_($348,$352,$356)|0);
        HEAP16[$DA>>1] = $357;
       } else {
        $358 = $SA;
        HEAP16[$DA>>1] = $358;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $161 = $4;
   $162 = (($161) + 48|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $5;
   $165 = (($164) + 44|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $SR;
   $168 = $SG;
   $169 = $SB;
   $170 = $SA;
   $171 = $4;
   $172 = (($171) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $4;
   $176 = (($175) + 12|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $4;
   $180 = (($179) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $4;
   $184 = (($183) + 20|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   $191 = $5;
   $192 = (($191) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193&65535;
   $195 = $5;
   $196 = (($195) + 16|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197&65535;
   $199 = $5;
   $200 = (($199) + 20|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($163,$166,$167,$168,$169,$170,$174,$178,$182,$186,$DR,$DG,$DB,$DA,$190,$194,$198,$202);
  }
  $359 = HEAP16[$DR>>1]|0;
  $360 = $359&65535;
  $361 = HEAP16[$uiDestRMask>>1]|0;
  $362 = $361&65535;
  $363 = $360 & $362;
  $364 = HEAP16[$uiDestRShift>>1]|0;
  $365 = $364&65535;
  $366 = $363 << $365;
  $367 = HEAP16[$DG>>1]|0;
  $368 = $367&65535;
  $369 = HEAP16[$uiDestGMask>>1]|0;
  $370 = $369&65535;
  $371 = $368 & $370;
  $372 = HEAP16[$uiDestGShift>>1]|0;
  $373 = $372&65535;
  $374 = $371 << $373;
  $375 = $366 | $374;
  $376 = HEAP16[$DB>>1]|0;
  $377 = $376&65535;
  $378 = HEAP16[$uiDestBMask>>1]|0;
  $379 = $378&65535;
  $380 = $377 & $379;
  $381 = HEAP16[$uiDestBShift>>1]|0;
  $382 = $381&65535;
  $383 = $380 << $382;
  $384 = $375 | $383;
  $385 = HEAP16[$DA>>1]|0;
  $386 = $385&65535;
  $387 = HEAP16[$uiDestAMask>>1]|0;
  $388 = $387&65535;
  $389 = $386 & $388;
  $390 = HEAP16[$uiDestAShift>>1]|0;
  $391 = $390&65535;
  $392 = $389 << $391;
  $393 = $384 | $392;
  $Dest = $393;
  $i = 0;
  while(1) {
   $394 = $i;
   $395 = $5;
   $396 = (($395) + 4|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = ($394>>>0)<($397>>>0);
   if (!($398)) {
    break;
   }
   $399 = $Dest;
   $400 = $i;
   $401 = $400&255;
   $402 = $401&255;
   $403 = $402<<3;
   $404 = $399 >>> $403;
   $405 = $404 & 255;
   $406 = $405&255;
   $407 = $i;
   $408 = $1;
   $409 = (($408) + ($407)|0);
   HEAP8[$409>>0] = $406;
   $410 = $i;
   $411 = (($410) + 1)|0;
   $i = $411;
  }
  $412 = $4;
  $413 = (($412) + 4|0);
  $414 = HEAP32[$413>>2]|0;
  $415 = $0;
  $416 = (($415) + ($414)|0);
  $0 = $416;
  $417 = $5;
  $418 = (($417) + 4|0);
  $419 = HEAP32[$418>>2]|0;
  $420 = $1;
  $421 = (($420) + ($419)|0);
  $1 = $421;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIhyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0;
 var $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 102|0;
 $uiSourceGShift = sp + 100|0;
 $uiSourceBShift = sp + 98|0;
 $uiSourceAShift = sp + 96|0;
 $uiSourceRMask = sp + 94|0;
 $uiSourceGMask = sp + 92|0;
 $uiSourceBMask = sp + 90|0;
 $uiSourceAMask = sp + 88|0;
 $uiDestRShift = sp + 86|0;
 $uiDestGShift = sp + 84|0;
 $uiDestBShift = sp + 82|0;
 $uiDestAShift = sp + 80|0;
 $uiDestRMask = sp + 78|0;
 $uiDestGMask = sp + 76|0;
 $uiDestBMask = sp + 74|0;
 $uiDestAMask = sp + 72|0;
 $DR = sp + 62|0;
 $DG = sp + 60|0;
 $DB = sp + 58|0;
 $DA = sp + 56|0;
 $Dest = sp;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86&255;
   $88 = $87&255;
   $89 = $88<<3;
   $90 = $85 << $89;
   $91 = $Source;
   $92 = $91&255;
   $93 = $92 | $90;
   $94 = $93&255;
   $Source = $94;
   $95 = $i;
   $96 = (($95) + 1)|0;
   $i = $96;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $97 = HEAP16[$uiSourceRMask>>1]|0;
  $98 = ($97<<16>>16)!=(0);
  if ($98) {
   $99 = $Source;
   $100 = $99&255;
   $101 = HEAP16[$uiSourceRShift>>1]|0;
   $102 = $101&255;
   $103 = $102&255;
   $104 = $100 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&255;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&255;
   $117 = $116&255;
   $118 = $114 >> $117;
   $119 = $118&65535;
   $120 = $119&65535;
   $121 = HEAP16[$uiSourceGMask>>1]|0;
   $122 = $121&65535;
   $123 = $120 & $122;
   $124 = $123&65535;
   $SG = $124;
  }
  $125 = HEAP16[$uiSourceBMask>>1]|0;
  $126 = ($125<<16>>16)!=(0);
  if ($126) {
   $127 = $Source;
   $128 = $127&255;
   $129 = HEAP16[$uiSourceBShift>>1]|0;
   $130 = $129&255;
   $131 = $130&255;
   $132 = $128 >> $131;
   $133 = $132&65535;
   $134 = $133&65535;
   $135 = HEAP16[$uiSourceBMask>>1]|0;
   $136 = $135&65535;
   $137 = $134 & $136;
   $138 = $137&65535;
   $SB = $138;
  }
  $139 = HEAP16[$uiSourceAMask>>1]|0;
  $140 = ($139<<16>>16)!=(0);
  if ($140) {
   $141 = $Source;
   $142 = $141&255;
   $143 = HEAP16[$uiSourceAShift>>1]|0;
   $144 = $143&255;
   $145 = $144&255;
   $146 = $142 >> $145;
   $147 = $146&65535;
   $148 = $147&65535;
   $149 = HEAP16[$uiSourceAMask>>1]|0;
   $150 = $149&65535;
   $151 = $148 & $150;
   $152 = $151&65535;
   $SA = $152;
  }
  $153 = $4;
  $154 = (($153) + 48|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0|0);
  if ($156) {
   label = 23;
  } else {
   $157 = $5;
   $158 = (($157) + 44|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($159|0)!=(0|0);
   if ($160) {
    label = 23;
   } else {
    $203 = HEAP16[$uiSourceRMask>>1]|0;
    $204 = ($203<<16>>16)!=(0);
    if ($204) {
     $205 = HEAP16[$uiDestRMask>>1]|0;
     $206 = ($205<<16>>16)!=(0);
     if ($206) {
      $207 = $5;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $4;
      $211 = (($210) + 8|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($209>>>0)<($212>>>0);
      if ($213) {
       $214 = $SR;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $217&65535;
       $219 = $5;
       $220 = (($219) + 8|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $221&65535;
       $223 = (__Z6ShrinkItET_S0_S0_S0_($214,$218,$222)|0);
       HEAP16[$DR>>1] = $223;
      } else {
       $224 = $5;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = $4;
       $228 = (($227) + 8|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($226>>>0)>($229>>>0);
       if ($230) {
        $231 = $SR;
        $232 = $4;
        $233 = (($232) + 8|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = $234&65535;
        $236 = $5;
        $237 = (($236) + 8|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = $238&65535;
        $240 = (__Z6ExpandItET_S0_S0_S0_($231,$235,$239)|0);
        HEAP16[$DR>>1] = $240;
       } else {
        $241 = $SR;
        HEAP16[$DR>>1] = $241;
       }
      }
     }
    }
    $242 = HEAP16[$uiSourceGMask>>1]|0;
    $243 = ($242<<16>>16)!=(0);
    if ($243) {
     $244 = HEAP16[$uiDestGMask>>1]|0;
     $245 = ($244<<16>>16)!=(0);
     if ($245) {
      $246 = $5;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = $4;
      $250 = (($249) + 12|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = ($248>>>0)<($251>>>0);
      if ($252) {
       $253 = $SG;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = $256&65535;
       $258 = $5;
       $259 = (($258) + 12|0);
       $260 = HEAP32[$259>>2]|0;
       $261 = $260&65535;
       $262 = (__Z6ShrinkItET_S0_S0_S0_($253,$257,$261)|0);
       HEAP16[$DG>>1] = $262;
      } else {
       $263 = $5;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $4;
       $267 = (($266) + 12|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = ($265>>>0)>($268>>>0);
       if ($269) {
        $270 = $SG;
        $271 = $4;
        $272 = (($271) + 12|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = $273&65535;
        $275 = $5;
        $276 = (($275) + 12|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277&65535;
        $279 = (__Z6ExpandItET_S0_S0_S0_($270,$274,$278)|0);
        HEAP16[$DG>>1] = $279;
       } else {
        $280 = $SG;
        HEAP16[$DG>>1] = $280;
       }
      }
     }
    }
    $281 = HEAP16[$uiSourceBMask>>1]|0;
    $282 = ($281<<16>>16)!=(0);
    if ($282) {
     $283 = HEAP16[$uiDestBMask>>1]|0;
     $284 = ($283<<16>>16)!=(0);
     if ($284) {
      $285 = $5;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = $4;
      $289 = (($288) + 16|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = ($287>>>0)<($290>>>0);
      if ($291) {
       $292 = $SB;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = $295&65535;
       $297 = $5;
       $298 = (($297) + 16|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = $299&65535;
       $301 = (__Z6ShrinkItET_S0_S0_S0_($292,$296,$300)|0);
       HEAP16[$DB>>1] = $301;
      } else {
       $302 = $5;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $4;
       $306 = (($305) + 16|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = ($304>>>0)>($307>>>0);
       if ($308) {
        $309 = $SB;
        $310 = $4;
        $311 = (($310) + 16|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312&65535;
        $314 = $5;
        $315 = (($314) + 16|0);
        $316 = HEAP32[$315>>2]|0;
        $317 = $316&65535;
        $318 = (__Z6ExpandItET_S0_S0_S0_($309,$313,$317)|0);
        HEAP16[$DB>>1] = $318;
       } else {
        $319 = $SB;
        HEAP16[$DB>>1] = $319;
       }
      }
     }
    }
    $320 = HEAP16[$uiSourceAMask>>1]|0;
    $321 = ($320<<16>>16)!=(0);
    if ($321) {
     $322 = HEAP16[$uiDestAMask>>1]|0;
     $323 = ($322<<16>>16)!=(0);
     if ($323) {
      $324 = $5;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = $4;
      $328 = (($327) + 20|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = ($326>>>0)<($329>>>0);
      if ($330) {
       $331 = $SA;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = $334&65535;
       $336 = $5;
       $337 = (($336) + 20|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = $338&65535;
       $340 = (__Z6ShrinkItET_S0_S0_S0_($331,$335,$339)|0);
       HEAP16[$DA>>1] = $340;
      } else {
       $341 = $5;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = $4;
       $345 = (($344) + 20|0);
       $346 = HEAP32[$345>>2]|0;
       $347 = ($343>>>0)>($346>>>0);
       if ($347) {
        $348 = $SA;
        $349 = $4;
        $350 = (($349) + 20|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = $351&65535;
        $353 = $5;
        $354 = (($353) + 20|0);
        $355 = HEAP32[$354>>2]|0;
        $356 = $355&65535;
        $357 = (__Z6ExpandItET_S0_S0_S0_($348,$352,$356)|0);
        HEAP16[$DA>>1] = $357;
       } else {
        $358 = $SA;
        HEAP16[$DA>>1] = $358;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $161 = $4;
   $162 = (($161) + 48|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $5;
   $165 = (($164) + 44|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $SR;
   $168 = $SG;
   $169 = $SB;
   $170 = $SA;
   $171 = $4;
   $172 = (($171) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $4;
   $176 = (($175) + 12|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $4;
   $180 = (($179) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $4;
   $184 = (($183) + 20|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   $191 = $5;
   $192 = (($191) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193&65535;
   $195 = $5;
   $196 = (($195) + 16|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197&65535;
   $199 = $5;
   $200 = (($199) + 20|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($163,$166,$167,$168,$169,$170,$174,$178,$182,$186,$DR,$DG,$DB,$DA,$190,$194,$198,$202);
  }
  $359 = HEAP16[$DR>>1]|0;
  $360 = $359&65535;
  $361 = HEAP16[$uiDestRMask>>1]|0;
  $362 = $361&65535;
  $363 = $360 & $362;
  $364 = ($363|0)<(0);
  $365 = $364 << 31 >> 31;
  $366 = HEAP16[$uiDestRShift>>1]|0;
  $367 = $366&65535;
  $368 = (_bitshift64Shl(($363|0),($365|0),($367|0))|0);
  $369 = tempRet0;
  $370 = HEAP16[$DG>>1]|0;
  $371 = $370&65535;
  $372 = HEAP16[$uiDestGMask>>1]|0;
  $373 = $372&65535;
  $374 = $371 & $373;
  $375 = ($374|0)<(0);
  $376 = $375 << 31 >> 31;
  $377 = HEAP16[$uiDestGShift>>1]|0;
  $378 = $377&65535;
  $379 = (_bitshift64Shl(($374|0),($376|0),($378|0))|0);
  $380 = tempRet0;
  $381 = $368 | $379;
  $382 = $369 | $380;
  $383 = HEAP16[$DB>>1]|0;
  $384 = $383&65535;
  $385 = HEAP16[$uiDestBMask>>1]|0;
  $386 = $385&65535;
  $387 = $384 & $386;
  $388 = ($387|0)<(0);
  $389 = $388 << 31 >> 31;
  $390 = HEAP16[$uiDestBShift>>1]|0;
  $391 = $390&65535;
  $392 = (_bitshift64Shl(($387|0),($389|0),($391|0))|0);
  $393 = tempRet0;
  $394 = $381 | $392;
  $395 = $382 | $393;
  $396 = HEAP16[$DA>>1]|0;
  $397 = $396&65535;
  $398 = HEAP16[$uiDestAMask>>1]|0;
  $399 = $398&65535;
  $400 = $397 & $399;
  $401 = ($400|0)<(0);
  $402 = $401 << 31 >> 31;
  $403 = HEAP16[$uiDestAShift>>1]|0;
  $404 = $403&65535;
  $405 = (_bitshift64Shl(($400|0),($402|0),($404|0))|0);
  $406 = tempRet0;
  $407 = $394 | $405;
  $408 = $395 | $406;
  $409 = $Dest;
  $410 = $409;
  HEAP32[$410>>2] = $407;
  $411 = (($409) + 4)|0;
  $412 = $411;
  HEAP32[$412>>2] = $408;
  $i = 0;
  while(1) {
   $413 = $i;
   $414 = $5;
   $415 = (($414) + 4|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = ($413>>>0)<($416>>>0);
   if (!($417)) {
    break;
   }
   $418 = $Dest;
   $419 = $418;
   $420 = HEAP32[$419>>2]|0;
   $421 = (($418) + 4)|0;
   $422 = $421;
   $423 = HEAP32[$422>>2]|0;
   $424 = $i;
   $425 = $424&255;
   $426 = $425&255;
   $427 = $426<<3;
   $428 = (_bitshift64Lshr(($420|0),($423|0),($427|0))|0);
   $429 = tempRet0;
   $430 = $428 & 255;
   $431 = $430&255;
   $432 = $i;
   $433 = $1;
   $434 = (($433) + ($432)|0);
   HEAP8[$434>>0] = $431;
   $435 = $i;
   $436 = (($435) + 1)|0;
   $i = $436;
  }
  $437 = $4;
  $438 = (($437) + 4|0);
  $439 = HEAP32[$438>>2]|0;
  $440 = $0;
  $441 = (($440) + ($439)|0);
  $0 = $441;
  $442 = $5;
  $443 = (($442) + 4|0);
  $444 = HEAP32[$443>>2]|0;
  $445 = $1;
  $446 = (($445) + ($444)|0);
  $1 = $446;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIthEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0;
 var $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0;
 var $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 96|0;
 $uiSourceGShift = sp + 94|0;
 $uiSourceBShift = sp + 92|0;
 $uiSourceAShift = sp + 90|0;
 $uiSourceRMask = sp + 88|0;
 $uiSourceGMask = sp + 86|0;
 $uiSourceBMask = sp + 84|0;
 $uiSourceAMask = sp + 82|0;
 $uiDestRShift = sp + 80|0;
 $uiDestGShift = sp + 78|0;
 $uiDestBShift = sp + 76|0;
 $uiDestAShift = sp + 74|0;
 $uiDestRMask = sp + 72|0;
 $uiDestGMask = sp + 70|0;
 $uiDestBMask = sp + 68|0;
 $uiDestAMask = sp + 66|0;
 $DR = sp + 54|0;
 $DG = sp + 52|0;
 $DB = sp + 50|0;
 $DA = sp + 48|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $85&65535;
   $87 = $i;
   $88 = $87&65535;
   $89 = $88&65535;
   $90 = $89<<3;
   $91 = $86 << $90;
   $92 = $Source;
   $93 = $92&65535;
   $94 = $93 | $91;
   $95 = $94&65535;
   $Source = $95;
   $96 = $i;
   $97 = (($96) + 1)|0;
   $i = $97;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $98 = HEAP16[$uiSourceRMask>>1]|0;
  $99 = ($98<<16>>16)!=(0);
  if ($99) {
   $100 = $Source;
   $101 = $100&65535;
   $102 = HEAP16[$uiSourceRShift>>1]|0;
   $103 = $102&65535;
   $104 = $101 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&65535;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&65535;
   $117 = $114 >> $116;
   $118 = $117&65535;
   $119 = $118&65535;
   $120 = HEAP16[$uiSourceGMask>>1]|0;
   $121 = $120&65535;
   $122 = $119 & $121;
   $123 = $122&65535;
   $SG = $123;
  }
  $124 = HEAP16[$uiSourceBMask>>1]|0;
  $125 = ($124<<16>>16)!=(0);
  if ($125) {
   $126 = $Source;
   $127 = $126&65535;
   $128 = HEAP16[$uiSourceBShift>>1]|0;
   $129 = $128&65535;
   $130 = $127 >> $129;
   $131 = $130&65535;
   $132 = $131&65535;
   $133 = HEAP16[$uiSourceBMask>>1]|0;
   $134 = $133&65535;
   $135 = $132 & $134;
   $136 = $135&65535;
   $SB = $136;
  }
  $137 = HEAP16[$uiSourceAMask>>1]|0;
  $138 = ($137<<16>>16)!=(0);
  if ($138) {
   $139 = $Source;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceAShift>>1]|0;
   $142 = $141&65535;
   $143 = $140 >> $142;
   $144 = $143&65535;
   $145 = $144&65535;
   $146 = HEAP16[$uiSourceAMask>>1]|0;
   $147 = $146&65535;
   $148 = $145 & $147;
   $149 = $148&65535;
   $SA = $149;
  }
  $150 = $4;
  $151 = (($150) + 48|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0|0);
  if ($153) {
   label = 23;
  } else {
   $154 = $5;
   $155 = (($154) + 44|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ($156|0)!=(0|0);
   if ($157) {
    label = 23;
   } else {
    $200 = HEAP16[$uiSourceRMask>>1]|0;
    $201 = ($200<<16>>16)!=(0);
    if ($201) {
     $202 = HEAP16[$uiDestRMask>>1]|0;
     $203 = ($202<<16>>16)!=(0);
     if ($203) {
      $204 = $5;
      $205 = (($204) + 8|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $4;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($206>>>0)<($209>>>0);
      if ($210) {
       $211 = $SR;
       $212 = $4;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $214&65535;
       $216 = $5;
       $217 = (($216) + 8|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = $218&65535;
       $220 = (__Z6ShrinkItET_S0_S0_S0_($211,$215,$219)|0);
       HEAP16[$DR>>1] = $220;
      } else {
       $221 = $5;
       $222 = (($221) + 8|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $4;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($223>>>0)>($226>>>0);
       if ($227) {
        $228 = $SR;
        $229 = $4;
        $230 = (($229) + 8|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = $231&65535;
        $233 = $5;
        $234 = (($233) + 8|0);
        $235 = HEAP32[$234>>2]|0;
        $236 = $235&65535;
        $237 = (__Z6ExpandItET_S0_S0_S0_($228,$232,$236)|0);
        HEAP16[$DR>>1] = $237;
       } else {
        $238 = $SR;
        HEAP16[$DR>>1] = $238;
       }
      }
     }
    }
    $239 = HEAP16[$uiSourceGMask>>1]|0;
    $240 = ($239<<16>>16)!=(0);
    if ($240) {
     $241 = HEAP16[$uiDestGMask>>1]|0;
     $242 = ($241<<16>>16)!=(0);
     if ($242) {
      $243 = $5;
      $244 = (($243) + 12|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = $4;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ($245>>>0)<($248>>>0);
      if ($249) {
       $250 = $SG;
       $251 = $4;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $253&65535;
       $255 = $5;
       $256 = (($255) + 12|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = $257&65535;
       $259 = (__Z6ShrinkItET_S0_S0_S0_($250,$254,$258)|0);
       HEAP16[$DG>>1] = $259;
      } else {
       $260 = $5;
       $261 = (($260) + 12|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $4;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($262>>>0)>($265>>>0);
       if ($266) {
        $267 = $SG;
        $268 = $4;
        $269 = (($268) + 12|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = $270&65535;
        $272 = $5;
        $273 = (($272) + 12|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = $274&65535;
        $276 = (__Z6ExpandItET_S0_S0_S0_($267,$271,$275)|0);
        HEAP16[$DG>>1] = $276;
       } else {
        $277 = $SG;
        HEAP16[$DG>>1] = $277;
       }
      }
     }
    }
    $278 = HEAP16[$uiSourceBMask>>1]|0;
    $279 = ($278<<16>>16)!=(0);
    if ($279) {
     $280 = HEAP16[$uiDestBMask>>1]|0;
     $281 = ($280<<16>>16)!=(0);
     if ($281) {
      $282 = $5;
      $283 = (($282) + 16|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $4;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = ($284>>>0)<($287>>>0);
      if ($288) {
       $289 = $SB;
       $290 = $4;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $292&65535;
       $294 = $5;
       $295 = (($294) + 16|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = $296&65535;
       $298 = (__Z6ShrinkItET_S0_S0_S0_($289,$293,$297)|0);
       HEAP16[$DB>>1] = $298;
      } else {
       $299 = $5;
       $300 = (($299) + 16|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = $4;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = ($301>>>0)>($304>>>0);
       if ($305) {
        $306 = $SB;
        $307 = $4;
        $308 = (($307) + 16|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = $309&65535;
        $311 = $5;
        $312 = (($311) + 16|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = $313&65535;
        $315 = (__Z6ExpandItET_S0_S0_S0_($306,$310,$314)|0);
        HEAP16[$DB>>1] = $315;
       } else {
        $316 = $SB;
        HEAP16[$DB>>1] = $316;
       }
      }
     }
    }
    $317 = HEAP16[$uiSourceAMask>>1]|0;
    $318 = ($317<<16>>16)!=(0);
    if ($318) {
     $319 = HEAP16[$uiDestAMask>>1]|0;
     $320 = ($319<<16>>16)!=(0);
     if ($320) {
      $321 = $5;
      $322 = (($321) + 20|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = $4;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = ($323>>>0)<($326>>>0);
      if ($327) {
       $328 = $SA;
       $329 = $4;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331&65535;
       $333 = $5;
       $334 = (($333) + 20|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335&65535;
       $337 = (__Z6ShrinkItET_S0_S0_S0_($328,$332,$336)|0);
       HEAP16[$DA>>1] = $337;
      } else {
       $338 = $5;
       $339 = (($338) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = $4;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($340>>>0)>($343>>>0);
       if ($344) {
        $345 = $SA;
        $346 = $4;
        $347 = (($346) + 20|0);
        $348 = HEAP32[$347>>2]|0;
        $349 = $348&65535;
        $350 = $5;
        $351 = (($350) + 20|0);
        $352 = HEAP32[$351>>2]|0;
        $353 = $352&65535;
        $354 = (__Z6ExpandItET_S0_S0_S0_($345,$349,$353)|0);
        HEAP16[$DA>>1] = $354;
       } else {
        $355 = $SA;
        HEAP16[$DA>>1] = $355;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $158 = $4;
   $159 = (($158) + 48|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $5;
   $162 = (($161) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $SR;
   $165 = $SG;
   $166 = $SB;
   $167 = $SA;
   $168 = $4;
   $169 = (($168) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $170&65535;
   $172 = $4;
   $173 = (($172) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174&65535;
   $176 = $4;
   $177 = (($176) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178&65535;
   $180 = $4;
   $181 = (($180) + 20|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $182&65535;
   $184 = $5;
   $185 = (($184) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186&65535;
   $188 = $5;
   $189 = (($188) + 12|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $190&65535;
   $192 = $5;
   $193 = (($192) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $194&65535;
   $196 = $5;
   $197 = (($196) + 20|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($160,$163,$164,$165,$166,$167,$171,$175,$179,$183,$DR,$DG,$DB,$DA,$187,$191,$195,$199);
  }
  $356 = HEAP16[$DR>>1]|0;
  $357 = $356&65535;
  $358 = HEAP16[$uiDestRMask>>1]|0;
  $359 = $358&65535;
  $360 = $357 & $359;
  $361 = $360&255;
  $362 = $361&255;
  $363 = HEAP16[$uiDestRShift>>1]|0;
  $364 = $363&255;
  $365 = $364&255;
  $366 = $362 << $365;
  $367 = HEAP16[$DG>>1]|0;
  $368 = $367&65535;
  $369 = HEAP16[$uiDestGMask>>1]|0;
  $370 = $369&65535;
  $371 = $368 & $370;
  $372 = $371&255;
  $373 = $372&255;
  $374 = HEAP16[$uiDestGShift>>1]|0;
  $375 = $374&255;
  $376 = $375&255;
  $377 = $373 << $376;
  $378 = $366 | $377;
  $379 = HEAP16[$DB>>1]|0;
  $380 = $379&65535;
  $381 = HEAP16[$uiDestBMask>>1]|0;
  $382 = $381&65535;
  $383 = $380 & $382;
  $384 = $383&255;
  $385 = $384&255;
  $386 = HEAP16[$uiDestBShift>>1]|0;
  $387 = $386&255;
  $388 = $387&255;
  $389 = $385 << $388;
  $390 = $378 | $389;
  $391 = HEAP16[$DA>>1]|0;
  $392 = $391&65535;
  $393 = HEAP16[$uiDestAMask>>1]|0;
  $394 = $393&65535;
  $395 = $392 & $394;
  $396 = $395&255;
  $397 = $396&255;
  $398 = HEAP16[$uiDestAShift>>1]|0;
  $399 = $398&255;
  $400 = $399&255;
  $401 = $397 << $400;
  $402 = $390 | $401;
  $403 = $402&255;
  $Dest = $403;
  $i = 0;
  while(1) {
   $404 = $i;
   $405 = $5;
   $406 = (($405) + 4|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = ($404>>>0)<($407>>>0);
   if (!($408)) {
    break;
   }
   $409 = $Dest;
   $410 = $409&255;
   $411 = $i;
   $412 = $411&65535;
   $413 = $412&65535;
   $414 = $413<<3;
   $415 = $410 >> $414;
   $416 = $415 & 255;
   $417 = $416&255;
   $418 = $i;
   $419 = $1;
   $420 = (($419) + ($418)|0);
   HEAP8[$420>>0] = $417;
   $421 = $i;
   $422 = (($421) + 1)|0;
   $i = $422;
  }
  $423 = $4;
  $424 = (($423) + 4|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = $0;
  $427 = (($426) + ($425)|0);
  $0 = $427;
  $428 = $5;
  $429 = (($428) + 4|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = $1;
  $432 = (($431) + ($430)|0);
  $1 = $432;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIttEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0;
 var $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0;
 var $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 98|0;
 $uiSourceGShift = sp + 96|0;
 $uiSourceBShift = sp + 94|0;
 $uiSourceAShift = sp + 92|0;
 $uiSourceRMask = sp + 90|0;
 $uiSourceGMask = sp + 88|0;
 $uiSourceBMask = sp + 86|0;
 $uiSourceAMask = sp + 84|0;
 $uiDestRShift = sp + 82|0;
 $uiDestGShift = sp + 80|0;
 $uiDestBShift = sp + 78|0;
 $uiDestAShift = sp + 76|0;
 $uiDestRMask = sp + 74|0;
 $uiDestGMask = sp + 72|0;
 $uiDestBMask = sp + 70|0;
 $uiDestAMask = sp + 68|0;
 $DR = sp + 56|0;
 $DG = sp + 54|0;
 $DB = sp + 52|0;
 $DA = sp + 50|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $85&65535;
   $87 = $i;
   $88 = $87&65535;
   $89 = $88&65535;
   $90 = $89<<3;
   $91 = $86 << $90;
   $92 = $Source;
   $93 = $92&65535;
   $94 = $93 | $91;
   $95 = $94&65535;
   $Source = $95;
   $96 = $i;
   $97 = (($96) + 1)|0;
   $i = $97;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $98 = HEAP16[$uiSourceRMask>>1]|0;
  $99 = ($98<<16>>16)!=(0);
  if ($99) {
   $100 = $Source;
   $101 = $100&65535;
   $102 = HEAP16[$uiSourceRShift>>1]|0;
   $103 = $102&65535;
   $104 = $101 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&65535;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&65535;
   $117 = $114 >> $116;
   $118 = $117&65535;
   $119 = $118&65535;
   $120 = HEAP16[$uiSourceGMask>>1]|0;
   $121 = $120&65535;
   $122 = $119 & $121;
   $123 = $122&65535;
   $SG = $123;
  }
  $124 = HEAP16[$uiSourceBMask>>1]|0;
  $125 = ($124<<16>>16)!=(0);
  if ($125) {
   $126 = $Source;
   $127 = $126&65535;
   $128 = HEAP16[$uiSourceBShift>>1]|0;
   $129 = $128&65535;
   $130 = $127 >> $129;
   $131 = $130&65535;
   $132 = $131&65535;
   $133 = HEAP16[$uiSourceBMask>>1]|0;
   $134 = $133&65535;
   $135 = $132 & $134;
   $136 = $135&65535;
   $SB = $136;
  }
  $137 = HEAP16[$uiSourceAMask>>1]|0;
  $138 = ($137<<16>>16)!=(0);
  if ($138) {
   $139 = $Source;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceAShift>>1]|0;
   $142 = $141&65535;
   $143 = $140 >> $142;
   $144 = $143&65535;
   $145 = $144&65535;
   $146 = HEAP16[$uiSourceAMask>>1]|0;
   $147 = $146&65535;
   $148 = $145 & $147;
   $149 = $148&65535;
   $SA = $149;
  }
  $150 = $4;
  $151 = (($150) + 48|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0|0);
  if ($153) {
   label = 23;
  } else {
   $154 = $5;
   $155 = (($154) + 44|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ($156|0)!=(0|0);
   if ($157) {
    label = 23;
   } else {
    $200 = HEAP16[$uiSourceRMask>>1]|0;
    $201 = ($200<<16>>16)!=(0);
    if ($201) {
     $202 = HEAP16[$uiDestRMask>>1]|0;
     $203 = ($202<<16>>16)!=(0);
     if ($203) {
      $204 = $5;
      $205 = (($204) + 8|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $4;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($206>>>0)<($209>>>0);
      if ($210) {
       $211 = $SR;
       $212 = $4;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $214&65535;
       $216 = $5;
       $217 = (($216) + 8|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = $218&65535;
       $220 = (__Z6ShrinkItET_S0_S0_S0_($211,$215,$219)|0);
       HEAP16[$DR>>1] = $220;
      } else {
       $221 = $5;
       $222 = (($221) + 8|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $4;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($223>>>0)>($226>>>0);
       if ($227) {
        $228 = $SR;
        $229 = $4;
        $230 = (($229) + 8|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = $231&65535;
        $233 = $5;
        $234 = (($233) + 8|0);
        $235 = HEAP32[$234>>2]|0;
        $236 = $235&65535;
        $237 = (__Z6ExpandItET_S0_S0_S0_($228,$232,$236)|0);
        HEAP16[$DR>>1] = $237;
       } else {
        $238 = $SR;
        HEAP16[$DR>>1] = $238;
       }
      }
     }
    }
    $239 = HEAP16[$uiSourceGMask>>1]|0;
    $240 = ($239<<16>>16)!=(0);
    if ($240) {
     $241 = HEAP16[$uiDestGMask>>1]|0;
     $242 = ($241<<16>>16)!=(0);
     if ($242) {
      $243 = $5;
      $244 = (($243) + 12|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = $4;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ($245>>>0)<($248>>>0);
      if ($249) {
       $250 = $SG;
       $251 = $4;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $253&65535;
       $255 = $5;
       $256 = (($255) + 12|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = $257&65535;
       $259 = (__Z6ShrinkItET_S0_S0_S0_($250,$254,$258)|0);
       HEAP16[$DG>>1] = $259;
      } else {
       $260 = $5;
       $261 = (($260) + 12|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $4;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($262>>>0)>($265>>>0);
       if ($266) {
        $267 = $SG;
        $268 = $4;
        $269 = (($268) + 12|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = $270&65535;
        $272 = $5;
        $273 = (($272) + 12|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = $274&65535;
        $276 = (__Z6ExpandItET_S0_S0_S0_($267,$271,$275)|0);
        HEAP16[$DG>>1] = $276;
       } else {
        $277 = $SG;
        HEAP16[$DG>>1] = $277;
       }
      }
     }
    }
    $278 = HEAP16[$uiSourceBMask>>1]|0;
    $279 = ($278<<16>>16)!=(0);
    if ($279) {
     $280 = HEAP16[$uiDestBMask>>1]|0;
     $281 = ($280<<16>>16)!=(0);
     if ($281) {
      $282 = $5;
      $283 = (($282) + 16|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $4;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = ($284>>>0)<($287>>>0);
      if ($288) {
       $289 = $SB;
       $290 = $4;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $292&65535;
       $294 = $5;
       $295 = (($294) + 16|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = $296&65535;
       $298 = (__Z6ShrinkItET_S0_S0_S0_($289,$293,$297)|0);
       HEAP16[$DB>>1] = $298;
      } else {
       $299 = $5;
       $300 = (($299) + 16|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = $4;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = ($301>>>0)>($304>>>0);
       if ($305) {
        $306 = $SB;
        $307 = $4;
        $308 = (($307) + 16|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = $309&65535;
        $311 = $5;
        $312 = (($311) + 16|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = $313&65535;
        $315 = (__Z6ExpandItET_S0_S0_S0_($306,$310,$314)|0);
        HEAP16[$DB>>1] = $315;
       } else {
        $316 = $SB;
        HEAP16[$DB>>1] = $316;
       }
      }
     }
    }
    $317 = HEAP16[$uiSourceAMask>>1]|0;
    $318 = ($317<<16>>16)!=(0);
    if ($318) {
     $319 = HEAP16[$uiDestAMask>>1]|0;
     $320 = ($319<<16>>16)!=(0);
     if ($320) {
      $321 = $5;
      $322 = (($321) + 20|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = $4;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = ($323>>>0)<($326>>>0);
      if ($327) {
       $328 = $SA;
       $329 = $4;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331&65535;
       $333 = $5;
       $334 = (($333) + 20|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335&65535;
       $337 = (__Z6ShrinkItET_S0_S0_S0_($328,$332,$336)|0);
       HEAP16[$DA>>1] = $337;
      } else {
       $338 = $5;
       $339 = (($338) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = $4;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($340>>>0)>($343>>>0);
       if ($344) {
        $345 = $SA;
        $346 = $4;
        $347 = (($346) + 20|0);
        $348 = HEAP32[$347>>2]|0;
        $349 = $348&65535;
        $350 = $5;
        $351 = (($350) + 20|0);
        $352 = HEAP32[$351>>2]|0;
        $353 = $352&65535;
        $354 = (__Z6ExpandItET_S0_S0_S0_($345,$349,$353)|0);
        HEAP16[$DA>>1] = $354;
       } else {
        $355 = $SA;
        HEAP16[$DA>>1] = $355;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $158 = $4;
   $159 = (($158) + 48|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $5;
   $162 = (($161) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $SR;
   $165 = $SG;
   $166 = $SB;
   $167 = $SA;
   $168 = $4;
   $169 = (($168) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $170&65535;
   $172 = $4;
   $173 = (($172) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174&65535;
   $176 = $4;
   $177 = (($176) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178&65535;
   $180 = $4;
   $181 = (($180) + 20|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $182&65535;
   $184 = $5;
   $185 = (($184) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186&65535;
   $188 = $5;
   $189 = (($188) + 12|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $190&65535;
   $192 = $5;
   $193 = (($192) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $194&65535;
   $196 = $5;
   $197 = (($196) + 20|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($160,$163,$164,$165,$166,$167,$171,$175,$179,$183,$DR,$DG,$DB,$DA,$187,$191,$195,$199);
  }
  $356 = HEAP16[$DR>>1]|0;
  $357 = $356&65535;
  $358 = HEAP16[$uiDestRMask>>1]|0;
  $359 = $358&65535;
  $360 = $357 & $359;
  $361 = $360&65535;
  $362 = $361&65535;
  $363 = HEAP16[$uiDestRShift>>1]|0;
  $364 = $363&65535;
  $365 = $362 << $364;
  $366 = HEAP16[$DG>>1]|0;
  $367 = $366&65535;
  $368 = HEAP16[$uiDestGMask>>1]|0;
  $369 = $368&65535;
  $370 = $367 & $369;
  $371 = $370&65535;
  $372 = $371&65535;
  $373 = HEAP16[$uiDestGShift>>1]|0;
  $374 = $373&65535;
  $375 = $372 << $374;
  $376 = $365 | $375;
  $377 = HEAP16[$DB>>1]|0;
  $378 = $377&65535;
  $379 = HEAP16[$uiDestBMask>>1]|0;
  $380 = $379&65535;
  $381 = $378 & $380;
  $382 = $381&65535;
  $383 = $382&65535;
  $384 = HEAP16[$uiDestBShift>>1]|0;
  $385 = $384&65535;
  $386 = $383 << $385;
  $387 = $376 | $386;
  $388 = HEAP16[$DA>>1]|0;
  $389 = $388&65535;
  $390 = HEAP16[$uiDestAMask>>1]|0;
  $391 = $390&65535;
  $392 = $389 & $391;
  $393 = $392&65535;
  $394 = $393&65535;
  $395 = HEAP16[$uiDestAShift>>1]|0;
  $396 = $395&65535;
  $397 = $394 << $396;
  $398 = $387 | $397;
  $399 = $398&65535;
  $Dest = $399;
  $i = 0;
  while(1) {
   $400 = $i;
   $401 = $5;
   $402 = (($401) + 4|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = ($400>>>0)<($403>>>0);
   if (!($404)) {
    break;
   }
   $405 = $Dest;
   $406 = $405&65535;
   $407 = $i;
   $408 = $407&65535;
   $409 = $408&65535;
   $410 = $409<<3;
   $411 = $406 >> $410;
   $412 = $411 & 255;
   $413 = $412&255;
   $414 = $i;
   $415 = $1;
   $416 = (($415) + ($414)|0);
   HEAP8[$416>>0] = $413;
   $417 = $i;
   $418 = (($417) + 1)|0;
   $i = $418;
  }
  $419 = $4;
  $420 = (($419) + 4|0);
  $421 = HEAP32[$420>>2]|0;
  $422 = $0;
  $423 = (($422) + ($421)|0);
  $0 = $423;
  $424 = $5;
  $425 = (($424) + 4|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = $1;
  $428 = (($427) + ($426)|0);
  $1 = $428;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedItjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0;
 var $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0;
 var $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 100|0;
 $uiSourceGShift = sp + 98|0;
 $uiSourceBShift = sp + 96|0;
 $uiSourceAShift = sp + 94|0;
 $uiSourceRMask = sp + 92|0;
 $uiSourceGMask = sp + 90|0;
 $uiSourceBMask = sp + 88|0;
 $uiSourceAMask = sp + 86|0;
 $uiDestRShift = sp + 84|0;
 $uiDestGShift = sp + 82|0;
 $uiDestBShift = sp + 80|0;
 $uiDestAShift = sp + 78|0;
 $uiDestRMask = sp + 76|0;
 $uiDestGMask = sp + 74|0;
 $uiDestBMask = sp + 72|0;
 $uiDestAMask = sp + 70|0;
 $DR = sp + 58|0;
 $DG = sp + 56|0;
 $DB = sp + 54|0;
 $DA = sp + 52|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $85&65535;
   $87 = $i;
   $88 = $87&65535;
   $89 = $88&65535;
   $90 = $89<<3;
   $91 = $86 << $90;
   $92 = $Source;
   $93 = $92&65535;
   $94 = $93 | $91;
   $95 = $94&65535;
   $Source = $95;
   $96 = $i;
   $97 = (($96) + 1)|0;
   $i = $97;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $98 = HEAP16[$uiSourceRMask>>1]|0;
  $99 = ($98<<16>>16)!=(0);
  if ($99) {
   $100 = $Source;
   $101 = $100&65535;
   $102 = HEAP16[$uiSourceRShift>>1]|0;
   $103 = $102&65535;
   $104 = $101 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&65535;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&65535;
   $117 = $114 >> $116;
   $118 = $117&65535;
   $119 = $118&65535;
   $120 = HEAP16[$uiSourceGMask>>1]|0;
   $121 = $120&65535;
   $122 = $119 & $121;
   $123 = $122&65535;
   $SG = $123;
  }
  $124 = HEAP16[$uiSourceBMask>>1]|0;
  $125 = ($124<<16>>16)!=(0);
  if ($125) {
   $126 = $Source;
   $127 = $126&65535;
   $128 = HEAP16[$uiSourceBShift>>1]|0;
   $129 = $128&65535;
   $130 = $127 >> $129;
   $131 = $130&65535;
   $132 = $131&65535;
   $133 = HEAP16[$uiSourceBMask>>1]|0;
   $134 = $133&65535;
   $135 = $132 & $134;
   $136 = $135&65535;
   $SB = $136;
  }
  $137 = HEAP16[$uiSourceAMask>>1]|0;
  $138 = ($137<<16>>16)!=(0);
  if ($138) {
   $139 = $Source;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceAShift>>1]|0;
   $142 = $141&65535;
   $143 = $140 >> $142;
   $144 = $143&65535;
   $145 = $144&65535;
   $146 = HEAP16[$uiSourceAMask>>1]|0;
   $147 = $146&65535;
   $148 = $145 & $147;
   $149 = $148&65535;
   $SA = $149;
  }
  $150 = $4;
  $151 = (($150) + 48|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0|0);
  if ($153) {
   label = 23;
  } else {
   $154 = $5;
   $155 = (($154) + 44|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ($156|0)!=(0|0);
   if ($157) {
    label = 23;
   } else {
    $200 = HEAP16[$uiSourceRMask>>1]|0;
    $201 = ($200<<16>>16)!=(0);
    if ($201) {
     $202 = HEAP16[$uiDestRMask>>1]|0;
     $203 = ($202<<16>>16)!=(0);
     if ($203) {
      $204 = $5;
      $205 = (($204) + 8|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $4;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($206>>>0)<($209>>>0);
      if ($210) {
       $211 = $SR;
       $212 = $4;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $214&65535;
       $216 = $5;
       $217 = (($216) + 8|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = $218&65535;
       $220 = (__Z6ShrinkItET_S0_S0_S0_($211,$215,$219)|0);
       HEAP16[$DR>>1] = $220;
      } else {
       $221 = $5;
       $222 = (($221) + 8|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $4;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($223>>>0)>($226>>>0);
       if ($227) {
        $228 = $SR;
        $229 = $4;
        $230 = (($229) + 8|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = $231&65535;
        $233 = $5;
        $234 = (($233) + 8|0);
        $235 = HEAP32[$234>>2]|0;
        $236 = $235&65535;
        $237 = (__Z6ExpandItET_S0_S0_S0_($228,$232,$236)|0);
        HEAP16[$DR>>1] = $237;
       } else {
        $238 = $SR;
        HEAP16[$DR>>1] = $238;
       }
      }
     }
    }
    $239 = HEAP16[$uiSourceGMask>>1]|0;
    $240 = ($239<<16>>16)!=(0);
    if ($240) {
     $241 = HEAP16[$uiDestGMask>>1]|0;
     $242 = ($241<<16>>16)!=(0);
     if ($242) {
      $243 = $5;
      $244 = (($243) + 12|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = $4;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ($245>>>0)<($248>>>0);
      if ($249) {
       $250 = $SG;
       $251 = $4;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $253&65535;
       $255 = $5;
       $256 = (($255) + 12|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = $257&65535;
       $259 = (__Z6ShrinkItET_S0_S0_S0_($250,$254,$258)|0);
       HEAP16[$DG>>1] = $259;
      } else {
       $260 = $5;
       $261 = (($260) + 12|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $4;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($262>>>0)>($265>>>0);
       if ($266) {
        $267 = $SG;
        $268 = $4;
        $269 = (($268) + 12|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = $270&65535;
        $272 = $5;
        $273 = (($272) + 12|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = $274&65535;
        $276 = (__Z6ExpandItET_S0_S0_S0_($267,$271,$275)|0);
        HEAP16[$DG>>1] = $276;
       } else {
        $277 = $SG;
        HEAP16[$DG>>1] = $277;
       }
      }
     }
    }
    $278 = HEAP16[$uiSourceBMask>>1]|0;
    $279 = ($278<<16>>16)!=(0);
    if ($279) {
     $280 = HEAP16[$uiDestBMask>>1]|0;
     $281 = ($280<<16>>16)!=(0);
     if ($281) {
      $282 = $5;
      $283 = (($282) + 16|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $4;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = ($284>>>0)<($287>>>0);
      if ($288) {
       $289 = $SB;
       $290 = $4;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $292&65535;
       $294 = $5;
       $295 = (($294) + 16|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = $296&65535;
       $298 = (__Z6ShrinkItET_S0_S0_S0_($289,$293,$297)|0);
       HEAP16[$DB>>1] = $298;
      } else {
       $299 = $5;
       $300 = (($299) + 16|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = $4;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = ($301>>>0)>($304>>>0);
       if ($305) {
        $306 = $SB;
        $307 = $4;
        $308 = (($307) + 16|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = $309&65535;
        $311 = $5;
        $312 = (($311) + 16|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = $313&65535;
        $315 = (__Z6ExpandItET_S0_S0_S0_($306,$310,$314)|0);
        HEAP16[$DB>>1] = $315;
       } else {
        $316 = $SB;
        HEAP16[$DB>>1] = $316;
       }
      }
     }
    }
    $317 = HEAP16[$uiSourceAMask>>1]|0;
    $318 = ($317<<16>>16)!=(0);
    if ($318) {
     $319 = HEAP16[$uiDestAMask>>1]|0;
     $320 = ($319<<16>>16)!=(0);
     if ($320) {
      $321 = $5;
      $322 = (($321) + 20|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = $4;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = ($323>>>0)<($326>>>0);
      if ($327) {
       $328 = $SA;
       $329 = $4;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331&65535;
       $333 = $5;
       $334 = (($333) + 20|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335&65535;
       $337 = (__Z6ShrinkItET_S0_S0_S0_($328,$332,$336)|0);
       HEAP16[$DA>>1] = $337;
      } else {
       $338 = $5;
       $339 = (($338) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = $4;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($340>>>0)>($343>>>0);
       if ($344) {
        $345 = $SA;
        $346 = $4;
        $347 = (($346) + 20|0);
        $348 = HEAP32[$347>>2]|0;
        $349 = $348&65535;
        $350 = $5;
        $351 = (($350) + 20|0);
        $352 = HEAP32[$351>>2]|0;
        $353 = $352&65535;
        $354 = (__Z6ExpandItET_S0_S0_S0_($345,$349,$353)|0);
        HEAP16[$DA>>1] = $354;
       } else {
        $355 = $SA;
        HEAP16[$DA>>1] = $355;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $158 = $4;
   $159 = (($158) + 48|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $5;
   $162 = (($161) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $SR;
   $165 = $SG;
   $166 = $SB;
   $167 = $SA;
   $168 = $4;
   $169 = (($168) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $170&65535;
   $172 = $4;
   $173 = (($172) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174&65535;
   $176 = $4;
   $177 = (($176) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178&65535;
   $180 = $4;
   $181 = (($180) + 20|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $182&65535;
   $184 = $5;
   $185 = (($184) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186&65535;
   $188 = $5;
   $189 = (($188) + 12|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $190&65535;
   $192 = $5;
   $193 = (($192) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $194&65535;
   $196 = $5;
   $197 = (($196) + 20|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($160,$163,$164,$165,$166,$167,$171,$175,$179,$183,$DR,$DG,$DB,$DA,$187,$191,$195,$199);
  }
  $356 = HEAP16[$DR>>1]|0;
  $357 = $356&65535;
  $358 = HEAP16[$uiDestRMask>>1]|0;
  $359 = $358&65535;
  $360 = $357 & $359;
  $361 = HEAP16[$uiDestRShift>>1]|0;
  $362 = $361&65535;
  $363 = $360 << $362;
  $364 = HEAP16[$DG>>1]|0;
  $365 = $364&65535;
  $366 = HEAP16[$uiDestGMask>>1]|0;
  $367 = $366&65535;
  $368 = $365 & $367;
  $369 = HEAP16[$uiDestGShift>>1]|0;
  $370 = $369&65535;
  $371 = $368 << $370;
  $372 = $363 | $371;
  $373 = HEAP16[$DB>>1]|0;
  $374 = $373&65535;
  $375 = HEAP16[$uiDestBMask>>1]|0;
  $376 = $375&65535;
  $377 = $374 & $376;
  $378 = HEAP16[$uiDestBShift>>1]|0;
  $379 = $378&65535;
  $380 = $377 << $379;
  $381 = $372 | $380;
  $382 = HEAP16[$DA>>1]|0;
  $383 = $382&65535;
  $384 = HEAP16[$uiDestAMask>>1]|0;
  $385 = $384&65535;
  $386 = $383 & $385;
  $387 = HEAP16[$uiDestAShift>>1]|0;
  $388 = $387&65535;
  $389 = $386 << $388;
  $390 = $381 | $389;
  $Dest = $390;
  $i = 0;
  while(1) {
   $391 = $i;
   $392 = $5;
   $393 = (($392) + 4|0);
   $394 = HEAP32[$393>>2]|0;
   $395 = ($391>>>0)<($394>>>0);
   if (!($395)) {
    break;
   }
   $396 = $Dest;
   $397 = $i;
   $398 = $397&65535;
   $399 = $398&65535;
   $400 = $399<<3;
   $401 = $396 >>> $400;
   $402 = $401 & 255;
   $403 = $402&255;
   $404 = $i;
   $405 = $1;
   $406 = (($405) + ($404)|0);
   HEAP8[$406>>0] = $403;
   $407 = $i;
   $408 = (($407) + 1)|0;
   $i = $408;
  }
  $409 = $4;
  $410 = (($409) + 4|0);
  $411 = HEAP32[$410>>2]|0;
  $412 = $0;
  $413 = (($412) + ($411)|0);
  $0 = $413;
  $414 = $5;
  $415 = (($414) + 4|0);
  $416 = HEAP32[$415>>2]|0;
  $417 = $1;
  $418 = (($417) + ($416)|0);
  $1 = $418;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedItyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0;
 var $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 104|0;
 $uiSourceGShift = sp + 102|0;
 $uiSourceBShift = sp + 100|0;
 $uiSourceAShift = sp + 98|0;
 $uiSourceRMask = sp + 96|0;
 $uiSourceGMask = sp + 94|0;
 $uiSourceBMask = sp + 92|0;
 $uiSourceAMask = sp + 90|0;
 $uiDestRShift = sp + 88|0;
 $uiDestGShift = sp + 86|0;
 $uiDestBShift = sp + 84|0;
 $uiDestAShift = sp + 82|0;
 $uiDestRMask = sp + 80|0;
 $uiDestGMask = sp + 78|0;
 $uiDestBMask = sp + 76|0;
 $uiDestAMask = sp + 74|0;
 $DR = sp + 62|0;
 $DG = sp + 60|0;
 $DB = sp + 58|0;
 $DA = sp + 56|0;
 $Dest = sp;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $85&65535;
   $87 = $i;
   $88 = $87&65535;
   $89 = $88&65535;
   $90 = $89<<3;
   $91 = $86 << $90;
   $92 = $Source;
   $93 = $92&65535;
   $94 = $93 | $91;
   $95 = $94&65535;
   $Source = $95;
   $96 = $i;
   $97 = (($96) + 1)|0;
   $i = $97;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $98 = HEAP16[$uiSourceRMask>>1]|0;
  $99 = ($98<<16>>16)!=(0);
  if ($99) {
   $100 = $Source;
   $101 = $100&65535;
   $102 = HEAP16[$uiSourceRShift>>1]|0;
   $103 = $102&65535;
   $104 = $101 >> $103;
   $105 = $104&65535;
   $106 = $105&65535;
   $107 = HEAP16[$uiSourceRMask>>1]|0;
   $108 = $107&65535;
   $109 = $106 & $108;
   $110 = $109&65535;
   $SR = $110;
  }
  $111 = HEAP16[$uiSourceGMask>>1]|0;
  $112 = ($111<<16>>16)!=(0);
  if ($112) {
   $113 = $Source;
   $114 = $113&65535;
   $115 = HEAP16[$uiSourceGShift>>1]|0;
   $116 = $115&65535;
   $117 = $114 >> $116;
   $118 = $117&65535;
   $119 = $118&65535;
   $120 = HEAP16[$uiSourceGMask>>1]|0;
   $121 = $120&65535;
   $122 = $119 & $121;
   $123 = $122&65535;
   $SG = $123;
  }
  $124 = HEAP16[$uiSourceBMask>>1]|0;
  $125 = ($124<<16>>16)!=(0);
  if ($125) {
   $126 = $Source;
   $127 = $126&65535;
   $128 = HEAP16[$uiSourceBShift>>1]|0;
   $129 = $128&65535;
   $130 = $127 >> $129;
   $131 = $130&65535;
   $132 = $131&65535;
   $133 = HEAP16[$uiSourceBMask>>1]|0;
   $134 = $133&65535;
   $135 = $132 & $134;
   $136 = $135&65535;
   $SB = $136;
  }
  $137 = HEAP16[$uiSourceAMask>>1]|0;
  $138 = ($137<<16>>16)!=(0);
  if ($138) {
   $139 = $Source;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceAShift>>1]|0;
   $142 = $141&65535;
   $143 = $140 >> $142;
   $144 = $143&65535;
   $145 = $144&65535;
   $146 = HEAP16[$uiSourceAMask>>1]|0;
   $147 = $146&65535;
   $148 = $145 & $147;
   $149 = $148&65535;
   $SA = $149;
  }
  $150 = $4;
  $151 = (($150) + 48|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0|0);
  if ($153) {
   label = 23;
  } else {
   $154 = $5;
   $155 = (($154) + 44|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ($156|0)!=(0|0);
   if ($157) {
    label = 23;
   } else {
    $200 = HEAP16[$uiSourceRMask>>1]|0;
    $201 = ($200<<16>>16)!=(0);
    if ($201) {
     $202 = HEAP16[$uiDestRMask>>1]|0;
     $203 = ($202<<16>>16)!=(0);
     if ($203) {
      $204 = $5;
      $205 = (($204) + 8|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $4;
      $208 = (($207) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($206>>>0)<($209>>>0);
      if ($210) {
       $211 = $SR;
       $212 = $4;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $214&65535;
       $216 = $5;
       $217 = (($216) + 8|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = $218&65535;
       $220 = (__Z6ShrinkItET_S0_S0_S0_($211,$215,$219)|0);
       HEAP16[$DR>>1] = $220;
      } else {
       $221 = $5;
       $222 = (($221) + 8|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $4;
       $225 = (($224) + 8|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($223>>>0)>($226>>>0);
       if ($227) {
        $228 = $SR;
        $229 = $4;
        $230 = (($229) + 8|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = $231&65535;
        $233 = $5;
        $234 = (($233) + 8|0);
        $235 = HEAP32[$234>>2]|0;
        $236 = $235&65535;
        $237 = (__Z6ExpandItET_S0_S0_S0_($228,$232,$236)|0);
        HEAP16[$DR>>1] = $237;
       } else {
        $238 = $SR;
        HEAP16[$DR>>1] = $238;
       }
      }
     }
    }
    $239 = HEAP16[$uiSourceGMask>>1]|0;
    $240 = ($239<<16>>16)!=(0);
    if ($240) {
     $241 = HEAP16[$uiDestGMask>>1]|0;
     $242 = ($241<<16>>16)!=(0);
     if ($242) {
      $243 = $5;
      $244 = (($243) + 12|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = $4;
      $247 = (($246) + 12|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ($245>>>0)<($248>>>0);
      if ($249) {
       $250 = $SG;
       $251 = $4;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $253&65535;
       $255 = $5;
       $256 = (($255) + 12|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = $257&65535;
       $259 = (__Z6ShrinkItET_S0_S0_S0_($250,$254,$258)|0);
       HEAP16[$DG>>1] = $259;
      } else {
       $260 = $5;
       $261 = (($260) + 12|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $4;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($262>>>0)>($265>>>0);
       if ($266) {
        $267 = $SG;
        $268 = $4;
        $269 = (($268) + 12|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = $270&65535;
        $272 = $5;
        $273 = (($272) + 12|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = $274&65535;
        $276 = (__Z6ExpandItET_S0_S0_S0_($267,$271,$275)|0);
        HEAP16[$DG>>1] = $276;
       } else {
        $277 = $SG;
        HEAP16[$DG>>1] = $277;
       }
      }
     }
    }
    $278 = HEAP16[$uiSourceBMask>>1]|0;
    $279 = ($278<<16>>16)!=(0);
    if ($279) {
     $280 = HEAP16[$uiDestBMask>>1]|0;
     $281 = ($280<<16>>16)!=(0);
     if ($281) {
      $282 = $5;
      $283 = (($282) + 16|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $4;
      $286 = (($285) + 16|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = ($284>>>0)<($287>>>0);
      if ($288) {
       $289 = $SB;
       $290 = $4;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $292&65535;
       $294 = $5;
       $295 = (($294) + 16|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = $296&65535;
       $298 = (__Z6ShrinkItET_S0_S0_S0_($289,$293,$297)|0);
       HEAP16[$DB>>1] = $298;
      } else {
       $299 = $5;
       $300 = (($299) + 16|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = $4;
       $303 = (($302) + 16|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = ($301>>>0)>($304>>>0);
       if ($305) {
        $306 = $SB;
        $307 = $4;
        $308 = (($307) + 16|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = $309&65535;
        $311 = $5;
        $312 = (($311) + 16|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = $313&65535;
        $315 = (__Z6ExpandItET_S0_S0_S0_($306,$310,$314)|0);
        HEAP16[$DB>>1] = $315;
       } else {
        $316 = $SB;
        HEAP16[$DB>>1] = $316;
       }
      }
     }
    }
    $317 = HEAP16[$uiSourceAMask>>1]|0;
    $318 = ($317<<16>>16)!=(0);
    if ($318) {
     $319 = HEAP16[$uiDestAMask>>1]|0;
     $320 = ($319<<16>>16)!=(0);
     if ($320) {
      $321 = $5;
      $322 = (($321) + 20|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = $4;
      $325 = (($324) + 20|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = ($323>>>0)<($326>>>0);
      if ($327) {
       $328 = $SA;
       $329 = $4;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331&65535;
       $333 = $5;
       $334 = (($333) + 20|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335&65535;
       $337 = (__Z6ShrinkItET_S0_S0_S0_($328,$332,$336)|0);
       HEAP16[$DA>>1] = $337;
      } else {
       $338 = $5;
       $339 = (($338) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = $4;
       $342 = (($341) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($340>>>0)>($343>>>0);
       if ($344) {
        $345 = $SA;
        $346 = $4;
        $347 = (($346) + 20|0);
        $348 = HEAP32[$347>>2]|0;
        $349 = $348&65535;
        $350 = $5;
        $351 = (($350) + 20|0);
        $352 = HEAP32[$351>>2]|0;
        $353 = $352&65535;
        $354 = (__Z6ExpandItET_S0_S0_S0_($345,$349,$353)|0);
        HEAP16[$DA>>1] = $354;
       } else {
        $355 = $SA;
        HEAP16[$DA>>1] = $355;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $158 = $4;
   $159 = (($158) + 48|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $5;
   $162 = (($161) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $SR;
   $165 = $SG;
   $166 = $SB;
   $167 = $SA;
   $168 = $4;
   $169 = (($168) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $170&65535;
   $172 = $4;
   $173 = (($172) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174&65535;
   $176 = $4;
   $177 = (($176) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178&65535;
   $180 = $4;
   $181 = (($180) + 20|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $182&65535;
   $184 = $5;
   $185 = (($184) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186&65535;
   $188 = $5;
   $189 = (($188) + 12|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $190&65535;
   $192 = $5;
   $193 = (($192) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $194&65535;
   $196 = $5;
   $197 = (($196) + 20|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($160,$163,$164,$165,$166,$167,$171,$175,$179,$183,$DR,$DG,$DB,$DA,$187,$191,$195,$199);
  }
  $356 = HEAP16[$DR>>1]|0;
  $357 = $356&65535;
  $358 = HEAP16[$uiDestRMask>>1]|0;
  $359 = $358&65535;
  $360 = $357 & $359;
  $361 = ($360|0)<(0);
  $362 = $361 << 31 >> 31;
  $363 = HEAP16[$uiDestRShift>>1]|0;
  $364 = $363&65535;
  $365 = (_bitshift64Shl(($360|0),($362|0),($364|0))|0);
  $366 = tempRet0;
  $367 = HEAP16[$DG>>1]|0;
  $368 = $367&65535;
  $369 = HEAP16[$uiDestGMask>>1]|0;
  $370 = $369&65535;
  $371 = $368 & $370;
  $372 = ($371|0)<(0);
  $373 = $372 << 31 >> 31;
  $374 = HEAP16[$uiDestGShift>>1]|0;
  $375 = $374&65535;
  $376 = (_bitshift64Shl(($371|0),($373|0),($375|0))|0);
  $377 = tempRet0;
  $378 = $365 | $376;
  $379 = $366 | $377;
  $380 = HEAP16[$DB>>1]|0;
  $381 = $380&65535;
  $382 = HEAP16[$uiDestBMask>>1]|0;
  $383 = $382&65535;
  $384 = $381 & $383;
  $385 = ($384|0)<(0);
  $386 = $385 << 31 >> 31;
  $387 = HEAP16[$uiDestBShift>>1]|0;
  $388 = $387&65535;
  $389 = (_bitshift64Shl(($384|0),($386|0),($388|0))|0);
  $390 = tempRet0;
  $391 = $378 | $389;
  $392 = $379 | $390;
  $393 = HEAP16[$DA>>1]|0;
  $394 = $393&65535;
  $395 = HEAP16[$uiDestAMask>>1]|0;
  $396 = $395&65535;
  $397 = $394 & $396;
  $398 = ($397|0)<(0);
  $399 = $398 << 31 >> 31;
  $400 = HEAP16[$uiDestAShift>>1]|0;
  $401 = $400&65535;
  $402 = (_bitshift64Shl(($397|0),($399|0),($401|0))|0);
  $403 = tempRet0;
  $404 = $391 | $402;
  $405 = $392 | $403;
  $406 = $Dest;
  $407 = $406;
  HEAP32[$407>>2] = $404;
  $408 = (($406) + 4)|0;
  $409 = $408;
  HEAP32[$409>>2] = $405;
  $i = 0;
  while(1) {
   $410 = $i;
   $411 = $5;
   $412 = (($411) + 4|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = ($410>>>0)<($413>>>0);
   if (!($414)) {
    break;
   }
   $415 = $Dest;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $418 = (($415) + 4)|0;
   $419 = $418;
   $420 = HEAP32[$419>>2]|0;
   $421 = $i;
   $422 = $421&65535;
   $423 = $422&65535;
   $424 = $423<<3;
   $425 = (_bitshift64Lshr(($417|0),($420|0),($424|0))|0);
   $426 = tempRet0;
   $427 = $425 & 255;
   $428 = $427&255;
   $429 = $i;
   $430 = $1;
   $431 = (($430) + ($429)|0);
   HEAP8[$431>>0] = $428;
   $432 = $i;
   $433 = (($432) + 1)|0;
   $i = $433;
  }
  $434 = $4;
  $435 = (($434) + 4|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = $0;
  $438 = (($437) + ($436)|0);
  $0 = $438;
  $439 = $5;
  $440 = (($439) + 4|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = $1;
  $443 = (($442) + ($441)|0);
  $1 = $443;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIjhEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0;
 var $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 98|0;
 $uiSourceGShift = sp + 96|0;
 $uiSourceBShift = sp + 94|0;
 $uiSourceAShift = sp + 92|0;
 $uiSourceRMask = sp + 90|0;
 $uiSourceGMask = sp + 88|0;
 $uiSourceBMask = sp + 86|0;
 $uiSourceAMask = sp + 84|0;
 $uiDestRShift = sp + 82|0;
 $uiDestGShift = sp + 80|0;
 $uiDestBShift = sp + 78|0;
 $uiDestAShift = sp + 76|0;
 $uiDestRMask = sp + 74|0;
 $uiDestGMask = sp + 72|0;
 $uiDestBMask = sp + 70|0;
 $uiDestAMask = sp + 68|0;
 $DR = sp + 58|0;
 $DG = sp + 56|0;
 $DB = sp + 54|0;
 $DA = sp + 52|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86<<3;
   $88 = $85 << $87;
   $89 = $Source;
   $90 = $89 | $88;
   $Source = $90;
   $91 = $i;
   $92 = (($91) + 1)|0;
   $i = $92;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $93 = HEAP16[$uiSourceRMask>>1]|0;
  $94 = ($93<<16>>16)!=(0);
  if ($94) {
   $95 = $Source;
   $96 = HEAP16[$uiSourceRShift>>1]|0;
   $97 = $96&65535;
   $98 = $95 >>> $97;
   $99 = $98&65535;
   $100 = $99&65535;
   $101 = HEAP16[$uiSourceRMask>>1]|0;
   $102 = $101&65535;
   $103 = $100 & $102;
   $104 = $103&65535;
   $SR = $104;
  }
  $105 = HEAP16[$uiSourceGMask>>1]|0;
  $106 = ($105<<16>>16)!=(0);
  if ($106) {
   $107 = $Source;
   $108 = HEAP16[$uiSourceGShift>>1]|0;
   $109 = $108&65535;
   $110 = $107 >>> $109;
   $111 = $110&65535;
   $112 = $111&65535;
   $113 = HEAP16[$uiSourceGMask>>1]|0;
   $114 = $113&65535;
   $115 = $112 & $114;
   $116 = $115&65535;
   $SG = $116;
  }
  $117 = HEAP16[$uiSourceBMask>>1]|0;
  $118 = ($117<<16>>16)!=(0);
  if ($118) {
   $119 = $Source;
   $120 = HEAP16[$uiSourceBShift>>1]|0;
   $121 = $120&65535;
   $122 = $119 >>> $121;
   $123 = $122&65535;
   $124 = $123&65535;
   $125 = HEAP16[$uiSourceBMask>>1]|0;
   $126 = $125&65535;
   $127 = $124 & $126;
   $128 = $127&65535;
   $SB = $128;
  }
  $129 = HEAP16[$uiSourceAMask>>1]|0;
  $130 = ($129<<16>>16)!=(0);
  if ($130) {
   $131 = $Source;
   $132 = HEAP16[$uiSourceAShift>>1]|0;
   $133 = $132&65535;
   $134 = $131 >>> $133;
   $135 = $134&65535;
   $136 = $135&65535;
   $137 = HEAP16[$uiSourceAMask>>1]|0;
   $138 = $137&65535;
   $139 = $136 & $138;
   $140 = $139&65535;
   $SA = $140;
  }
  $141 = $4;
  $142 = (($141) + 48|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($143|0)!=(0|0);
  if ($144) {
   label = 23;
  } else {
   $145 = $5;
   $146 = (($145) + 44|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)!=(0|0);
   if ($148) {
    label = 23;
   } else {
    $191 = HEAP16[$uiSourceRMask>>1]|0;
    $192 = ($191<<16>>16)!=(0);
    if ($192) {
     $193 = HEAP16[$uiDestRMask>>1]|0;
     $194 = ($193<<16>>16)!=(0);
     if ($194) {
      $195 = $5;
      $196 = (($195) + 8|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $4;
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($197>>>0)<($200>>>0);
      if ($201) {
       $202 = $SR;
       $203 = $4;
       $204 = (($203) + 8|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205&65535;
       $207 = $5;
       $208 = (($207) + 8|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = $209&65535;
       $211 = (__Z6ShrinkItET_S0_S0_S0_($202,$206,$210)|0);
       HEAP16[$DR>>1] = $211;
      } else {
       $212 = $5;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ($214>>>0)>($217>>>0);
       if ($218) {
        $219 = $SR;
        $220 = $4;
        $221 = (($220) + 8|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $222&65535;
        $224 = $5;
        $225 = (($224) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = $226&65535;
        $228 = (__Z6ExpandItET_S0_S0_S0_($219,$223,$227)|0);
        HEAP16[$DR>>1] = $228;
       } else {
        $229 = $SR;
        HEAP16[$DR>>1] = $229;
       }
      }
     }
    }
    $230 = HEAP16[$uiSourceGMask>>1]|0;
    $231 = ($230<<16>>16)!=(0);
    if ($231) {
     $232 = HEAP16[$uiDestGMask>>1]|0;
     $233 = ($232<<16>>16)!=(0);
     if ($233) {
      $234 = $5;
      $235 = (($234) + 12|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = $4;
      $238 = (($237) + 12|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($236>>>0)<($239>>>0);
      if ($240) {
       $241 = $SG;
       $242 = $4;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $244&65535;
       $246 = $5;
       $247 = (($246) + 12|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = $248&65535;
       $250 = (__Z6ShrinkItET_S0_S0_S0_($241,$245,$249)|0);
       HEAP16[$DG>>1] = $250;
      } else {
       $251 = $5;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = ($253>>>0)>($256>>>0);
       if ($257) {
        $258 = $SG;
        $259 = $4;
        $260 = (($259) + 12|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = $261&65535;
        $263 = $5;
        $264 = (($263) + 12|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = $265&65535;
        $267 = (__Z6ExpandItET_S0_S0_S0_($258,$262,$266)|0);
        HEAP16[$DG>>1] = $267;
       } else {
        $268 = $SG;
        HEAP16[$DG>>1] = $268;
       }
      }
     }
    }
    $269 = HEAP16[$uiSourceBMask>>1]|0;
    $270 = ($269<<16>>16)!=(0);
    if ($270) {
     $271 = HEAP16[$uiDestBMask>>1]|0;
     $272 = ($271<<16>>16)!=(0);
     if ($272) {
      $273 = $5;
      $274 = (($273) + 16|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = $4;
      $277 = (($276) + 16|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($275>>>0)<($278>>>0);
      if ($279) {
       $280 = $SB;
       $281 = $4;
       $282 = (($281) + 16|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = $283&65535;
       $285 = $5;
       $286 = (($285) + 16|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = $287&65535;
       $289 = (__Z6ShrinkItET_S0_S0_S0_($280,$284,$288)|0);
       HEAP16[$DB>>1] = $289;
      } else {
       $290 = $5;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = ($292>>>0)>($295>>>0);
       if ($296) {
        $297 = $SB;
        $298 = $4;
        $299 = (($298) + 16|0);
        $300 = HEAP32[$299>>2]|0;
        $301 = $300&65535;
        $302 = $5;
        $303 = (($302) + 16|0);
        $304 = HEAP32[$303>>2]|0;
        $305 = $304&65535;
        $306 = (__Z6ExpandItET_S0_S0_S0_($297,$301,$305)|0);
        HEAP16[$DB>>1] = $306;
       } else {
        $307 = $SB;
        HEAP16[$DB>>1] = $307;
       }
      }
     }
    }
    $308 = HEAP16[$uiSourceAMask>>1]|0;
    $309 = ($308<<16>>16)!=(0);
    if ($309) {
     $310 = HEAP16[$uiDestAMask>>1]|0;
     $311 = ($310<<16>>16)!=(0);
     if ($311) {
      $312 = $5;
      $313 = (($312) + 20|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = $4;
      $316 = (($315) + 20|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ($314>>>0)<($317>>>0);
      if ($318) {
       $319 = $SA;
       $320 = $4;
       $321 = (($320) + 20|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = $322&65535;
       $324 = $5;
       $325 = (($324) + 20|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = $326&65535;
       $328 = (__Z6ShrinkItET_S0_S0_S0_($319,$323,$327)|0);
       HEAP16[$DA>>1] = $328;
      } else {
       $329 = $5;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = ($331>>>0)>($334>>>0);
       if ($335) {
        $336 = $SA;
        $337 = $4;
        $338 = (($337) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $339&65535;
        $341 = $5;
        $342 = (($341) + 20|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = $343&65535;
        $345 = (__Z6ExpandItET_S0_S0_S0_($336,$340,$344)|0);
        HEAP16[$DA>>1] = $345;
       } else {
        $346 = $SA;
        HEAP16[$DA>>1] = $346;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $149 = $4;
   $150 = (($149) + 48|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $5;
   $153 = (($152) + 44|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $SR;
   $156 = $SG;
   $157 = $SB;
   $158 = $SA;
   $159 = $4;
   $160 = (($159) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161&65535;
   $163 = $4;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165&65535;
   $167 = $4;
   $168 = (($167) + 16|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169&65535;
   $171 = $4;
   $172 = (($171) + 20|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $5;
   $176 = (($175) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $5;
   $180 = (($179) + 12|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $5;
   $184 = (($183) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 20|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($151,$154,$155,$156,$157,$158,$162,$166,$170,$174,$DR,$DG,$DB,$DA,$178,$182,$186,$190);
  }
  $347 = HEAP16[$DR>>1]|0;
  $348 = $347&65535;
  $349 = HEAP16[$uiDestRMask>>1]|0;
  $350 = $349&65535;
  $351 = $348 & $350;
  $352 = $351&255;
  $353 = $352&255;
  $354 = HEAP16[$uiDestRShift>>1]|0;
  $355 = $354&255;
  $356 = $355&255;
  $357 = $353 << $356;
  $358 = HEAP16[$DG>>1]|0;
  $359 = $358&65535;
  $360 = HEAP16[$uiDestGMask>>1]|0;
  $361 = $360&65535;
  $362 = $359 & $361;
  $363 = $362&255;
  $364 = $363&255;
  $365 = HEAP16[$uiDestGShift>>1]|0;
  $366 = $365&255;
  $367 = $366&255;
  $368 = $364 << $367;
  $369 = $357 | $368;
  $370 = HEAP16[$DB>>1]|0;
  $371 = $370&65535;
  $372 = HEAP16[$uiDestBMask>>1]|0;
  $373 = $372&65535;
  $374 = $371 & $373;
  $375 = $374&255;
  $376 = $375&255;
  $377 = HEAP16[$uiDestBShift>>1]|0;
  $378 = $377&255;
  $379 = $378&255;
  $380 = $376 << $379;
  $381 = $369 | $380;
  $382 = HEAP16[$DA>>1]|0;
  $383 = $382&65535;
  $384 = HEAP16[$uiDestAMask>>1]|0;
  $385 = $384&65535;
  $386 = $383 & $385;
  $387 = $386&255;
  $388 = $387&255;
  $389 = HEAP16[$uiDestAShift>>1]|0;
  $390 = $389&255;
  $391 = $390&255;
  $392 = $388 << $391;
  $393 = $381 | $392;
  $394 = $393&255;
  $Dest = $394;
  $i = 0;
  while(1) {
   $395 = $i;
   $396 = $5;
   $397 = (($396) + 4|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = ($395>>>0)<($398>>>0);
   if (!($399)) {
    break;
   }
   $400 = $Dest;
   $401 = $400&255;
   $402 = $i;
   $403 = $402<<3;
   $404 = $401 >> $403;
   $405 = $404 & 255;
   $406 = $405&255;
   $407 = $i;
   $408 = $1;
   $409 = (($408) + ($407)|0);
   HEAP8[$409>>0] = $406;
   $410 = $i;
   $411 = (($410) + 1)|0;
   $i = $411;
  }
  $412 = $4;
  $413 = (($412) + 4|0);
  $414 = HEAP32[$413>>2]|0;
  $415 = $0;
  $416 = (($415) + ($414)|0);
  $0 = $416;
  $417 = $5;
  $418 = (($417) + 4|0);
  $419 = HEAP32[$418>>2]|0;
  $420 = $1;
  $421 = (($420) + ($419)|0);
  $1 = $421;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIjtEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0;
 var $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0;
 var $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 100|0;
 $uiSourceGShift = sp + 98|0;
 $uiSourceBShift = sp + 96|0;
 $uiSourceAShift = sp + 94|0;
 $uiSourceRMask = sp + 92|0;
 $uiSourceGMask = sp + 90|0;
 $uiSourceBMask = sp + 88|0;
 $uiSourceAMask = sp + 86|0;
 $uiDestRShift = sp + 84|0;
 $uiDestGShift = sp + 82|0;
 $uiDestBShift = sp + 80|0;
 $uiDestAShift = sp + 78|0;
 $uiDestRMask = sp + 76|0;
 $uiDestGMask = sp + 74|0;
 $uiDestBMask = sp + 72|0;
 $uiDestAMask = sp + 70|0;
 $DR = sp + 60|0;
 $DG = sp + 58|0;
 $DB = sp + 56|0;
 $DA = sp + 54|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86<<3;
   $88 = $85 << $87;
   $89 = $Source;
   $90 = $89 | $88;
   $Source = $90;
   $91 = $i;
   $92 = (($91) + 1)|0;
   $i = $92;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $93 = HEAP16[$uiSourceRMask>>1]|0;
  $94 = ($93<<16>>16)!=(0);
  if ($94) {
   $95 = $Source;
   $96 = HEAP16[$uiSourceRShift>>1]|0;
   $97 = $96&65535;
   $98 = $95 >>> $97;
   $99 = $98&65535;
   $100 = $99&65535;
   $101 = HEAP16[$uiSourceRMask>>1]|0;
   $102 = $101&65535;
   $103 = $100 & $102;
   $104 = $103&65535;
   $SR = $104;
  }
  $105 = HEAP16[$uiSourceGMask>>1]|0;
  $106 = ($105<<16>>16)!=(0);
  if ($106) {
   $107 = $Source;
   $108 = HEAP16[$uiSourceGShift>>1]|0;
   $109 = $108&65535;
   $110 = $107 >>> $109;
   $111 = $110&65535;
   $112 = $111&65535;
   $113 = HEAP16[$uiSourceGMask>>1]|0;
   $114 = $113&65535;
   $115 = $112 & $114;
   $116 = $115&65535;
   $SG = $116;
  }
  $117 = HEAP16[$uiSourceBMask>>1]|0;
  $118 = ($117<<16>>16)!=(0);
  if ($118) {
   $119 = $Source;
   $120 = HEAP16[$uiSourceBShift>>1]|0;
   $121 = $120&65535;
   $122 = $119 >>> $121;
   $123 = $122&65535;
   $124 = $123&65535;
   $125 = HEAP16[$uiSourceBMask>>1]|0;
   $126 = $125&65535;
   $127 = $124 & $126;
   $128 = $127&65535;
   $SB = $128;
  }
  $129 = HEAP16[$uiSourceAMask>>1]|0;
  $130 = ($129<<16>>16)!=(0);
  if ($130) {
   $131 = $Source;
   $132 = HEAP16[$uiSourceAShift>>1]|0;
   $133 = $132&65535;
   $134 = $131 >>> $133;
   $135 = $134&65535;
   $136 = $135&65535;
   $137 = HEAP16[$uiSourceAMask>>1]|0;
   $138 = $137&65535;
   $139 = $136 & $138;
   $140 = $139&65535;
   $SA = $140;
  }
  $141 = $4;
  $142 = (($141) + 48|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($143|0)!=(0|0);
  if ($144) {
   label = 23;
  } else {
   $145 = $5;
   $146 = (($145) + 44|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)!=(0|0);
   if ($148) {
    label = 23;
   } else {
    $191 = HEAP16[$uiSourceRMask>>1]|0;
    $192 = ($191<<16>>16)!=(0);
    if ($192) {
     $193 = HEAP16[$uiDestRMask>>1]|0;
     $194 = ($193<<16>>16)!=(0);
     if ($194) {
      $195 = $5;
      $196 = (($195) + 8|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $4;
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($197>>>0)<($200>>>0);
      if ($201) {
       $202 = $SR;
       $203 = $4;
       $204 = (($203) + 8|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205&65535;
       $207 = $5;
       $208 = (($207) + 8|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = $209&65535;
       $211 = (__Z6ShrinkItET_S0_S0_S0_($202,$206,$210)|0);
       HEAP16[$DR>>1] = $211;
      } else {
       $212 = $5;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ($214>>>0)>($217>>>0);
       if ($218) {
        $219 = $SR;
        $220 = $4;
        $221 = (($220) + 8|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $222&65535;
        $224 = $5;
        $225 = (($224) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = $226&65535;
        $228 = (__Z6ExpandItET_S0_S0_S0_($219,$223,$227)|0);
        HEAP16[$DR>>1] = $228;
       } else {
        $229 = $SR;
        HEAP16[$DR>>1] = $229;
       }
      }
     }
    }
    $230 = HEAP16[$uiSourceGMask>>1]|0;
    $231 = ($230<<16>>16)!=(0);
    if ($231) {
     $232 = HEAP16[$uiDestGMask>>1]|0;
     $233 = ($232<<16>>16)!=(0);
     if ($233) {
      $234 = $5;
      $235 = (($234) + 12|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = $4;
      $238 = (($237) + 12|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($236>>>0)<($239>>>0);
      if ($240) {
       $241 = $SG;
       $242 = $4;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $244&65535;
       $246 = $5;
       $247 = (($246) + 12|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = $248&65535;
       $250 = (__Z6ShrinkItET_S0_S0_S0_($241,$245,$249)|0);
       HEAP16[$DG>>1] = $250;
      } else {
       $251 = $5;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = ($253>>>0)>($256>>>0);
       if ($257) {
        $258 = $SG;
        $259 = $4;
        $260 = (($259) + 12|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = $261&65535;
        $263 = $5;
        $264 = (($263) + 12|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = $265&65535;
        $267 = (__Z6ExpandItET_S0_S0_S0_($258,$262,$266)|0);
        HEAP16[$DG>>1] = $267;
       } else {
        $268 = $SG;
        HEAP16[$DG>>1] = $268;
       }
      }
     }
    }
    $269 = HEAP16[$uiSourceBMask>>1]|0;
    $270 = ($269<<16>>16)!=(0);
    if ($270) {
     $271 = HEAP16[$uiDestBMask>>1]|0;
     $272 = ($271<<16>>16)!=(0);
     if ($272) {
      $273 = $5;
      $274 = (($273) + 16|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = $4;
      $277 = (($276) + 16|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($275>>>0)<($278>>>0);
      if ($279) {
       $280 = $SB;
       $281 = $4;
       $282 = (($281) + 16|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = $283&65535;
       $285 = $5;
       $286 = (($285) + 16|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = $287&65535;
       $289 = (__Z6ShrinkItET_S0_S0_S0_($280,$284,$288)|0);
       HEAP16[$DB>>1] = $289;
      } else {
       $290 = $5;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = ($292>>>0)>($295>>>0);
       if ($296) {
        $297 = $SB;
        $298 = $4;
        $299 = (($298) + 16|0);
        $300 = HEAP32[$299>>2]|0;
        $301 = $300&65535;
        $302 = $5;
        $303 = (($302) + 16|0);
        $304 = HEAP32[$303>>2]|0;
        $305 = $304&65535;
        $306 = (__Z6ExpandItET_S0_S0_S0_($297,$301,$305)|0);
        HEAP16[$DB>>1] = $306;
       } else {
        $307 = $SB;
        HEAP16[$DB>>1] = $307;
       }
      }
     }
    }
    $308 = HEAP16[$uiSourceAMask>>1]|0;
    $309 = ($308<<16>>16)!=(0);
    if ($309) {
     $310 = HEAP16[$uiDestAMask>>1]|0;
     $311 = ($310<<16>>16)!=(0);
     if ($311) {
      $312 = $5;
      $313 = (($312) + 20|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = $4;
      $316 = (($315) + 20|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ($314>>>0)<($317>>>0);
      if ($318) {
       $319 = $SA;
       $320 = $4;
       $321 = (($320) + 20|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = $322&65535;
       $324 = $5;
       $325 = (($324) + 20|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = $326&65535;
       $328 = (__Z6ShrinkItET_S0_S0_S0_($319,$323,$327)|0);
       HEAP16[$DA>>1] = $328;
      } else {
       $329 = $5;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = ($331>>>0)>($334>>>0);
       if ($335) {
        $336 = $SA;
        $337 = $4;
        $338 = (($337) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $339&65535;
        $341 = $5;
        $342 = (($341) + 20|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = $343&65535;
        $345 = (__Z6ExpandItET_S0_S0_S0_($336,$340,$344)|0);
        HEAP16[$DA>>1] = $345;
       } else {
        $346 = $SA;
        HEAP16[$DA>>1] = $346;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $149 = $4;
   $150 = (($149) + 48|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $5;
   $153 = (($152) + 44|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $SR;
   $156 = $SG;
   $157 = $SB;
   $158 = $SA;
   $159 = $4;
   $160 = (($159) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161&65535;
   $163 = $4;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165&65535;
   $167 = $4;
   $168 = (($167) + 16|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169&65535;
   $171 = $4;
   $172 = (($171) + 20|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $5;
   $176 = (($175) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $5;
   $180 = (($179) + 12|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $5;
   $184 = (($183) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 20|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($151,$154,$155,$156,$157,$158,$162,$166,$170,$174,$DR,$DG,$DB,$DA,$178,$182,$186,$190);
  }
  $347 = HEAP16[$DR>>1]|0;
  $348 = $347&65535;
  $349 = HEAP16[$uiDestRMask>>1]|0;
  $350 = $349&65535;
  $351 = $348 & $350;
  $352 = $351&65535;
  $353 = $352&65535;
  $354 = HEAP16[$uiDestRShift>>1]|0;
  $355 = $354&65535;
  $356 = $353 << $355;
  $357 = HEAP16[$DG>>1]|0;
  $358 = $357&65535;
  $359 = HEAP16[$uiDestGMask>>1]|0;
  $360 = $359&65535;
  $361 = $358 & $360;
  $362 = $361&65535;
  $363 = $362&65535;
  $364 = HEAP16[$uiDestGShift>>1]|0;
  $365 = $364&65535;
  $366 = $363 << $365;
  $367 = $356 | $366;
  $368 = HEAP16[$DB>>1]|0;
  $369 = $368&65535;
  $370 = HEAP16[$uiDestBMask>>1]|0;
  $371 = $370&65535;
  $372 = $369 & $371;
  $373 = $372&65535;
  $374 = $373&65535;
  $375 = HEAP16[$uiDestBShift>>1]|0;
  $376 = $375&65535;
  $377 = $374 << $376;
  $378 = $367 | $377;
  $379 = HEAP16[$DA>>1]|0;
  $380 = $379&65535;
  $381 = HEAP16[$uiDestAMask>>1]|0;
  $382 = $381&65535;
  $383 = $380 & $382;
  $384 = $383&65535;
  $385 = $384&65535;
  $386 = HEAP16[$uiDestAShift>>1]|0;
  $387 = $386&65535;
  $388 = $385 << $387;
  $389 = $378 | $388;
  $390 = $389&65535;
  $Dest = $390;
  $i = 0;
  while(1) {
   $391 = $i;
   $392 = $5;
   $393 = (($392) + 4|0);
   $394 = HEAP32[$393>>2]|0;
   $395 = ($391>>>0)<($394>>>0);
   if (!($395)) {
    break;
   }
   $396 = $Dest;
   $397 = $396&65535;
   $398 = $i;
   $399 = $398<<3;
   $400 = $397 >> $399;
   $401 = $400 & 255;
   $402 = $401&255;
   $403 = $i;
   $404 = $1;
   $405 = (($404) + ($403)|0);
   HEAP8[$405>>0] = $402;
   $406 = $i;
   $407 = (($406) + 1)|0;
   $i = $407;
  }
  $408 = $4;
  $409 = (($408) + 4|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = $0;
  $412 = (($411) + ($410)|0);
  $0 = $412;
  $413 = $5;
  $414 = (($413) + 4|0);
  $415 = HEAP32[$414>>2]|0;
  $416 = $1;
  $417 = (($416) + ($415)|0);
  $1 = $417;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIjjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0;
 var $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 102|0;
 $uiSourceGShift = sp + 100|0;
 $uiSourceBShift = sp + 98|0;
 $uiSourceAShift = sp + 96|0;
 $uiSourceRMask = sp + 94|0;
 $uiSourceGMask = sp + 92|0;
 $uiSourceBMask = sp + 90|0;
 $uiSourceAMask = sp + 88|0;
 $uiDestRShift = sp + 86|0;
 $uiDestGShift = sp + 84|0;
 $uiDestBShift = sp + 82|0;
 $uiDestAShift = sp + 80|0;
 $uiDestRMask = sp + 78|0;
 $uiDestGMask = sp + 76|0;
 $uiDestBMask = sp + 74|0;
 $uiDestAMask = sp + 72|0;
 $DR = sp + 62|0;
 $DG = sp + 60|0;
 $DB = sp + 58|0;
 $DA = sp + 56|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86<<3;
   $88 = $85 << $87;
   $89 = $Source;
   $90 = $89 | $88;
   $Source = $90;
   $91 = $i;
   $92 = (($91) + 1)|0;
   $i = $92;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $93 = HEAP16[$uiSourceRMask>>1]|0;
  $94 = ($93<<16>>16)!=(0);
  if ($94) {
   $95 = $Source;
   $96 = HEAP16[$uiSourceRShift>>1]|0;
   $97 = $96&65535;
   $98 = $95 >>> $97;
   $99 = $98&65535;
   $100 = $99&65535;
   $101 = HEAP16[$uiSourceRMask>>1]|0;
   $102 = $101&65535;
   $103 = $100 & $102;
   $104 = $103&65535;
   $SR = $104;
  }
  $105 = HEAP16[$uiSourceGMask>>1]|0;
  $106 = ($105<<16>>16)!=(0);
  if ($106) {
   $107 = $Source;
   $108 = HEAP16[$uiSourceGShift>>1]|0;
   $109 = $108&65535;
   $110 = $107 >>> $109;
   $111 = $110&65535;
   $112 = $111&65535;
   $113 = HEAP16[$uiSourceGMask>>1]|0;
   $114 = $113&65535;
   $115 = $112 & $114;
   $116 = $115&65535;
   $SG = $116;
  }
  $117 = HEAP16[$uiSourceBMask>>1]|0;
  $118 = ($117<<16>>16)!=(0);
  if ($118) {
   $119 = $Source;
   $120 = HEAP16[$uiSourceBShift>>1]|0;
   $121 = $120&65535;
   $122 = $119 >>> $121;
   $123 = $122&65535;
   $124 = $123&65535;
   $125 = HEAP16[$uiSourceBMask>>1]|0;
   $126 = $125&65535;
   $127 = $124 & $126;
   $128 = $127&65535;
   $SB = $128;
  }
  $129 = HEAP16[$uiSourceAMask>>1]|0;
  $130 = ($129<<16>>16)!=(0);
  if ($130) {
   $131 = $Source;
   $132 = HEAP16[$uiSourceAShift>>1]|0;
   $133 = $132&65535;
   $134 = $131 >>> $133;
   $135 = $134&65535;
   $136 = $135&65535;
   $137 = HEAP16[$uiSourceAMask>>1]|0;
   $138 = $137&65535;
   $139 = $136 & $138;
   $140 = $139&65535;
   $SA = $140;
  }
  $141 = $4;
  $142 = (($141) + 48|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($143|0)!=(0|0);
  if ($144) {
   label = 23;
  } else {
   $145 = $5;
   $146 = (($145) + 44|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)!=(0|0);
   if ($148) {
    label = 23;
   } else {
    $191 = HEAP16[$uiSourceRMask>>1]|0;
    $192 = ($191<<16>>16)!=(0);
    if ($192) {
     $193 = HEAP16[$uiDestRMask>>1]|0;
     $194 = ($193<<16>>16)!=(0);
     if ($194) {
      $195 = $5;
      $196 = (($195) + 8|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $4;
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($197>>>0)<($200>>>0);
      if ($201) {
       $202 = $SR;
       $203 = $4;
       $204 = (($203) + 8|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205&65535;
       $207 = $5;
       $208 = (($207) + 8|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = $209&65535;
       $211 = (__Z6ShrinkItET_S0_S0_S0_($202,$206,$210)|0);
       HEAP16[$DR>>1] = $211;
      } else {
       $212 = $5;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ($214>>>0)>($217>>>0);
       if ($218) {
        $219 = $SR;
        $220 = $4;
        $221 = (($220) + 8|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $222&65535;
        $224 = $5;
        $225 = (($224) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = $226&65535;
        $228 = (__Z6ExpandItET_S0_S0_S0_($219,$223,$227)|0);
        HEAP16[$DR>>1] = $228;
       } else {
        $229 = $SR;
        HEAP16[$DR>>1] = $229;
       }
      }
     }
    }
    $230 = HEAP16[$uiSourceGMask>>1]|0;
    $231 = ($230<<16>>16)!=(0);
    if ($231) {
     $232 = HEAP16[$uiDestGMask>>1]|0;
     $233 = ($232<<16>>16)!=(0);
     if ($233) {
      $234 = $5;
      $235 = (($234) + 12|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = $4;
      $238 = (($237) + 12|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($236>>>0)<($239>>>0);
      if ($240) {
       $241 = $SG;
       $242 = $4;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $244&65535;
       $246 = $5;
       $247 = (($246) + 12|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = $248&65535;
       $250 = (__Z6ShrinkItET_S0_S0_S0_($241,$245,$249)|0);
       HEAP16[$DG>>1] = $250;
      } else {
       $251 = $5;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = ($253>>>0)>($256>>>0);
       if ($257) {
        $258 = $SG;
        $259 = $4;
        $260 = (($259) + 12|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = $261&65535;
        $263 = $5;
        $264 = (($263) + 12|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = $265&65535;
        $267 = (__Z6ExpandItET_S0_S0_S0_($258,$262,$266)|0);
        HEAP16[$DG>>1] = $267;
       } else {
        $268 = $SG;
        HEAP16[$DG>>1] = $268;
       }
      }
     }
    }
    $269 = HEAP16[$uiSourceBMask>>1]|0;
    $270 = ($269<<16>>16)!=(0);
    if ($270) {
     $271 = HEAP16[$uiDestBMask>>1]|0;
     $272 = ($271<<16>>16)!=(0);
     if ($272) {
      $273 = $5;
      $274 = (($273) + 16|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = $4;
      $277 = (($276) + 16|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($275>>>0)<($278>>>0);
      if ($279) {
       $280 = $SB;
       $281 = $4;
       $282 = (($281) + 16|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = $283&65535;
       $285 = $5;
       $286 = (($285) + 16|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = $287&65535;
       $289 = (__Z6ShrinkItET_S0_S0_S0_($280,$284,$288)|0);
       HEAP16[$DB>>1] = $289;
      } else {
       $290 = $5;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = ($292>>>0)>($295>>>0);
       if ($296) {
        $297 = $SB;
        $298 = $4;
        $299 = (($298) + 16|0);
        $300 = HEAP32[$299>>2]|0;
        $301 = $300&65535;
        $302 = $5;
        $303 = (($302) + 16|0);
        $304 = HEAP32[$303>>2]|0;
        $305 = $304&65535;
        $306 = (__Z6ExpandItET_S0_S0_S0_($297,$301,$305)|0);
        HEAP16[$DB>>1] = $306;
       } else {
        $307 = $SB;
        HEAP16[$DB>>1] = $307;
       }
      }
     }
    }
    $308 = HEAP16[$uiSourceAMask>>1]|0;
    $309 = ($308<<16>>16)!=(0);
    if ($309) {
     $310 = HEAP16[$uiDestAMask>>1]|0;
     $311 = ($310<<16>>16)!=(0);
     if ($311) {
      $312 = $5;
      $313 = (($312) + 20|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = $4;
      $316 = (($315) + 20|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ($314>>>0)<($317>>>0);
      if ($318) {
       $319 = $SA;
       $320 = $4;
       $321 = (($320) + 20|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = $322&65535;
       $324 = $5;
       $325 = (($324) + 20|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = $326&65535;
       $328 = (__Z6ShrinkItET_S0_S0_S0_($319,$323,$327)|0);
       HEAP16[$DA>>1] = $328;
      } else {
       $329 = $5;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = ($331>>>0)>($334>>>0);
       if ($335) {
        $336 = $SA;
        $337 = $4;
        $338 = (($337) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $339&65535;
        $341 = $5;
        $342 = (($341) + 20|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = $343&65535;
        $345 = (__Z6ExpandItET_S0_S0_S0_($336,$340,$344)|0);
        HEAP16[$DA>>1] = $345;
       } else {
        $346 = $SA;
        HEAP16[$DA>>1] = $346;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $149 = $4;
   $150 = (($149) + 48|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $5;
   $153 = (($152) + 44|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $SR;
   $156 = $SG;
   $157 = $SB;
   $158 = $SA;
   $159 = $4;
   $160 = (($159) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161&65535;
   $163 = $4;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165&65535;
   $167 = $4;
   $168 = (($167) + 16|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169&65535;
   $171 = $4;
   $172 = (($171) + 20|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $5;
   $176 = (($175) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $5;
   $180 = (($179) + 12|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $5;
   $184 = (($183) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 20|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($151,$154,$155,$156,$157,$158,$162,$166,$170,$174,$DR,$DG,$DB,$DA,$178,$182,$186,$190);
  }
  $347 = HEAP16[$DR>>1]|0;
  $348 = $347&65535;
  $349 = HEAP16[$uiDestRMask>>1]|0;
  $350 = $349&65535;
  $351 = $348 & $350;
  $352 = HEAP16[$uiDestRShift>>1]|0;
  $353 = $352&65535;
  $354 = $351 << $353;
  $355 = HEAP16[$DG>>1]|0;
  $356 = $355&65535;
  $357 = HEAP16[$uiDestGMask>>1]|0;
  $358 = $357&65535;
  $359 = $356 & $358;
  $360 = HEAP16[$uiDestGShift>>1]|0;
  $361 = $360&65535;
  $362 = $359 << $361;
  $363 = $354 | $362;
  $364 = HEAP16[$DB>>1]|0;
  $365 = $364&65535;
  $366 = HEAP16[$uiDestBMask>>1]|0;
  $367 = $366&65535;
  $368 = $365 & $367;
  $369 = HEAP16[$uiDestBShift>>1]|0;
  $370 = $369&65535;
  $371 = $368 << $370;
  $372 = $363 | $371;
  $373 = HEAP16[$DA>>1]|0;
  $374 = $373&65535;
  $375 = HEAP16[$uiDestAMask>>1]|0;
  $376 = $375&65535;
  $377 = $374 & $376;
  $378 = HEAP16[$uiDestAShift>>1]|0;
  $379 = $378&65535;
  $380 = $377 << $379;
  $381 = $372 | $380;
  $Dest = $381;
  $i = 0;
  while(1) {
   $382 = $i;
   $383 = $5;
   $384 = (($383) + 4|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = ($382>>>0)<($385>>>0);
   if (!($386)) {
    break;
   }
   $387 = $Dest;
   $388 = $i;
   $389 = $388<<3;
   $390 = $387 >>> $389;
   $391 = $390 & 255;
   $392 = $391&255;
   $393 = $i;
   $394 = $1;
   $395 = (($394) + ($393)|0);
   HEAP8[$395>>0] = $392;
   $396 = $i;
   $397 = (($396) + 1)|0;
   $i = $397;
  }
  $398 = $4;
  $399 = (($398) + 4|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = $0;
  $402 = (($401) + ($400)|0);
  $0 = $402;
  $403 = $5;
  $404 = (($403) + 4|0);
  $405 = HEAP32[$404>>2]|0;
  $406 = $1;
  $407 = (($406) + ($405)|0);
  $1 = $407;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIjyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0;
 var $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0;
 var $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 106|0;
 $uiSourceGShift = sp + 104|0;
 $uiSourceBShift = sp + 102|0;
 $uiSourceAShift = sp + 100|0;
 $uiSourceRMask = sp + 98|0;
 $uiSourceGMask = sp + 96|0;
 $uiSourceBMask = sp + 94|0;
 $uiSourceAMask = sp + 92|0;
 $uiDestRShift = sp + 90|0;
 $uiDestGShift = sp + 88|0;
 $uiDestBShift = sp + 86|0;
 $uiDestAShift = sp + 84|0;
 $uiDestRMask = sp + 82|0;
 $uiDestGMask = sp + 80|0;
 $uiDestBMask = sp + 78|0;
 $uiDestAMask = sp + 76|0;
 $DR = sp + 66|0;
 $DG = sp + 64|0;
 $DB = sp + 62|0;
 $DA = sp + 60|0;
 $Dest = sp;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $Source = 0;
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = $4;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $i;
   $87 = $86<<3;
   $88 = $85 << $87;
   $89 = $Source;
   $90 = $89 | $88;
   $Source = $90;
   $91 = $i;
   $92 = (($91) + 1)|0;
   $i = $92;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $93 = HEAP16[$uiSourceRMask>>1]|0;
  $94 = ($93<<16>>16)!=(0);
  if ($94) {
   $95 = $Source;
   $96 = HEAP16[$uiSourceRShift>>1]|0;
   $97 = $96&65535;
   $98 = $95 >>> $97;
   $99 = $98&65535;
   $100 = $99&65535;
   $101 = HEAP16[$uiSourceRMask>>1]|0;
   $102 = $101&65535;
   $103 = $100 & $102;
   $104 = $103&65535;
   $SR = $104;
  }
  $105 = HEAP16[$uiSourceGMask>>1]|0;
  $106 = ($105<<16>>16)!=(0);
  if ($106) {
   $107 = $Source;
   $108 = HEAP16[$uiSourceGShift>>1]|0;
   $109 = $108&65535;
   $110 = $107 >>> $109;
   $111 = $110&65535;
   $112 = $111&65535;
   $113 = HEAP16[$uiSourceGMask>>1]|0;
   $114 = $113&65535;
   $115 = $112 & $114;
   $116 = $115&65535;
   $SG = $116;
  }
  $117 = HEAP16[$uiSourceBMask>>1]|0;
  $118 = ($117<<16>>16)!=(0);
  if ($118) {
   $119 = $Source;
   $120 = HEAP16[$uiSourceBShift>>1]|0;
   $121 = $120&65535;
   $122 = $119 >>> $121;
   $123 = $122&65535;
   $124 = $123&65535;
   $125 = HEAP16[$uiSourceBMask>>1]|0;
   $126 = $125&65535;
   $127 = $124 & $126;
   $128 = $127&65535;
   $SB = $128;
  }
  $129 = HEAP16[$uiSourceAMask>>1]|0;
  $130 = ($129<<16>>16)!=(0);
  if ($130) {
   $131 = $Source;
   $132 = HEAP16[$uiSourceAShift>>1]|0;
   $133 = $132&65535;
   $134 = $131 >>> $133;
   $135 = $134&65535;
   $136 = $135&65535;
   $137 = HEAP16[$uiSourceAMask>>1]|0;
   $138 = $137&65535;
   $139 = $136 & $138;
   $140 = $139&65535;
   $SA = $140;
  }
  $141 = $4;
  $142 = (($141) + 48|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($143|0)!=(0|0);
  if ($144) {
   label = 23;
  } else {
   $145 = $5;
   $146 = (($145) + 44|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)!=(0|0);
   if ($148) {
    label = 23;
   } else {
    $191 = HEAP16[$uiSourceRMask>>1]|0;
    $192 = ($191<<16>>16)!=(0);
    if ($192) {
     $193 = HEAP16[$uiDestRMask>>1]|0;
     $194 = ($193<<16>>16)!=(0);
     if ($194) {
      $195 = $5;
      $196 = (($195) + 8|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $4;
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($197>>>0)<($200>>>0);
      if ($201) {
       $202 = $SR;
       $203 = $4;
       $204 = (($203) + 8|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205&65535;
       $207 = $5;
       $208 = (($207) + 8|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = $209&65535;
       $211 = (__Z6ShrinkItET_S0_S0_S0_($202,$206,$210)|0);
       HEAP16[$DR>>1] = $211;
      } else {
       $212 = $5;
       $213 = (($212) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $4;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ($214>>>0)>($217>>>0);
       if ($218) {
        $219 = $SR;
        $220 = $4;
        $221 = (($220) + 8|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $222&65535;
        $224 = $5;
        $225 = (($224) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = $226&65535;
        $228 = (__Z6ExpandItET_S0_S0_S0_($219,$223,$227)|0);
        HEAP16[$DR>>1] = $228;
       } else {
        $229 = $SR;
        HEAP16[$DR>>1] = $229;
       }
      }
     }
    }
    $230 = HEAP16[$uiSourceGMask>>1]|0;
    $231 = ($230<<16>>16)!=(0);
    if ($231) {
     $232 = HEAP16[$uiDestGMask>>1]|0;
     $233 = ($232<<16>>16)!=(0);
     if ($233) {
      $234 = $5;
      $235 = (($234) + 12|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = $4;
      $238 = (($237) + 12|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($236>>>0)<($239>>>0);
      if ($240) {
       $241 = $SG;
       $242 = $4;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $244&65535;
       $246 = $5;
       $247 = (($246) + 12|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = $248&65535;
       $250 = (__Z6ShrinkItET_S0_S0_S0_($241,$245,$249)|0);
       HEAP16[$DG>>1] = $250;
      } else {
       $251 = $5;
       $252 = (($251) + 12|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = $4;
       $255 = (($254) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = ($253>>>0)>($256>>>0);
       if ($257) {
        $258 = $SG;
        $259 = $4;
        $260 = (($259) + 12|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = $261&65535;
        $263 = $5;
        $264 = (($263) + 12|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = $265&65535;
        $267 = (__Z6ExpandItET_S0_S0_S0_($258,$262,$266)|0);
        HEAP16[$DG>>1] = $267;
       } else {
        $268 = $SG;
        HEAP16[$DG>>1] = $268;
       }
      }
     }
    }
    $269 = HEAP16[$uiSourceBMask>>1]|0;
    $270 = ($269<<16>>16)!=(0);
    if ($270) {
     $271 = HEAP16[$uiDestBMask>>1]|0;
     $272 = ($271<<16>>16)!=(0);
     if ($272) {
      $273 = $5;
      $274 = (($273) + 16|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = $4;
      $277 = (($276) + 16|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($275>>>0)<($278>>>0);
      if ($279) {
       $280 = $SB;
       $281 = $4;
       $282 = (($281) + 16|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = $283&65535;
       $285 = $5;
       $286 = (($285) + 16|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = $287&65535;
       $289 = (__Z6ShrinkItET_S0_S0_S0_($280,$284,$288)|0);
       HEAP16[$DB>>1] = $289;
      } else {
       $290 = $5;
       $291 = (($290) + 16|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $4;
       $294 = (($293) + 16|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = ($292>>>0)>($295>>>0);
       if ($296) {
        $297 = $SB;
        $298 = $4;
        $299 = (($298) + 16|0);
        $300 = HEAP32[$299>>2]|0;
        $301 = $300&65535;
        $302 = $5;
        $303 = (($302) + 16|0);
        $304 = HEAP32[$303>>2]|0;
        $305 = $304&65535;
        $306 = (__Z6ExpandItET_S0_S0_S0_($297,$301,$305)|0);
        HEAP16[$DB>>1] = $306;
       } else {
        $307 = $SB;
        HEAP16[$DB>>1] = $307;
       }
      }
     }
    }
    $308 = HEAP16[$uiSourceAMask>>1]|0;
    $309 = ($308<<16>>16)!=(0);
    if ($309) {
     $310 = HEAP16[$uiDestAMask>>1]|0;
     $311 = ($310<<16>>16)!=(0);
     if ($311) {
      $312 = $5;
      $313 = (($312) + 20|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = $4;
      $316 = (($315) + 20|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ($314>>>0)<($317>>>0);
      if ($318) {
       $319 = $SA;
       $320 = $4;
       $321 = (($320) + 20|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = $322&65535;
       $324 = $5;
       $325 = (($324) + 20|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = $326&65535;
       $328 = (__Z6ShrinkItET_S0_S0_S0_($319,$323,$327)|0);
       HEAP16[$DA>>1] = $328;
      } else {
       $329 = $5;
       $330 = (($329) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $4;
       $333 = (($332) + 20|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = ($331>>>0)>($334>>>0);
       if ($335) {
        $336 = $SA;
        $337 = $4;
        $338 = (($337) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $339&65535;
        $341 = $5;
        $342 = (($341) + 20|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = $343&65535;
        $345 = (__Z6ExpandItET_S0_S0_S0_($336,$340,$344)|0);
        HEAP16[$DA>>1] = $345;
       } else {
        $346 = $SA;
        HEAP16[$DA>>1] = $346;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $149 = $4;
   $150 = (($149) + 48|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $5;
   $153 = (($152) + 44|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $SR;
   $156 = $SG;
   $157 = $SB;
   $158 = $SA;
   $159 = $4;
   $160 = (($159) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161&65535;
   $163 = $4;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165&65535;
   $167 = $4;
   $168 = (($167) + 16|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169&65535;
   $171 = $4;
   $172 = (($171) + 20|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173&65535;
   $175 = $5;
   $176 = (($175) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&65535;
   $179 = $5;
   $180 = (($179) + 12|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181&65535;
   $183 = $5;
   $184 = (($183) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185&65535;
   $187 = $5;
   $188 = (($187) + 20|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($151,$154,$155,$156,$157,$158,$162,$166,$170,$174,$DR,$DG,$DB,$DA,$178,$182,$186,$190);
  }
  $347 = HEAP16[$DR>>1]|0;
  $348 = $347&65535;
  $349 = HEAP16[$uiDestRMask>>1]|0;
  $350 = $349&65535;
  $351 = $348 & $350;
  $352 = ($351|0)<(0);
  $353 = $352 << 31 >> 31;
  $354 = HEAP16[$uiDestRShift>>1]|0;
  $355 = $354&65535;
  $356 = (_bitshift64Shl(($351|0),($353|0),($355|0))|0);
  $357 = tempRet0;
  $358 = HEAP16[$DG>>1]|0;
  $359 = $358&65535;
  $360 = HEAP16[$uiDestGMask>>1]|0;
  $361 = $360&65535;
  $362 = $359 & $361;
  $363 = ($362|0)<(0);
  $364 = $363 << 31 >> 31;
  $365 = HEAP16[$uiDestGShift>>1]|0;
  $366 = $365&65535;
  $367 = (_bitshift64Shl(($362|0),($364|0),($366|0))|0);
  $368 = tempRet0;
  $369 = $356 | $367;
  $370 = $357 | $368;
  $371 = HEAP16[$DB>>1]|0;
  $372 = $371&65535;
  $373 = HEAP16[$uiDestBMask>>1]|0;
  $374 = $373&65535;
  $375 = $372 & $374;
  $376 = ($375|0)<(0);
  $377 = $376 << 31 >> 31;
  $378 = HEAP16[$uiDestBShift>>1]|0;
  $379 = $378&65535;
  $380 = (_bitshift64Shl(($375|0),($377|0),($379|0))|0);
  $381 = tempRet0;
  $382 = $369 | $380;
  $383 = $370 | $381;
  $384 = HEAP16[$DA>>1]|0;
  $385 = $384&65535;
  $386 = HEAP16[$uiDestAMask>>1]|0;
  $387 = $386&65535;
  $388 = $385 & $387;
  $389 = ($388|0)<(0);
  $390 = $389 << 31 >> 31;
  $391 = HEAP16[$uiDestAShift>>1]|0;
  $392 = $391&65535;
  $393 = (_bitshift64Shl(($388|0),($390|0),($392|0))|0);
  $394 = tempRet0;
  $395 = $382 | $393;
  $396 = $383 | $394;
  $397 = $Dest;
  $398 = $397;
  HEAP32[$398>>2] = $395;
  $399 = (($397) + 4)|0;
  $400 = $399;
  HEAP32[$400>>2] = $396;
  $i = 0;
  while(1) {
   $401 = $i;
   $402 = $5;
   $403 = (($402) + 4|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = ($401>>>0)<($404>>>0);
   if (!($405)) {
    break;
   }
   $406 = $Dest;
   $407 = $406;
   $408 = HEAP32[$407>>2]|0;
   $409 = (($406) + 4)|0;
   $410 = $409;
   $411 = HEAP32[$410>>2]|0;
   $412 = $i;
   $413 = $412<<3;
   $414 = (_bitshift64Lshr(($408|0),($411|0),($413|0))|0);
   $415 = tempRet0;
   $416 = $414 & 255;
   $417 = $416&255;
   $418 = $i;
   $419 = $1;
   $420 = (($419) + ($418)|0);
   HEAP8[$420>>0] = $417;
   $421 = $i;
   $422 = (($421) + 1)|0;
   $i = $422;
  }
  $423 = $4;
  $424 = (($423) + 4|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = $0;
  $427 = (($426) + ($425)|0);
  $0 = $427;
  $428 = $5;
  $429 = (($428) + 4|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = $1;
  $432 = (($431) + ($430)|0);
  $1 = $432;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIyhEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0;
 var $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 102|0;
 $uiSourceGShift = sp + 100|0;
 $uiSourceBShift = sp + 98|0;
 $uiSourceAShift = sp + 96|0;
 $uiSourceRMask = sp + 94|0;
 $uiSourceGMask = sp + 92|0;
 $uiSourceBMask = sp + 90|0;
 $uiSourceAMask = sp + 88|0;
 $uiDestRShift = sp + 86|0;
 $uiDestGShift = sp + 84|0;
 $uiDestBShift = sp + 82|0;
 $uiDestAShift = sp + 80|0;
 $uiDestRMask = sp + 78|0;
 $uiDestGMask = sp + 76|0;
 $uiDestBMask = sp + 74|0;
 $uiDestAMask = sp + 72|0;
 $Source = sp;
 $DR = sp + 62|0;
 $DG = sp + 60|0;
 $DB = sp + 58|0;
 $DA = sp + 56|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $76 = $Source;
  $77 = $76;
  HEAP32[$77>>2] = 0;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = 0;
  $i = 0;
  while(1) {
   $80 = $i;
   $81 = $4;
   $82 = (($81) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($80>>>0)<($83>>>0);
   if (!($84)) {
    break;
   }
   $85 = $i;
   $86 = $0;
   $87 = (($86) + ($85)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $i;
   $91 = (___muldi3(($90|0),0,8,0)|0);
   $92 = tempRet0;
   $93 = (_bitshift64Shl(($89|0),0,($91|0))|0);
   $94 = tempRet0;
   $95 = $Source;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($95) + 4)|0;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = $97 | $93;
   $102 = $100 | $94;
   $103 = $Source;
   $104 = $103;
   HEAP32[$104>>2] = $101;
   $105 = (($103) + 4)|0;
   $106 = $105;
   HEAP32[$106>>2] = $102;
   $107 = $i;
   $108 = (($107) + 1)|0;
   $i = $108;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $109 = HEAP16[$uiSourceRMask>>1]|0;
  $110 = ($109<<16>>16)!=(0);
  if ($110) {
   $111 = $Source;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = HEAP16[$uiSourceRShift>>1]|0;
   $118 = $117&65535;
   $119 = (_bitshift64Lshr(($113|0),($116|0),($118|0))|0);
   $120 = tempRet0;
   $121 = $119&65535;
   $122 = $121&65535;
   $123 = HEAP16[$uiSourceRMask>>1]|0;
   $124 = $123&65535;
   $125 = $122 & $124;
   $126 = $125&65535;
   $SR = $126;
  }
  $127 = HEAP16[$uiSourceGMask>>1]|0;
  $128 = ($127<<16>>16)!=(0);
  if ($128) {
   $129 = $Source;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = HEAP16[$uiSourceGShift>>1]|0;
   $136 = $135&65535;
   $137 = (_bitshift64Lshr(($131|0),($134|0),($136|0))|0);
   $138 = tempRet0;
   $139 = $137&65535;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceGMask>>1]|0;
   $142 = $141&65535;
   $143 = $140 & $142;
   $144 = $143&65535;
   $SG = $144;
  }
  $145 = HEAP16[$uiSourceBMask>>1]|0;
  $146 = ($145<<16>>16)!=(0);
  if ($146) {
   $147 = $Source;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP16[$uiSourceBShift>>1]|0;
   $154 = $153&65535;
   $155 = (_bitshift64Lshr(($149|0),($152|0),($154|0))|0);
   $156 = tempRet0;
   $157 = $155&65535;
   $158 = $157&65535;
   $159 = HEAP16[$uiSourceBMask>>1]|0;
   $160 = $159&65535;
   $161 = $158 & $160;
   $162 = $161&65535;
   $SB = $162;
  }
  $163 = HEAP16[$uiSourceAMask>>1]|0;
  $164 = ($163<<16>>16)!=(0);
  if ($164) {
   $165 = $Source;
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($165) + 4)|0;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = HEAP16[$uiSourceAShift>>1]|0;
   $172 = $171&65535;
   $173 = (_bitshift64Lshr(($167|0),($170|0),($172|0))|0);
   $174 = tempRet0;
   $175 = $173&65535;
   $176 = $175&65535;
   $177 = HEAP16[$uiSourceAMask>>1]|0;
   $178 = $177&65535;
   $179 = $176 & $178;
   $180 = $179&65535;
   $SA = $180;
  }
  $181 = $4;
  $182 = (($181) + 48|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)!=(0|0);
  if ($184) {
   label = 23;
  } else {
   $185 = $5;
   $186 = (($185) + 44|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    label = 23;
   } else {
    $231 = HEAP16[$uiSourceRMask>>1]|0;
    $232 = ($231<<16>>16)!=(0);
    if ($232) {
     $233 = HEAP16[$uiDestRMask>>1]|0;
     $234 = ($233<<16>>16)!=(0);
     if ($234) {
      $235 = $5;
      $236 = (($235) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = $4;
      $239 = (($238) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($237>>>0)<($240>>>0);
      if ($241) {
       $242 = $SR;
       $243 = $4;
       $244 = (($243) + 8|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = $245&65535;
       $247 = $5;
       $248 = (($247) + 8|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = $249&65535;
       $251 = (__Z6ShrinkItET_S0_S0_S0_($242,$246,$250)|0);
       HEAP16[$DR>>1] = $251;
      } else {
       $252 = $5;
       $253 = (($252) + 8|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = $4;
       $256 = (($255) + 8|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = ($254>>>0)>($257>>>0);
       if ($258) {
        $259 = $SR;
        $260 = $4;
        $261 = (($260) + 8|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = $262&65535;
        $264 = $5;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $266&65535;
        $268 = (__Z6ExpandItET_S0_S0_S0_($259,$263,$267)|0);
        HEAP16[$DR>>1] = $268;
       } else {
        $269 = $SR;
        HEAP16[$DR>>1] = $269;
       }
      }
     }
    }
    $270 = HEAP16[$uiSourceGMask>>1]|0;
    $271 = ($270<<16>>16)!=(0);
    if ($271) {
     $272 = HEAP16[$uiDestGMask>>1]|0;
     $273 = ($272<<16>>16)!=(0);
     if ($273) {
      $274 = $5;
      $275 = (($274) + 12|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $4;
      $278 = (($277) + 12|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = ($276>>>0)<($279>>>0);
      if ($280) {
       $281 = $SG;
       $282 = $4;
       $283 = (($282) + 12|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284&65535;
       $286 = $5;
       $287 = (($286) + 12|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = $288&65535;
       $290 = (__Z6ShrinkItET_S0_S0_S0_($281,$285,$289)|0);
       HEAP16[$DG>>1] = $290;
      } else {
       $291 = $5;
       $292 = (($291) + 12|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = $4;
       $295 = (($294) + 12|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = ($293>>>0)>($296>>>0);
       if ($297) {
        $298 = $SG;
        $299 = $4;
        $300 = (($299) + 12|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = $301&65535;
        $303 = $5;
        $304 = (($303) + 12|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = $305&65535;
        $307 = (__Z6ExpandItET_S0_S0_S0_($298,$302,$306)|0);
        HEAP16[$DG>>1] = $307;
       } else {
        $308 = $SG;
        HEAP16[$DG>>1] = $308;
       }
      }
     }
    }
    $309 = HEAP16[$uiSourceBMask>>1]|0;
    $310 = ($309<<16>>16)!=(0);
    if ($310) {
     $311 = HEAP16[$uiDestBMask>>1]|0;
     $312 = ($311<<16>>16)!=(0);
     if ($312) {
      $313 = $5;
      $314 = (($313) + 16|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = $4;
      $317 = (($316) + 16|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ($315>>>0)<($318>>>0);
      if ($319) {
       $320 = $SB;
       $321 = $4;
       $322 = (($321) + 16|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = $323&65535;
       $325 = $5;
       $326 = (($325) + 16|0);
       $327 = HEAP32[$326>>2]|0;
       $328 = $327&65535;
       $329 = (__Z6ShrinkItET_S0_S0_S0_($320,$324,$328)|0);
       HEAP16[$DB>>1] = $329;
      } else {
       $330 = $5;
       $331 = (($330) + 16|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $4;
       $334 = (($333) + 16|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = ($332>>>0)>($335>>>0);
       if ($336) {
        $337 = $SB;
        $338 = $4;
        $339 = (($338) + 16|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = $340&65535;
        $342 = $5;
        $343 = (($342) + 16|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = $344&65535;
        $346 = (__Z6ExpandItET_S0_S0_S0_($337,$341,$345)|0);
        HEAP16[$DB>>1] = $346;
       } else {
        $347 = $SB;
        HEAP16[$DB>>1] = $347;
       }
      }
     }
    }
    $348 = HEAP16[$uiSourceAMask>>1]|0;
    $349 = ($348<<16>>16)!=(0);
    if ($349) {
     $350 = HEAP16[$uiDestAMask>>1]|0;
     $351 = ($350<<16>>16)!=(0);
     if ($351) {
      $352 = $5;
      $353 = (($352) + 20|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = $4;
      $356 = (($355) + 20|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($354>>>0)<($357>>>0);
      if ($358) {
       $359 = $SA;
       $360 = $4;
       $361 = (($360) + 20|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = $362&65535;
       $364 = $5;
       $365 = (($364) + 20|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $366&65535;
       $368 = (__Z6ShrinkItET_S0_S0_S0_($359,$363,$367)|0);
       HEAP16[$DA>>1] = $368;
      } else {
       $369 = $5;
       $370 = (($369) + 20|0);
       $371 = HEAP32[$370>>2]|0;
       $372 = $4;
       $373 = (($372) + 20|0);
       $374 = HEAP32[$373>>2]|0;
       $375 = ($371>>>0)>($374>>>0);
       if ($375) {
        $376 = $SA;
        $377 = $4;
        $378 = (($377) + 20|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = $379&65535;
        $381 = $5;
        $382 = (($381) + 20|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = $383&65535;
        $385 = (__Z6ExpandItET_S0_S0_S0_($376,$380,$384)|0);
        HEAP16[$DA>>1] = $385;
       } else {
        $386 = $SA;
        HEAP16[$DA>>1] = $386;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $189 = $4;
   $190 = (($189) + 48|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $5;
   $193 = (($192) + 44|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $SR;
   $196 = $SG;
   $197 = $SB;
   $198 = $SA;
   $199 = $4;
   $200 = (($199) + 8|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   $203 = $4;
   $204 = (($203) + 12|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $205&65535;
   $207 = $4;
   $208 = (($207) + 16|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209&65535;
   $211 = $4;
   $212 = (($211) + 20|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $213&65535;
   $215 = $5;
   $216 = (($215) + 8|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $217&65535;
   $219 = $5;
   $220 = (($219) + 12|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $221&65535;
   $223 = $5;
   $224 = (($223) + 16|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $225&65535;
   $227 = $5;
   $228 = (($227) + 20|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $229&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($191,$194,$195,$196,$197,$198,$202,$206,$210,$214,$DR,$DG,$DB,$DA,$218,$222,$226,$230);
  }
  $387 = HEAP16[$DR>>1]|0;
  $388 = $387&65535;
  $389 = HEAP16[$uiDestRMask>>1]|0;
  $390 = $389&65535;
  $391 = $388 & $390;
  $392 = $391&255;
  $393 = $392&255;
  $394 = HEAP16[$uiDestRShift>>1]|0;
  $395 = $394&255;
  $396 = $395&255;
  $397 = $393 << $396;
  $398 = HEAP16[$DG>>1]|0;
  $399 = $398&65535;
  $400 = HEAP16[$uiDestGMask>>1]|0;
  $401 = $400&65535;
  $402 = $399 & $401;
  $403 = $402&255;
  $404 = $403&255;
  $405 = HEAP16[$uiDestGShift>>1]|0;
  $406 = $405&255;
  $407 = $406&255;
  $408 = $404 << $407;
  $409 = $397 | $408;
  $410 = HEAP16[$DB>>1]|0;
  $411 = $410&65535;
  $412 = HEAP16[$uiDestBMask>>1]|0;
  $413 = $412&65535;
  $414 = $411 & $413;
  $415 = $414&255;
  $416 = $415&255;
  $417 = HEAP16[$uiDestBShift>>1]|0;
  $418 = $417&255;
  $419 = $418&255;
  $420 = $416 << $419;
  $421 = $409 | $420;
  $422 = HEAP16[$DA>>1]|0;
  $423 = $422&65535;
  $424 = HEAP16[$uiDestAMask>>1]|0;
  $425 = $424&65535;
  $426 = $423 & $425;
  $427 = $426&255;
  $428 = $427&255;
  $429 = HEAP16[$uiDestAShift>>1]|0;
  $430 = $429&255;
  $431 = $430&255;
  $432 = $428 << $431;
  $433 = $421 | $432;
  $434 = $433&255;
  $Dest = $434;
  $i = 0;
  while(1) {
   $435 = $i;
   $436 = $5;
   $437 = (($436) + 4|0);
   $438 = HEAP32[$437>>2]|0;
   $439 = ($435>>>0)<($438>>>0);
   if (!($439)) {
    break;
   }
   $440 = $Dest;
   $441 = $440&255;
   $442 = $i;
   $443 = (___muldi3(($442|0),0,8,0)|0);
   $444 = tempRet0;
   $445 = $441 >> $443;
   $446 = $445 & 255;
   $447 = $446&255;
   $448 = $i;
   $449 = $1;
   $450 = (($449) + ($448)|0);
   HEAP8[$450>>0] = $447;
   $451 = $i;
   $452 = (($451) + 1)|0;
   $i = $452;
  }
  $453 = $4;
  $454 = (($453) + 4|0);
  $455 = HEAP32[$454>>2]|0;
  $456 = $0;
  $457 = (($456) + ($455)|0);
  $0 = $457;
  $458 = $5;
  $459 = (($458) + 4|0);
  $460 = HEAP32[$459>>2]|0;
  $461 = $1;
  $462 = (($461) + ($460)|0);
  $1 = $462;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIytEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0;
 var $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0;
 var $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 104|0;
 $uiSourceGShift = sp + 102|0;
 $uiSourceBShift = sp + 100|0;
 $uiSourceAShift = sp + 98|0;
 $uiSourceRMask = sp + 96|0;
 $uiSourceGMask = sp + 94|0;
 $uiSourceBMask = sp + 92|0;
 $uiSourceAMask = sp + 90|0;
 $uiDestRShift = sp + 88|0;
 $uiDestGShift = sp + 86|0;
 $uiDestBShift = sp + 84|0;
 $uiDestAShift = sp + 82|0;
 $uiDestRMask = sp + 80|0;
 $uiDestGMask = sp + 78|0;
 $uiDestBMask = sp + 76|0;
 $uiDestAMask = sp + 74|0;
 $Source = sp;
 $DR = sp + 64|0;
 $DG = sp + 62|0;
 $DB = sp + 60|0;
 $DA = sp + 58|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $76 = $Source;
  $77 = $76;
  HEAP32[$77>>2] = 0;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = 0;
  $i = 0;
  while(1) {
   $80 = $i;
   $81 = $4;
   $82 = (($81) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($80>>>0)<($83>>>0);
   if (!($84)) {
    break;
   }
   $85 = $i;
   $86 = $0;
   $87 = (($86) + ($85)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $i;
   $91 = (___muldi3(($90|0),0,8,0)|0);
   $92 = tempRet0;
   $93 = (_bitshift64Shl(($89|0),0,($91|0))|0);
   $94 = tempRet0;
   $95 = $Source;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($95) + 4)|0;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = $97 | $93;
   $102 = $100 | $94;
   $103 = $Source;
   $104 = $103;
   HEAP32[$104>>2] = $101;
   $105 = (($103) + 4)|0;
   $106 = $105;
   HEAP32[$106>>2] = $102;
   $107 = $i;
   $108 = (($107) + 1)|0;
   $i = $108;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $109 = HEAP16[$uiSourceRMask>>1]|0;
  $110 = ($109<<16>>16)!=(0);
  if ($110) {
   $111 = $Source;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = HEAP16[$uiSourceRShift>>1]|0;
   $118 = $117&65535;
   $119 = (_bitshift64Lshr(($113|0),($116|0),($118|0))|0);
   $120 = tempRet0;
   $121 = $119&65535;
   $122 = $121&65535;
   $123 = HEAP16[$uiSourceRMask>>1]|0;
   $124 = $123&65535;
   $125 = $122 & $124;
   $126 = $125&65535;
   $SR = $126;
  }
  $127 = HEAP16[$uiSourceGMask>>1]|0;
  $128 = ($127<<16>>16)!=(0);
  if ($128) {
   $129 = $Source;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = HEAP16[$uiSourceGShift>>1]|0;
   $136 = $135&65535;
   $137 = (_bitshift64Lshr(($131|0),($134|0),($136|0))|0);
   $138 = tempRet0;
   $139 = $137&65535;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceGMask>>1]|0;
   $142 = $141&65535;
   $143 = $140 & $142;
   $144 = $143&65535;
   $SG = $144;
  }
  $145 = HEAP16[$uiSourceBMask>>1]|0;
  $146 = ($145<<16>>16)!=(0);
  if ($146) {
   $147 = $Source;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP16[$uiSourceBShift>>1]|0;
   $154 = $153&65535;
   $155 = (_bitshift64Lshr(($149|0),($152|0),($154|0))|0);
   $156 = tempRet0;
   $157 = $155&65535;
   $158 = $157&65535;
   $159 = HEAP16[$uiSourceBMask>>1]|0;
   $160 = $159&65535;
   $161 = $158 & $160;
   $162 = $161&65535;
   $SB = $162;
  }
  $163 = HEAP16[$uiSourceAMask>>1]|0;
  $164 = ($163<<16>>16)!=(0);
  if ($164) {
   $165 = $Source;
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($165) + 4)|0;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = HEAP16[$uiSourceAShift>>1]|0;
   $172 = $171&65535;
   $173 = (_bitshift64Lshr(($167|0),($170|0),($172|0))|0);
   $174 = tempRet0;
   $175 = $173&65535;
   $176 = $175&65535;
   $177 = HEAP16[$uiSourceAMask>>1]|0;
   $178 = $177&65535;
   $179 = $176 & $178;
   $180 = $179&65535;
   $SA = $180;
  }
  $181 = $4;
  $182 = (($181) + 48|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)!=(0|0);
  if ($184) {
   label = 23;
  } else {
   $185 = $5;
   $186 = (($185) + 44|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    label = 23;
   } else {
    $231 = HEAP16[$uiSourceRMask>>1]|0;
    $232 = ($231<<16>>16)!=(0);
    if ($232) {
     $233 = HEAP16[$uiDestRMask>>1]|0;
     $234 = ($233<<16>>16)!=(0);
     if ($234) {
      $235 = $5;
      $236 = (($235) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = $4;
      $239 = (($238) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($237>>>0)<($240>>>0);
      if ($241) {
       $242 = $SR;
       $243 = $4;
       $244 = (($243) + 8|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = $245&65535;
       $247 = $5;
       $248 = (($247) + 8|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = $249&65535;
       $251 = (__Z6ShrinkItET_S0_S0_S0_($242,$246,$250)|0);
       HEAP16[$DR>>1] = $251;
      } else {
       $252 = $5;
       $253 = (($252) + 8|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = $4;
       $256 = (($255) + 8|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = ($254>>>0)>($257>>>0);
       if ($258) {
        $259 = $SR;
        $260 = $4;
        $261 = (($260) + 8|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = $262&65535;
        $264 = $5;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $266&65535;
        $268 = (__Z6ExpandItET_S0_S0_S0_($259,$263,$267)|0);
        HEAP16[$DR>>1] = $268;
       } else {
        $269 = $SR;
        HEAP16[$DR>>1] = $269;
       }
      }
     }
    }
    $270 = HEAP16[$uiSourceGMask>>1]|0;
    $271 = ($270<<16>>16)!=(0);
    if ($271) {
     $272 = HEAP16[$uiDestGMask>>1]|0;
     $273 = ($272<<16>>16)!=(0);
     if ($273) {
      $274 = $5;
      $275 = (($274) + 12|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $4;
      $278 = (($277) + 12|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = ($276>>>0)<($279>>>0);
      if ($280) {
       $281 = $SG;
       $282 = $4;
       $283 = (($282) + 12|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284&65535;
       $286 = $5;
       $287 = (($286) + 12|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = $288&65535;
       $290 = (__Z6ShrinkItET_S0_S0_S0_($281,$285,$289)|0);
       HEAP16[$DG>>1] = $290;
      } else {
       $291 = $5;
       $292 = (($291) + 12|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = $4;
       $295 = (($294) + 12|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = ($293>>>0)>($296>>>0);
       if ($297) {
        $298 = $SG;
        $299 = $4;
        $300 = (($299) + 12|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = $301&65535;
        $303 = $5;
        $304 = (($303) + 12|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = $305&65535;
        $307 = (__Z6ExpandItET_S0_S0_S0_($298,$302,$306)|0);
        HEAP16[$DG>>1] = $307;
       } else {
        $308 = $SG;
        HEAP16[$DG>>1] = $308;
       }
      }
     }
    }
    $309 = HEAP16[$uiSourceBMask>>1]|0;
    $310 = ($309<<16>>16)!=(0);
    if ($310) {
     $311 = HEAP16[$uiDestBMask>>1]|0;
     $312 = ($311<<16>>16)!=(0);
     if ($312) {
      $313 = $5;
      $314 = (($313) + 16|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = $4;
      $317 = (($316) + 16|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ($315>>>0)<($318>>>0);
      if ($319) {
       $320 = $SB;
       $321 = $4;
       $322 = (($321) + 16|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = $323&65535;
       $325 = $5;
       $326 = (($325) + 16|0);
       $327 = HEAP32[$326>>2]|0;
       $328 = $327&65535;
       $329 = (__Z6ShrinkItET_S0_S0_S0_($320,$324,$328)|0);
       HEAP16[$DB>>1] = $329;
      } else {
       $330 = $5;
       $331 = (($330) + 16|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $4;
       $334 = (($333) + 16|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = ($332>>>0)>($335>>>0);
       if ($336) {
        $337 = $SB;
        $338 = $4;
        $339 = (($338) + 16|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = $340&65535;
        $342 = $5;
        $343 = (($342) + 16|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = $344&65535;
        $346 = (__Z6ExpandItET_S0_S0_S0_($337,$341,$345)|0);
        HEAP16[$DB>>1] = $346;
       } else {
        $347 = $SB;
        HEAP16[$DB>>1] = $347;
       }
      }
     }
    }
    $348 = HEAP16[$uiSourceAMask>>1]|0;
    $349 = ($348<<16>>16)!=(0);
    if ($349) {
     $350 = HEAP16[$uiDestAMask>>1]|0;
     $351 = ($350<<16>>16)!=(0);
     if ($351) {
      $352 = $5;
      $353 = (($352) + 20|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = $4;
      $356 = (($355) + 20|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($354>>>0)<($357>>>0);
      if ($358) {
       $359 = $SA;
       $360 = $4;
       $361 = (($360) + 20|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = $362&65535;
       $364 = $5;
       $365 = (($364) + 20|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $366&65535;
       $368 = (__Z6ShrinkItET_S0_S0_S0_($359,$363,$367)|0);
       HEAP16[$DA>>1] = $368;
      } else {
       $369 = $5;
       $370 = (($369) + 20|0);
       $371 = HEAP32[$370>>2]|0;
       $372 = $4;
       $373 = (($372) + 20|0);
       $374 = HEAP32[$373>>2]|0;
       $375 = ($371>>>0)>($374>>>0);
       if ($375) {
        $376 = $SA;
        $377 = $4;
        $378 = (($377) + 20|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = $379&65535;
        $381 = $5;
        $382 = (($381) + 20|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = $383&65535;
        $385 = (__Z6ExpandItET_S0_S0_S0_($376,$380,$384)|0);
        HEAP16[$DA>>1] = $385;
       } else {
        $386 = $SA;
        HEAP16[$DA>>1] = $386;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $189 = $4;
   $190 = (($189) + 48|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $5;
   $193 = (($192) + 44|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $SR;
   $196 = $SG;
   $197 = $SB;
   $198 = $SA;
   $199 = $4;
   $200 = (($199) + 8|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   $203 = $4;
   $204 = (($203) + 12|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $205&65535;
   $207 = $4;
   $208 = (($207) + 16|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209&65535;
   $211 = $4;
   $212 = (($211) + 20|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $213&65535;
   $215 = $5;
   $216 = (($215) + 8|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $217&65535;
   $219 = $5;
   $220 = (($219) + 12|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $221&65535;
   $223 = $5;
   $224 = (($223) + 16|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $225&65535;
   $227 = $5;
   $228 = (($227) + 20|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $229&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($191,$194,$195,$196,$197,$198,$202,$206,$210,$214,$DR,$DG,$DB,$DA,$218,$222,$226,$230);
  }
  $387 = HEAP16[$DR>>1]|0;
  $388 = $387&65535;
  $389 = HEAP16[$uiDestRMask>>1]|0;
  $390 = $389&65535;
  $391 = $388 & $390;
  $392 = $391&65535;
  $393 = $392&65535;
  $394 = HEAP16[$uiDestRShift>>1]|0;
  $395 = $394&65535;
  $396 = $393 << $395;
  $397 = HEAP16[$DG>>1]|0;
  $398 = $397&65535;
  $399 = HEAP16[$uiDestGMask>>1]|0;
  $400 = $399&65535;
  $401 = $398 & $400;
  $402 = $401&65535;
  $403 = $402&65535;
  $404 = HEAP16[$uiDestGShift>>1]|0;
  $405 = $404&65535;
  $406 = $403 << $405;
  $407 = $396 | $406;
  $408 = HEAP16[$DB>>1]|0;
  $409 = $408&65535;
  $410 = HEAP16[$uiDestBMask>>1]|0;
  $411 = $410&65535;
  $412 = $409 & $411;
  $413 = $412&65535;
  $414 = $413&65535;
  $415 = HEAP16[$uiDestBShift>>1]|0;
  $416 = $415&65535;
  $417 = $414 << $416;
  $418 = $407 | $417;
  $419 = HEAP16[$DA>>1]|0;
  $420 = $419&65535;
  $421 = HEAP16[$uiDestAMask>>1]|0;
  $422 = $421&65535;
  $423 = $420 & $422;
  $424 = $423&65535;
  $425 = $424&65535;
  $426 = HEAP16[$uiDestAShift>>1]|0;
  $427 = $426&65535;
  $428 = $425 << $427;
  $429 = $418 | $428;
  $430 = $429&65535;
  $Dest = $430;
  $i = 0;
  while(1) {
   $431 = $i;
   $432 = $5;
   $433 = (($432) + 4|0);
   $434 = HEAP32[$433>>2]|0;
   $435 = ($431>>>0)<($434>>>0);
   if (!($435)) {
    break;
   }
   $436 = $Dest;
   $437 = $436&65535;
   $438 = $i;
   $439 = (___muldi3(($438|0),0,8,0)|0);
   $440 = tempRet0;
   $441 = $437 >> $439;
   $442 = $441 & 255;
   $443 = $442&255;
   $444 = $i;
   $445 = $1;
   $446 = (($445) + ($444)|0);
   HEAP8[$446>>0] = $443;
   $447 = $i;
   $448 = (($447) + 1)|0;
   $i = $448;
  }
  $449 = $4;
  $450 = (($449) + 4|0);
  $451 = HEAP32[$450>>2]|0;
  $452 = $0;
  $453 = (($452) + ($451)|0);
  $0 = $453;
  $454 = $5;
  $455 = (($454) + 4|0);
  $456 = HEAP32[$455>>2]|0;
  $457 = $1;
  $458 = (($457) + ($456)|0);
  $1 = $458;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIyjEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0, $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0;
 var $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0, $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0;
 var $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 106|0;
 $uiSourceGShift = sp + 104|0;
 $uiSourceBShift = sp + 102|0;
 $uiSourceAShift = sp + 100|0;
 $uiSourceRMask = sp + 98|0;
 $uiSourceGMask = sp + 96|0;
 $uiSourceBMask = sp + 94|0;
 $uiSourceAMask = sp + 92|0;
 $uiDestRShift = sp + 90|0;
 $uiDestGShift = sp + 88|0;
 $uiDestBShift = sp + 86|0;
 $uiDestAShift = sp + 84|0;
 $uiDestRMask = sp + 82|0;
 $uiDestGMask = sp + 80|0;
 $uiDestBMask = sp + 78|0;
 $uiDestAMask = sp + 76|0;
 $Source = sp;
 $DR = sp + 66|0;
 $DG = sp + 64|0;
 $DB = sp + 62|0;
 $DA = sp + 60|0;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $76 = $Source;
  $77 = $76;
  HEAP32[$77>>2] = 0;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = 0;
  $i = 0;
  while(1) {
   $80 = $i;
   $81 = $4;
   $82 = (($81) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($80>>>0)<($83>>>0);
   if (!($84)) {
    break;
   }
   $85 = $i;
   $86 = $0;
   $87 = (($86) + ($85)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $i;
   $91 = (___muldi3(($90|0),0,8,0)|0);
   $92 = tempRet0;
   $93 = (_bitshift64Shl(($89|0),0,($91|0))|0);
   $94 = tempRet0;
   $95 = $Source;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($95) + 4)|0;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = $97 | $93;
   $102 = $100 | $94;
   $103 = $Source;
   $104 = $103;
   HEAP32[$104>>2] = $101;
   $105 = (($103) + 4)|0;
   $106 = $105;
   HEAP32[$106>>2] = $102;
   $107 = $i;
   $108 = (($107) + 1)|0;
   $i = $108;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $109 = HEAP16[$uiSourceRMask>>1]|0;
  $110 = ($109<<16>>16)!=(0);
  if ($110) {
   $111 = $Source;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = HEAP16[$uiSourceRShift>>1]|0;
   $118 = $117&65535;
   $119 = (_bitshift64Lshr(($113|0),($116|0),($118|0))|0);
   $120 = tempRet0;
   $121 = $119&65535;
   $122 = $121&65535;
   $123 = HEAP16[$uiSourceRMask>>1]|0;
   $124 = $123&65535;
   $125 = $122 & $124;
   $126 = $125&65535;
   $SR = $126;
  }
  $127 = HEAP16[$uiSourceGMask>>1]|0;
  $128 = ($127<<16>>16)!=(0);
  if ($128) {
   $129 = $Source;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = HEAP16[$uiSourceGShift>>1]|0;
   $136 = $135&65535;
   $137 = (_bitshift64Lshr(($131|0),($134|0),($136|0))|0);
   $138 = tempRet0;
   $139 = $137&65535;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceGMask>>1]|0;
   $142 = $141&65535;
   $143 = $140 & $142;
   $144 = $143&65535;
   $SG = $144;
  }
  $145 = HEAP16[$uiSourceBMask>>1]|0;
  $146 = ($145<<16>>16)!=(0);
  if ($146) {
   $147 = $Source;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP16[$uiSourceBShift>>1]|0;
   $154 = $153&65535;
   $155 = (_bitshift64Lshr(($149|0),($152|0),($154|0))|0);
   $156 = tempRet0;
   $157 = $155&65535;
   $158 = $157&65535;
   $159 = HEAP16[$uiSourceBMask>>1]|0;
   $160 = $159&65535;
   $161 = $158 & $160;
   $162 = $161&65535;
   $SB = $162;
  }
  $163 = HEAP16[$uiSourceAMask>>1]|0;
  $164 = ($163<<16>>16)!=(0);
  if ($164) {
   $165 = $Source;
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($165) + 4)|0;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = HEAP16[$uiSourceAShift>>1]|0;
   $172 = $171&65535;
   $173 = (_bitshift64Lshr(($167|0),($170|0),($172|0))|0);
   $174 = tempRet0;
   $175 = $173&65535;
   $176 = $175&65535;
   $177 = HEAP16[$uiSourceAMask>>1]|0;
   $178 = $177&65535;
   $179 = $176 & $178;
   $180 = $179&65535;
   $SA = $180;
  }
  $181 = $4;
  $182 = (($181) + 48|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)!=(0|0);
  if ($184) {
   label = 23;
  } else {
   $185 = $5;
   $186 = (($185) + 44|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    label = 23;
   } else {
    $231 = HEAP16[$uiSourceRMask>>1]|0;
    $232 = ($231<<16>>16)!=(0);
    if ($232) {
     $233 = HEAP16[$uiDestRMask>>1]|0;
     $234 = ($233<<16>>16)!=(0);
     if ($234) {
      $235 = $5;
      $236 = (($235) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = $4;
      $239 = (($238) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($237>>>0)<($240>>>0);
      if ($241) {
       $242 = $SR;
       $243 = $4;
       $244 = (($243) + 8|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = $245&65535;
       $247 = $5;
       $248 = (($247) + 8|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = $249&65535;
       $251 = (__Z6ShrinkItET_S0_S0_S0_($242,$246,$250)|0);
       HEAP16[$DR>>1] = $251;
      } else {
       $252 = $5;
       $253 = (($252) + 8|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = $4;
       $256 = (($255) + 8|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = ($254>>>0)>($257>>>0);
       if ($258) {
        $259 = $SR;
        $260 = $4;
        $261 = (($260) + 8|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = $262&65535;
        $264 = $5;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $266&65535;
        $268 = (__Z6ExpandItET_S0_S0_S0_($259,$263,$267)|0);
        HEAP16[$DR>>1] = $268;
       } else {
        $269 = $SR;
        HEAP16[$DR>>1] = $269;
       }
      }
     }
    }
    $270 = HEAP16[$uiSourceGMask>>1]|0;
    $271 = ($270<<16>>16)!=(0);
    if ($271) {
     $272 = HEAP16[$uiDestGMask>>1]|0;
     $273 = ($272<<16>>16)!=(0);
     if ($273) {
      $274 = $5;
      $275 = (($274) + 12|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $4;
      $278 = (($277) + 12|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = ($276>>>0)<($279>>>0);
      if ($280) {
       $281 = $SG;
       $282 = $4;
       $283 = (($282) + 12|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284&65535;
       $286 = $5;
       $287 = (($286) + 12|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = $288&65535;
       $290 = (__Z6ShrinkItET_S0_S0_S0_($281,$285,$289)|0);
       HEAP16[$DG>>1] = $290;
      } else {
       $291 = $5;
       $292 = (($291) + 12|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = $4;
       $295 = (($294) + 12|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = ($293>>>0)>($296>>>0);
       if ($297) {
        $298 = $SG;
        $299 = $4;
        $300 = (($299) + 12|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = $301&65535;
        $303 = $5;
        $304 = (($303) + 12|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = $305&65535;
        $307 = (__Z6ExpandItET_S0_S0_S0_($298,$302,$306)|0);
        HEAP16[$DG>>1] = $307;
       } else {
        $308 = $SG;
        HEAP16[$DG>>1] = $308;
       }
      }
     }
    }
    $309 = HEAP16[$uiSourceBMask>>1]|0;
    $310 = ($309<<16>>16)!=(0);
    if ($310) {
     $311 = HEAP16[$uiDestBMask>>1]|0;
     $312 = ($311<<16>>16)!=(0);
     if ($312) {
      $313 = $5;
      $314 = (($313) + 16|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = $4;
      $317 = (($316) + 16|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ($315>>>0)<($318>>>0);
      if ($319) {
       $320 = $SB;
       $321 = $4;
       $322 = (($321) + 16|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = $323&65535;
       $325 = $5;
       $326 = (($325) + 16|0);
       $327 = HEAP32[$326>>2]|0;
       $328 = $327&65535;
       $329 = (__Z6ShrinkItET_S0_S0_S0_($320,$324,$328)|0);
       HEAP16[$DB>>1] = $329;
      } else {
       $330 = $5;
       $331 = (($330) + 16|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $4;
       $334 = (($333) + 16|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = ($332>>>0)>($335>>>0);
       if ($336) {
        $337 = $SB;
        $338 = $4;
        $339 = (($338) + 16|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = $340&65535;
        $342 = $5;
        $343 = (($342) + 16|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = $344&65535;
        $346 = (__Z6ExpandItET_S0_S0_S0_($337,$341,$345)|0);
        HEAP16[$DB>>1] = $346;
       } else {
        $347 = $SB;
        HEAP16[$DB>>1] = $347;
       }
      }
     }
    }
    $348 = HEAP16[$uiSourceAMask>>1]|0;
    $349 = ($348<<16>>16)!=(0);
    if ($349) {
     $350 = HEAP16[$uiDestAMask>>1]|0;
     $351 = ($350<<16>>16)!=(0);
     if ($351) {
      $352 = $5;
      $353 = (($352) + 20|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = $4;
      $356 = (($355) + 20|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($354>>>0)<($357>>>0);
      if ($358) {
       $359 = $SA;
       $360 = $4;
       $361 = (($360) + 20|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = $362&65535;
       $364 = $5;
       $365 = (($364) + 20|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $366&65535;
       $368 = (__Z6ShrinkItET_S0_S0_S0_($359,$363,$367)|0);
       HEAP16[$DA>>1] = $368;
      } else {
       $369 = $5;
       $370 = (($369) + 20|0);
       $371 = HEAP32[$370>>2]|0;
       $372 = $4;
       $373 = (($372) + 20|0);
       $374 = HEAP32[$373>>2]|0;
       $375 = ($371>>>0)>($374>>>0);
       if ($375) {
        $376 = $SA;
        $377 = $4;
        $378 = (($377) + 20|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = $379&65535;
        $381 = $5;
        $382 = (($381) + 20|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = $383&65535;
        $385 = (__Z6ExpandItET_S0_S0_S0_($376,$380,$384)|0);
        HEAP16[$DA>>1] = $385;
       } else {
        $386 = $SA;
        HEAP16[$DA>>1] = $386;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $189 = $4;
   $190 = (($189) + 48|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $5;
   $193 = (($192) + 44|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $SR;
   $196 = $SG;
   $197 = $SB;
   $198 = $SA;
   $199 = $4;
   $200 = (($199) + 8|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   $203 = $4;
   $204 = (($203) + 12|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $205&65535;
   $207 = $4;
   $208 = (($207) + 16|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209&65535;
   $211 = $4;
   $212 = (($211) + 20|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $213&65535;
   $215 = $5;
   $216 = (($215) + 8|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $217&65535;
   $219 = $5;
   $220 = (($219) + 12|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $221&65535;
   $223 = $5;
   $224 = (($223) + 16|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $225&65535;
   $227 = $5;
   $228 = (($227) + 20|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $229&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($191,$194,$195,$196,$197,$198,$202,$206,$210,$214,$DR,$DG,$DB,$DA,$218,$222,$226,$230);
  }
  $387 = HEAP16[$DR>>1]|0;
  $388 = $387&65535;
  $389 = HEAP16[$uiDestRMask>>1]|0;
  $390 = $389&65535;
  $391 = $388 & $390;
  $392 = HEAP16[$uiDestRShift>>1]|0;
  $393 = $392&65535;
  $394 = $391 << $393;
  $395 = HEAP16[$DG>>1]|0;
  $396 = $395&65535;
  $397 = HEAP16[$uiDestGMask>>1]|0;
  $398 = $397&65535;
  $399 = $396 & $398;
  $400 = HEAP16[$uiDestGShift>>1]|0;
  $401 = $400&65535;
  $402 = $399 << $401;
  $403 = $394 | $402;
  $404 = HEAP16[$DB>>1]|0;
  $405 = $404&65535;
  $406 = HEAP16[$uiDestBMask>>1]|0;
  $407 = $406&65535;
  $408 = $405 & $407;
  $409 = HEAP16[$uiDestBShift>>1]|0;
  $410 = $409&65535;
  $411 = $408 << $410;
  $412 = $403 | $411;
  $413 = HEAP16[$DA>>1]|0;
  $414 = $413&65535;
  $415 = HEAP16[$uiDestAMask>>1]|0;
  $416 = $415&65535;
  $417 = $414 & $416;
  $418 = HEAP16[$uiDestAShift>>1]|0;
  $419 = $418&65535;
  $420 = $417 << $419;
  $421 = $412 | $420;
  $Dest = $421;
  $i = 0;
  while(1) {
   $422 = $i;
   $423 = $5;
   $424 = (($423) + 4|0);
   $425 = HEAP32[$424>>2]|0;
   $426 = ($422>>>0)<($425>>>0);
   if (!($426)) {
    break;
   }
   $427 = $Dest;
   $428 = $i;
   $429 = (___muldi3(($428|0),0,8,0)|0);
   $430 = tempRet0;
   $431 = $427 >>> $429;
   $432 = $431 & 255;
   $433 = $432&255;
   $434 = $i;
   $435 = $1;
   $436 = (($435) + ($434)|0);
   HEAP8[$436>>0] = $433;
   $437 = $i;
   $438 = (($437) + 1)|0;
   $i = $438;
  }
  $439 = $4;
  $440 = (($439) + 4|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = $0;
  $443 = (($442) + ($441)|0);
  $0 = $443;
  $444 = $5;
  $445 = (($444) + 4|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = $1;
  $448 = (($447) + ($446)|0);
  $1 = $448;
 }
 STACKTOP = sp;return 1;
}
function __Z16ConvertTemplatedIyyEhPhS0_jjRK23tagSVTFImageConvertInfoS3_($lpSource,$lpDest,$uiWidth,$uiHeight,$SourceInfo,$DestInfo) {
 $lpSource = $lpSource|0;
 $lpDest = $lpDest|0;
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $SourceInfo = $SourceInfo|0;
 $DestInfo = $DestInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DA = 0, $DB = 0, $DG = 0, $DR = 0, $Dest = 0, $SA = 0;
 var $SB = 0, $SG = 0, $SR = 0, $Source = 0, $i = 0, $lpFPSource = 0, $lpFPSourceEnd = 0, $lpSourceEnd = 0, $p = 0, $sLuminance = 0.0, $uiDestAMask = 0, $uiDestAShift = 0, $uiDestBMask = 0, $uiDestBShift = 0, $uiDestGMask = 0, $uiDestGShift = 0, $uiDestRMask = 0, $uiDestRShift = 0, $uiSourceAMask = 0, $uiSourceAShift = 0;
 var $uiSourceBMask = 0, $uiSourceBShift = 0, $uiSourceGMask = 0, $uiSourceGShift = 0, $uiSourceRMask = 0, $uiSourceRShift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiSourceRShift = sp + 110|0;
 $uiSourceGShift = sp + 108|0;
 $uiSourceBShift = sp + 106|0;
 $uiSourceAShift = sp + 104|0;
 $uiSourceRMask = sp + 102|0;
 $uiSourceGMask = sp + 100|0;
 $uiSourceBMask = sp + 98|0;
 $uiSourceAMask = sp + 96|0;
 $uiDestRShift = sp + 94|0;
 $uiDestGShift = sp + 92|0;
 $uiDestBShift = sp + 90|0;
 $uiDestAShift = sp + 88|0;
 $uiDestRMask = sp + 86|0;
 $uiDestGMask = sp + 84|0;
 $uiDestBMask = sp + 82|0;
 $uiDestAMask = sp + 80|0;
 $Source = sp + 8|0;
 $DR = sp + 70|0;
 $DG = sp + 68|0;
 $DB = sp + 66|0;
 $DA = sp + 64|0;
 $Dest = sp;
 $0 = $lpSource;
 $1 = $lpDest;
 $2 = $uiWidth;
 $3 = $uiHeight;
 $4 = $SourceInfo;
 $5 = $DestInfo;
 HEAP16[$uiSourceRShift>>1] = 0;
 HEAP16[$uiSourceGShift>>1] = 0;
 HEAP16[$uiSourceBShift>>1] = 0;
 HEAP16[$uiSourceAShift>>1] = 0;
 HEAP16[$uiSourceRMask>>1] = 0;
 HEAP16[$uiSourceGMask>>1] = 0;
 HEAP16[$uiSourceBMask>>1] = 0;
 HEAP16[$uiSourceAMask>>1] = 0;
 HEAP16[$uiDestRShift>>1] = 0;
 HEAP16[$uiDestGShift>>1] = 0;
 HEAP16[$uiDestBShift>>1] = 0;
 HEAP16[$uiDestAShift>>1] = 0;
 HEAP16[$uiDestRMask>>1] = 0;
 HEAP16[$uiDestGMask>>1] = 0;
 HEAP16[$uiDestBMask>>1] = 0;
 HEAP16[$uiDestAMask>>1] = 0;
 $6 = $4;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($6,$uiSourceRShift,$uiSourceGShift,$uiSourceBShift,$uiSourceAShift,$uiSourceRMask,$uiSourceGMask,$uiSourceBMask,$uiSourceAMask);
 $7 = $5;
 __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($7,$uiDestRShift,$uiDestGShift,$uiDestBShift,$uiDestAShift,$uiDestRMask,$uiDestGMask,$uiDestBMask,$uiDestAMask);
 $8 = $4;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(24);
 if ($11) {
  $12 = $0;
  $lpFPSource = $12;
  HEAPF32[9896>>2] = 0.0;
  $13 = $lpFPSource;
  $14 = $2;
  $15 = $3;
  $16 = Math_imul($14, $15)|0;
  $17 = $4;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($16, $19)|0;
  $21 = (($13) + ($20)|0);
  $lpFPSourceEnd = $21;
  while(1) {
   $22 = $lpFPSource;
   $23 = $lpFPSourceEnd;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $lpFPSource;
   $p = $25;
   $26 = $p;
   $27 = HEAP16[$26>>1]|0;
   $28 = (+($27&65535));
   $29 = $28 * 0.29899999499320984;
   $30 = $p;
   $31 = (($30) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = (+($32&65535));
   $34 = $33 * 0.58700001239776611;
   $35 = $29 + $34;
   $36 = $p;
   $37 = (($36) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $39 * 0.11400000005960464;
   $41 = $35 + $40;
   $sLuminance = $41;
   $42 = $sLuminance;
   $43 = 1.000000013351432E-10 + $42;
   $44 = $43;
   $45 = (+Math_log((+$44)));
   $46 = +HEAPF32[9896>>2];
   $47 = $46;
   $48 = $47 + $45;
   $49 = $48;
   HEAPF32[9896>>2] = $49;
   $50 = $4;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $lpFPSource;
   $54 = (($53) + ($52)|0);
   $lpFPSource = $54;
  }
  $55 = +HEAPF32[9896>>2];
  $56 = $2;
  $57 = $3;
  $58 = Math_imul($56, $57)|0;
  $59 = (+($58>>>0));
  $60 = $55 / $59;
  $61 = $60;
  $62 = (+Math_exp((+$61)));
  $63 = $62;
  HEAPF32[9896>>2] = $63;
 }
 $64 = $0;
 $65 = $2;
 $66 = $3;
 $67 = Math_imul($65, $66)|0;
 $68 = $4;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($67, $70)|0;
 $72 = (($64) + ($71)|0);
 $lpSourceEnd = $72;
 while(1) {
  $73 = $0;
  $74 = $lpSourceEnd;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $76 = $Source;
  $77 = $76;
  HEAP32[$77>>2] = 0;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = 0;
  $i = 0;
  while(1) {
   $80 = $i;
   $81 = $4;
   $82 = (($81) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($80>>>0)<($83>>>0);
   if (!($84)) {
    break;
   }
   $85 = $i;
   $86 = $0;
   $87 = (($86) + ($85)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $i;
   $91 = (___muldi3(($90|0),0,8,0)|0);
   $92 = tempRet0;
   $93 = (_bitshift64Shl(($89|0),0,($91|0))|0);
   $94 = tempRet0;
   $95 = $Source;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($95) + 4)|0;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = $97 | $93;
   $102 = $100 | $94;
   $103 = $Source;
   $104 = $103;
   HEAP32[$104>>2] = $101;
   $105 = (($103) + 4)|0;
   $106 = $105;
   HEAP32[$106>>2] = $102;
   $107 = $i;
   $108 = (($107) + 1)|0;
   $i = $108;
  }
  $SR = 0;
  $SG = 0;
  $SB = 0;
  $SA = -1;
  HEAP16[$DR>>1] = 0;
  HEAP16[$DG>>1] = 0;
  HEAP16[$DB>>1] = 0;
  HEAP16[$DA>>1] = -1;
  $109 = HEAP16[$uiSourceRMask>>1]|0;
  $110 = ($109<<16>>16)!=(0);
  if ($110) {
   $111 = $Source;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = HEAP16[$uiSourceRShift>>1]|0;
   $118 = $117&65535;
   $119 = (_bitshift64Lshr(($113|0),($116|0),($118|0))|0);
   $120 = tempRet0;
   $121 = $119&65535;
   $122 = $121&65535;
   $123 = HEAP16[$uiSourceRMask>>1]|0;
   $124 = $123&65535;
   $125 = $122 & $124;
   $126 = $125&65535;
   $SR = $126;
  }
  $127 = HEAP16[$uiSourceGMask>>1]|0;
  $128 = ($127<<16>>16)!=(0);
  if ($128) {
   $129 = $Source;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = HEAP16[$uiSourceGShift>>1]|0;
   $136 = $135&65535;
   $137 = (_bitshift64Lshr(($131|0),($134|0),($136|0))|0);
   $138 = tempRet0;
   $139 = $137&65535;
   $140 = $139&65535;
   $141 = HEAP16[$uiSourceGMask>>1]|0;
   $142 = $141&65535;
   $143 = $140 & $142;
   $144 = $143&65535;
   $SG = $144;
  }
  $145 = HEAP16[$uiSourceBMask>>1]|0;
  $146 = ($145<<16>>16)!=(0);
  if ($146) {
   $147 = $Source;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP16[$uiSourceBShift>>1]|0;
   $154 = $153&65535;
   $155 = (_bitshift64Lshr(($149|0),($152|0),($154|0))|0);
   $156 = tempRet0;
   $157 = $155&65535;
   $158 = $157&65535;
   $159 = HEAP16[$uiSourceBMask>>1]|0;
   $160 = $159&65535;
   $161 = $158 & $160;
   $162 = $161&65535;
   $SB = $162;
  }
  $163 = HEAP16[$uiSourceAMask>>1]|0;
  $164 = ($163<<16>>16)!=(0);
  if ($164) {
   $165 = $Source;
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($165) + 4)|0;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = HEAP16[$uiSourceAShift>>1]|0;
   $172 = $171&65535;
   $173 = (_bitshift64Lshr(($167|0),($170|0),($172|0))|0);
   $174 = tempRet0;
   $175 = $173&65535;
   $176 = $175&65535;
   $177 = HEAP16[$uiSourceAMask>>1]|0;
   $178 = $177&65535;
   $179 = $176 & $178;
   $180 = $179&65535;
   $SA = $180;
  }
  $181 = $4;
  $182 = (($181) + 48|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)!=(0|0);
  if ($184) {
   label = 23;
  } else {
   $185 = $5;
   $186 = (($185) + 44|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    label = 23;
   } else {
    $231 = HEAP16[$uiSourceRMask>>1]|0;
    $232 = ($231<<16>>16)!=(0);
    if ($232) {
     $233 = HEAP16[$uiDestRMask>>1]|0;
     $234 = ($233<<16>>16)!=(0);
     if ($234) {
      $235 = $5;
      $236 = (($235) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = $4;
      $239 = (($238) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($237>>>0)<($240>>>0);
      if ($241) {
       $242 = $SR;
       $243 = $4;
       $244 = (($243) + 8|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = $245&65535;
       $247 = $5;
       $248 = (($247) + 8|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = $249&65535;
       $251 = (__Z6ShrinkItET_S0_S0_S0_($242,$246,$250)|0);
       HEAP16[$DR>>1] = $251;
      } else {
       $252 = $5;
       $253 = (($252) + 8|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = $4;
       $256 = (($255) + 8|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = ($254>>>0)>($257>>>0);
       if ($258) {
        $259 = $SR;
        $260 = $4;
        $261 = (($260) + 8|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = $262&65535;
        $264 = $5;
        $265 = (($264) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $266&65535;
        $268 = (__Z6ExpandItET_S0_S0_S0_($259,$263,$267)|0);
        HEAP16[$DR>>1] = $268;
       } else {
        $269 = $SR;
        HEAP16[$DR>>1] = $269;
       }
      }
     }
    }
    $270 = HEAP16[$uiSourceGMask>>1]|0;
    $271 = ($270<<16>>16)!=(0);
    if ($271) {
     $272 = HEAP16[$uiDestGMask>>1]|0;
     $273 = ($272<<16>>16)!=(0);
     if ($273) {
      $274 = $5;
      $275 = (($274) + 12|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $4;
      $278 = (($277) + 12|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = ($276>>>0)<($279>>>0);
      if ($280) {
       $281 = $SG;
       $282 = $4;
       $283 = (($282) + 12|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284&65535;
       $286 = $5;
       $287 = (($286) + 12|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = $288&65535;
       $290 = (__Z6ShrinkItET_S0_S0_S0_($281,$285,$289)|0);
       HEAP16[$DG>>1] = $290;
      } else {
       $291 = $5;
       $292 = (($291) + 12|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = $4;
       $295 = (($294) + 12|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = ($293>>>0)>($296>>>0);
       if ($297) {
        $298 = $SG;
        $299 = $4;
        $300 = (($299) + 12|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = $301&65535;
        $303 = $5;
        $304 = (($303) + 12|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = $305&65535;
        $307 = (__Z6ExpandItET_S0_S0_S0_($298,$302,$306)|0);
        HEAP16[$DG>>1] = $307;
       } else {
        $308 = $SG;
        HEAP16[$DG>>1] = $308;
       }
      }
     }
    }
    $309 = HEAP16[$uiSourceBMask>>1]|0;
    $310 = ($309<<16>>16)!=(0);
    if ($310) {
     $311 = HEAP16[$uiDestBMask>>1]|0;
     $312 = ($311<<16>>16)!=(0);
     if ($312) {
      $313 = $5;
      $314 = (($313) + 16|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = $4;
      $317 = (($316) + 16|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ($315>>>0)<($318>>>0);
      if ($319) {
       $320 = $SB;
       $321 = $4;
       $322 = (($321) + 16|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = $323&65535;
       $325 = $5;
       $326 = (($325) + 16|0);
       $327 = HEAP32[$326>>2]|0;
       $328 = $327&65535;
       $329 = (__Z6ShrinkItET_S0_S0_S0_($320,$324,$328)|0);
       HEAP16[$DB>>1] = $329;
      } else {
       $330 = $5;
       $331 = (($330) + 16|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $4;
       $334 = (($333) + 16|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = ($332>>>0)>($335>>>0);
       if ($336) {
        $337 = $SB;
        $338 = $4;
        $339 = (($338) + 16|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = $340&65535;
        $342 = $5;
        $343 = (($342) + 16|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = $344&65535;
        $346 = (__Z6ExpandItET_S0_S0_S0_($337,$341,$345)|0);
        HEAP16[$DB>>1] = $346;
       } else {
        $347 = $SB;
        HEAP16[$DB>>1] = $347;
       }
      }
     }
    }
    $348 = HEAP16[$uiSourceAMask>>1]|0;
    $349 = ($348<<16>>16)!=(0);
    if ($349) {
     $350 = HEAP16[$uiDestAMask>>1]|0;
     $351 = ($350<<16>>16)!=(0);
     if ($351) {
      $352 = $5;
      $353 = (($352) + 20|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = $4;
      $356 = (($355) + 20|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($354>>>0)<($357>>>0);
      if ($358) {
       $359 = $SA;
       $360 = $4;
       $361 = (($360) + 20|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = $362&65535;
       $364 = $5;
       $365 = (($364) + 20|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $366&65535;
       $368 = (__Z6ShrinkItET_S0_S0_S0_($359,$363,$367)|0);
       HEAP16[$DA>>1] = $368;
      } else {
       $369 = $5;
       $370 = (($369) + 20|0);
       $371 = HEAP32[$370>>2]|0;
       $372 = $4;
       $373 = (($372) + 20|0);
       $374 = HEAP32[$373>>2]|0;
       $375 = ($371>>>0)>($374>>>0);
       if ($375) {
        $376 = $SA;
        $377 = $4;
        $378 = (($377) + 20|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = $379&65535;
        $381 = $5;
        $382 = (($381) + 20|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = $383&65535;
        $385 = (__Z6ExpandItET_S0_S0_S0_($376,$380,$384)|0);
        HEAP16[$DA>>1] = $385;
       } else {
        $386 = $SA;
        HEAP16[$DA>>1] = $386;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $189 = $4;
   $190 = (($189) + 48|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $5;
   $193 = (($192) + 44|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $SR;
   $196 = $SG;
   $197 = $SB;
   $198 = $SA;
   $199 = $4;
   $200 = (($199) + 8|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   $203 = $4;
   $204 = (($203) + 12|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $205&65535;
   $207 = $4;
   $208 = (($207) + 16|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209&65535;
   $211 = $4;
   $212 = (($211) + 20|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $213&65535;
   $215 = $5;
   $216 = (($215) + 8|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $217&65535;
   $219 = $5;
   $220 = (($219) + 12|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $221&65535;
   $223 = $5;
   $224 = (($223) + 16|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $225&65535;
   $227 = $5;
   $228 = (($227) + 20|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $229&65535;
   __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($191,$194,$195,$196,$197,$198,$202,$206,$210,$214,$DR,$DG,$DB,$DA,$218,$222,$226,$230);
  }
  $387 = HEAP16[$DR>>1]|0;
  $388 = $387&65535;
  $389 = HEAP16[$uiDestRMask>>1]|0;
  $390 = $389&65535;
  $391 = $388 & $390;
  $392 = ($391|0)<(0);
  $393 = $392 << 31 >> 31;
  $394 = HEAP16[$uiDestRShift>>1]|0;
  $395 = $394&65535;
  $396 = (_bitshift64Shl(($391|0),($393|0),($395|0))|0);
  $397 = tempRet0;
  $398 = HEAP16[$DG>>1]|0;
  $399 = $398&65535;
  $400 = HEAP16[$uiDestGMask>>1]|0;
  $401 = $400&65535;
  $402 = $399 & $401;
  $403 = ($402|0)<(0);
  $404 = $403 << 31 >> 31;
  $405 = HEAP16[$uiDestGShift>>1]|0;
  $406 = $405&65535;
  $407 = (_bitshift64Shl(($402|0),($404|0),($406|0))|0);
  $408 = tempRet0;
  $409 = $396 | $407;
  $410 = $397 | $408;
  $411 = HEAP16[$DB>>1]|0;
  $412 = $411&65535;
  $413 = HEAP16[$uiDestBMask>>1]|0;
  $414 = $413&65535;
  $415 = $412 & $414;
  $416 = ($415|0)<(0);
  $417 = $416 << 31 >> 31;
  $418 = HEAP16[$uiDestBShift>>1]|0;
  $419 = $418&65535;
  $420 = (_bitshift64Shl(($415|0),($417|0),($419|0))|0);
  $421 = tempRet0;
  $422 = $409 | $420;
  $423 = $410 | $421;
  $424 = HEAP16[$DA>>1]|0;
  $425 = $424&65535;
  $426 = HEAP16[$uiDestAMask>>1]|0;
  $427 = $426&65535;
  $428 = $425 & $427;
  $429 = ($428|0)<(0);
  $430 = $429 << 31 >> 31;
  $431 = HEAP16[$uiDestAShift>>1]|0;
  $432 = $431&65535;
  $433 = (_bitshift64Shl(($428|0),($430|0),($432|0))|0);
  $434 = tempRet0;
  $435 = $422 | $433;
  $436 = $423 | $434;
  $437 = $Dest;
  $438 = $437;
  HEAP32[$438>>2] = $435;
  $439 = (($437) + 4)|0;
  $440 = $439;
  HEAP32[$440>>2] = $436;
  $i = 0;
  while(1) {
   $441 = $i;
   $442 = $5;
   $443 = (($442) + 4|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = ($441>>>0)<($444>>>0);
   if (!($445)) {
    break;
   }
   $446 = $Dest;
   $447 = $446;
   $448 = HEAP32[$447>>2]|0;
   $449 = (($446) + 4)|0;
   $450 = $449;
   $451 = HEAP32[$450>>2]|0;
   $452 = $i;
   $453 = (___muldi3(($452|0),0,8,0)|0);
   $454 = tempRet0;
   $455 = (_bitshift64Lshr(($448|0),($451|0),($453|0))|0);
   $456 = tempRet0;
   $457 = $455 & 255;
   $458 = $457&255;
   $459 = $i;
   $460 = $1;
   $461 = (($460) + ($459)|0);
   HEAP8[$461>>0] = $458;
   $462 = $i;
   $463 = (($462) + 1)|0;
   $i = $463;
  }
  $464 = $4;
  $465 = (($464) + 4|0);
  $466 = HEAP32[$465>>2]|0;
  $467 = $0;
  $468 = (($467) + ($466)|0);
  $0 = $468;
  $469 = $5;
  $470 = (($469) + 4|0);
  $471 = HEAP32[$470>>2]|0;
  $472 = $1;
  $473 = (($472) + ($471)|0);
  $1 = $473;
 }
 STACKTOP = sp;return 1;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __Z15GetShiftAndMaskItEvRK23tagSVTFImageConvertInfoRT_S4_S4_S4_S4_S4_S4_S4_($Info,$uiRShift,$uiGShift,$uiBShift,$uiAShift,$uiRMask,$uiGMask,$uiBMask,$uiAMask) {
 $Info = $Info|0;
 $uiRShift = $uiRShift|0;
 $uiGShift = $uiGShift|0;
 $uiBShift = $uiBShift|0;
 $uiAShift = $uiAShift|0;
 $uiRMask = $uiRMask|0;
 $uiGMask = $uiGMask|0;
 $uiBMask = $uiBMask|0;
 $uiAMask = $uiAMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $Info;
 $1 = $uiRShift;
 $2 = $uiGShift;
 $3 = $uiBShift;
 $4 = $uiAShift;
 $5 = $uiRMask;
 $6 = $uiGMask;
 $7 = $uiBMask;
 $8 = $uiAMask;
 $9 = $0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>=(0);
 if ($12) {
  $13 = $0;
  $14 = (($13) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>=(0);
  if ($16) {
   $17 = $0;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $0;
   $21 = (($20) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($19|0)<($22|0);
   if ($23) {
    $24 = $0;
    $25 = (($24) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26&65535;
    $28 = $27&65535;
    $29 = $1;
    $30 = HEAP16[$29>>1]|0;
    $31 = $30&65535;
    $32 = (($31) + ($28))|0;
    $33 = $32&65535;
    HEAP16[$29>>1] = $33;
   }
  }
  $34 = $0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>=(0);
  if ($37) {
   $38 = $0;
   $39 = (($38) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $0;
   $42 = (($41) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($40|0)<($43|0);
   if ($44) {
    $45 = $0;
    $46 = (($45) + 16|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $47&65535;
    $49 = $48&65535;
    $50 = $1;
    $51 = HEAP16[$50>>1]|0;
    $52 = $51&65535;
    $53 = (($52) + ($49))|0;
    $54 = $53&65535;
    HEAP16[$50>>1] = $54;
   }
  }
  $55 = $0;
  $56 = (($55) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)>=(0);
  if ($58) {
   $59 = $0;
   $60 = (($59) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $0;
   $63 = (($62) + 24|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($61|0)<($64|0);
   if ($65) {
    $66 = $0;
    $67 = (($66) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68&65535;
    $70 = $69&65535;
    $71 = $1;
    $72 = HEAP16[$71>>1]|0;
    $73 = $72&65535;
    $74 = (($73) + ($70))|0;
    $75 = $74&65535;
    HEAP16[$71>>1] = $75;
   }
  }
  $76 = $0;
  $77 = (($76) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (16 - ($78))|0;
  $80 = $79&65535;
  $81 = $80&65535;
  $82 = 65535 >> $81;
  $83 = $82&65535;
  $84 = $5;
  HEAP16[$84>>1] = $83;
 }
 $85 = $0;
 $86 = (($85) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)>=(0);
 if ($88) {
  $89 = $0;
  $90 = (($89) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)>=(0);
  if ($92) {
   $93 = $0;
   $94 = (($93) + 24|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $0;
   $97 = (($96) + 28|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($95|0)<($98|0);
   if ($99) {
    $100 = $0;
    $101 = (($100) + 8|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102&65535;
    $104 = $103&65535;
    $105 = $2;
    $106 = HEAP16[$105>>1]|0;
    $107 = $106&65535;
    $108 = (($107) + ($104))|0;
    $109 = $108&65535;
    HEAP16[$105>>1] = $109;
   }
  }
  $110 = $0;
  $111 = (($110) + 32|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)>=(0);
  if ($113) {
   $114 = $0;
   $115 = (($114) + 32|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $0;
   $118 = (($117) + 28|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($116|0)<($119|0);
   if ($120) {
    $121 = $0;
    $122 = (($121) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $123&65535;
    $125 = $124&65535;
    $126 = $2;
    $127 = HEAP16[$126>>1]|0;
    $128 = $127&65535;
    $129 = (($128) + ($125))|0;
    $130 = $129&65535;
    HEAP16[$126>>1] = $130;
   }
  }
  $131 = $0;
  $132 = (($131) + 36|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)>=(0);
  if ($134) {
   $135 = $0;
   $136 = (($135) + 36|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $0;
   $139 = (($138) + 28|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($137|0)<($140|0);
   if ($141) {
    $142 = $0;
    $143 = (($142) + 20|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $144&65535;
    $146 = $145&65535;
    $147 = $2;
    $148 = HEAP16[$147>>1]|0;
    $149 = $148&65535;
    $150 = (($149) + ($146))|0;
    $151 = $150&65535;
    HEAP16[$147>>1] = $151;
   }
  }
  $152 = $0;
  $153 = (($152) + 12|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (16 - ($154))|0;
  $156 = $155&65535;
  $157 = $156&65535;
  $158 = 65535 >> $157;
  $159 = $158&65535;
  $160 = $6;
  HEAP16[$160>>1] = $159;
 }
 $161 = $0;
 $162 = (($161) + 32|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)>=(0);
 if ($164) {
  $165 = $0;
  $166 = (($165) + 24|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)>=(0);
  if ($168) {
   $169 = $0;
   $170 = (($169) + 24|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $0;
   $173 = (($172) + 32|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ($171|0)<($174|0);
   if ($175) {
    $176 = $0;
    $177 = (($176) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $178&65535;
    $180 = $179&65535;
    $181 = $3;
    $182 = HEAP16[$181>>1]|0;
    $183 = $182&65535;
    $184 = (($183) + ($180))|0;
    $185 = $184&65535;
    HEAP16[$181>>1] = $185;
   }
  }
  $186 = $0;
  $187 = (($186) + 28|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188|0)>=(0);
  if ($189) {
   $190 = $0;
   $191 = (($190) + 28|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $0;
   $194 = (($193) + 32|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($192|0)<($195|0);
   if ($196) {
    $197 = $0;
    $198 = (($197) + 12|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $199&65535;
    $201 = $200&65535;
    $202 = $3;
    $203 = HEAP16[$202>>1]|0;
    $204 = $203&65535;
    $205 = (($204) + ($201))|0;
    $206 = $205&65535;
    HEAP16[$202>>1] = $206;
   }
  }
  $207 = $0;
  $208 = (($207) + 36|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209|0)>=(0);
  if ($210) {
   $211 = $0;
   $212 = (($211) + 36|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $0;
   $215 = (($214) + 32|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($213|0)<($216|0);
   if ($217) {
    $218 = $0;
    $219 = (($218) + 20|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = $220&65535;
    $222 = $221&65535;
    $223 = $3;
    $224 = HEAP16[$223>>1]|0;
    $225 = $224&65535;
    $226 = (($225) + ($222))|0;
    $227 = $226&65535;
    HEAP16[$223>>1] = $227;
   }
  }
  $228 = $0;
  $229 = (($228) + 16|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (16 - ($230))|0;
  $232 = $231&65535;
  $233 = $232&65535;
  $234 = 65535 >> $233;
  $235 = $234&65535;
  $236 = $7;
  HEAP16[$236>>1] = $235;
 }
 $237 = $0;
 $238 = (($237) + 36|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ($239|0)>=(0);
 if (!($240)) {
  STACKTOP = sp;return;
 }
 $241 = $0;
 $242 = (($241) + 24|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)>=(0);
 if ($244) {
  $245 = $0;
  $246 = (($245) + 24|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $0;
  $249 = (($248) + 36|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ($247|0)<($250|0);
  if ($251) {
   $252 = $0;
   $253 = (($252) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = $254&65535;
   $256 = $255&65535;
   $257 = $4;
   $258 = HEAP16[$257>>1]|0;
   $259 = $258&65535;
   $260 = (($259) + ($256))|0;
   $261 = $260&65535;
   HEAP16[$257>>1] = $261;
  }
 }
 $262 = $0;
 $263 = (($262) + 28|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ($264|0)>=(0);
 if ($265) {
  $266 = $0;
  $267 = (($266) + 28|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $0;
  $270 = (($269) + 36|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ($268|0)<($271|0);
  if ($272) {
   $273 = $0;
   $274 = (($273) + 12|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = $275&65535;
   $277 = $276&65535;
   $278 = $4;
   $279 = HEAP16[$278>>1]|0;
   $280 = $279&65535;
   $281 = (($280) + ($277))|0;
   $282 = $281&65535;
   HEAP16[$278>>1] = $282;
  }
 }
 $283 = $0;
 $284 = (($283) + 32|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = ($285|0)>=(0);
 if ($286) {
  $287 = $0;
  $288 = (($287) + 32|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = $0;
  $291 = (($290) + 36|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = ($289|0)<($292|0);
  if ($293) {
   $294 = $0;
   $295 = (($294) + 16|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $296&65535;
   $298 = $297&65535;
   $299 = $4;
   $300 = HEAP16[$299>>1]|0;
   $301 = $300&65535;
   $302 = (($301) + ($298))|0;
   $303 = $302&65535;
   HEAP16[$299>>1] = $303;
  }
 }
 $304 = $0;
 $305 = (($304) + 20|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = (16 - ($306))|0;
 $308 = $307&65535;
 $309 = $308&65535;
 $310 = 65535 >> $309;
 $311 = $310&65535;
 $312 = $8;
 HEAP16[$312>>1] = $311;
 STACKTOP = sp;return;
}
function __Z9TransformIttEvPFvRtS0_S0_S0_ES2_T_S3_S3_S3_S3_S3_S3_S3_RT0_S5_S5_S5_S4_S4_S4_S4_($pTransform1,$pTransform2,$SR,$SG,$SB,$SA,$SRBits,$SGBits,$SBBits,$SABits,$DR,$DG,$DB,$DA,$DRBits,$DGBits,$DBBits,$DABits) {
 $pTransform1 = $pTransform1|0;
 $pTransform2 = $pTransform2|0;
 $SR = $SR|0;
 $SG = $SG|0;
 $SB = $SB|0;
 $SA = $SA|0;
 $SRBits = $SRBits|0;
 $SGBits = $SGBits|0;
 $SBBits = $SBBits|0;
 $SABits = $SABits|0;
 $DR = $DR|0;
 $DG = $DG|0;
 $DB = $DB|0;
 $DA = $DA|0;
 $DRBits = $DRBits|0;
 $DGBits = $DGBits|0;
 $DBBits = $DBBits|0;
 $DABits = $DABits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $TA = 0, $TB = 0, $TG = 0, $TR = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $TR = sp + 30|0;
 $TG = sp + 28|0;
 $TB = sp + 26|0;
 $TA = sp + 24|0;
 $0 = $pTransform1;
 $1 = $pTransform2;
 $2 = $SR;
 $3 = $SG;
 $4 = $SB;
 $5 = $SA;
 $6 = $SRBits;
 $7 = $SGBits;
 $8 = $SBBits;
 $9 = $SABits;
 $10 = $DR;
 $11 = $DG;
 $12 = $DB;
 $13 = $DA;
 $14 = $DRBits;
 $15 = $DGBits;
 $16 = $DBBits;
 $17 = $DABits;
 $18 = $6;
 $19 = ($18<<16>>16)!=(0);
 if ($19) {
  $20 = $6;
  $21 = $20&65535;
  $22 = ($21|0)<(16);
  if ($22) {
   $23 = $2;
   $24 = $6;
   $25 = (__Z6ExpandItET_S0_S0_S0_($23,$24,16)|0);
   HEAP16[$TR>>1] = $25;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $26 = $2;
  HEAP16[$TR>>1] = $26;
 }
 $27 = $7;
 $28 = ($27<<16>>16)!=(0);
 if ($28) {
  $29 = $7;
  $30 = $29&65535;
  $31 = ($30|0)<(16);
  if ($31) {
   $32 = $3;
   $33 = $7;
   $34 = (__Z6ExpandItET_S0_S0_S0_($32,$33,16)|0);
   HEAP16[$TG>>1] = $34;
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $35 = $3;
  HEAP16[$TG>>1] = $35;
 }
 $36 = $8;
 $37 = ($36<<16>>16)!=(0);
 if ($37) {
  $38 = $8;
  $39 = $38&65535;
  $40 = ($39|0)<(16);
  if ($40) {
   $41 = $4;
   $42 = $8;
   $43 = (__Z6ExpandItET_S0_S0_S0_($41,$42,16)|0);
   HEAP16[$TB>>1] = $43;
  } else {
   label = 12;
  }
 } else {
  label = 12;
 }
 if ((label|0) == 12) {
  $44 = $4;
  HEAP16[$TB>>1] = $44;
 }
 $45 = $9;
 $46 = ($45<<16>>16)!=(0);
 if ($46) {
  $47 = $9;
  $48 = $47&65535;
  $49 = ($48|0)<(16);
  if ($49) {
   $50 = $5;
   $51 = $9;
   $52 = (__Z6ExpandItET_S0_S0_S0_($50,$51,16)|0);
   HEAP16[$TA>>1] = $52;
  } else {
   label = 16;
  }
 } else {
  label = 16;
 }
 if ((label|0) == 16) {
  $53 = $5;
  HEAP16[$TA>>1] = $53;
 }
 $54 = $0;
 $55 = ($54|0)!=(0|0);
 if ($55) {
  $56 = $0;
  FUNCTION_TABLE_viiii[$56 & 511]($TR,$TG,$TB,$TA);
 }
 $57 = $1;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = $1;
  FUNCTION_TABLE_viiii[$59 & 511]($TR,$TG,$TB,$TA);
 }
 $60 = $14;
 $61 = ($60<<16>>16)!=(0);
 if ($61) {
  $62 = $14;
  $63 = $62&65535;
  $64 = ($63|0)<(16);
  if ($64) {
   $65 = HEAP16[$TR>>1]|0;
   $66 = $14;
   $67 = (__Z6ShrinkItET_S0_S0_S0_($65,16,$66)|0);
   $68 = $10;
   HEAP16[$68>>1] = $67;
  } else {
   label = 24;
  }
 } else {
  label = 24;
 }
 if ((label|0) == 24) {
  $69 = HEAP16[$TR>>1]|0;
  $70 = $10;
  HEAP16[$70>>1] = $69;
 }
 $71 = $15;
 $72 = ($71<<16>>16)!=(0);
 if ($72) {
  $73 = $15;
  $74 = $73&65535;
  $75 = ($74|0)<(16);
  if ($75) {
   $76 = HEAP16[$TG>>1]|0;
   $77 = $15;
   $78 = (__Z6ShrinkItET_S0_S0_S0_($76,16,$77)|0);
   $79 = $11;
   HEAP16[$79>>1] = $78;
  } else {
   label = 28;
  }
 } else {
  label = 28;
 }
 if ((label|0) == 28) {
  $80 = HEAP16[$TG>>1]|0;
  $81 = $11;
  HEAP16[$81>>1] = $80;
 }
 $82 = $16;
 $83 = ($82<<16>>16)!=(0);
 if ($83) {
  $84 = $16;
  $85 = $84&65535;
  $86 = ($85|0)<(16);
  if ($86) {
   $87 = HEAP16[$TB>>1]|0;
   $88 = $16;
   $89 = (__Z6ShrinkItET_S0_S0_S0_($87,16,$88)|0);
   $90 = $12;
   HEAP16[$90>>1] = $89;
  } else {
   label = 32;
  }
 } else {
  label = 32;
 }
 if ((label|0) == 32) {
  $91 = HEAP16[$TB>>1]|0;
  $92 = $12;
  HEAP16[$92>>1] = $91;
 }
 $93 = $17;
 $94 = ($93<<16>>16)!=(0);
 if ($94) {
  $95 = $17;
  $96 = $95&65535;
  $97 = ($96|0)<(16);
  if ($97) {
   $98 = HEAP16[$TA>>1]|0;
   $99 = $17;
   $100 = (__Z6ShrinkItET_S0_S0_S0_($98,16,$99)|0);
   $101 = $13;
   HEAP16[$101>>1] = $100;
   STACKTOP = sp;return;
  }
 }
 $102 = HEAP16[$TA>>1]|0;
 $103 = $13;
 HEAP16[$103>>1] = $102;
 STACKTOP = sp;return;
}
function __Z6ShrinkItET_S0_S0_S0_($S,$SourceBits,$DestBits) {
 $S = $S|0;
 $SourceBits = $SourceBits|0;
 $DestBits = $DestBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $S;
 $2 = $SourceBits;
 $3 = $DestBits;
 $4 = $2;
 $5 = $4&65535;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = $3;
  $8 = $7&65535;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = $1;
   $11 = $10&65535;
   $12 = $2;
   $13 = $12&65535;
   $14 = $3;
   $15 = $14&65535;
   $16 = (($13) - ($15))|0;
   $17 = $11 >> $16;
   $18 = $17&65535;
   $0 = $18;
   $19 = $0;
   STACKTOP = sp;return ($19|0);
  }
 }
 $0 = 0;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function __Z6ExpandItET_S0_S0_S0_($S,$SourceBits,$DestBits) {
 $S = $S|0;
 $SourceBits = $SourceBits|0;
 $DestBits = $DestBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $S;
 $2 = $SourceBits;
 $3 = $DestBits;
 $4 = $2;
 $5 = $4&65535;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = $3;
  $8 = $7&65535;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $D = 0;
   while(1) {
    $10 = $3;
    $11 = $10&65535;
    $12 = $2;
    $13 = $12&65535;
    $14 = ($11|0)>=($13|0);
    if (!($14)) {
     break;
    }
    $15 = $2;
    $16 = $15&65535;
    $17 = $D;
    $18 = $17&65535;
    $19 = $18 << $16;
    $20 = $19&65535;
    $D = $20;
    $21 = $1;
    $22 = $21&65535;
    $23 = $D;
    $24 = $23&65535;
    $25 = $24 | $22;
    $26 = $25&65535;
    $D = $26;
    $27 = $2;
    $28 = $27&65535;
    $29 = $3;
    $30 = $29&65535;
    $31 = (($30) - ($28))|0;
    $32 = $31&65535;
    $3 = $32;
   }
   $33 = $3;
   $34 = ($33<<16>>16)!=(0);
   if ($34) {
    $35 = $2;
    $36 = $35&65535;
    $37 = $3;
    $38 = $37&65535;
    $39 = (($36) - ($38))|0;
    $40 = $1;
    $41 = $40&65535;
    $42 = $41 >> $39;
    $43 = $42&65535;
    $1 = $43;
    $44 = $3;
    $45 = $44&65535;
    $46 = $D;
    $47 = $46&65535;
    $48 = $47 << $45;
    $49 = $48&65535;
    $D = $49;
    $50 = $1;
    $51 = $50&65535;
    $52 = $D;
    $53 = $52&65535;
    $54 = $53 | $51;
    $55 = $54&65535;
    $D = $55;
   }
   $56 = $D;
   $0 = $56;
   $57 = $0;
   STACKTOP = sp;return ($57|0);
  }
 }
 $0 = 0;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _vlInitialize() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 96|0;
 $6 = sp + 80|0;
 $10 = sp + 64|0;
 $15 = sp + 44|0;
 $18 = sp + 32|0;
 $21 = sp + 20|0;
 $22 = sp + 16|0;
 $23 = sp + 12|0;
 $28 = HEAP8[13240>>0]|0;
 $29 = ($28<<24>>24)!=(0);
 if ($29) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,13368,0);
  $25 = 0;
  $47 = $25;
  STACKTOP = sp;return ($47|0);
 }
 HEAP8[13240>>0] = 1;
 $30 = (__Znwj(12)|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = (($32) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = (($32) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 HEAP32[13264>>2] = $30;
 $25 = 1;
 $47 = $25;
 STACKTOP = sp;return ($47|0);
}
function _vlShutdown() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = HEAP8[13240>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 HEAP8[13240>>0] = 0;
 HEAP32[13256>>2] = 0;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = HEAP32[13264>>2]|0;
  $2 = $8;
  $9 = $2;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$9>>2]|0;
  $13 = $11;
  $14 = $12;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 4)&-1;
  $17 = ($7>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[13264>>2]|0;
  $19 = $i;
  $0 = $18;
  $1 = $19;
  $20 = $0;
  $21 = $1;
  $22 = HEAP32[$20>>2]|0;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   __THREW__ = 0;
   invoke_vi(401,($24|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 10;
    break;
   }
   __ZdlPv($24);
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 if ((label|0) == 10) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $3 = $30;
  $4 = $31;
  __ZdlPv($24);
  $38 = $3;
  $39 = $4;
  ___resumeException($38|0);
  // unreachable;
 }
 $32 = HEAP32[13264>>2]|0;
 $33 = ($32|0)==(0|0);
 do {
  if (!($33)) {
   __THREW__ = 0;
   invoke_vi(402,($32|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    __ZdlPv($32);
    break;
   }
   $36 = ___cxa_find_matching_catch()|0;
   $37 = tempRet0;
   $3 = $36;
   $4 = $37;
   __ZdlPv($32);
   $38 = $3;
   $39 = $4;
   ___resumeException($38|0);
   // unreachable;
  }
 } while(0);
 HEAP32[13264>>2] = 0;
 STACKTOP = sp;return;
}
function __Z12createSinglejjPh($width,$height,$data) {
 $width = $width|0;
 $height = $height|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $options = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $options = sp + 12|0;
 $0 = $width;
 $1 = $height;
 $2 = $data;
 _vlImageCreateDefaultCreateStructure($options);
 $3 = (($options) + 8|0);
 HEAP8[$3>>0]=15&255;HEAP8[$3+1>>0]=(15>>8)&255;HEAP8[$3+2>>0]=(15>>16)&255;HEAP8[$3+3>>0]=15>>24;
 $4 = (($options) + 36|0);
 HEAP8[$4>>0] = 0;
 $5 = (($options) + 47|0);
 HEAP8[$5>>0] = 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = (_vlImageCreateSingle($6,$7,$8,$options)|0);
 STACKTOP = sp;return ($9|0);
}
function _fromData($width,$height,$data) {
 $width = $width|0;
 $height = $height|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $uiVTFImage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uiVTFImage = sp;
 $0 = $width;
 $1 = $height;
 $2 = $data;
 (_vlInitialize()|0);
 (_vlCreateImage($uiVTFImage)|0);
 $3 = HEAP32[$uiVTFImage>>2]|0;
 (_vlBindImage($3)|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (__Z12createSinglejjPh($4,$5,$6)|0);
 $8 = ($7<<24>>24)!=(0);
 $9 = $8&1;
 $result = $9;
 $10 = $result;
 $11 = $10&1;
 STACKTOP = sp;return ($11|0);
}
function __Z7DllExitv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _vlShutdown();
 return;
}
function __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_VTFLib_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __ZNSt3__113__vector_baseIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6VTFLib11Diagnostics6CErrorC2Ev(13248);
 (___cxa_atexit((403|0),(13248|0),(___dso_handle|0))|0);
 return;
}
function __Z6VecSubP6VectorS0_S0_($a,$b,$diff) {
 $a = $a|0;
 $b = $b|0;
 $diff = $diff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $diff;
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 $9 = $0;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 - $14;
 $16 = $2;
 $17 = (($16) + 4|0);
 HEAPF32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $20 - $23;
 $25 = $2;
 $26 = (($25) + 8|0);
 HEAPF32[$26>>2] = $24;
 STACKTOP = sp;return;
}
function __Z8VecScaleP6Vectorf($v,$scale) {
 $v = $v|0;
 $scale = +$scale;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $scale;
 $2 = $1;
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $4 * $2;
 HEAPF32[$3>>2] = $5;
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 * $6;
 HEAPF32[$8>>2] = $10;
 $11 = $1;
 $12 = $0;
 $13 = (($12) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14 * $11;
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __Z6VecDotP6VectorS0_($u,$v) {
 $u = $u|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $u;
 $1 = $v;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = (($18) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function __Z10VecReflectP6VectorS0_S0_($axis,$v,$r) {
 $axis = $axis|0;
 $v = $v|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = $axis;
 $1 = $v;
 $2 = $r;
 $3 = $0;
 ;HEAP32[$t+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$t+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$3+8>>2]|0;
 $4 = $0;
 $5 = $1;
 $6 = (+__Z6VecDotP6VectorS0_($4,$5));
 $7 = 2.0 * $6;
 __Z8VecScaleP6Vectorf($t,$7);
 $8 = $1;
 $9 = $2;
 __Z6VecSubP6VectorS0_S0_($t,$8,$9);
 STACKTOP = sp;return;
}
function __Z9IntersectP6Vector($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $f = 0, $x = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = $2;
 $4 = (+Math_abs((+$3)));
 $5 = $4;
 $x = $5;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8;
 $10 = (+Math_abs((+$9)));
 $11 = $10;
 $y = $11;
 $12 = $0;
 $13 = (($12) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14;
 $16 = (+Math_abs((+$15)));
 $17 = $16;
 $z = $17;
 $18 = $x;
 $19 = $y;
 $20 = $18 >= $19;
 if ($20) {
  $21 = $x;
  $22 = $z;
  $23 = $21 >= $22;
  if ($23) {
   $24 = $0;
   $25 = +HEAPF32[$24>>2];
   $26 = $25 > 0.0;
   $27 = $26 ? 2 : 0;
   $f = $27;
   $44 = $f;
   STACKTOP = sp;return ($44|0);
  }
 }
 $28 = $y;
 $29 = $x;
 $30 = $28 >= $29;
 if ($30) {
  $31 = $y;
  $32 = $z;
  $33 = $31 >= $32;
  if ($33) {
   $34 = $0;
   $35 = (($34) + 4|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $36 > 0.0;
   $38 = $37 ? 4 : 5;
   $f = $38;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $39 = $0;
  $40 = (($39) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $41 > 0.0;
  $43 = $42 ? 3 : 1;
  $f = $43;
 }
 $44 = $f;
 STACKTOP = sp;return ($44|0);
}
function _vlBindImage($uiImage) {
 $uiImage = $uiImage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $uiImage;
 $9 = HEAP8[13240>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 if (!($10)) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,13400,0);
  $7 = 0;
  $46 = $7;
  STACKTOP = sp;return ($46|0);
 }
 $11 = $8;
 $12 = HEAP32[13264>>2]|0;
 $6 = $12;
 $13 = $6;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$13>>2]|0;
 $17 = $15;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = (($19|0) / 4)&-1;
 $21 = ($11>>>0)>=($20>>>0);
 if (!($21)) {
  $22 = HEAP32[13264>>2]|0;
  $23 = $8;
  $0 = $22;
  $1 = $23;
  $24 = $0;
  $25 = $1;
  $26 = HEAP32[$24>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if (!($29)) {
   $30 = HEAP32[13256>>2]|0;
   $31 = HEAP32[13264>>2]|0;
   $32 = $8;
   $2 = $31;
   $3 = $32;
   $33 = $2;
   $34 = $3;
   $35 = HEAP32[$33>>2]|0;
   $36 = (($35) + ($34<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($30|0)==($37|0);
   if ($38) {
    $7 = 1;
    $46 = $7;
    STACKTOP = sp;return ($46|0);
   } else {
    $39 = HEAP32[13264>>2]|0;
    $40 = $8;
    $4 = $39;
    $5 = $40;
    $41 = $4;
    $42 = $5;
    $43 = HEAP32[$41>>2]|0;
    $44 = (($43) + ($42<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[13256>>2] = $45;
    $7 = 1;
    $46 = $7;
    STACKTOP = sp;return ($46|0);
   }
  }
 }
 __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,13424,0);
 $7 = 0;
 $46 = $7;
 STACKTOP = sp;return ($46|0);
}
function _vlCreateImage($uiImage) {
 $uiImage = $uiImage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 69|0;
 $15 = sp + 8|0;
 $14 = $uiImage;
 $18 = HEAP8[13240>>0]|0;
 $19 = ($18<<24>>24)!=(0);
 if (!($19)) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,13400,0);
  $13 = 0;
  $62 = $13;
  STACKTOP = sp;return ($62|0);
 }
 $20 = HEAP32[13264>>2]|0;
 $21 = (__Znwj(20)|0);
 __THREW__ = 0;
 invoke_vi(404,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $16 = $60;
  $17 = $61;
  __ZdlPv($21);
  $63 = $16;
  $64 = $17;
  ___resumeException($63|0);
  // unreachable;
 }
 HEAP32[$15>>2] = $21;
 $11 = $20;
 $12 = $15;
 $24 = $11;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $10 = $24;
 $27 = $10;
 $28 = (($27) + 8|0);
 $9 = $28;
 $29 = $9;
 $8 = $29;
 $30 = $8;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($26|0)!=($31|0);
 if ($32) {
  __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$24,1);
  $7 = $24;
  $33 = $7;
  $34 = (($33) + 8|0);
  $6 = $34;
  $35 = $6;
  $5 = $35;
  $36 = $5;
  $37 = (($24) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $4 = $38;
  $39 = $4;
  $40 = $12;
  $1 = $36;
  $2 = $39;
  $3 = $40;
  $41 = $2;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = $3;
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$41>>2] = $44;
  }
  __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $45 = (($24) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  HEAP32[$45>>2] = $47;
 } else {
  $48 = $12;
  __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($24,$48);
 }
 $49 = HEAP32[13264>>2]|0;
 $0 = $49;
 $50 = $0;
 $51 = (($50) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$50>>2]|0;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $57 = (($56|0) / 4)&-1;
 $58 = (($57) - 1)|0;
 $59 = $14;
 HEAP32[$59>>2] = $58;
 $13 = 1;
 $62 = $13;
 STACKTOP = sp;return ($62|0);
}
function _vlImageCreateDefaultCreateStructure($VTFCreateOptions) {
 $VTFCreateOptions = $VTFCreateOptions|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $VTFCreateOptions;
 $1 = $0;
 HEAP8[$1>>0]=7&255;HEAP8[$1+1>>0]=(7>>8)&255;HEAP8[$1+2>>0]=(7>>16)&255;HEAP8[$1+3>>0]=7>>24;
 $2 = $0;
 $3 = (($2) + 4|0);
 HEAP8[$3>>0]=3&255;HEAP8[$3+1>>0]=(3>>8)&255;HEAP8[$3+2>>0]=(3>>16)&255;HEAP8[$3+3>>0]=3>>24;
 $4 = $0;
 $5 = (($4) + 8|0);
 HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
 $6 = $0;
 $7 = (($6) + 12|0);
 HEAP8[$7>>0]=0&255;HEAP8[$7+1>>0]=(0>>8)&255;HEAP8[$7+2>>0]=(0>>16)&255;HEAP8[$7+3>>0]=0>>24;
 $8 = $0;
 $9 = (($8) + 16|0);
 HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
 $10 = $0;
 $11 = (($10) + 20|0);
 HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$11>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$11+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$11+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$11+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $12 = $0;
 $13 = (($12) + 24|0);
 HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$13>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$13+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$13+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$13+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $14 = $0;
 $15 = (($14) + 24|0);
 $16 = (($15) + 4|0);
 HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$16>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$16+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$16+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$16+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $17 = $0;
 $18 = (($17) + 24|0);
 $19 = (($18) + 8|0);
 HEAPF32[tempDoublePtr>>2]=1.0;HEAP8[$19>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$19+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$19+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$19+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $20 = $0;
 $21 = (($20) + 36|0);
 HEAP8[$21>>0] = 1;
 $22 = $0;
 $23 = (($22) + 37|0);
 HEAP8[$23>>0]=1&255;HEAP8[$23+1>>0]=(1>>8)&255;HEAP8[$23+2>>0]=(1>>16)&255;HEAP8[$23+3>>0]=1>>24;
 $24 = $0;
 $25 = (($24) + 41|0);
 HEAP8[$25>>0]=0&255;HEAP8[$25+1>>0]=(0>>8)&255;HEAP8[$25+2>>0]=(0>>16)&255;HEAP8[$25+3>>0]=0>>24;
 $26 = $0;
 $27 = (($26) + 47|0);
 HEAP8[$27>>0] = 0;
 $28 = $0;
 $29 = (($28) + 48|0);
 HEAP8[$29>>0]=0&255;HEAP8[$29+1>>0]=(0>>8)&255;HEAP8[$29+2>>0]=(0>>16)&255;HEAP8[$29+3>>0]=0>>24;
 $30 = $0;
 $31 = (($30) + 52|0);
 HEAP8[$31>>0]=2&255;HEAP8[$31+1>>0]=(2>>8)&255;HEAP8[$31+2>>0]=(2>>16)&255;HEAP8[$31+3>>0]=2>>24;
 $32 = $0;
 $33 = (($32) + 56|0);
 HEAP8[$33>>0]=0&255;HEAP8[$33+1>>0]=(0>>8)&255;HEAP8[$33+2>>0]=(0>>16)&255;HEAP8[$33+3>>0]=0>>24;
 $34 = $0;
 $35 = (($34) + 60|0);
 HEAP8[$35>>0]=0&255;HEAP8[$35+1>>0]=(0>>8)&255;HEAP8[$35+2>>0]=(0>>16)&255;HEAP8[$35+3>>0]=0>>24;
 $36 = $0;
 $37 = (($36) + 64|0);
 HEAP8[$37>>0]=0&255;HEAP8[$37+1>>0]=(0>>8)&255;HEAP8[$37+2>>0]=(0>>16)&255;HEAP8[$37+3>>0]=0>>24;
 $38 = $0;
 $39 = (($38) + 68|0);
 HEAP8[$39>>0] = 1;
 $40 = $0;
 $41 = (($40) + 69|0);
 HEAP8[$41>>0]=4096&255;HEAP8[$41+1>>0]=(4096>>8)&255;HEAP8[$41+2>>0]=(4096>>16)&255;HEAP8[$41+3>>0]=4096>>24;
 $42 = $0;
 $43 = (($42) + 73|0);
 HEAP8[$43>>0]=4096&255;HEAP8[$43+1>>0]=(4096>>8)&255;HEAP8[$43+2>>0]=(4096>>16)&255;HEAP8[$43+3>>0]=4096>>24;
 $44 = $0;
 $45 = (($44) + 45|0);
 HEAP8[$45>>0] = 1;
 $46 = $0;
 $47 = (($46) + 46|0);
 HEAP8[$47>>0] = 1;
 $48 = $0;
 $49 = (($48) + 77|0);
 HEAP8[$49>>0] = 0;
 $50 = $0;
 $51 = (($50) + 78|0);
 HEAPF32[tempDoublePtr>>2]=2.0;HEAP8[$51>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$51+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$51+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$51+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $52 = $0;
 $53 = (($52) + 82|0);
 HEAP8[$53>>0] = 0;
 $54 = $0;
 $55 = (($54) + 83|0);
 HEAP8[$55>>0]=1&255;HEAP8[$55+1>>0]=(1>>8)&255;HEAP8[$55+2>>0]=(1>>16)&255;HEAP8[$55+3>>0]=1>>24;
 $56 = $0;
 $57 = (($56) + 87|0);
 HEAP8[$57>>0]=1&255;HEAP8[$57+1>>0]=(1>>8)&255;HEAP8[$57+2>>0]=(1>>16)&255;HEAP8[$57+3>>0]=1>>24;
 $58 = $0;
 $59 = (($58) + 91|0);
 HEAP8[$59>>0]=3&255;HEAP8[$59+1>>0]=(3>>8)&255;HEAP8[$59+2>>0]=(3>>16)&255;HEAP8[$59+3>>0]=3>>24;
 $60 = $0;
 $61 = (($60) + 95|0);
 HEAP8[$61>>0] = 0;
 $62 = $0;
 $63 = (($62) + 96|0);
 HEAPF32[tempDoublePtr>>2]=2.0;HEAP8[$63>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$63+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$63+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$63+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $64 = $0;
 $65 = (($64) + 100|0);
 HEAP8[$65>>0] = 0;
 $66 = $0;
 $67 = (($66) + 101|0);
 HEAP8[$67>>0] = 0;
 $68 = $0;
 $69 = (($68) + 102|0);
 HEAP8[$69>>0] = 0;
 $70 = $0;
 $71 = (($70) + 103|0);
 HEAP8[$71>>0] = 0;
 $72 = $0;
 $73 = (($72) + 104|0);
 HEAP8[$73>>0] = 1;
 STACKTOP = sp;return;
}
function _vlImageCreateSingle($uiWidth,$uiHeight,$lpImageDataRGBA8888,$VTFCreateOptions) {
 $uiWidth = $uiWidth|0;
 $uiHeight = $uiHeight|0;
 $lpImageDataRGBA8888 = $lpImageDataRGBA8888|0;
 $VTFCreateOptions = $VTFCreateOptions|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $uiWidth;
 $2 = $uiHeight;
 $3 = $lpImageDataRGBA8888;
 $4 = $VTFCreateOptions;
 $5 = HEAP32[13256>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,13440,0);
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $7 = HEAP32[13256>>2]|0;
  $8 = $1;
  $9 = $2;
  $10 = $3;
  $11 = $4;
  $12 = (__ZN6VTFLib8CVTFFile6CreateEjjPhRK20tagSVTFCreateOptions($7,$8,$9,$10,$11)|0);
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _vlImageSaveLump($lpData,$uiBufferSize,$uiSize) {
 $lpData = $lpData|0;
 $uiBufferSize = $uiBufferSize|0;
 $uiSize = $uiSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lpData;
 $2 = $uiBufferSize;
 $3 = $uiSize;
 $4 = HEAP32[13256>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN6VTFLib11Diagnostics6CError3SetEPKch(13248,13440,0);
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $6 = HEAP32[13256>>2]|0;
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = (__ZNK6VTFLib8CVTFFile4SaveEPvjRj($6,$7,$8,$9)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _vlImageGetSize() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[13256>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $0 = 0;
 } else {
  $3 = HEAP32[13256>>2]|0;
  $4 = (__ZNK6VTFLib8CVTFFile7GetSizeEv($3)|0);
  $0 = $4;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
  // unreachable;
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIPN6VTFLib8CVTFFileERNS_9allocatorIS3_EEEC2EjjS6_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $101 = $2;
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$99>>2] = $102;
 }
 $103 = (($__v) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 4|0);
 HEAP32[$103>>2] = $105;
 __THREW__ = 0;
 invoke_vii(405,($32|0),($__v|0));
 $106 = __THREW__; __THREW__ = 0;
 $107 = $106&1;
 if (!($107)) {
  __ZNSt3__114__split_bufferIPN6VTFLib8CVTFFileERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $108 = ___cxa_find_matching_catch()|0;
 $109 = tempRet0;
 $30 = $108;
 $31 = $109;
 __THREW__ = 0;
 invoke_vi(406,($__v|0));
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 if ($111) {
  $114 = ___cxa_find_matching_catch(0|0)|0;
  $115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable;
 }
 $112 = $30;
 $113 = $31;
 ___resumeException($112|0);
 // unreachable;
}
function __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 85|0;
 $10 = sp;
 $13 = sp + 84|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__114__split_bufferIPN6VTFLib8CVTFFileERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN6VTFLib8CVTFFileERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i11 = 0, $$sum$i9 = 0, $$sum1$i = 0, $$sum1$i10 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(14168,$0,14224);
 HEAP32[13456>>2] = ((15400 + 12|0));
 HEAP32[((13456 + 8|0))>>2] = ((15400 + 32|0));
 HEAP32[((13456 + 4|0))>>2] = 0;
 $1 = HEAP32[15400>>2]|0;
 $2 = (13456 + ($1)|0);
 __THREW__ = 0;
 invoke_vii(407,($2|0),(14168|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((13456 + 8|0)));
  ___resumeException($5|0);
  // unreachable;
 }
 $$sum$i = (($1) + 72)|0;
 $7 = (13456 + ($$sum$i)|0);
 HEAP32[$7>>2] = 0;
 $$sum1$i = (($1) + 76)|0;
 $8 = (13456 + ($$sum1$i)|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(14272,$9,((14224 + 8|0)));
 HEAP32[13544>>2] = ((15480 + 12|0));
 HEAP32[((13544 + 4|0))>>2] = ((15480 + 32|0));
 $10 = HEAP32[15480>>2]|0;
 $11 = (13544 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(407,($11|0),(14272|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((13544 + 4|0)));
  ___resumeException($14|0);
  // unreachable;
 }
 $$sum$i1 = (($10) + 72)|0;
 $16 = (13544 + ($$sum$i1)|0);
 HEAP32[$16>>2] = 0;
 $$sum1$i2 = (($10) + 76)|0;
 $17 = (13544 + ($$sum1$i2)|0);
 HEAP32[$17>>2] = -1;
 $18 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(14320,$18,((14224 + 16|0)));
 HEAP32[13632>>2] = ((15480 + 12|0));
 HEAP32[((13632 + 4|0))>>2] = ((15480 + 32|0));
 $19 = (13632 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(407,($19|0),(14320|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((13632 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 $24 = (13632 + ($$sum$i1)|0);
 HEAP32[$24>>2] = 0;
 $25 = (13632 + ($$sum1$i2)|0);
 HEAP32[$25>>2] = -1;
 $26 = HEAP32[13632>>2]|0;
 $27 = (($26) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $$sum = (($28) + 24)|0;
 $29 = (13632 + ($$sum)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[13720>>2] = ((15480 + 12|0));
 HEAP32[((13720 + 4|0))>>2] = ((15480 + 32|0));
 $31 = (13720 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(407,($31|0),($30|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((13720 + 4|0)));
  ___resumeException($34|0);
  // unreachable;
 }
 $36 = (13720 + ($$sum$i1)|0);
 HEAP32[$36>>2] = 0;
 $37 = (13720 + ($$sum1$i2)|0);
 HEAP32[$37>>2] = -1;
 $38 = HEAP32[13456>>2]|0;
 $39 = (($38) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $$sum19 = (($40) + 72)|0;
 $41 = (13456 + ($$sum19)|0);
 HEAP32[$41>>2] = 13544;
 $42 = HEAP32[13632>>2]|0;
 $43 = (($42) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $$sum20 = (($44) + 4)|0;
 $45 = (13632 + ($$sum20)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[13632>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum21 = (($50) + 72)|0;
 $51 = (13632 + ($$sum21)|0);
 HEAP32[$51>>2] = 13544;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(14368,$0,((14224 + 24|0)));
 HEAP32[13808>>2] = ((15440 + 12|0));
 HEAP32[((13808 + 8|0))>>2] = ((15440 + 32|0));
 HEAP32[((13808 + 4|0))>>2] = 0;
 $52 = HEAP32[15440>>2]|0;
 $53 = (13808 + ($52)|0);
 __THREW__ = 0;
 invoke_vii(407,($53|0),(14368|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((13808 + 8|0)));
  ___resumeException($56|0);
  // unreachable;
 }
 $$sum$i9 = (($52) + 72)|0;
 $58 = (13808 + ($$sum$i9)|0);
 HEAP32[$58>>2] = 0;
 $$sum1$i10 = (($52) + 76)|0;
 $59 = (13808 + ($$sum1$i10)|0);
 HEAP32[$59>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(14424,$9,((14224 + 32|0)));
 HEAP32[13896>>2] = ((15520 + 12|0));
 HEAP32[((13896 + 4|0))>>2] = ((15520 + 32|0));
 $60 = HEAP32[15520>>2]|0;
 $61 = (13896 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(407,($61|0),(14424|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((13896 + 4|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 $$sum$i11 = (($60) + 72)|0;
 $66 = (13896 + ($$sum$i11)|0);
 HEAP32[$66>>2] = 0;
 $$sum1$i12 = (($60) + 76)|0;
 $67 = (13896 + ($$sum1$i12)|0);
 HEAP32[$67>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(14472,$18,((14224 + 40|0)));
 HEAP32[13984>>2] = ((15520 + 12|0));
 HEAP32[((13984 + 4|0))>>2] = ((15520 + 32|0));
 $68 = (13984 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(407,($68|0),(14472|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((13984 + 4|0)));
  ___resumeException($71|0);
  // unreachable;
 }
 $73 = (13984 + ($$sum$i11)|0);
 HEAP32[$73>>2] = 0;
 $74 = (13984 + ($$sum1$i12)|0);
 HEAP32[$74>>2] = -1;
 $75 = HEAP32[13984>>2]|0;
 $76 = (($75) + -12|0);
 $77 = HEAP32[$76>>2]|0;
 $$sum22 = (($77) + 24)|0;
 $78 = (13984 + ($$sum22)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[14072>>2] = ((15520 + 12|0));
 HEAP32[((14072 + 4|0))>>2] = ((15520 + 32|0));
 $80 = (14072 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(407,($80|0),($79|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((14072 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 } else {
  $85 = (14072 + ($$sum$i11)|0);
  HEAP32[$85>>2] = 0;
  $86 = (14072 + ($$sum1$i12)|0);
  HEAP32[$86>>2] = -1;
  $87 = HEAP32[13808>>2]|0;
  $88 = (($87) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (13808 + ($$sum23)|0);
  HEAP32[$90>>2] = 13896;
  $91 = HEAP32[13984>>2]|0;
  $92 = (($91) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (13984 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[13984>>2]|0;
  $98 = (($97) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (13984 + ($$sum25)|0);
  HEAP32[$100>>2] = 13896;
  return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(408,(13544|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(408,(13720|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(409,(13896|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(409,(14072|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26488 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(410,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26512 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __THREW__ = 0;
 invoke_vii(410,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26512 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(410,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = HEAP32[$code>>2]|0;
  $4 = ($3|0)==($condition|0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $10 = $9;
   } else {
    $6 = (($what_arg) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $10 = $7;
   }
   $11 = ($10|0)==(0);
   if ($11) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,15032)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = (($ec) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $25 = (($0) + 1|0);
    $26 = $18&255;
    $27 = $26 >>> 1;
    $28 = $25;$29 = $27;
   } else {
    $21 = (($0) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $28 = $22;$29 = $24;
   }
   __THREW__ = 0;
   (invoke_iiii(411,($what_arg|0),($28|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(412,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(413,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
    HEAP32[$this>>2] = ((15040 + 8|0));
    $7 = (($this) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((15184|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((15208|0),(15184|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(414,(15184|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_ii(415,(15184|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(414,(15184|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_ii(416,(15208|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        break;
       }
      }
     }
    }
   }
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   (___cxa_begin_catch(($16|0))|0);
   __THREW__ = 0;
   (invoke_ii(415,(15184|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(414,(15184|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     __THREW__ = 0;
     (invoke_ii(416,(15208|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      __THREW__ = 0;
      invoke_v(417);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if (!($25)) {
       // unreachable;
      }
     }
    }
   }
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   __THREW__ = 0;
   invoke_v(397);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    ___resumeException($26|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((15184|0))|0);
  }
 } while(0);
 return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(418,($0|0),(15256|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((26568 + 8|0));
  ___cxa_throw(($0|0),(26616|0),(347|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = (($this) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = (($this) + 1|0);
    $14 = $13;
   } else {
    $11 = (($this) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = (($this) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = ((($this) + ($__n)|0) + 1|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = (($this) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = (($this) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $16 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $16 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $15 = $13;
  } else {
   $10 = (($this) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $15 = $11;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($16))|0;
   $19 = (($18) + ($15))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = (($this) + 1|0);
   $27 = $25;
  } else {
   $23 = (($this) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($15)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($15) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = (($this) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = (($this) + 1|0);
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(419,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = (($this) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = (($this) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = (($this) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = (($this) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = (($this) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $15 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $15 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($15))|0;
  $34 = (($33) + ($14))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = (($this) + 1|0);
    $24 = $22;
   } else {
    $20 = (($this) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($14)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($14) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = (($this) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if (!($27)) {
  __ZdlPv($19);
 }
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if (!($25)) {
  __ZdlPv($19);
 }
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = (($this) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = (($this) + 4|0);
    $14 = $13;
   } else {
    $11 = (($this) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = (($this) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $20 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(1);
   do {
    if ($23) {
     $24 = (($this) + 4|0);
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = $20 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(419,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = (($this) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = (($this) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = (($this) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($20) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = (($this) + 4|0);
    HEAP32[$51>>2] = $14;
    $52 = (($this) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $14 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = $3&1;
 $$state = $4 | $state;
 $5 = (($this) + 16|0);
 HEAP32[$5>>2] = $$state;
 $6 = $3&1;
 $7 = $6 | $state;
 $8 = (($this) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 $13 = $0;
 $14 = $13;
 HEAP32[$14>>2] = 1;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = (15616);
 __THREW__ = 0;
 invoke_viii(420,($12|0),(15672|0),($0|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($19|0);
  // unreachable;
 } else {
  ___cxa_throw(($12|0),(15720|0),(91|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15656 + 8|0));
 __THREW__ = 0;
 invoke_vii(421,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = (($this) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = (($this) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = (($this) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = (($this) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = (($this) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($this) + 32|0);
  $4 = (($this) + 36|0);
  $i$01 = $1;
  while(1) {
   $5 = (($i$01) + -1)|0;
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$4>>2]|0;
   $10 = (($9) + ($5<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
   $12 = ($5|0)==(0);
   if ($12) {
    break;
   } else {
    $i$01 = $5;
   }
  }
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15272 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15272 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15272 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15272 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$0$lcssa$ph = 0;
 var $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 12|0);
  $2 = (($this) + 16|0);
  $$01 = $__s;$__i$02 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = (($3) + 1|0);
    HEAP32[$1>>2] = $6;
    $7 = HEAP8[$3>>0]|0;
    $storemerge = $7;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 40|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $__i$0$lcssa$ph = $__i$02;
     break;
    }
    $13 = $11&255;
    $storemerge = $13;
   }
   HEAP8[$$01>>0] = $storemerge;
   $14 = (($__i$02) + 1)|0;
   $15 = (($$01) + 1|0);
   $16 = ($14|0)<($__n|0);
   if ($16) {
    $$01 = $15;$__i$02 = $14;
   } else {
    $__i$0$lcssa$ph = $14;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = (($this) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$0$lcssa$ph = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 24|0);
  $2 = (($this) + 28|0);
  $$02 = $__s;$__i$01 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = HEAP8[$$02>>0]|0;
    $7 = (($3) + 1|0);
    HEAP32[$1>>2] = $7;
    HEAP8[$3>>0] = $6;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 52|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP8[$$02>>0]|0;
    $12 = $11&255;
    $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
    $14 = ($13|0)==(-1);
    if ($14) {
     $__i$0$lcssa$ph = $__i$01;
     break;
    }
   }
   $15 = (($$02) + 1|0);
   $16 = (($__i$01) + 1)|0;
   $17 = ($16|0)<($__n|0);
   if ($17) {
    $$02 = $15;$__i$01 = $16;
   } else {
    $__i$0$lcssa$ph = $16;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15336 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15336 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15336 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15336 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$0$lcssa$ph = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 12|0);
  $2 = (($this) + 16|0);
  $$01 = $__s;$__i$02 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = (($3) + 4|0);
    HEAP32[$1>>2] = $6;
    $7 = HEAP32[$3>>2]|0;
    $storemerge = $7;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 40|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $__i$0$lcssa$ph = $__i$02;
     break;
    } else {
     $storemerge = $11;
    }
   }
   HEAP32[$$01>>2] = $storemerge;
   $13 = (($__i$02) + 1)|0;
   $14 = (($$01) + 4|0);
   $15 = ($13|0)<($__n|0);
   if ($15) {
    $$01 = $14;$__i$02 = $13;
   } else {
    $__i$0$lcssa$ph = $13;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = (($this) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 4|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP32[$6>>2]|0;
  $$0 = $8;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$0$lcssa$ph = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 24|0);
  $2 = (($this) + 28|0);
  $$02 = $__s;$__i$01 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = HEAP32[$$02>>2]|0;
    $7 = (($3) + 4|0);
    HEAP32[$1>>2] = $7;
    HEAP32[$3>>2] = $6;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 52|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$$02>>2]|0;
    $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $__i$0$lcssa$ph = $__i$01;
     break;
    }
   }
   $14 = (($$02) + 4|0);
   $15 = (($__i$01) + 1)|0;
   $16 = ($15|0)<($__n|0);
   if ($16) {
    $$02 = $14;$__i$01 = $15;
   } else {
    $__i$0$lcssa$ph = $15;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(422,($__s|0),($this|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s>>0]|0;
     $9 = ($8<<24>>24)==(0);
     do {
      if (!($9)) {
       $10 = HEAP32[$this>>2]|0;
       $11 = (($10) + -12|0);
       $12 = HEAP32[$11>>2]|0;
       $$sum1 = (($12) + 24)|0;
       $13 = (($this) + ($$sum1)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$14>>2]|0;
       $16 = (($15) + 24|0);
       $17 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $18 = (invoke_ii($17|0,($14|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        $21 = ($18|0)==(-1);
        if (!($21)) {
         break;
        }
        $22 = HEAP32[$this>>2]|0;
        $23 = (($22) + -12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + ($24)|0);
        $$sum2 = (($24) + 16)|0;
        $26 = (($this) + ($$sum2)|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(423,($25|0),($28|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         break;
        }
       }
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $$0 = $33;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = (($35) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(424,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(397);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(425,($__s|0),($this|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s>>0]|0;
     $9 = ($8<<24>>24)==(0);
     do {
      if (!($9)) {
       $10 = HEAP32[$this>>2]|0;
       $11 = (($10) + -12|0);
       $12 = HEAP32[$11>>2]|0;
       $$sum1 = (($12) + 24)|0;
       $13 = (($this) + ($$sum1)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$14>>2]|0;
       $16 = (($15) + 24|0);
       $17 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $18 = (invoke_ii($17|0,($14|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        $21 = ($18|0)==(-1);
        if (!($21)) {
         break;
        }
        $22 = HEAP32[$this>>2]|0;
        $23 = (($22) + -12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + ($24)|0);
        $$sum2 = (($24) + 16)|0;
        $26 = (($this) + ($$sum2)|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(423,($25|0),($28|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         break;
        }
       }
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
       $$0 = $33;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = (($35) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(424,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(397);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $$sum1 = (($4) + 16)|0;
   $8 = (($1) + ($$sum1)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$sum2 = (($4) + 4)|0;
    $11 = (($1) + ($$sum2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 8192;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (__ZSt18uncaught_exceptionv()|0);
     if (!($15)) {
      $16 = HEAP32[$0>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $$sum3 = (($19) + 24)|0;
      $20 = (($16) + ($$sum3)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = (($22) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($21|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = ($25|0)==(-1);
       if (!($28)) {
        break;
       }
       $29 = HEAP32[$0>>2]|0;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + -12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($29) + ($32)|0);
       $$sum4 = (($32) + 16)|0;
       $34 = (($29) + ($$sum4)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(423,($33|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        break;
       }
      }
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      (___cxa_begin_catch(($39|0))|0);
      __THREW__ = 0;
      invoke_v(397);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       $43 = ___cxa_find_matching_catch(0|0)|0;
       $44 = tempRet0;
       ___clang_call_terminate($43);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $$sum1 = (($4) + 16)|0;
   $8 = (($1) + ($$sum1)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$sum2 = (($4) + 4)|0;
    $11 = (($1) + ($$sum2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 8192;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (__ZSt18uncaught_exceptionv()|0);
     if (!($15)) {
      $16 = HEAP32[$0>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $$sum3 = (($19) + 24)|0;
      $20 = (($16) + ($$sum3)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = (($22) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($21|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = ($25|0)==(-1);
       if (!($28)) {
        break;
       }
       $29 = HEAP32[$0>>2]|0;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + -12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($29) + ($32)|0);
       $$sum4 = (($32) + 16)|0;
       $34 = (($29) + ($$sum4)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(423,($33|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        break;
       }
      }
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      (___cxa_begin_catch(($39|0))|0);
      __THREW__ = 0;
      invoke_v(397);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       $43 = ___cxa_find_matching_catch(0|0)|0;
       $44 = tempRet0;
       ___clang_call_terminate($43);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15560|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,15576,35);
 }
 return;
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[15624>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((15624|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[15616>>2] = ((16312 + 8|0));
   (___cxa_atexit((95|0),(15616|0),(___dso_handle|0))|0);
   ___cxa_guard_release((15624|0));
  }
 }
 return (15616|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((15632 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$0$ph = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 8;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0$ph = 1;
     label = 9;
     break;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$lcssa = $6;
     label = 7;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa;
    label = 8;
    break;
   }
   else if ((label|0) == 9) {
    $$0 = $$0$ph;
    break;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP8[$__p$01>>0]|0;
   $3 = $2 << 24 >> 24;
   $4 = (($3) + ($1))|0;
   $5 = $4 & -268435456;
   $6 = $5 >>> 24;
   $7 = $6 | $5;
   $8 = $7 ^ $4;
   $9 = (($__p$01) + 1|0);
   $10 = ($9|0)==($__hi|0);
   if ($10) {
    $$lcssa = $8;
    break;
   } else {
    $__h$02 = $8;$__p$01 = $9;
   }
  }
  $__h$0$lcssa = $$lcssa;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$0$ph = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 8;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0$ph = 1;
     label = 9;
     break;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$lcssa = $6;
     label = 7;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa;
    label = 8;
    break;
   }
   else if ((label|0) == 9) {
    $$0 = $$0$ph;
    break;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP32[$__p$01>>2]|0;
   $3 = (($2) + ($1))|0;
   $4 = $3 & -268435456;
   $5 = $4 >>> 24;
   $6 = $5 | $4;
   $7 = $6 ^ $3;
   $8 = (($__p$01) + 4|0);
   $9 = ($8|0)==($__hi|0);
   if ($9) {
    $$lcssa = $7;
    break;
   } else {
    $__h$02 = $7;$__p$01 = $8;
   }
  }
  $__h$0$lcssa = $$lcssa;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 64|0;
 $$byval_copy1 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   HEAP32[$__lv>>2] = -1;
   $10 = HEAP32[$this>>2]|0;
   $11 = (($10) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$__b>>2]|0;
   HEAP32[$1>>2] = $13;
   $14 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $14;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$12 & 511]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
   $15 = HEAP32[$0>>2]|0;
   HEAP32[$__b>>2] = $15;
   $16 = HEAP32[$__lv>>2]|0;
   if ((($16|0) == 0)) {
    HEAP8[$__v>>0] = 0;
   } else if ((($16|0) == 1)) {
    HEAP8[$__v>>0] = 1;
   } else {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   HEAP32[$agg$result>>2] = $15;
  } else {
   __ZNKSt3__18ios_base6getlocEv($3,$__iob);
   __THREW__ = 0;
   $17 = (invoke_iii(426,($3|0),(18040|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $45 = ___cxa_find_matching_catch()|0;
     $46 = tempRet0;
     $47 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $$0 = $45;$$01 = $46;
    } else {
     $20 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     __ZNKSt3__18ios_base6getlocEv($4,$__iob);
     __THREW__ = 0;
     $21 = (invoke_iii(426,($4|0),(18184|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $48 = ___cxa_find_matching_catch()|0;
      $49 = tempRet0;
      $50 = HEAP32[$4>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
      $$0 = $48;$$01 = $49;
      break;
     }
     $24 = HEAP32[$4>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
     $25 = HEAP32[$21>>2]|0;
     $26 = (($25) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     invoke_vii($27|0,($__names|0),($21|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $$02 = $__names;
     } else {
      $30 = (($__names) + 12|0);
      $31 = HEAP32[$21>>2]|0;
      $32 = (($31) + 28|0);
      $33 = HEAP32[$32>>2]|0;
      __THREW__ = 0;
      invoke_vii($33|0,($30|0),($21|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $$02 = $30;
      } else {
       $36 = HEAP32[$__e>>2]|0;
       HEAP32[$5>>2] = $36;
       $37 = (($__names) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
       $38 = (invoke_iiiiiiii(427,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $59 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($59);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
        $$0 = $57;$$01 = $58;
        break;
       } else {
        $41 = ($38|0)==($__names|0);
        $42 = $41&1;
        HEAP8[$__v>>0] = $42;
        $43 = HEAP32[$__b>>2]|0;
        HEAP32[$agg$result>>2] = $43;
        $44 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
        break L1;
       }
      }
     }
     $51 = ___cxa_find_matching_catch()|0;
     $52 = tempRet0;
     $53 = ($__names|0)==($$02|0);
     if ($53) {
      $$0 = $51;$$01 = $52;
     } else {
      $55 = $$02;
      while(1) {
       $54 = (($55) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($54);
       $56 = ($54|0)==($__names|0);
       if ($56) {
        break;
       } else {
        $55 = $54;
       }
      }
      $$0 = $51;$$01 = $52;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i24 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(428,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $85 = ___cxa_find_matching_catch()|0;
   $86 = tempRet0;
   $$0 = $85;$$01 = $86;
  } else {
   __THREW__ = 0;
   $3 = (invoke_iii(426,($0|0),(18040|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    $6 = HEAP32[$3>>2]|0;
    $7 = (($6) + 32|0);
    $8 = HEAP32[$7>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($8|0,($3|0),(16552|0),(((16552 + 26|0))|0),($__atoms|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     $11 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),10,0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     L6: do {
      if ($13) {
       label = 39;
      } else {
       $14 = HEAP8[$__buf>>0]|0;
       $15 = $14 & 1;
       $16 = ($15<<24>>24)==(0);
       if ($16) {
        $19 = (($__buf) + 1|0);
        $$pre36 = (($__buf) + 8|0);
        $$pre$phi35Z2D = $19;$$pre$phi37Z2D = $$pre36;$20 = $19;
       } else {
        $17 = (($__buf) + 8|0);
        $18 = HEAP32[$17>>2]|0;
        $$pre34 = (($__buf) + 1|0);
        $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $17;$20 = $18;
       }
       HEAP32[$__a_end>>2] = $20;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $21 = (($__buf) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i8 = $$pre;$__a$0 = $20;
       L12: while(1) {
        $22 = ($$pre$i$i$i8|0)==(0|0);
        if ($22) {
         $35 = 0;
        } else {
         $23 = (($$pre$i$i$i8) + 12|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = (($$pre$i$i$i8) + 16|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($24|0)==($26|0);
         if ($27) {
          $28 = HEAP32[$$pre$i$i$i8>>2]|0;
          $29 = (($28) + 36|0);
          $30 = HEAP32[$29>>2]|0;
          __THREW__ = 0;
          $31 = (invoke_ii($30|0,($$pre$i$i$i8|0))|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           label = 38;
           break;
          }
          $34 = ($31|0)==(-1);
          if ($34) {
           HEAP32[$__b>>2] = 0;
           $35 = 0;
          } else {
           $35 = $$pre$i$i$i8;
          }
         } else {
          $35 = $$pre$i$i$i8;
         }
        }
        $36 = ($35|0)==(0|0);
        $37 = HEAP32[$__e>>2]|0;
        $38 = ($37|0)==(0|0);
        do {
         if ($38) {
          label = 20;
         } else {
          $39 = (($37) + 12|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = (($37) + 16|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ($40|0)==($42|0);
          if (!($43)) {
           if ($36) {
            $168 = $37;
            break;
           } else {
            $$lcssa = $35;$$pre$i2$i$i = $37;$__a$2 = $__a$0;
            break L12;
           }
          }
          $44 = HEAP32[$37>>2]|0;
          $45 = (($44) + 36|0);
          $46 = HEAP32[$45>>2]|0;
          __THREW__ = 0;
          $47 = (invoke_ii($46|0,($37|0))|0);
          $48 = __THREW__; __THREW__ = 0;
          $49 = $48&1;
          if ($49) {
           label = 38;
           break L12;
          }
          $50 = ($47|0)==(-1);
          if ($50) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          } else {
           if ($36) {
            $168 = $37;
            break;
           } else {
            $$lcssa = $35;$$pre$i2$i$i = $37;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 20) {
         label = 0;
         if ($36) {
          $$lcssa = $35;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $51 = HEAP32[$__a_end>>2]|0;
        $52 = HEAP8[$__buf>>0]|0;
        $53 = $52 & 1;
        $54 = ($53<<24>>24)==(0);
        if ($54) {
         $56 = $52&255;
         $57 = $56 >>> 1;
         $59 = $57;
        } else {
         $55 = HEAP32[$21>>2]|0;
         $59 = $55;
        }
        $58 = (($__a$0) + ($59)|0);
        $60 = ($51|0)==($58|0);
        if ($60) {
         if ($54) {
          $62 = $52&255;
          $63 = $62 >>> 1;
          $64 = $52&255;
          $65 = $64 >>> 1;
          $67 = $65;$84 = $63;
         } else {
          $61 = HEAP32[$21>>2]|0;
          $67 = $61;$84 = $61;
         }
         $66 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(429,($__buf|0),($66|0),0);
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          label = 38;
          break;
         }
         $70 = HEAP8[$__buf>>0]|0;
         $71 = $70 & 1;
         $72 = ($71<<24>>24)==(0);
         if ($72) {
          $75 = 10;
         } else {
          $73 = HEAP32[$__buf>>2]|0;
          $74 = $73 & -2;
          $phitmp$i24 = (($74) + -1)|0;
          $75 = $phitmp$i24;
         }
         __THREW__ = 0;
         invoke_viii(429,($__buf|0),($75|0),0);
         $76 = __THREW__; __THREW__ = 0;
         $77 = $76&1;
         if ($77) {
          label = 38;
          break;
         }
         $78 = HEAP8[$__buf>>0]|0;
         $79 = $78 & 1;
         $80 = ($79<<24>>24)==(0);
         if ($80) {
          $83 = $$pre$phi35Z2D;
         } else {
          $81 = HEAP32[$$pre$phi37Z2D>>2]|0;
          $83 = $81;
         }
         $82 = (($83) + ($84)|0);
         HEAP32[$__a_end>>2] = $82;
         $__a$1 = $83;
        } else {
         $__a$1 = $__a$0;
        }
        $94 = (($35) + 12|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($35) + 16|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($95|0)==($97|0);
        if ($98) {
         $99 = HEAP32[$35>>2]|0;
         $100 = (($99) + 36|0);
         $101 = HEAP32[$100>>2]|0;
         __THREW__ = 0;
         $102 = (invoke_ii($101|0,($35|0))|0);
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          label = 38;
          break;
         } else {
          $$0$i$i = $102;
         }
        } else {
         $105 = HEAP8[$95>>0]|0;
         $106 = $105&255;
         $$0$i$i = $106;
        }
        $107 = $$0$i$i&255;
        $108 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($107,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$lcssa = $35;$$pre$i2$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$94>>2]|0;
        $111 = HEAP32[$96>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$35>>2]|0;
         $114 = (($113) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($35|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 38;
          break;
         }
        } else {
         $118 = (($110) + 1|0);
         HEAP32[$94>>2] = $118;
        }
        $$pre$i$i$i8 = $35;$__a$0 = $__a$1;
       }
       if ((label|0) == 38) {
        $90 = ___cxa_find_matching_catch()|0;
        $91 = tempRet0;
        $lpad$phi$index = $90;$lpad$phi$index2 = $91;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $119;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(429,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 39;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        if ($127) {
         $132 = $$pre$phi35Z2D;
        } else {
         $128 = HEAP32[$$pre$phi37Z2D>>2]|0;
         $132 = $128;
        }
        __THREW__ = 0;
        $129 = (invoke_i(430)|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 39;
        } else {
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(431,($132|0),($129|0),(16592|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 39;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$lcssa|0)==(0|0);
          if ($137) {
           $150 = 0;
          } else {
           $138 = (($$lcssa) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = (($$lcssa) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$lcssa>>2]|0;
            $144 = (($143) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 39;
             break;
            }
            $149 = ($146|0)==(-1);
            if ($149) {
             HEAP32[$__b>>2] = 0;
             $150 = 0;
            } else {
             $150 = $$lcssa;
            }
           } else {
            $150 = $$lcssa;
           }
          }
          $151 = ($150|0)==(0|0);
          $152 = ($$pre$i2$i$i|0)==(0|0);
          do {
           if ($152) {
            label = 67;
           } else {
            $153 = (($$pre$i2$i$i) + 12|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = (($$pre$i2$i$i) + 16|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ($154|0)==($156|0);
            if (!($157)) {
             if ($151) {
              break;
             } else {
              label = 69;
              break;
             }
            }
            $158 = HEAP32[$$pre$i2$i$i>>2]|0;
            $159 = (($158) + 36|0);
            $160 = HEAP32[$159>>2]|0;
            __THREW__ = 0;
            $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
            $162 = __THREW__; __THREW__ = 0;
            $163 = $162&1;
            if ($163) {
             label = 39;
             break L6;
            }
            $164 = ($161|0)==(-1);
            if ($164) {
             HEAP32[$__e>>2] = 0;
             label = 67;
             break;
            } else {
             $165 = ($$pre$i2$i$i|0)==(0|0);
             $tmp$i$i = $151 ^ $165;
             if ($tmp$i$i) {
              break;
             } else {
              label = 69;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 67) {
           if ($151) {
            label = 69;
           }
          }
          if ((label|0) == 69) {
           $166 = HEAP32[$__err>>2]|0;
           $167 = $166 | 2;
           HEAP32[$__err>>2] = $167;
          }
          HEAP32[$agg$result>>2] = $150;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 39) {
      $92 = ___cxa_find_matching_catch()|0;
      $93 = tempRet0;
      $lpad$phi$index = $92;$lpad$phi$index2 = $93;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $89 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
   $$0 = $87;$$01 = $88;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $15 = $10&255;
    $16 = $15 >>> 1;
    $17 = $16;
   } else {
    $13 = (($__grouping) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $17 = $14;
   }
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = (($20) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = (($__atoms) + 26|0);
   $$01$i = $__atoms;
   while(1) {
    $30 = HEAP8[$$01$i>>0]|0;
    $31 = ($30<<24>>24)==($__ct<<24>>24);
    $28 = (($$01$i) + 1|0);
    if ($31) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $29 = ($28|0)==($27|0);
    if ($29) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$01$i = $28;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$0 = -1;
   } else {
    if ((($__base|0) == 10) | (($__base|0) == 8)) {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$0 = -1;
      break;
     }
    } else if ((($__base|0) == 16)) {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$0 = -1;
       break;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$0 = -1;
       break;
      }
      $42 = (($0) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$0 = -1;
       break;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (16552 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = (($0) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$0 = 0;
      break;
     }
    }
    $48 = (16552 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = (($0) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17936>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17936|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(432,2147483647,(17944|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((17936|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[17928>>2] = $4;
     ___cxa_guard_release((17936|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[17928>>2]|0;
 return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 64|0;
 $$byval_copy1 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   HEAP32[$__lv>>2] = -1;
   $10 = HEAP32[$this>>2]|0;
   $11 = (($10) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$__b>>2]|0;
   HEAP32[$1>>2] = $13;
   $14 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $14;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$12 & 511]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
   $15 = HEAP32[$0>>2]|0;
   HEAP32[$__b>>2] = $15;
   $16 = HEAP32[$__lv>>2]|0;
   if ((($16|0) == 1)) {
    HEAP8[$__v>>0] = 1;
   } else if ((($16|0) == 0)) {
    HEAP8[$__v>>0] = 0;
   } else {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   HEAP32[$agg$result>>2] = $15;
  } else {
   __ZNKSt3__18ios_base6getlocEv($3,$__iob);
   __THREW__ = 0;
   $17 = (invoke_iii(426,($3|0),(18032|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $45 = ___cxa_find_matching_catch()|0;
     $46 = tempRet0;
     $47 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $$0 = $45;$$01 = $46;
    } else {
     $20 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     __ZNKSt3__18ios_base6getlocEv($4,$__iob);
     __THREW__ = 0;
     $21 = (invoke_iii(426,($4|0),(18192|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $48 = ___cxa_find_matching_catch()|0;
      $49 = tempRet0;
      $50 = HEAP32[$4>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
      $$0 = $48;$$01 = $49;
      break;
     }
     $24 = HEAP32[$4>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
     $25 = HEAP32[$21>>2]|0;
     $26 = (($25) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     invoke_vii($27|0,($__names|0),($21|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $$02 = $__names;
     } else {
      $30 = (($__names) + 12|0);
      $31 = HEAP32[$21>>2]|0;
      $32 = (($31) + 28|0);
      $33 = HEAP32[$32>>2]|0;
      __THREW__ = 0;
      invoke_vii($33|0,($30|0),($21|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $$02 = $30;
      } else {
       $36 = HEAP32[$__e>>2]|0;
       HEAP32[$5>>2] = $36;
       $37 = (($__names) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
       $38 = (invoke_iiiiiiii(433,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $59 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($59);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
        $$0 = $57;$$01 = $58;
        break;
       } else {
        $41 = ($38|0)==($__names|0);
        $42 = $41&1;
        HEAP8[$__v>>0] = $42;
        $43 = HEAP32[$__b>>2]|0;
        HEAP32[$agg$result>>2] = $43;
        $44 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($44);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
        break L1;
       }
      }
     }
     $51 = ___cxa_find_matching_catch()|0;
     $52 = tempRet0;
     $53 = ($__names|0)==($$02|0);
     if ($53) {
      $$0 = $51;$$01 = $52;
     } else {
      $55 = $$02;
      while(1) {
       $54 = (($55) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($54);
       $56 = ($54|0)==($__names|0);
       if ($56) {
        break;
       } else {
        $55 = $54;
       }
      }
      $$0 = $51;$$01 = $52;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $$pre37 = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i28 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(428,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $85 = ___cxa_find_matching_catch()|0;
   $86 = tempRet0;
   $$0 = $85;$$01 = $86;
  } else {
   __THREW__ = 0;
   $3 = (invoke_iii(426,($0|0),(18032|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    $6 = HEAP32[$3>>2]|0;
    $7 = (($6) + 48|0);
    $8 = HEAP32[$7>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($8|0,($3|0),(16552|0),(((16552 + 26|0))|0),($__atoms|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     $11 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),10,0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     L6: do {
      if ($13) {
       label = 40;
      } else {
       $14 = HEAP8[$__buf>>0]|0;
       $15 = $14 & 1;
       $16 = ($15<<24>>24)==(0);
       if ($16) {
        $19 = (($__buf) + 1|0);
        $$pre39 = (($__buf) + 8|0);
        $$pre$phi38Z2D = $19;$$pre$phi40Z2D = $$pre39;$20 = $19;
       } else {
        $17 = (($__buf) + 8|0);
        $18 = HEAP32[$17>>2]|0;
        $$pre37 = (($__buf) + 1|0);
        $$pre$phi38Z2D = $$pre37;$$pre$phi40Z2D = $17;$20 = $18;
       }
       HEAP32[$__a_end>>2] = $20;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $21 = (($__buf) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i9 = $$pre;$__a$0 = $20;
       L12: while(1) {
        $22 = ($$pre$i$i$i9|0)==(0|0);
        if ($22) {
         $167 = 1;$95 = 0;
        } else {
         $23 = (($$pre$i$i$i9) + 12|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = (($$pre$i$i$i9) + 16|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($24|0)==($26|0);
         if ($27) {
          $28 = HEAP32[$$pre$i$i$i9>>2]|0;
          $29 = (($28) + 36|0);
          $30 = HEAP32[$29>>2]|0;
          __THREW__ = 0;
          $31 = (invoke_ii($30|0,($$pre$i$i$i9|0))|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           label = 39;
           break;
          } else {
           $$0$i$i$i$i7 = $31;
          }
         } else {
          $34 = HEAP32[$24>>2]|0;
          $$0$i$i$i$i7 = $34;
         }
         $35 = ($$0$i$i$i$i7|0)==(-1);
         if ($35) {
          HEAP32[$__b>>2] = 0;
          $167 = 1;$95 = 0;
         } else {
          $167 = 0;$95 = $$pre$i$i$i9;
         }
        }
        $36 = HEAP32[$__e>>2]|0;
        $37 = ($36|0)==(0|0);
        do {
         if ($37) {
          label = 21;
         } else {
          $38 = (($36) + 12|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = (($36) + 16|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = ($39|0)==($41|0);
          if ($42) {
           $43 = HEAP32[$36>>2]|0;
           $44 = (($43) + 36|0);
           $45 = HEAP32[$44>>2]|0;
           __THREW__ = 0;
           $46 = (invoke_ii($45|0,($36|0))|0);
           $47 = __THREW__; __THREW__ = 0;
           $48 = $47&1;
           if ($48) {
            label = 39;
            break L12;
           } else {
            $$0$i$i1$i$i13 = $46;
           }
          } else {
           $49 = HEAP32[$39>>2]|0;
           $$0$i$i1$i$i13 = $49;
          }
          $50 = ($$0$i$i1$i$i13|0)==(-1);
          if ($50) {
           HEAP32[$__e>>2] = 0;
           label = 21;
           break;
          } else {
           if ($167) {
            $168 = $36;
            break;
           } else {
            $$lcssa = $95;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 21) {
         label = 0;
         if ($167) {
          $$lcssa = $95;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $51 = HEAP32[$__a_end>>2]|0;
        $52 = HEAP8[$__buf>>0]|0;
        $53 = $52 & 1;
        $54 = ($53<<24>>24)==(0);
        if ($54) {
         $56 = $52&255;
         $57 = $56 >>> 1;
         $59 = $57;
        } else {
         $55 = HEAP32[$21>>2]|0;
         $59 = $55;
        }
        $58 = (($__a$0) + ($59)|0);
        $60 = ($51|0)==($58|0);
        if ($60) {
         if ($54) {
          $62 = $52&255;
          $63 = $62 >>> 1;
          $64 = $52&255;
          $65 = $64 >>> 1;
          $67 = $65;$84 = $63;
         } else {
          $61 = HEAP32[$21>>2]|0;
          $67 = $61;$84 = $61;
         }
         $66 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(429,($__buf|0),($66|0),0);
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          label = 39;
          break;
         }
         $70 = HEAP8[$__buf>>0]|0;
         $71 = $70 & 1;
         $72 = ($71<<24>>24)==(0);
         if ($72) {
          $75 = 10;
         } else {
          $73 = HEAP32[$__buf>>2]|0;
          $74 = $73 & -2;
          $phitmp$i28 = (($74) + -1)|0;
          $75 = $phitmp$i28;
         }
         __THREW__ = 0;
         invoke_viii(429,($__buf|0),($75|0),0);
         $76 = __THREW__; __THREW__ = 0;
         $77 = $76&1;
         if ($77) {
          label = 39;
          break;
         }
         $78 = HEAP8[$__buf>>0]|0;
         $79 = $78 & 1;
         $80 = ($79<<24>>24)==(0);
         if ($80) {
          $83 = $$pre$phi38Z2D;
         } else {
          $81 = HEAP32[$$pre$phi40Z2D>>2]|0;
          $83 = $81;
         }
         $82 = (($83) + ($84)|0);
         HEAP32[$__a_end>>2] = $82;
         $__a$1 = $83;
        } else {
         $__a$1 = $__a$0;
        }
        $94 = (($95) + 12|0);
        $96 = HEAP32[$94>>2]|0;
        $97 = (($95) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$95>>2]|0;
         $101 = (($100) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($95|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 39;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP32[$96>>2]|0;
         $$0$i$i = $106;
        }
        $107 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $108 = ($107|0)==(0);
        if (!($108)) {
         $$lcssa = $95;$$pre$i3$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $109 = HEAP32[$94>>2]|0;
        $110 = HEAP32[$97>>2]|0;
        $111 = ($109|0)==($110|0);
        if ($111) {
         $112 = HEAP32[$95>>2]|0;
         $113 = (($112) + 40|0);
         $114 = HEAP32[$113>>2]|0;
         __THREW__ = 0;
         (invoke_ii($114|0,($95|0))|0);
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if ($116) {
          label = 39;
          break;
         }
        } else {
         $117 = (($109) + 4|0);
         HEAP32[$94>>2] = $117;
        }
        $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
       }
       if ((label|0) == 39) {
        $90 = ___cxa_find_matching_catch()|0;
        $91 = tempRet0;
        $lpad$phi$index = $90;$lpad$phi$index2 = $91;
        break;
       }
       $118 = HEAP32[$__a_end>>2]|0;
       $119 = $118;
       $120 = $__a$2;
       $121 = (($119) - ($120))|0;
       __THREW__ = 0;
       invoke_viii(429,($__buf|0),($121|0),0);
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        label = 40;
       } else {
        $124 = HEAP8[$__buf>>0]|0;
        $125 = $124 & 1;
        $126 = ($125<<24>>24)==(0);
        if ($126) {
         $131 = $$pre$phi38Z2D;
        } else {
         $127 = HEAP32[$$pre$phi40Z2D>>2]|0;
         $131 = $127;
        }
        __THREW__ = 0;
        $128 = (invoke_i(430)|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 40;
        } else {
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $132 = (invoke_iiiii(431,($131|0),($128|0),(16592|0),($vararg_buffer|0))|0);
         $133 = __THREW__; __THREW__ = 0;
         $134 = $133&1;
         if ($134) {
          label = 40;
         } else {
          $135 = ($132|0)==(1);
          if (!($135)) {
           HEAP32[$__err>>2] = 4;
          }
          $136 = ($$lcssa|0)==(0|0);
          if ($136) {
           $166 = 0;$169 = 1;
          } else {
           $137 = (($$lcssa) + 12|0);
           $138 = HEAP32[$137>>2]|0;
           $139 = (($$lcssa) + 16|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ($138|0)==($140|0);
           if ($141) {
            $142 = HEAP32[$$lcssa>>2]|0;
            $143 = (($142) + 36|0);
            $144 = HEAP32[$143>>2]|0;
            __THREW__ = 0;
            $145 = (invoke_ii($144|0,($$lcssa|0))|0);
            $146 = __THREW__; __THREW__ = 0;
            $147 = $146&1;
            if ($147) {
             label = 40;
             break;
            } else {
             $$0$i$i$i$i = $145;
            }
           } else {
            $148 = HEAP32[$138>>2]|0;
            $$0$i$i$i$i = $148;
           }
           $149 = ($$0$i$i$i$i|0)==(-1);
           if ($149) {
            HEAP32[$__b>>2] = 0;
            $166 = 0;$169 = 1;
           } else {
            $166 = $$lcssa;$169 = 0;
           }
          }
          $150 = ($$pre$i3$i$i|0)==(0|0);
          do {
           if ($150) {
            label = 69;
           } else {
            $151 = (($$pre$i3$i$i) + 12|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = (($$pre$i3$i$i) + 16|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ($152|0)==($154|0);
            if ($155) {
             $156 = HEAP32[$$pre$i3$i$i>>2]|0;
             $157 = (($156) + 36|0);
             $158 = HEAP32[$157>>2]|0;
             __THREW__ = 0;
             $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
             $160 = __THREW__; __THREW__ = 0;
             $161 = $160&1;
             if ($161) {
              label = 40;
              break L6;
             } else {
              $$0$i$i1$i$i = $159;
             }
            } else {
             $162 = HEAP32[$152>>2]|0;
             $$0$i$i1$i$i = $162;
            }
            $163 = ($$0$i$i1$i$i|0)==(-1);
            if ($163) {
             HEAP32[$__e>>2] = 0;
             label = 69;
             break;
            } else {
             if ($169) {
              break;
             } else {
              label = 71;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 69) {
           if ($169) {
            label = 71;
           }
          }
          if ((label|0) == 71) {
           $164 = HEAP32[$__err>>2]|0;
           $165 = $164 | 2;
           HEAP32[$__err>>2] = $165;
          }
          HEAP32[$agg$result>>2] = $166;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      $92 = ___cxa_find_matching_catch()|0;
      $93 = tempRet0;
      $lpad$phi$index = $92;$lpad$phi$index2 = $93;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $89 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
   $$0 = $87;$$01 = $88;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $15 = $10&255;
    $16 = $15 >>> 1;
    $17 = $16;
   } else {
    $13 = (($__grouping) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $17 = $14;
   }
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = (($20) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = (($__atoms) + 104|0);
   $$01$i = $__atoms;
   while(1) {
    $30 = HEAP32[$$01$i>>2]|0;
    $31 = ($30|0)==($__ct|0);
    $28 = (($$01$i) + 4|0);
    if ($31) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $29 = ($28|0)==($27|0);
    if ($29) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$01$i = $28;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$0 = -1;
   } else {
    if ((($__base|0) == 10) | (($__base|0) == 8)) {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$0 = -1;
      break;
     }
    } else if ((($__base|0) == 16)) {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$0 = -1;
       break;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$0 = -1;
       break;
      }
      $43 = (($0) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$0 = -1;
       break;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (16552 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = (($0) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$0 = 0;
      break;
     }
    }
    $49 = (16552 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = (($0) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(426,($__loc|0),(18040|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(16552|0),(((16552 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(426,($__loc|0),(18184|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__thousands_sep>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(426,($__loc|0),(18040|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(16552|0),(((16552 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(426,($__loc|0),(18184|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__decimal_point>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP8[$__thousands_sep>>0] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = (($3) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $10 = $5&255;
     $11 = $10 >>> 1;
     $12 = $11;
    } else {
     $8 = (($__grouping) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $12 = $9;
    }
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = (($14) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $29 = $28;
    } else {
     $25 = (($__grouping) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $29 = $26;
    }
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = (($33) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = (($__atoms) + 32|0);
   $$01$i = $__atoms;
   while(1) {
    $43 = HEAP8[$$01$i>>0]|0;
    $44 = ($43<<24>>24)==($__ct<<24>>24);
    $41 = (($$01$i) + 1|0);
    if ($44) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $42 = ($41|0)==($40|0);
    if ($42) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$01$i = $41;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$0 = -1;
   } else {
    $49 = (16552 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    if ((($47|0) == 23) | (($47|0) == 22)) {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = (($62) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$0 = 0;
     break;
    } else if ((($47|0) == 24) | (($47|0) == 25)) {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = (($51) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$0 = -1;
       break;
      }
     }
     $61 = (($51) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$0 = 0;
     break;
    } else {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $78 = $73&255;
        $79 = $78 >>> 1;
        $80 = $79;
       } else {
        $76 = (($__grouping) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $80 = $77;
       }
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = (($82) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = (($89) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$0 = 0;
      break;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$0 = 0;
     break;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(426,($__loc|0),(18032|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(16552|0),(((16552 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(426,($__loc|0),(18192|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__thousands_sep>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(426,($__loc|0),(18032|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(16552|0),(((16552 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(426,($__loc|0),(18192|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__decimal_point>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP32[$__thousands_sep>>2] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = (($3) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $10 = $5&255;
     $11 = $10 >>> 1;
     $12 = $11;
    } else {
     $8 = (($__grouping) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $12 = $9;
    }
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = (($14) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $29 = $28;
    } else {
     $25 = (($__grouping) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $29 = $26;
    }
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = (($33) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = (($__atoms) + 128|0);
   $$01$i = $__atoms;
   while(1) {
    $43 = HEAP32[$$01$i>>2]|0;
    $44 = ($43|0)==($__ct|0);
    $41 = (($$01$i) + 4|0);
    if ($44) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $42 = ($41|0)==($40|0);
    if ($42) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$01$i = $41;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$0 = -1;
   } else {
    $50 = (16552 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    if ((($48|0) == 24) | (($48|0) == 25)) {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = (($52) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$0 = -1;
       break;
      }
     }
     $62 = (($52) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$0 = 0;
     break;
    } else if ((($48|0) == 23) | (($48|0) == 22)) {
     HEAP8[$__exp>>0] = 80;
    } else {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       if ($74) {
        $77 = $72&255;
        $78 = $77 >>> 1;
        $79 = $78;
       } else {
        $75 = (($__grouping) + 4|0);
        $76 = HEAP32[$75>>2]|0;
        $79 = $76;
       }
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = (($81) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$0 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = (($6) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  } else {
   __ZNKSt3__18ios_base6getlocEv($1,$__iob);
   __THREW__ = 0;
   $11 = (invoke_iii(426,($1|0),(18184|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   do {
    if ($13) {
     $57 = ___cxa_find_matching_catch()|0;
     $58 = tempRet0;
     $59 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
     $$0 = $57;$$01 = $58;
    } else {
     $14 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
     $15 = HEAP32[$11>>2]|0;
     if ($__v) {
      $16 = (($15) + 24|0);
      $17 = HEAP32[$16>>2]|0;
      FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
     } else {
      $18 = (($15) + 28|0);
      $19 = HEAP32[$18>>2]|0;
      FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
     }
     $20 = HEAP8[$__nm>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__nm) + 1|0);
      $$pre5 = (($__nm) + 8|0);
      $$ph = $25;$$pre$phi4Z2D = $25;$$pre$phi6Z2D = $$pre5;
     } else {
      $23 = (($__nm) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $$pre3 = (($__nm) + 1|0);
      $$ph = $24;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $23;
     }
     $26 = (($__nm) + 4|0);
     $28 = $20;$37 = $$ph;
     L14: while(1) {
      $27 = $28 & 1;
      $29 = ($27<<24>>24)==(0);
      if ($29) {
       $32 = $28&255;
       $33 = $32 >>> 1;
       $35 = $$pre$phi4Z2D;$36 = $33;
      } else {
       $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
       $31 = HEAP32[$26>>2]|0;
       $35 = $30;$36 = $31;
      }
      $34 = (($35) + ($36)|0);
      $38 = ($37|0)==($34|0);
      if ($38) {
       label = 24;
       break;
      }
      $39 = HEAP8[$37>>0]|0;
      $40 = HEAP32[$__s>>2]|0;
      $41 = ($40|0)==(0|0);
      do {
       if (!($41)) {
        $42 = (($40) + 24|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = (($40) + 28|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($43|0)==($45|0);
        if (!($46)) {
         $47 = (($43) + 1|0);
         HEAP32[$42>>2] = $47;
         HEAP8[$43>>0] = $39;
         break;
        }
        $48 = HEAP32[$40>>2]|0;
        $49 = (($48) + 52|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = $39&255;
        __THREW__ = 0;
        $52 = (invoke_iii($50|0,($40|0),($51|0))|0);
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if ($54) {
         label = 23;
         break L14;
        }
        $55 = ($52|0)==(-1);
        if ($55) {
         HEAP32[$__s>>2] = 0;
        }
       }
      } while(0);
      $56 = (($37) + 1|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $28 = $$pre;$37 = $56;
     }
     if ((label|0) == 23) {
      $60 = ___cxa_find_matching_catch()|0;
      $61 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      $$0 = $60;$$01 = $61;
      break;
     }
     else if ((label|0) == 24) {
      $62 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$result>>2] = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      break L1;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[16832+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[16832+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[16832+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[16832+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[16832+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[16832+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,16736,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(434,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
  $$1$lcssa = $$lcssa;
 }
 $13 = $__flags & 74;
 do {
  if ((($13|0) == 64)) {
   HEAP8[$$1$lcssa>>0] = 111;
  } else if ((($13|0) == 8)) {
   $14 = $__flags & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$$1$lcssa>>0] = 120;
    break;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break;
   }
  } else {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$12 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $132$phi = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $71$phi = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18040)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18184)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $12 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = ($12|0)==(0);
 L5: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    label = 41;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;$71 = $__ne;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($71) + -2|0);
      $72 = ($69>>>0)<($70>>>0);
      if ($72) {
       $71$phi = $68;$$012$i$i5 = $69;$68 = $70;$71 = $71$phi;
      } else {
       break;
      }
     }
    }
   }
   $73 = HEAP32[$1>>2]|0;
   $74 = (($73) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   __THREW__ = 0;
   $76 = (invoke_ii($75|0,($1|0))|0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    label = 8;
   } else {
    $79 = ($__nf$1>>>0)<($__ne>>>0);
    do {
     if ($79) {
      $80 = (($__grouping) + 1|0);
      $81 = (($__grouping) + 4|0);
      $82 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $83 = HEAP8[$__grouping>>0]|0;
       $84 = $83 & 1;
       $85 = ($84<<24>>24)==(0);
       $86 = HEAP32[$82>>2]|0;
       $$ = $85 ? $80 : $86;
       $87 = (($$) + ($__dg$010)|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = ($88<<24>>24)==(0);
       if ($89) {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       } else {
        $90 = HEAP32[$82>>2]|0;
        $$12 = $85 ? $80 : $90;
        $91 = (($$12) + ($__dg$010)|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = $92 << 24 >> 24;
        $94 = ($__dc$09|0)==($93|0);
        if ($94) {
         $95 = HEAP32[$__oe>>2]|0;
         $96 = (($95) + 1|0);
         HEAP32[$__oe>>2] = $96;
         HEAP8[$95>>0] = $76;
         $97 = HEAP8[$__grouping>>0]|0;
         $98 = $97 & 1;
         $99 = ($98<<24>>24)==(0);
         if ($99) {
          $101 = $97&255;
          $102 = $101 >>> 1;
          $104 = $102;
         } else {
          $100 = HEAP32[$81>>2]|0;
          $104 = $100;
         }
         $103 = (($104) + -1)|0;
         $105 = ($__dg$010>>>0)<($103>>>0);
         $106 = $105&1;
         $$__dg$0 = (($106) + ($__dg$010))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
        }
       }
       $107 = HEAP8[$__p$011>>0]|0;
       $108 = HEAP32[$0>>2]|0;
       $109 = (($108) + 28|0);
       $110 = HEAP32[$109>>2]|0;
       __THREW__ = 0;
       $111 = (invoke_iii($110|0,($0|0),($107|0))|0);
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        label = 7;
        break;
       }
       $114 = HEAP32[$__oe>>2]|0;
       $115 = (($114) + 1|0);
       HEAP32[$__oe>>2] = $115;
       HEAP8[$114>>0] = $111;
       $116 = (($__dc$1) + 1)|0;
       $117 = (($__p$011) + 1|0);
       $118 = ($117>>>0)<($__ne>>>0);
       if ($118) {
        $__dc$09 = $116;$__dg$010 = $__dg$1;$__p$011 = $117;
       } else {
        label = 35;
        break;
       }
      }
      if ((label|0) == 7) {
       $23 = ___cxa_find_matching_catch()|0;
       $24 = tempRet0;
       $lpad$phi$index = $23;$lpad$phi$index2 = $24;
       break L5;
      }
      else if ((label|0) == 35) {
       break;
      }
     }
    } while(0);
    $119 = $__nf$1;
    $120 = $__nb;
    $121 = (($119) - ($120))|0;
    $122 = (($__ob) + ($121)|0);
    $123 = HEAP32[$__oe>>2]|0;
    $124 = ($122|0)==($123|0);
    if ($124) {
     label = 41;
    } else {
     $125 = (($123) + -1|0);
     $126 = ($125>>>0)>($122>>>0);
     if ($126) {
      $$012$i$i = $122;$129 = $125;$132 = $123;
      while(1) {
       $127 = HEAP8[$$012$i$i>>0]|0;
       $128 = HEAP8[$129>>0]|0;
       HEAP8[$$012$i$i>>0] = $128;
       HEAP8[$129>>0] = $127;
       $130 = (($$012$i$i) + 1|0);
       $131 = (($132) + -2|0);
       $133 = ($130>>>0)<($131>>>0);
       if ($133) {
        $132$phi = $129;$$012$i$i = $130;$129 = $131;$132 = $132$phi;
       } else {
        break;
       }
      }
      label = 41;
     } else {
      label = 41;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 41) {
  $134 = ($__np|0)==($__ne|0);
  if ($134) {
   $135 = HEAP32[$__oe>>2]|0;
   $storemerge = $135;
  } else {
   $136 = $__np;
   $137 = $__nb;
   $138 = (($136) - ($137))|0;
   $139 = (($__ob) + ($138)|0);
   $storemerge = $139;
  }
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,16744,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(434,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[16832+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[16832+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[16832+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[16832+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[16832+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[16832+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,16736,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(434,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,16744,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(434,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,16752,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(430)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(435,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(430)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(435,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$64 = $35;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(436);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$64 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $40 = $$pre9;$64 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $39 = (($40) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
  $42 = ($40|0)==($__nar|0);
  if ($42) {
   $52 = $__nar;$62 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $43 = $__nc$2 << 1;
   $44 = (_malloc($43)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    __THREW__ = 0;
    invoke_v(436);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $72 = 0;
     label = 19;
    } else {
     $$pre10 = HEAP32[$__nb>>2]|0;
     $52 = $$pre10;$62 = 0;$__ob$0 = 0;
     label = 20;
    }
   } else {
    $52 = $40;$62 = $44;$__ob$0 = $44;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(428,($0|0),($__iob|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $72 = $62;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(437,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $66 = ___cxa_find_matching_catch()|0;
      $67 = tempRet0;
      $68 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
      $$0 = $66;$$01 = $67;$69 = $62;
      break;
     }
     $55 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
     $56 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $56;
     $57 = HEAP32[$__op>>2]|0;
     $58 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(438,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $72 = $62;
      label = 19;
     } else {
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__s>>2] = $61;
      HEAP32[$agg$result>>2] = $61;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       _free($62);
      }
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       _free($64);
      }
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $$0 = $48;$$01 = $49;$69 = $72;
  }
  $70 = ($69|0)==(0|0);
  if (!($70)) {
   _free($69);
  }
  $71 = ($64|0)==(0|0);
  if ($71) {
   $$127 = $$01;$$18 = $$0;
  } else {
   _free($64);
   $$127 = $$01;$$18 = $$0;
  }
 }
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
  $$2$lcssa = $$lcssa;
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$51 = 0, $$__dg$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $103$phi = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $164$phi = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$027 = 0, $__dc$1 = 0, $__dg$028 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$226 = 0, $__nf$226$lcssa = 0;
 var $__nf$3 = 0, $__ns$036 = 0, $__ns$131 = 0, $__ns$2 = 0, $__ns$2$ph = 0, $__ns$2$ph53 = 0, $__p$029 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18040)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18184)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        label = 8;
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 1|0);
       HEAP32[$__oe>>2] = $41;
       HEAP8[$40>>0] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 28|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 8;
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$__oe>>2] = $51;
       HEAP8[$50>>0] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$036 = $42;
        while(1) {
         $55 = HEAP8[$__ns$036>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(430)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 7;
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(439,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          label = 7;
          break;
         }
         $63 = ($60|0)==(0);
         $53 = (($__ns$036) + 1|0);
         if ($63) {
          $__ns$2$ph53 = $__ns$036;
          label = 28;
          break;
         }
         $54 = ($53>>>0)<($__ne>>>0);
         if ($54) {
          $__ns$036 = $53;
         } else {
          $__ns$2$ph53 = $53;
          label = 28;
          break;
         }
        }
        if ((label|0) == 7) {
         $21 = ___cxa_find_matching_catch()|0;
         $22 = tempRet0;
         $lpad$phi$index = $21;$lpad$phi$index5 = $22;
         break L4;
        }
        else if ((label|0) == 28) {
         $__nf$1 = $42;$__ns$2 = $__ns$2$ph53;
         break;
        }
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$131 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$131>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(430)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 6;
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(440,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        label = 6;
        break;
       }
       $74 = ($71|0)==(0);
       $64 = (($__ns$131) + 1|0);
       if ($74) {
        $__ns$2$ph = $__ns$131;
        label = 27;
        break;
       }
       $65 = ($64>>>0)<($__ne>>>0);
       if ($65) {
        $__ns$131 = $64;
       } else {
        $__ns$2$ph = $64;
        label = 27;
        break;
       }
      }
      if ((label|0) == 6) {
       $19 = ___cxa_find_matching_catch()|0;
       $20 = tempRet0;
       $lpad$phi$index = $19;$lpad$phi$index5 = $20;
       break L4;
      }
      else if ((label|0) == 27) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$2$ph;
       break;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $82 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $82 = $79;
   }
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;$103 = $__ns$2;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($103) + -2|0);
       $104 = ($101>>>0)<($102>>>0);
       if ($104) {
        $103$phi = $100;$$012$i$i = $101;$100 = $102;$103 = $103$phi;
       } else {
        break;
       }
      }
     }
    }
    $105 = HEAP32[$1>>2]|0;
    $106 = (($105) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($1|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 8;
     break;
    }
    $111 = ($__nf$1>>>0)<($__ns$2>>>0);
    do {
     if ($111) {
      $112 = (($__grouping) + 1|0);
      $113 = (($__grouping) + 4|0);
      $114 = (($__grouping) + 8|0);
      $__dc$027 = 0;$__dg$028 = 0;$__p$029 = $__nf$1;
      while(1) {
       $115 = HEAP8[$__grouping>>0]|0;
       $116 = $115 & 1;
       $117 = ($116<<24>>24)==(0);
       $118 = HEAP32[$114>>2]|0;
       $$ = $117 ? $112 : $118;
       $119 = (($$) + ($__dg$028)|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = ($120<<24>>24)>(0);
       if ($121) {
        $122 = HEAP32[$114>>2]|0;
        $$51 = $117 ? $112 : $122;
        $123 = (($$51) + ($__dg$028)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = $124 << 24 >> 24;
        $126 = ($__dc$027|0)==($125|0);
        if ($126) {
         $127 = HEAP32[$__oe>>2]|0;
         $128 = (($127) + 1|0);
         HEAP32[$__oe>>2] = $128;
         HEAP8[$127>>0] = $108;
         $129 = HEAP8[$__grouping>>0]|0;
         $130 = $129 & 1;
         $131 = ($130<<24>>24)==(0);
         if ($131) {
          $133 = $129&255;
          $134 = $133 >>> 1;
          $136 = $134;
         } else {
          $132 = HEAP32[$113>>2]|0;
          $136 = $132;
         }
         $135 = (($136) + -1)|0;
         $137 = ($__dg$028>>>0)<($135>>>0);
         $138 = $137&1;
         $$__dg$0 = (($138) + ($__dg$028))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$027;$__dg$1 = $__dg$028;
        }
       } else {
        $__dc$1 = $__dc$027;$__dg$1 = $__dg$028;
       }
       $139 = HEAP8[$__p$029>>0]|0;
       $140 = HEAP32[$0>>2]|0;
       $141 = (($140) + 28|0);
       $142 = HEAP32[$141>>2]|0;
       __THREW__ = 0;
       $143 = (invoke_iii($142|0,($0|0),($139|0))|0);
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if ($145) {
        label = 5;
        break;
       }
       $146 = HEAP32[$__oe>>2]|0;
       $147 = (($146) + 1|0);
       HEAP32[$__oe>>2] = $147;
       HEAP8[$146>>0] = $143;
       $148 = (($__dc$1) + 1)|0;
       $149 = (($__p$029) + 1|0);
       $150 = ($149>>>0)<($__ns$2>>>0);
       if ($150) {
        $__dc$027 = $148;$__dg$028 = $__dg$1;$__p$029 = $149;
       } else {
        label = 51;
        break;
       }
      }
      if ((label|0) == 5) {
       $17 = ___cxa_find_matching_catch()|0;
       $18 = tempRet0;
       $lpad$phi$index = $17;$lpad$phi$index5 = $18;
       break L4;
      }
      else if ((label|0) == 51) {
       break;
      }
     }
    } while(0);
    $151 = $__nf$1;
    $152 = $__nb;
    $153 = (($151) - ($152))|0;
    $154 = (($__ob) + ($153)|0);
    $155 = HEAP32[$__oe>>2]|0;
    $156 = ($154|0)==($155|0);
    if (!($156)) {
     $157 = (($155) + -1|0);
     $158 = ($157>>>0)>($154>>>0);
     if ($158) {
      $$012$i$i7 = $154;$161 = $157;$164 = $155;
      while(1) {
       $159 = HEAP8[$$012$i$i7>>0]|0;
       $160 = HEAP8[$161>>0]|0;
       HEAP8[$$012$i$i7>>0] = $160;
       HEAP8[$161>>0] = $159;
       $162 = (($$012$i$i7) + 1|0);
       $163 = (($164) + -2|0);
       $165 = ($162>>>0)<($163>>>0);
       if ($165) {
        $164$phi = $161;$$012$i$i7 = $162;$161 = $163;$164 = $164$phi;
       } else {
        break;
       }
      }
     }
    }
   }
   $166 = ($__ns$2>>>0)<($__ne>>>0);
   do {
    if ($166) {
     $__nf$226 = $__ns$2;
     while(1) {
      $167 = HEAP8[$__nf$226>>0]|0;
      $168 = ($167<<24>>24)==(46);
      if ($168) {
       $__nf$226$lcssa = $__nf$226;
       label = 60;
       break;
      }
      $178 = HEAP32[$0>>2]|0;
      $179 = (($178) + 28|0);
      $180 = HEAP32[$179>>2]|0;
      __THREW__ = 0;
      $181 = (invoke_iii($180|0,($0|0),($167|0))|0);
      $182 = __THREW__; __THREW__ = 0;
      $183 = $182&1;
      if ($183) {
       label = 4;
       break;
      }
      $184 = HEAP32[$__oe>>2]|0;
      $185 = (($184) + 1|0);
      HEAP32[$__oe>>2] = $185;
      HEAP8[$184>>0] = $181;
      $186 = (($__nf$226) + 1|0);
      $187 = ($186>>>0)<($__ne>>>0);
      if ($187) {
       $__nf$226 = $186;
      } else {
       $$lcssa = $186;
       label = 64;
       break;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     else if ((label|0) == 60) {
      $169 = HEAP32[$1>>2]|0;
      $170 = (($169) + 12|0);
      $171 = HEAP32[$170>>2]|0;
      __THREW__ = 0;
      $172 = (invoke_ii($171|0,($1|0))|0);
      $173 = __THREW__; __THREW__ = 0;
      $174 = $173&1;
      if ($174) {
       label = 8;
       break L4;
      }
      $175 = HEAP32[$__oe>>2]|0;
      $176 = (($175) + 1|0);
      HEAP32[$__oe>>2] = $176;
      HEAP8[$175>>0] = $172;
      $177 = (($__nf$226$lcssa) + 1|0);
      $__nf$3 = $177;
      break;
     }
     else if ((label|0) == 64) {
      $__nf$3 = $$lcssa;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $188 = HEAP32[$__oe>>2]|0;
   $189 = HEAP32[$0>>2]|0;
   $190 = (($189) + 32|0);
   $191 = HEAP32[$190>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($191|0,($0|0),($__nf$3|0),($__ne|0),($188|0))|0);
   $192 = __THREW__; __THREW__ = 0;
   $193 = $192&1;
   if ($193) {
    label = 8;
   } else {
    $194 = $__nf$3;
    $195 = (($25) - ($194))|0;
    $196 = HEAP32[$__oe>>2]|0;
    $197 = (($196) + ($195)|0);
    HEAP32[$__oe>>2] = $197;
    $198 = ($__np|0)==($__ne|0);
    if ($198) {
     $storemerge = $197;
    } else {
     $199 = $__np;
     $200 = $__nb;
     $201 = (($199) - ($200))|0;
     $202 = (($__ob) + ($201)|0);
     $storemerge = $202;
    }
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 142|0;
 $__nb = sp + 76|0;
 $__o = sp + 84|0;
 $__op = sp + 72|0;
 $__oe = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,16760,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(430)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(435,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(430)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(435,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$61 = $33;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(436);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$61 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $38 = $$pre9;$61 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  if ($40) {
   $50 = $__nar;$60 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $41 = $__nc$2 << 1;
   $42 = (_malloc($41)|0);
   $43 = ($42|0)==(0|0);
   if ($43) {
    __THREW__ = 0;
    invoke_v(436);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $66 = 0;
     label = 19;
    } else {
     $$pre10 = HEAP32[$__nb>>2]|0;
     $50 = $$pre10;$60 = 0;$__ob$0 = 0;
     label = 20;
    }
   } else {
    $50 = $38;$60 = $42;$__ob$0 = $42;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(428,($0|0),($__iob|0));
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $66 = $60;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(437,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $62 = ___cxa_find_matching_catch()|0;
      $63 = tempRet0;
      $64 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
      $$0 = $62;$$01 = $63;$65 = $60;
      break;
     }
     $53 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
     $54 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $54;
     $55 = HEAP32[$__op>>2]|0;
     $56 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(438,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $66 = $60;
      label = 19;
     } else {
      $59 = HEAP32[$1>>2]|0;
      HEAP32[$agg$result>>2] = $59;
      _free($60);
      _free($61);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$01 = $47;$65 = $66;
  }
  _free($65);
  _free($61);
  $$127 = $$01;$$18 = $$0;
 }
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[16840+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[16840+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[16840+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[16840+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[16840+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[16840+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(426,($0|0),(18040|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
 } else {
  $18 = $__nar;
  $19 = $5;
  $20 = (($19) - ($18))|0;
  $21 = (($__o) + ($20)|0);
  $__op$0 = $21;
 }
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = (($6) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  } else {
   __ZNKSt3__18ios_base6getlocEv($1,$__iob);
   __THREW__ = 0;
   $11 = (invoke_iii(426,($1|0),(18192|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   do {
    if ($13) {
     $55 = ___cxa_find_matching_catch()|0;
     $56 = tempRet0;
     $57 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
     $$0 = $55;$$01 = $56;
    } else {
     $14 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
     $15 = HEAP32[$11>>2]|0;
     if ($__v) {
      $16 = (($15) + 24|0);
      $17 = HEAP32[$16>>2]|0;
      FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
     } else {
      $18 = (($15) + 28|0);
      $19 = HEAP32[$18>>2]|0;
      FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
     }
     $20 = HEAP8[$__nm>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__nm) + 4|0);
      $$pre3 = (($__nm) + 8|0);
      $$ph = $25;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $25;
     } else {
      $23 = (($__nm) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $$pre2 = (($__nm) + 4|0);
      $$ph = $24;$$pre$phi4Z2D = $23;$$pre$phiZ2D = $$pre2;
     }
     $27 = $20;$36 = $$ph;
     while(1) {
      $26 = $27 & 1;
      $28 = ($26<<24>>24)==(0);
      if ($28) {
       $31 = $27&255;
       $32 = $31 >>> 1;
       $34 = $$pre$phiZ2D;$35 = $32;
      } else {
       $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
       $30 = HEAP32[$$pre$phiZ2D>>2]|0;
       $34 = $29;$35 = $30;
      }
      $33 = (($34) + ($35<<2)|0);
      $37 = ($36|0)==($33|0);
      if ($37) {
       label = 24;
       break;
      }
      $38 = HEAP32[$36>>2]|0;
      $39 = HEAP32[$__s>>2]|0;
      $40 = ($39|0)==(0|0);
      if (!($40)) {
       $41 = (($39) + 24|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($39) + 28|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($42|0)==($44|0);
       if ($45) {
        $46 = HEAP32[$39>>2]|0;
        $47 = (($46) + 52|0);
        $48 = HEAP32[$47>>2]|0;
        __THREW__ = 0;
        $49 = (invoke_iii($48|0,($39|0),($38|0))|0);
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         label = 23;
         break;
        } else {
         $$0$i$i = $49;
        }
       } else {
        $52 = (($42) + 4|0);
        HEAP32[$41>>2] = $52;
        HEAP32[$42>>2] = $38;
        $$0$i$i = $38;
       }
       $53 = ($$0$i$i|0)==(-1);
       if ($53) {
        HEAP32[$__s>>2] = 0;
       }
      }
      $54 = (($36) + 4|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $27 = $$pre;$36 = $54;
     }
     if ((label|0) == 23) {
      $58 = ___cxa_find_matching_catch()|0;
      $59 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      $$0 = $58;$$01 = $59;
      break;
     }
     else if ((label|0) == 24) {
      $60 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$result>>2] = $60;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      break L1;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[16832+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[16832+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[16832+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[16832+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[16832+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[16832+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,16736,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(441,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$11 = 0, $$__dg$0 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $132$phi = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $71$phi = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18032)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18192)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $12 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = ($12|0)==(0);
 L5: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $139 = $22;
    label = 42;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;$71 = $__ne;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($71) + -2|0);
      $72 = ($69>>>0)<($70>>>0);
      if ($72) {
       $71$phi = $68;$$012$i$i5 = $69;$68 = $70;$71 = $71$phi;
      } else {
       break;
      }
     }
    }
   }
   $73 = HEAP32[$1>>2]|0;
   $74 = (($73) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   __THREW__ = 0;
   $76 = (invoke_ii($75|0,($1|0))|0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    label = 8;
   } else {
    $79 = ($__nf$1>>>0)<($__ne>>>0);
    do {
     if ($79) {
      $80 = (($__grouping) + 1|0);
      $81 = (($__grouping) + 4|0);
      $82 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $83 = HEAP8[$__grouping>>0]|0;
       $84 = $83 & 1;
       $85 = ($84<<24>>24)==(0);
       $86 = HEAP32[$82>>2]|0;
       $$ = $85 ? $80 : $86;
       $87 = (($$) + ($__dg$09)|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = ($88<<24>>24)==(0);
       if ($89) {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       } else {
        $90 = HEAP32[$82>>2]|0;
        $$11 = $85 ? $80 : $90;
        $91 = (($$11) + ($__dg$09)|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = $92 << 24 >> 24;
        $94 = ($__dc$08|0)==($93|0);
        if ($94) {
         $95 = HEAP32[$__oe>>2]|0;
         $96 = (($95) + 4|0);
         HEAP32[$__oe>>2] = $96;
         HEAP32[$95>>2] = $76;
         $97 = HEAP8[$__grouping>>0]|0;
         $98 = $97 & 1;
         $99 = ($98<<24>>24)==(0);
         if ($99) {
          $101 = $97&255;
          $102 = $101 >>> 1;
          $104 = $102;
         } else {
          $100 = HEAP32[$81>>2]|0;
          $104 = $100;
         }
         $103 = (($104) + -1)|0;
         $105 = ($__dg$09>>>0)<($103>>>0);
         $106 = $105&1;
         $$__dg$0 = (($106) + ($__dg$09))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
        }
       }
       $107 = HEAP8[$__p$010>>0]|0;
       $108 = HEAP32[$0>>2]|0;
       $109 = (($108) + 44|0);
       $110 = HEAP32[$109>>2]|0;
       __THREW__ = 0;
       $111 = (invoke_iii($110|0,($0|0),($107|0))|0);
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        label = 7;
        break;
       }
       $114 = HEAP32[$__oe>>2]|0;
       $115 = (($114) + 4|0);
       HEAP32[$__oe>>2] = $115;
       HEAP32[$114>>2] = $111;
       $116 = (($__dc$1) + 1)|0;
       $117 = (($__p$010) + 1|0);
       $118 = ($117>>>0)<($__ne>>>0);
       if ($118) {
        $__dc$08 = $116;$__dg$09 = $__dg$1;$__p$010 = $117;
       } else {
        $$lcssa = $115;
        label = 36;
        break;
       }
      }
      if ((label|0) == 7) {
       $23 = ___cxa_find_matching_catch()|0;
       $24 = tempRet0;
       $lpad$phi$index = $23;$lpad$phi$index2 = $24;
       break L5;
      }
      else if ((label|0) == 36) {
       $124 = $$lcssa;
       break;
      }
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $124 = $$pre;
     }
    } while(0);
    $119 = $__nf$1;
    $120 = $__nb;
    $121 = (($119) - ($120))|0;
    $122 = (($__ob) + ($121<<2)|0);
    $123 = ($122|0)==($124|0);
    if ($123) {
     $139 = $124;
     label = 42;
    } else {
     $125 = (($124) + -4|0);
     $126 = ($125>>>0)>($122>>>0);
     if ($126) {
      $$012$i$i = $122;$129 = $125;$132 = $124;
      while(1) {
       $127 = HEAP32[$$012$i$i>>2]|0;
       $128 = HEAP32[$129>>2]|0;
       HEAP32[$$012$i$i>>2] = $128;
       HEAP32[$129>>2] = $127;
       $130 = (($$012$i$i) + 4|0);
       $131 = (($132) + -8|0);
       $133 = ($130>>>0)<($131>>>0);
       if ($133) {
        $132$phi = $129;$$012$i$i = $130;$129 = $131;$132 = $132$phi;
       } else {
        break;
       }
      }
      $139 = $124;
      label = 42;
     } else {
      $139 = $124;
      label = 42;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 42) {
  $134 = ($__np|0)==($__ne|0);
  if ($134) {
   $storemerge = $139;
  } else {
   $135 = $__np;
   $136 = $__nb;
   $137 = (($135) - ($136))|0;
   $138 = (($__ob) + ($137<<2)|0);
   $storemerge = $138;
  }
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,16744,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(441,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[16832+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[16832+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[16832+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[16832+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[16832+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[16832+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,16736,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(441,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,16744,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(441,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,16752,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(430)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(435,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(430)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(435,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$64 = $35;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(436);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$64 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $40 = $$pre7;$64 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $39 = (($40) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
  $42 = ($40|0)==($__nar|0);
  if ($42) {
   $52 = $__nar;$62 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $43 = $__nc$2 << 3;
   $44 = (_malloc($43)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    __THREW__ = 0;
    invoke_v(436);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $70 = 0;
     label = 19;
    } else {
     $$pre8 = HEAP32[$__nb>>2]|0;
     $52 = $$pre8;$62 = $44;$__ob$0 = $44;
     label = 20;
    }
   } else {
    $52 = $40;$62 = $44;$__ob$0 = $44;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(428,($0|0),($__iob|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $70 = $62;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(442,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      $67 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
      $$0 = $65;$$01 = $66;$68 = $62;
      break;
     }
     $55 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
     $56 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $56;
     $57 = HEAP32[$__op>>2]|0;
     $58 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(443,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $70 = $62;
      label = 19;
     } else {
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__s>>2] = $61;
      HEAP32[$agg$result>>2] = $61;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       _free($62);
      }
      _free($64);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $$0 = $48;$$01 = $49;$68 = $70;
  }
  $69 = ($68|0)==(0|0);
  if (!($69)) {
   _free($68);
  }
  _free($64);
  $$125 = $$01;$$16 = $$0;
 }
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$50 = 0, $$__dg$0 = 0, $$lcssa = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $103$phi = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $164$phi = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$026 = 0, $__dc$1 = 0, $__dg$027 = 0, $__dg$1 = 0, $__grouping = 0;
 var $__nf$0 = 0, $__nf$1 = 0, $__nf$225 = 0, $__nf$225$lcssa = 0, $__nf$3 = 0, $__ns$035 = 0, $__ns$130 = 0, $__ns$2 = 0, $__ns$2$ph = 0, $__ns$2$ph52 = 0, $__p$028 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18032)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18192)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 44|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        label = 8;
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 4|0);
       HEAP32[$__oe>>2] = $41;
       HEAP32[$40>>2] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 44|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 8;
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 4|0);
       HEAP32[$__oe>>2] = $51;
       HEAP32[$50>>2] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$035 = $42;
        while(1) {
         $55 = HEAP8[$__ns$035>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(430)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 7;
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(439,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          label = 7;
          break;
         }
         $63 = ($60|0)==(0);
         $53 = (($__ns$035) + 1|0);
         if ($63) {
          $__ns$2$ph52 = $__ns$035;
          label = 28;
          break;
         }
         $54 = ($53>>>0)<($__ne>>>0);
         if ($54) {
          $__ns$035 = $53;
         } else {
          $__ns$2$ph52 = $53;
          label = 28;
          break;
         }
        }
        if ((label|0) == 7) {
         $21 = ___cxa_find_matching_catch()|0;
         $22 = tempRet0;
         $lpad$phi$index = $21;$lpad$phi$index5 = $22;
         break L4;
        }
        else if ((label|0) == 28) {
         $__nf$1 = $42;$__ns$2 = $__ns$2$ph52;
         break;
        }
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$130 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$130>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(430)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 6;
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(440,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        label = 6;
        break;
       }
       $74 = ($71|0)==(0);
       $64 = (($__ns$130) + 1|0);
       if ($74) {
        $__ns$2$ph = $__ns$130;
        label = 27;
        break;
       }
       $65 = ($64>>>0)<($__ne>>>0);
       if ($65) {
        $__ns$130 = $64;
       } else {
        $__ns$2$ph = $64;
        label = 27;
        break;
       }
      }
      if ((label|0) == 6) {
       $19 = ___cxa_find_matching_catch()|0;
       $20 = tempRet0;
       $lpad$phi$index = $19;$lpad$phi$index5 = $20;
       break L4;
      }
      else if ((label|0) == 27) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$2$ph;
       break;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $82 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $82 = $79;
   }
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $203 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;$103 = $__ns$2;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($103) + -2|0);
       $104 = ($101>>>0)<($102>>>0);
       if ($104) {
        $103$phi = $100;$$012$i$i = $101;$100 = $102;$103 = $103$phi;
       } else {
        break;
       }
      }
     }
    }
    $105 = HEAP32[$1>>2]|0;
    $106 = (($105) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($1|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 8;
     break;
    }
    $111 = ($__nf$1>>>0)<($__ns$2>>>0);
    do {
     if ($111) {
      $112 = (($__grouping) + 1|0);
      $113 = (($__grouping) + 4|0);
      $114 = (($__grouping) + 8|0);
      $__dc$026 = 0;$__dg$027 = 0;$__p$028 = $__nf$1;
      while(1) {
       $115 = HEAP8[$__grouping>>0]|0;
       $116 = $115 & 1;
       $117 = ($116<<24>>24)==(0);
       $118 = HEAP32[$114>>2]|0;
       $$ = $117 ? $112 : $118;
       $119 = (($$) + ($__dg$027)|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = ($120<<24>>24)>(0);
       if ($121) {
        $122 = HEAP32[$114>>2]|0;
        $$50 = $117 ? $112 : $122;
        $123 = (($$50) + ($__dg$027)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = $124 << 24 >> 24;
        $126 = ($__dc$026|0)==($125|0);
        if ($126) {
         $127 = HEAP32[$__oe>>2]|0;
         $128 = (($127) + 4|0);
         HEAP32[$__oe>>2] = $128;
         HEAP32[$127>>2] = $108;
         $129 = HEAP8[$__grouping>>0]|0;
         $130 = $129 & 1;
         $131 = ($130<<24>>24)==(0);
         if ($131) {
          $133 = $129&255;
          $134 = $133 >>> 1;
          $136 = $134;
         } else {
          $132 = HEAP32[$113>>2]|0;
          $136 = $132;
         }
         $135 = (($136) + -1)|0;
         $137 = ($__dg$027>>>0)<($135>>>0);
         $138 = $137&1;
         $$__dg$0 = (($138) + ($__dg$027))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$026;$__dg$1 = $__dg$027;
        }
       } else {
        $__dc$1 = $__dc$026;$__dg$1 = $__dg$027;
       }
       $139 = HEAP8[$__p$028>>0]|0;
       $140 = HEAP32[$0>>2]|0;
       $141 = (($140) + 44|0);
       $142 = HEAP32[$141>>2]|0;
       __THREW__ = 0;
       $143 = (invoke_iii($142|0,($0|0),($139|0))|0);
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if ($145) {
        label = 5;
        break;
       }
       $146 = HEAP32[$__oe>>2]|0;
       $147 = (($146) + 4|0);
       HEAP32[$__oe>>2] = $147;
       HEAP32[$146>>2] = $143;
       $148 = (($__dc$1) + 1)|0;
       $149 = (($__p$028) + 1|0);
       $150 = ($149>>>0)<($__ns$2>>>0);
       if ($150) {
        $__dc$026 = $148;$__dg$027 = $__dg$1;$__p$028 = $149;
       } else {
        $$lcssa56 = $147;
        label = 52;
        break;
       }
      }
      if ((label|0) == 5) {
       $17 = ___cxa_find_matching_catch()|0;
       $18 = tempRet0;
       $lpad$phi$index = $17;$lpad$phi$index5 = $18;
       break L4;
      }
      else if ((label|0) == 52) {
       $156 = $$lcssa56;
       break;
      }
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $156 = $$pre;
     }
    } while(0);
    $151 = $__nf$1;
    $152 = $__nb;
    $153 = (($151) - ($152))|0;
    $154 = (($__ob) + ($153<<2)|0);
    $155 = ($154|0)==($156|0);
    if ($155) {
     $203 = $156;
    } else {
     $157 = (($156) + -4|0);
     $158 = ($157>>>0)>($154>>>0);
     if ($158) {
      $$012$i$i7 = $154;$161 = $157;$164 = $156;
      while(1) {
       $159 = HEAP32[$$012$i$i7>>2]|0;
       $160 = HEAP32[$161>>2]|0;
       HEAP32[$$012$i$i7>>2] = $160;
       HEAP32[$161>>2] = $159;
       $162 = (($$012$i$i7) + 4|0);
       $163 = (($164) + -8|0);
       $165 = ($162>>>0)<($163>>>0);
       if ($165) {
        $164$phi = $161;$$012$i$i7 = $162;$161 = $163;$164 = $164$phi;
       } else {
        break;
       }
      }
      $203 = $156;
     } else {
      $203 = $156;
     }
    }
   }
   $166 = ($__ns$2>>>0)<($__ne>>>0);
   do {
    if ($166) {
     $__nf$225 = $__ns$2;
     while(1) {
      $167 = HEAP8[$__nf$225>>0]|0;
      $168 = ($167<<24>>24)==(46);
      if ($168) {
       $__nf$225$lcssa = $__nf$225;
       label = 61;
       break;
      }
      $178 = HEAP32[$0>>2]|0;
      $179 = (($178) + 44|0);
      $180 = HEAP32[$179>>2]|0;
      __THREW__ = 0;
      $181 = (invoke_iii($180|0,($0|0),($167|0))|0);
      $182 = __THREW__; __THREW__ = 0;
      $183 = $182&1;
      if ($183) {
       label = 4;
       break;
      }
      $184 = HEAP32[$__oe>>2]|0;
      $185 = (($184) + 4|0);
      HEAP32[$__oe>>2] = $185;
      HEAP32[$184>>2] = $181;
      $186 = (($__nf$225) + 1|0);
      $187 = ($186>>>0)<($__ne>>>0);
      if ($187) {
       $__nf$225 = $186;
      } else {
       $$lcssa = $185;$$lcssa55 = $186;
       label = 65;
       break;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     else if ((label|0) == 61) {
      $169 = HEAP32[$1>>2]|0;
      $170 = (($169) + 12|0);
      $171 = HEAP32[$170>>2]|0;
      __THREW__ = 0;
      $172 = (invoke_ii($171|0,($1|0))|0);
      $173 = __THREW__; __THREW__ = 0;
      $174 = $173&1;
      if ($174) {
       label = 8;
       break L4;
      }
      $175 = HEAP32[$__oe>>2]|0;
      $176 = (($175) + 4|0);
      HEAP32[$__oe>>2] = $176;
      HEAP32[$175>>2] = $172;
      $177 = (($__nf$225$lcssa) + 1|0);
      $191 = $176;$__nf$3 = $177;
      break;
     }
     else if ((label|0) == 65) {
      $191 = $$lcssa;$__nf$3 = $$lcssa55;
      break;
     }
    } else {
     $191 = $203;$__nf$3 = $__ns$2;
    }
   } while(0);
   $188 = HEAP32[$0>>2]|0;
   $189 = (($188) + 48|0);
   $190 = HEAP32[$189>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($190|0,($0|0),($__nf$3|0),($__ne|0),($191|0))|0);
   $192 = __THREW__; __THREW__ = 0;
   $193 = $192&1;
   if ($193) {
    label = 8;
   } else {
    $194 = $__nf$3;
    $195 = (($25) - ($194))|0;
    $196 = HEAP32[$__oe>>2]|0;
    $197 = (($196) + ($195<<2)|0);
    HEAP32[$__oe>>2] = $197;
    $198 = ($__np|0)==($__ne|0);
    if ($198) {
     $storemerge = $197;
    } else {
     $199 = $__np;
     $200 = $__nb;
     $201 = (($199) - ($200))|0;
     $202 = (($__ob) + ($201<<2)|0);
     $storemerge = $202;
    }
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 308|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 312|0;
 $__nb = sp + 304|0;
 $__o = sp + 76|0;
 $__op = sp + 72|0;
 $__oe = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,16760,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(430)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(435,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(430)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(435,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$62 = $33;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(436);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$62 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $38 = $$pre7;$62 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  if ($40) {
   $50 = $__nar;$60 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $41 = $__nc$2 << 3;
   $42 = (_malloc($41)|0);
   $43 = ($42|0)==(0|0);
   if ($43) {
    __THREW__ = 0;
    invoke_v(436);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $68 = 0;
     label = 19;
    } else {
     $$pre8 = HEAP32[$__nb>>2]|0;
     $50 = $$pre8;$60 = $42;$__ob$0 = $42;
     label = 20;
    }
   } else {
    $50 = $38;$60 = $42;$__ob$0 = $42;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(428,($0|0),($__iob|0));
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $68 = $60;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(442,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $63 = ___cxa_find_matching_catch()|0;
      $64 = tempRet0;
      $65 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($65)|0);
      $$0 = $63;$$01 = $64;$66 = $60;
      break;
     }
     $53 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
     $54 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $54;
     $55 = HEAP32[$__op>>2]|0;
     $56 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(443,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $68 = $60;
      label = 19;
     } else {
      $59 = HEAP32[$1>>2]|0;
      HEAP32[$__s>>2] = $59;
      HEAP32[$agg$result>>2] = $59;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       _free($60);
      }
      _free($62);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$01 = $47;$66 = $68;
  }
  $67 = ($66|0)==(0|0);
  if (!($67)) {
   _free($66);
  }
  _free($62);
  $$125 = $$01;$$16 = $$0;
 }
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[16840+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[16840+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[16840+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[16840+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[16840+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[16840+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(426,($0|0),(18032|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3<<2)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
 } else {
  $18 = $__nar;
  $19 = $5;
  $20 = (($19) - ($18))|0;
  $21 = (($__o) + ($20<<2)|0);
  $__op$0 = $21;
 }
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i25 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i45$lcssa = 0, $$pre$i$i$i45$lcssa54 = 0, $$pre$i$i$i45$lcssa55 = 0, $$pre$i$i$i45$lcssa56 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i2042 = 0, $$pre$i2$i$i2043 = 0, $$pre$pre$pre = 0;
 var $$pre$pre49 = 0, $$pre$pre49$lcssa = 0, $$pre$pre50 = 0, $$pre$pre50$lcssa = 0, $$pre$pre51 = 0, $$pre41 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i23 = 0;
 var $isascii1$i4 = 0, $or$cond38 = 0, $sext = 0, $tmp$i$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(426,($0|0),(18040|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $36 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($36)|0);
  ___resumeException($34|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 do {
  if ($8) {
   $$pre$pre$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i7 = $$pre$pre$pre;
  } else {
   $9 = (($4) + 8|0);
   $$0$ph40 = $__fmtb;
   L7: while(1) {
    $$pre41 = HEAP32[$__b>>2]|0;
    $10 = ($$pre41|0)==(0|0);
    if ($10) {
     $$pre$i$i$i45 = 0;
    } else {
     $11 = (($$pre41) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($$pre41) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12|0)==($14|0);
     if ($15) {
      $16 = HEAP32[$$pre41>>2]|0;
      $17 = (($16) + 36|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (FUNCTION_TABLE_ii[$18 & 1023]($$pre41)|0);
      $20 = ($19|0)==(-1);
      if ($20) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i45 = 0;
      } else {
       $$pre$i$i$i45 = $$pre41;
      }
     } else {
      $$pre$i$i$i45 = $$pre41;
     }
    }
    $21 = ($$pre$i$i$i45|0)==(0|0);
    $22 = HEAP32[$__e>>2]|0;
    $23 = ($22|0)==(0|0);
    do {
     if ($23) {
      label = 14;
     } else {
      $24 = (($22) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($22) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = HEAP32[$22>>2]|0;
       $30 = (($29) + 36|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = (FUNCTION_TABLE_ii[$31 & 1023]($22)|0);
       $33 = ($32|0)==(-1);
       if ($33) {
        HEAP32[$__e>>2] = 0;
        label = 14;
        break;
       }
      }
      if ($21) {
       $60 = $22;
      } else {
       $$pre$i$i$i45$lcssa = $$pre$i$i$i45;
       label = 15;
       break L7;
      }
     }
    } while(0);
    if ((label|0) == 14) {
     label = 0;
     if ($21) {
      $$pre$i$i$i45$lcssa = $$pre$i$i$i45;
      label = 15;
      break;
     } else {
      $60 = 0;
     }
    }
    $37 = HEAP8[$$0$ph40>>0]|0;
    $38 = HEAP32[$4>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_iiii[$40 & 1023]($4,$37,0)|0);
    $42 = ($41<<24>>24)==(37);
    do {
     if ($42) {
      $43 = (($$0$ph40) + 1|0);
      $44 = ($43|0)==($__fmte|0);
      if ($44) {
       $$pre$i$i$i45$lcssa55 = $$pre$i$i$i45;
       label = 19;
       break L7;
      }
      $45 = HEAP8[$43>>0]|0;
      $46 = HEAP32[$4>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_iiii[$48 & 1023]($4,$45,0)|0);
      if ((($49<<24>>24) == 48) | (($49<<24>>24) == 69)) {
       $50 = (($$0$ph40) + 2|0);
       $51 = ($50|0)==($__fmte|0);
       if ($51) {
        $$pre$i$i$i45$lcssa56 = $$pre$i$i$i45;
        label = 22;
        break L7;
       }
       $52 = HEAP8[$50>>0]|0;
       $53 = HEAP32[$4>>2]|0;
       $54 = (($53) + 36|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (FUNCTION_TABLE_iiii[$55 & 1023]($4,$52,0)|0);
       $63 = $43;$__cmd$0 = $56;$__opt$0 = $49;
      } else {
       $63 = $$0$ph40;$__cmd$0 = $49;$__opt$0 = 0;
      }
      $57 = HEAP32[$this>>2]|0;
      $58 = (($57) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      HEAP32[$2>>2] = $$pre$i$i$i45;
      HEAP32[$3>>2] = $60;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$59 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $61;
      $62 = (($63) + 2|0);
      $$0$ph$be = $62;$$pre$pre49 = $61;
     } else {
      $67 = HEAP8[$$0$ph40>>0]|0;
      $isascii1$i = ($67<<24>>24)>(-1);
      if ($isascii1$i) {
       $68 = $67 << 24 >> 24;
       $69 = HEAP32[$9>>2]|0;
       $70 = (($69) + ($68<<1)|0);
       $71 = HEAP16[$70>>1]|0;
       $72 = $71 & 8192;
       $73 = ($72<<16>>16)==(0);
       if (!($73)) {
        $$0$pn = $$0$ph40;
        while(1) {
         $$2 = (($$0$pn) + 1|0);
         $74 = ($$2|0)==($__fmte|0);
         if ($74) {
          $$2$lcssa = $__fmte;
          break;
         }
         $75 = HEAP8[$$2>>0]|0;
         $isascii1$i4 = ($75<<24>>24)>(-1);
         if (!($isascii1$i4)) {
          $$2$lcssa = $$2;
          break;
         }
         $76 = $75 << 24 >> 24;
         $77 = (($69) + ($76<<1)|0);
         $78 = HEAP16[$77>>1]|0;
         $79 = $78 & 8192;
         $80 = ($79<<16>>16)==(0);
         if ($80) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
         }
        }
        $$pre$i$i$i16 = $$pre$i$i$i45;$$pre$i2$i$i20 = $60;$$pre$pre51 = $$pre$i$i$i45;$94 = $60;
        L39: while(1) {
         $81 = ($$pre$i$i$i16|0)==(0|0);
         if ($81) {
          $$pre$pre50 = $$pre$pre51;$92 = 0;
         } else {
          $82 = (($$pre$i$i$i16) + 12|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = (($$pre$i$i$i16) + 16|0);
          $85 = HEAP32[$84>>2]|0;
          $86 = ($83|0)==($85|0);
          if ($86) {
           $87 = HEAP32[$$pre$i$i$i16>>2]|0;
           $88 = (($87) + 36|0);
           $89 = HEAP32[$88>>2]|0;
           $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i16)|0);
           $91 = ($90|0)==(-1);
           if ($91) {
            HEAP32[$__b>>2] = 0;
            $$pre$pre50 = 0;$92 = 0;
           } else {
            $$pre$pre50 = $$pre$pre51;$92 = $$pre$i$i$i16;
           }
          } else {
           $$pre$pre50 = $$pre$pre51;$92 = $$pre$i$i$i16;
          }
         }
         $93 = ($92|0)==(0|0);
         $95 = ($94|0)==(0|0);
         do {
          if ($95) {
           $$pre$i2$i$i2043 = $$pre$i2$i$i20;
           label = 43;
          } else {
           $96 = (($94) + 12|0);
           $97 = HEAP32[$96>>2]|0;
           $98 = (($94) + 16|0);
           $99 = HEAP32[$98>>2]|0;
           $100 = ($97|0)==($99|0);
           if (!($100)) {
            if ($93) {
             $$pre$i2$i$i2042 = $$pre$i2$i$i20;$189 = $94;
             break;
            } else {
             $$pre$pre50$lcssa = $$pre$pre50;
             break L39;
            }
           }
           $101 = HEAP32[$94>>2]|0;
           $102 = (($101) + 36|0);
           $103 = HEAP32[$102>>2]|0;
           $104 = (FUNCTION_TABLE_ii[$103 & 1023]($94)|0);
           $105 = ($104|0)==(-1);
           if ($105) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i2043 = 0;
            label = 43;
            break;
           } else {
            $106 = ($$pre$i2$i$i20|0)==(0|0);
            $tmp$i$i22 = $93 ^ $106;
            if ($tmp$i$i22) {
             $$pre$i2$i$i2042 = $$pre$i2$i$i20;$189 = $$pre$i2$i$i20;
             break;
            } else {
             $$pre$pre50$lcssa = $$pre$pre50;
             break L39;
            }
           }
          }
         } while(0);
         if ((label|0) == 43) {
          label = 0;
          if ($93) {
           $$pre$pre50$lcssa = $$pre$pre50;
           break;
          } else {
           $$pre$i2$i$i2042 = $$pre$i2$i$i2043;$189 = 0;
          }
         }
         $107 = (($92) + 12|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($92) + 16|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108|0)==($110|0);
         if ($111) {
          $112 = HEAP32[$92>>2]|0;
          $113 = (($112) + 36|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = (FUNCTION_TABLE_ii[$114 & 1023]($92)|0);
          $$0$i$i = $115;
         } else {
          $116 = HEAP8[$108>>0]|0;
          $117 = $116&255;
          $$0$i$i = $117;
         }
         $118 = $$0$i$i&255;
         $isascii1$i23 = ($118<<24>>24)>(-1);
         if (!($isascii1$i23)) {
          $$pre$pre50$lcssa = $$pre$pre50;
          break;
         }
         $sext = $$0$i$i << 24;
         $119 = $sext >> 24;
         $120 = HEAP32[$9>>2]|0;
         $121 = (($120) + ($119<<1)|0);
         $122 = HEAP16[$121>>1]|0;
         $123 = $122 & 8192;
         $124 = ($123<<16>>16)==(0);
         if ($124) {
          $$pre$pre50$lcssa = $$pre$pre50;
          break;
         }
         $125 = HEAP32[$107>>2]|0;
         $126 = HEAP32[$109>>2]|0;
         $127 = ($125|0)==($126|0);
         if ($127) {
          $128 = HEAP32[$92>>2]|0;
          $129 = (($128) + 40|0);
          $130 = HEAP32[$129>>2]|0;
          (FUNCTION_TABLE_ii[$130 & 1023]($92)|0);
         } else {
          $131 = (($125) + 1|0);
          HEAP32[$107>>2] = $131;
         }
         $$pre$i$i$i16 = $92;$$pre$i2$i$i20 = $$pre$i2$i$i2042;$$pre$pre51 = $$pre$pre50;$94 = $189;
        }
        $$0$ph$be = $$2$lcssa;$$pre$pre49 = $$pre$pre50$lcssa;
        break;
       }
      }
      $132 = (($$pre$i$i$i45) + 12|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (($$pre$i$i$i45) + 16|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ($133|0)==($135|0);
      if ($136) {
       $137 = HEAP32[$$pre$i$i$i45>>2]|0;
       $138 = (($137) + 36|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$pre$i$i$i45)|0);
       $$0$i$i25 = $140;
      } else {
       $141 = HEAP8[$133>>0]|0;
       $142 = $141&255;
       $$0$i$i25 = $142;
      }
      $143 = $$0$i$i25&255;
      $144 = HEAP32[$4>>2]|0;
      $145 = (($144) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (FUNCTION_TABLE_iii[$146 & 1023]($4,$143)|0);
      $148 = HEAP8[$$0$ph40>>0]|0;
      $149 = HEAP32[$4>>2]|0;
      $150 = (($149) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (FUNCTION_TABLE_iii[$151 & 1023]($4,$148)|0);
      $153 = ($147<<24>>24)==($152<<24>>24);
      if (!($153)) {
       $$pre$i$i$i45$lcssa54 = $$pre$i$i$i45;
       label = 62;
       break L7;
      }
      $154 = HEAP32[$132>>2]|0;
      $155 = HEAP32[$134>>2]|0;
      $156 = ($154|0)==($155|0);
      if ($156) {
       $157 = HEAP32[$$pre$i$i$i45>>2]|0;
       $158 = (($157) + 40|0);
       $159 = HEAP32[$158>>2]|0;
       (FUNCTION_TABLE_ii[$159 & 1023]($$pre$i$i$i45)|0);
      } else {
       $160 = (($154) + 1|0);
       HEAP32[$132>>2] = $160;
      }
      $161 = (($$0$ph40) + 1|0);
      $$0$ph$be = $161;$$pre$pre49 = $$pre$i$i$i45;
     }
    } while(0);
    $64 = ($$0$ph$be|0)!=($__fmte|0);
    $65 = HEAP32[$__err>>2]|0;
    $66 = ($65|0)==(0);
    $or$cond38 = $64 & $66;
    if ($or$cond38) {
     $$0$ph40 = $$0$ph$be;
    } else {
     $$pre$pre49$lcssa = $$pre$pre49;
     label = 63;
     break;
    }
   }
   if ((label|0) == 15) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa;
    break;
   }
   else if ((label|0) == 19) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa55;
    break;
   }
   else if ((label|0) == 22) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa56;
    break;
   }
   else if ((label|0) == 62) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa54;
    break;
   }
   else if ((label|0) == 63) {
    $$pre$i$i$i7 = $$pre$pre49$lcssa;
    break;
   }
  }
 } while(0);
 $162 = ($$pre$i$i$i7|0)==(0|0);
 if ($162) {
  $173 = 0;
 } else {
  $163 = (($$pre$i$i$i7) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($$pre$i$i$i7) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($164|0)==($166|0);
  if ($167) {
   $168 = HEAP32[$$pre$i$i$i7>>2]|0;
   $169 = (($168) + 36|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (FUNCTION_TABLE_ii[$170 & 1023]($$pre$i$i$i7)|0);
   $172 = ($171|0)==(-1);
   if ($172) {
    HEAP32[$__b>>2] = 0;
    $173 = 0;
   } else {
    $173 = $$pre$i$i$i7;
   }
  } else {
   $173 = $$pre$i$i$i7;
  }
 }
 $174 = ($173|0)==(0|0);
 $175 = HEAP32[$__e>>2]|0;
 $176 = ($175|0)==(0|0);
 do {
  if ($176) {
   label = 73;
  } else {
   $177 = (($175) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($175) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($178|0)==($180|0);
   if ($181) {
    $182 = HEAP32[$175>>2]|0;
    $183 = (($182) + 36|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (FUNCTION_TABLE_ii[$184 & 1023]($175)|0);
    $186 = ($185|0)==(-1);
    if ($186) {
     HEAP32[$__e>>2] = 0;
     label = 73;
     break;
    }
   }
   if (!($174)) {
    label = 74;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  if ($174) {
   label = 74;
  }
 }
 if ((label|0) == 74) {
  $187 = HEAP32[$__err>>2]|0;
  $188 = $187 | 2;
  HEAP32[$__err>>2] = $188;
 }
 HEAP32[$agg$result>>2] = $173;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,16944,((16944 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(426,($0|0),(18040|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(426,($0|0),(18040|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(426,($0|0),(18040|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 276|0;
 $$byval_copy29 = sp + 272|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 264|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 256|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 248|0;
 $$byval_copy22 = sp + 244|0;
 $$byval_copy21 = sp + 240|0;
 $$byval_copy20 = sp + 236|0;
 $$byval_copy19 = sp + 232|0;
 $$byval_copy18 = sp + 228|0;
 $$byval_copy17 = sp + 224|0;
 $$byval_copy16 = sp + 220|0;
 $$byval_copy15 = sp + 216|0;
 $$byval_copy14 = sp + 212|0;
 $$byval_copy13 = sp + 208|0;
 $$byval_copy12 = sp + 204|0;
 $$byval_copy11 = sp + 200|0;
 $$byval_copy10 = sp + 196|0;
 $$byval_copy9 = sp + 192|0;
 $$byval_copy8 = sp + 188|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 180|0;
 $$byval_copy5 = sp + 176|0;
 $$byval_copy4 = sp + 172|0;
 $$byval_copy3 = sp + 168|0;
 $$byval_copy2 = sp + 164|0;
 $$byval_copy1 = sp + 160|0;
 $$byval_copy = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(426,($1|0),(18040|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   label = 34;
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   label = 34;
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 34;
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   label = 34;
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   label = 34;
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   label = 34;
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   label = 34;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   label = 34;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 1|0);
    $128 = (($117) + 1|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   label = 34;
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,16968,((16968 + 11|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   label = 34;
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,16984,((16984 + 5|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   label = 34;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   label = 34;
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$40);
   label = 34;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   label = 34;
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,16952,((16952 + 8|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   label = 34;
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,16992,((16992 + 8|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   label = 34;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   label = 34;
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 511]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   label = 34;
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 1|0);
    $67 = (($56) + 1|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   label = 34;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   label = 34;
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$48,$__b,$$byval_copy,$__err,$40);
   label = 34;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,16960,((16960 + 8|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   label = 34;
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
   label = 34;
  }
  }
 } while(0);
 if ((label|0) == 34) {
  $143 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $143;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $13 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $13 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $13 = $$pre$i$i$i;
      break;
     }
    } else {
     $13 = $1;
    }
   }
  } while(0);
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $68 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $68 = $$pre$i$i$i2;
     break;
    }
   } else {
    $68 = $56;
   }
  }
 } while(0);
 $69 = ($68|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 33;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 33;
     break;
    }
   }
   if (!($69)) {
    label = 34;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  if ($69) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = (($5) + 24|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $36 & $37;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = (($41) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $54 = HEAP32[$48>>2]|0;
    $55 = (($54) + 40|0);
    $56 = HEAP32[$55>>2]|0;
    (FUNCTION_TABLE_ii[$56 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = $$pre;
   } else {
    $57 = (($50) + 1|0);
    HEAP32[$49>>2] = $57;
    $58 = $48;
   }
   $59 = ($58|0)==(0|0);
   do {
    if ($59) {
     $70 = 0;
    } else {
     $60 = (($58) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($58) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$58>>2]|0;
      $66 = (($65) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($58)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $70 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $70 = $$pre$i$i$i2;
       break;
      }
     } else {
      $70 = $58;
     }
    }
   } while(0);
   $71 = ($70|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 31;
    } else {
     $73 = (($$pre$i2$i$i611) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($$pre$i2$i$i611) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = (($78) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 31;
       break;
      }
     }
     if ($71) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 31) {
    if (!($71)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph45 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i50 = 0, $$pre$i$i$i50$lcssa = 0, $$pre$i$i$i50$lcssa59 = 0, $$pre$i$i$i50$lcssa60 = 0;
 var $$pre$i$i$i50$lcssa61 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1247 = 0, $$pre$i3$i$i1248 = 0, $$pre$pre$pre = 0, $$pre$pre54 = 0, $$pre$pre54$lcssa = 0, $$pre$pre55 = 0, $$pre$pre55$lcssa = 0, $$pre$pre56 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond43 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(426,($0|0),(18032|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $36 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($36)|0);
  ___resumeException($34|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 do {
  if ($8) {
   $$pre$pre$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i21 = $$pre$pre$pre;
  } else {
   $$0$ph45 = $__fmtb;
   L6: while(1) {
    $$pre46 = HEAP32[$__b>>2]|0;
    $9 = ($$pre46|0)==(0|0);
    do {
     if ($9) {
      $$pre$i$i$i50 = 0;$182 = 1;
     } else {
      $10 = (($$pre46) + 12|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = (($$pre46) + 16|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($11|0)==($13|0);
      if ($14) {
       $15 = HEAP32[$$pre46>>2]|0;
       $16 = (($15) + 36|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (FUNCTION_TABLE_ii[$17 & 1023]($$pre46)|0);
       $$0$i$i$i$i = $18;
      } else {
       $19 = HEAP32[$11>>2]|0;
       $$0$i$i$i$i = $19;
      }
      $20 = ($$0$i$i$i$i|0)==(-1);
      if ($20) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i50 = 0;$182 = 1;
       break;
      } else {
       $phitmp$i$i$i = ($$pre46|0)==(0|0);
       $$pre$i$i$i50 = $$pre46;$182 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==(0|0);
    do {
     if ($22) {
      label = 18;
     } else {
      $23 = (($21) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($21) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if ($27) {
       $28 = HEAP32[$21>>2]|0;
       $29 = (($28) + 36|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (FUNCTION_TABLE_ii[$30 & 1023]($21)|0);
       $$0$i$i1$i$i = $31;
      } else {
       $32 = HEAP32[$24>>2]|0;
       $$0$i$i1$i$i = $32;
      }
      $33 = ($$0$i$i1$i$i|0)==(-1);
      if ($33) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($182) {
        $60 = $21;
        break;
       } else {
        $$pre$i$i$i50$lcssa = $$pre$i$i$i50;
        label = 20;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($182) {
      $$pre$i$i$i50$lcssa = $$pre$i$i$i50;
      label = 20;
      break;
     } else {
      $60 = 0;
     }
    }
    $37 = HEAP32[$$0$ph45>>2]|0;
    $38 = HEAP32[$4>>2]|0;
    $39 = (($38) + 52|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_iiii[$40 & 1023]($4,$37,0)|0);
    $42 = ($41<<24>>24)==(37);
    do {
     if ($42) {
      $43 = (($$0$ph45) + 4|0);
      $44 = ($43|0)==($__fmte|0);
      if ($44) {
       $$pre$i$i$i50$lcssa60 = $$pre$i$i$i50;
       label = 24;
       break L6;
      }
      $45 = HEAP32[$43>>2]|0;
      $46 = HEAP32[$4>>2]|0;
      $47 = (($46) + 52|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_iiii[$48 & 1023]($4,$45,0)|0);
      if ((($49<<24>>24) == 48) | (($49<<24>>24) == 69)) {
       $50 = (($$0$ph45) + 8|0);
       $51 = ($50|0)==($__fmte|0);
       if ($51) {
        $$pre$i$i$i50$lcssa61 = $$pre$i$i$i50;
        label = 27;
        break L6;
       }
       $52 = HEAP32[$50>>2]|0;
       $53 = HEAP32[$4>>2]|0;
       $54 = (($53) + 52|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (FUNCTION_TABLE_iiii[$55 & 1023]($4,$52,0)|0);
       $63 = $43;$__cmd$0 = $56;$__opt$0 = $49;
      } else {
       $63 = $$0$ph45;$__cmd$0 = $49;$__opt$0 = 0;
      }
      $57 = HEAP32[$this>>2]|0;
      $58 = (($57) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      HEAP32[$2>>2] = $$pre$i$i$i50;
      HEAP32[$3>>2] = $60;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$59 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $61;
      $62 = (($63) + 8|0);
      $$0$ph$be = $62;$$pre$pre54 = $61;
     } else {
      $67 = HEAP32[$$0$ph45>>2]|0;
      $68 = HEAP32[$4>>2]|0;
      $69 = (($68) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (FUNCTION_TABLE_iiii[$70 & 1023]($4,8192,$67)|0);
      if (!($71)) {
       $126 = (($$pre$i$i$i50) + 12|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = (($$pre$i$i$i50) + 16|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = ($127|0)==($129|0);
       if ($130) {
        $131 = HEAP32[$$pre$i$i$i50>>2]|0;
        $132 = (($131) + 36|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = (FUNCTION_TABLE_ii[$133 & 1023]($$pre$i$i$i50)|0);
        $$0$i$i16 = $134;
       } else {
        $135 = HEAP32[$127>>2]|0;
        $$0$i$i16 = $135;
       }
       $136 = HEAP32[$4>>2]|0;
       $137 = (($136) + 28|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_iii[$138 & 1023]($4,$$0$i$i16)|0);
       $140 = HEAP32[$$0$ph45>>2]|0;
       $141 = HEAP32[$4>>2]|0;
       $142 = (($141) + 28|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (FUNCTION_TABLE_iii[$143 & 1023]($4,$140)|0);
       $145 = ($139|0)==($144|0);
       if (!($145)) {
        $$pre$i$i$i50$lcssa59 = $$pre$i$i$i50;
        label = 67;
        break L6;
       }
       $146 = HEAP32[$126>>2]|0;
       $147 = HEAP32[$128>>2]|0;
       $148 = ($146|0)==($147|0);
       if ($148) {
        $149 = HEAP32[$$pre$i$i$i50>>2]|0;
        $150 = (($149) + 40|0);
        $151 = HEAP32[$150>>2]|0;
        (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i$i$i50)|0);
       } else {
        $152 = (($146) + 4|0);
        HEAP32[$126>>2] = $152;
       }
       $153 = (($$0$ph45) + 4|0);
       $$0$ph$be = $153;$$pre$pre54 = $$pre$i$i$i50;
       break;
      }
      $$0$pn = $$0$ph45;
      while(1) {
       $$2 = (($$0$pn) + 4|0);
       $72 = ($$2|0)==($__fmte|0);
       if ($72) {
        $$2$lcssa = $__fmte;
        break;
       }
       $73 = HEAP32[$$2>>2]|0;
       $74 = HEAP32[$4>>2]|0;
       $75 = (($74) + 12|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (FUNCTION_TABLE_iiii[$76 & 1023]($4,8192,$73)|0);
       if ($77) {
        $$0$pn = $$2;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i6 = $$pre$i$i$i50;$$pre$i3$i$i12 = $60;$$pre$pre56 = $$pre$i$i$i50;$90 = $60;
      L54: while(1) {
       $78 = ($$pre$i$i$i6|0)==(0|0);
       if ($78) {
        $$pre$pre55 = $$pre$pre56;$103 = 1;$105 = 0;
       } else {
        $79 = (($$pre$i$i$i6) + 12|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = (($$pre$i$i$i6) + 16|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($80|0)==($82|0);
        if ($83) {
         $84 = HEAP32[$$pre$i$i$i6>>2]|0;
         $85 = (($84) + 36|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = (FUNCTION_TABLE_ii[$86 & 1023]($$pre$i$i$i6)|0);
         $$0$i$i$i$i4 = $87;
        } else {
         $88 = HEAP32[$80>>2]|0;
         $$0$i$i$i$i4 = $88;
        }
        $89 = ($$0$i$i$i$i4|0)==(-1);
        if ($89) {
         HEAP32[$__b>>2] = 0;
         $$pre$pre55 = 0;$103 = 1;$105 = 0;
        } else {
         $$pre$pre55 = $$pre$pre56;$103 = 0;$105 = $$pre$i$i$i6;
        }
       }
       $91 = ($90|0)==(0|0);
       do {
        if ($91) {
         $$pre$i3$i$i1248 = $$pre$i3$i$i12;
         label = 49;
        } else {
         $92 = (($90) + 12|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = (($90) + 16|0);
         $95 = HEAP32[$94>>2]|0;
         $96 = ($93|0)==($95|0);
         if ($96) {
          $97 = HEAP32[$90>>2]|0;
          $98 = (($97) + 36|0);
          $99 = HEAP32[$98>>2]|0;
          $100 = (FUNCTION_TABLE_ii[$99 & 1023]($90)|0);
          $$0$i$i1$i$i10 = $100;
         } else {
          $101 = HEAP32[$93>>2]|0;
          $$0$i$i1$i$i10 = $101;
         }
         $102 = ($$0$i$i1$i$i10|0)==(-1);
         if ($102) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1248 = 0;
          label = 49;
          break;
         } else {
          $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
          $tmp$i$i15 = $103 ^ $phitmp$i4$i$i13;
          if ($tmp$i$i15) {
           $$pre$i3$i$i1247 = $$pre$i3$i$i12;$183 = $$pre$i3$i$i12;
           break;
          } else {
           $$pre$pre55$lcssa = $$pre$pre55;
           break L54;
          }
         }
        }
       } while(0);
       if ((label|0) == 49) {
        label = 0;
        if ($103) {
         $$pre$pre55$lcssa = $$pre$pre55;
         break;
        } else {
         $$pre$i3$i$i1247 = $$pre$i3$i$i1248;$183 = 0;
        }
       }
       $104 = (($105) + 12|0);
       $106 = HEAP32[$104>>2]|0;
       $107 = (($105) + 16|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ($106|0)==($108|0);
       if ($109) {
        $110 = HEAP32[$105>>2]|0;
        $111 = (($110) + 36|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (FUNCTION_TABLE_ii[$112 & 1023]($105)|0);
        $$0$i$i = $113;
       } else {
        $114 = HEAP32[$106>>2]|0;
        $$0$i$i = $114;
       }
       $115 = HEAP32[$4>>2]|0;
       $116 = (($115) + 12|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($4,8192,$$0$i$i)|0);
       if (!($118)) {
        $$pre$pre55$lcssa = $$pre$pre55;
        break;
       }
       $119 = HEAP32[$104>>2]|0;
       $120 = HEAP32[$107>>2]|0;
       $121 = ($119|0)==($120|0);
       if ($121) {
        $122 = HEAP32[$105>>2]|0;
        $123 = (($122) + 40|0);
        $124 = HEAP32[$123>>2]|0;
        (FUNCTION_TABLE_ii[$124 & 1023]($105)|0);
       } else {
        $125 = (($119) + 4|0);
        HEAP32[$104>>2] = $125;
       }
       $$pre$i$i$i6 = $105;$$pre$i3$i$i12 = $$pre$i3$i$i1247;$$pre$pre56 = $$pre$pre55;$90 = $183;
      }
      $$0$ph$be = $$2$lcssa;$$pre$pre54 = $$pre$pre55$lcssa;
     }
    } while(0);
    $64 = ($$0$ph$be|0)!=($__fmte|0);
    $65 = HEAP32[$__err>>2]|0;
    $66 = ($65|0)==(0);
    $or$cond43 = $64 & $66;
    if ($or$cond43) {
     $$0$ph45 = $$0$ph$be;
    } else {
     $$pre$pre54$lcssa = $$pre$pre54;
     label = 68;
     break;
    }
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa60;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa61;
    break;
   }
   else if ((label|0) == 67) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa59;
    break;
   }
   else if ((label|0) == 68) {
    $$pre$i$i$i21 = $$pre$pre54$lcssa;
    break;
   }
  }
 } while(0);
 $154 = ($$pre$i$i$i21|0)==(0|0);
 if ($154) {
  $181 = 0;$184 = 1;
 } else {
  $155 = (($$pre$i$i$i21) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($$pre$i$i$i21) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($156|0)==($158|0);
  if ($159) {
   $160 = HEAP32[$$pre$i$i$i21>>2]|0;
   $161 = (($160) + 36|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (FUNCTION_TABLE_ii[$162 & 1023]($$pre$i$i$i21)|0);
   $$0$i$i$i$i19 = $163;
  } else {
   $164 = HEAP32[$156>>2]|0;
   $$0$i$i$i$i19 = $164;
  }
  $165 = ($$0$i$i$i$i19|0)==(-1);
  if ($165) {
   HEAP32[$__b>>2] = 0;
   $181 = 0;$184 = 1;
  } else {
   $181 = $$pre$i$i$i21;$184 = 0;
  }
 }
 $166 = HEAP32[$__e>>2]|0;
 $167 = ($166|0)==(0|0);
 do {
  if ($167) {
   label = 81;
  } else {
   $168 = (($166) + 12|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($166) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($169|0)==($171|0);
   if ($172) {
    $173 = HEAP32[$166>>2]|0;
    $174 = (($173) + 36|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (FUNCTION_TABLE_ii[$175 & 1023]($166)|0);
    $$0$i$i1$i$i25 = $176;
   } else {
    $177 = HEAP32[$169>>2]|0;
    $$0$i$i1$i$i25 = $177;
   }
   $178 = ($$0$i$i1$i$i25|0)==(-1);
   if ($178) {
    HEAP32[$__e>>2] = 0;
    label = 81;
    break;
   } else {
    if ($184) {
     break;
    } else {
     label = 83;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 81) {
  if ($184) {
   label = 83;
  }
 }
 if ((label|0) == 83) {
  $179 = HEAP32[$__err>>2]|0;
  $180 = $179 | 2;
  HEAP32[$__err>>2] = $180;
 }
 HEAP32[$agg$result>>2] = $181;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,17096,((17096 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(426,($0|0),(18032|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(426,($0|0),(18032|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(426,($0|0),(18032|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 276|0;
 $$byval_copy29 = sp + 272|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 264|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 256|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 248|0;
 $$byval_copy22 = sp + 244|0;
 $$byval_copy21 = sp + 240|0;
 $$byval_copy20 = sp + 236|0;
 $$byval_copy19 = sp + 232|0;
 $$byval_copy18 = sp + 228|0;
 $$byval_copy17 = sp + 224|0;
 $$byval_copy16 = sp + 220|0;
 $$byval_copy15 = sp + 216|0;
 $$byval_copy14 = sp + 212|0;
 $$byval_copy13 = sp + 208|0;
 $$byval_copy12 = sp + 204|0;
 $$byval_copy11 = sp + 200|0;
 $$byval_copy10 = sp + 196|0;
 $$byval_copy9 = sp + 192|0;
 $$byval_copy8 = sp + 188|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 180|0;
 $$byval_copy5 = sp + 176|0;
 $$byval_copy4 = sp + 172|0;
 $$byval_copy3 = sp + 168|0;
 $$byval_copy2 = sp + 164|0;
 $$byval_copy1 = sp + 160|0;
 $$byval_copy = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(426,($1|0),(18032|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   label = 34;
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   label = 34;
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 34;
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   label = 34;
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   label = 34;
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   label = 34;
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   label = 34;
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$48,$__b,$$byval_copy,$__err,$40);
   label = 34;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 4|0);
    $128 = (($117) + 4|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   label = 34;
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,17192,((17192 + 44|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   label = 34;
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,17240,((17240 + 20|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   label = 34;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   label = 34;
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$40);
   label = 34;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   label = 34;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,17160,((17160 + 32|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   label = 34;
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,17264,((17264 + 32|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   label = 34;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   label = 34;
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 511]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   label = 34;
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 4|0);
    $67 = (($56) + 4|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72<<2)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   label = 34;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   label = 34;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   label = 34;
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,17128,((17128 + 32|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   label = 34;
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
   label = 34;
  }
  }
 } while(0);
 if ((label|0) == 34) {
  $143 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $143;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 38;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($80) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = (($5) + 24|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $36 & $37;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = (($39) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $52 = HEAP32[$46>>2]|0;
    $53 = (($52) + 40|0);
    $54 = HEAP32[$53>>2]|0;
    (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = $$pre;
   } else {
    $55 = (($48) + 4|0);
    HEAP32[$47>>2] = $55;
    $56 = $46;
   }
   $57 = ($56|0)==(0|0);
   do {
    if ($57) {
     $84 = 1;
    } else {
     $58 = (($56) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($56) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$56>>2]|0;
      $64 = (($63) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 38;
    } else {
     $70 = (($$pre$i3$i$i915) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($$pre$i3$i$i915) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = (($75) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 38;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(430)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(444,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
 } else {
  $$01$i$i = $__nar;$8 = $5;
  while(1) {
   $7 = HEAP8[$$01$i$i>>0]|0;
   $9 = ($8|0)==(0|0);
   do {
    if ($9) {
     $25 = 0;
    } else {
     $10 = (($8) + 24|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($8) + 28|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($11|0)==($13|0);
     if ($14) {
      $16 = HEAP32[$8>>2]|0;
      $17 = (($16) + 52|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = $7&255;
      $20 = (FUNCTION_TABLE_iii[$18 & 1023]($8,$19)|0);
      $21 = ($20|0)==(-1);
      $$$i = $21 ? 0 : $8;
      $25 = $$$i;
      break;
     } else {
      $15 = (($11) + 1|0);
      HEAP32[$10>>2] = $15;
      HEAP8[$11>>0] = $7;
      $25 = $8;
      break;
     }
    }
   } while(0);
   $22 = (($$01$i$i) + 1|0);
   $23 = ($22|0)==($4|0);
   if ($23) {
    $$lcssa = $25;
    break;
   } else {
    $$01$i$i = $22;$8 = $25;
   }
  }
  $24 = $$lcssa;
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $23 = $5;
 } else {
  $$01$i$i = $__nar;$8 = $5;
  while(1) {
   $7 = HEAP32[$$01$i$i>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $24 = 0;
   } else {
    $10 = (($8) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($8) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $15 = HEAP32[$8>>2]|0;
     $16 = (($15) + 52|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (FUNCTION_TABLE_iii[$17 & 1023]($8,$7)|0);
     $$0$i$i$i$i = $18;
    } else {
     $19 = (($11) + 4|0);
     HEAP32[$10>>2] = $19;
     HEAP32[$11>>2] = $7;
     $$0$i$i$i$i = $7;
    }
    $20 = ($$0$i$i$i$i|0)==(-1);
    $$$i = $20 ? 0 : $8;
    $24 = $$$i;
   }
   $21 = (($$01$i$i) + 4|0);
   $22 = ($21|0)==($4|0);
   if ($22) {
    $$lcssa = $24;
    break;
   } else {
    $$01$i$i = $21;$8 = $24;
   }
  }
  $23 = $$lcssa;
 }
 HEAP32[$agg$result>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(445,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if (!($22)) {
   __THREW__ = 0;
   (invoke_ii(446,($11|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   }
  }
  ___resumeException($20|0);
  // unreachable;
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(446,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(18920);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 447;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(428,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$114 = $32;$$1212 = $33;$105 = 447;$106 = $__wbuf;
  label = 46;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(426,($__loc|0),(18040|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if ($7) {
    label = 11;
   } else {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(448,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 11;
    } else {
     if ($11) {
      $14 = HEAP32[$5>>2]|0;
      $15 = (($14) + 32|0);
      $16 = HEAP32[$15>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($16|0,($5|0),(17656|0),(((17656 + 10|0))|0),($__atoms|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       label = 11;
       break;
      }
      $19 = HEAP32[$__wn>>2]|0;
      $20 = HEAP32[$__wb>>2]|0;
      $21 = $19;
      $22 = $20;
      $23 = (($21) - ($22))|0;
      $24 = ($23|0)>(98);
      if ($24) {
       $25 = (($23) + 2)|0;
       $26 = (_malloc($25)|0);
       $27 = ($26|0)==(0|0);
       if ($27) {
        __THREW__ = 0;
        invoke_v(436);
        $28 = __THREW__; __THREW__ = 0;
        $29 = $28&1;
        if ($29) {
         $30 = ___cxa_find_matching_catch()|0;
         $31 = tempRet0;
         $$0 = $30;$$01 = $31;
         break;
        } else {
         $38 = 0;$__nc$0 = 0;
        }
       } else {
        $38 = $26;$__nc$0 = $26;
       }
      } else {
       $38 = 0;$__nc$0 = $__nbuf;
      }
      $39 = HEAP8[$__neg>>0]|0;
      $40 = ($39<<24>>24)==(0);
      if ($40) {
       $__nc$1 = $__nc$0;
      } else {
       $41 = (($__nc$0) + 1|0);
       HEAP8[$__nc$0>>0] = 45;
       $__nc$1 = $41;
      }
      $42 = ($20>>>0)<($19>>>0);
      if ($42) {
       $43 = (($__atoms) + 10|0);
       $44 = $__atoms;
       $__nc$27 = $__nc$1;$__w$08 = $20;
       while(1) {
        $45 = HEAP8[$__w$08>>0]|0;
        $$01$i = $__atoms;
        while(1) {
         $48 = HEAP8[$$01$i>>0]|0;
         $49 = ($48<<24>>24)==($45<<24>>24);
         $46 = (($$01$i) + 1|0);
         if ($49) {
          $$0$lcssa$i = $$01$i;
          break;
         }
         $47 = ($46|0)==($43|0);
         if ($47) {
          $$0$lcssa$i = $43;
          break;
         } else {
          $$01$i = $46;
         }
        }
        $50 = $$0$lcssa$i;
        $51 = (($50) - ($44))|0;
        $52 = (17656 + ($51)|0);
        $53 = HEAP8[$52>>0]|0;
        HEAP8[$__nc$27>>0] = $53;
        $54 = (($__w$08) + 1|0);
        $55 = (($__nc$27) + 1|0);
        $56 = HEAP32[$__wn>>2]|0;
        $57 = ($54>>>0)<($56>>>0);
        if ($57) {
         $__nc$27 = $55;$__w$08 = $54;
        } else {
         $$lcssa = $55;
         break;
        }
       }
       $__nc$2$lcssa = $$lcssa;
      } else {
       $__nc$2$lcssa = $__nc$1;
      }
      HEAP8[$__nc$2$lcssa>>0] = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $58 = (_sscanf($__nbuf,17672,$vararg_buffer)|0);
      $59 = ($58|0)==(1);
      if (!($59)) {
       __THREW__ = 0;
       invoke_vi(449,(17680|0));
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        $36 = ___cxa_find_matching_catch()|0;
        $37 = tempRet0;
        _free($38);
        $$0 = $36;$$01 = $37;
        break;
       }
      }
      _free($38);
     }
     $62 = HEAP32[$__b>>2]|0;
     $63 = ($62|0)==(0|0);
     do {
      if ($63) {
       $76 = 0;
      } else {
       $64 = (($62) + 12|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($62) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($65|0)==($67|0);
       if ($68) {
        $69 = HEAP32[$62>>2]|0;
        $70 = (($69) + 36|0);
        $71 = HEAP32[$70>>2]|0;
        __THREW__ = 0;
        $72 = (invoke_ii($71|0,($62|0))|0);
        $73 = __THREW__; __THREW__ = 0;
        $74 = $73&1;
        if ($74) {
         label = 11;
         break L3;
        }
        $75 = ($72|0)==(-1);
        if ($75) {
         HEAP32[$__b>>2] = 0;
         $76 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $76 = $$pre$i$i$i;
         break;
        }
       } else {
        $76 = $62;
       }
      }
     } while(0);
     $77 = ($76|0)==(0|0);
     $78 = HEAP32[$__e>>2]|0;
     $79 = ($78|0)==(0|0);
     do {
      if ($79) {
       label = 37;
      } else {
       $80 = (($78) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (($78) + 16|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($81|0)==($83|0);
       if (!($84)) {
        if ($77) {
         break;
        } else {
         label = 39;
         break;
        }
       }
       $85 = HEAP32[$78>>2]|0;
       $86 = (($85) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       __THREW__ = 0;
       $88 = (invoke_ii($87|0,($78|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        label = 11;
        break L3;
       }
       $91 = ($88|0)==(-1);
       if ($91) {
        HEAP32[$__e>>2] = 0;
        label = 37;
        break;
       } else {
        if ($77) {
         break;
        } else {
         label = 39;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 37) {
      if ($77) {
       label = 39;
      }
     }
     if ((label|0) == 39) {
      $92 = HEAP32[$__err>>2]|0;
      $93 = $92 | 2;
      HEAP32[$__err>>2] = $93;
     }
     $94 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $94;
     $95 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($95)|0);
     $96 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $97 = ($96|0)==(0|0);
     if (!($97)) {
      $98 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($98|0,($96|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       $101 = ___cxa_find_matching_catch(0|0)|0;
       $102 = tempRet0;
       ___clang_call_terminate($101);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $$0 = $34;$$01 = $35;
  }
  $103 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($103)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $104 = ($$pre|0)==(0|0);
  if ($104) {
   $$115 = $$0;$$1213 = $$01;
  } else {
   $$pre17 = HEAP32[$1>>2]|0;
   $$114 = $$0;$$1212 = $$01;$105 = $$pre17;$106 = $$pre;
   label = 46;
  }
 }
 if ((label|0) == 46) {
  __THREW__ = 0;
  invoke_vi($105|0,($106|0));
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if ($108) {
   $109 = ___cxa_find_matching_catch(0|0)|0;
   $110 = tempRet0;
   ___clang_call_terminate($109);
   // unreachable;
  } else {
   $$115 = $$114;$$1213 = $$1212;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i105 = 0, $$0$i$i112 = 0, $$0$i$i121 = 0, $$0$i$i131 = 0, $$0$i$i148 = 0, $$0$i$i34 = 0, $$0$i$i37 = 0, $$0$i$i50 = 0, $$0$i$i56 = 0, $$0$i$i59 = 0, $$0$i$i66 = 0, $$0$i$i85 = 0, $$0$i$i88 = 0, $$274 = 0, $$275 = 0, $$276 = 0, $$277 = 0;
 var $$278 = 0, $$lcssa = 0, $$lcssa279 = 0, $$lcssa281 = 0, $$mask = 0, $$mask257 = 0, $$mask258 = 0, $$mask259 = 0, $$mask260 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i135 = 0, $$pre$i$i$i152 = 0, $$pre$i$i$i24 = 0, $$pre$i$i$i40 = 0, $$pre$i$i$i71 = 0, $$pre$i$i$i95 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i139 = 0;
 var $$pre$i2$i$i156 = 0, $$pre$i2$i$i28 = 0, $$pre$i2$i$i44 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i99 = 0, $$pre242 = 0, $$pre244 = 0, $$pre245 = 0, $$pre247 = 0, $$pre248 = 0, $$pre249 = 0, $$pre250 = 0, $$pre252 = 0, $$pre254 = 0, $$pre256 = 0, $$sum = 0, $$sum261 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0;
 var $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa280 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0233 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0;
 var $__trailing_sign$0235 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i129 = 0, $isascii1$i162 = 0, $isascii1$i53 = 0, $isascii1$i64 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $sext = 0, $sext200 = 0, $sext201 = 0, $sext202 = 0;
 var $switch = 0, $tmp$i$i = 0, $tmp$i$i101 = 0, $tmp$i$i141 = 0, $tmp$i$i158 = 0, $tmp$i$i30 = 0, $tmp$i$i46 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 447;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(450,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $68 = ___cxa_find_matching_catch()|0;
   $69 = tempRet0;
   $lpad$phi$index = $68;$lpad$phi$index7 = $69;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__ct) + 8|0);
   $7 = (($__nsn) + 4|0);
   $8 = (($__nsn) + 8|0);
   $9 = (($__psn) + 4|0);
   $10 = (($__psn) + 8|0);
   $11 = $__flags & 512;
   $12 = ($11|0)!=(0);
   $13 = (($__sym) + 1|0);
   $14 = (($__sym) + 8|0);
   $15 = (($__sym) + 4|0);
   $16 = (($__spaces) + 1|0);
   $17 = (($__spaces) + 8|0);
   $18 = (($__spaces) + 4|0);
   $19 = (($__pat) + 3|0);
   $20 = (($__grp) + 4|0);
   $893 = $__gbuf;$__p$0233 = 0;$__trailing_sign$0235 = 0;
   L4: while(1) {
    $21 = HEAP32[$__b>>2]|0;
    $22 = ($21|0)==(0|0);
    do {
     if ($22) {
      $35 = 0;
     } else {
      $23 = (($21) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($21) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if ($27) {
       $28 = HEAP32[$21>>2]|0;
       $29 = (($28) + 36|0);
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = (invoke_ii($30|0,($21|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 24;
        break L4;
       }
       $34 = ($31|0)==(-1);
       if ($34) {
        HEAP32[$__b>>2] = 0;
        $35 = 0;
        break;
       } else {
        $$pre$i$i$i24 = HEAP32[$__b>>2]|0;
        $35 = $$pre$i$i$i24;
        break;
       }
      } else {
       $35 = $21;
      }
     }
    } while(0);
    $36 = ($35|0)==(0|0);
    $37 = HEAP32[$__e>>2]|0;
    $38 = ($37|0)==(0|0);
    do {
     if ($38) {
      label = 15;
     } else {
      $39 = (($37) + 12|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($37) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)==($42|0);
      if (!($43)) {
       if ($36) {
        break;
       } else {
        $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
        label = 298;
        break L4;
       }
      }
      $44 = HEAP32[$37>>2]|0;
      $45 = (($44) + 36|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_ii($46|0,($37|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 24;
       break L4;
      }
      $50 = ($47|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       $$pre$i2$i$i28 = HEAP32[$__e>>2]|0;
       $51 = ($$pre$i2$i$i28|0)==(0|0);
       $tmp$i$i30 = $36 ^ $51;
       if ($tmp$i$i30) {
        break;
       } else {
        $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
        label = 298;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($36) {
      $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
      label = 298;
      break;
     }
    }
    $52 = (($__pat) + ($__p$0233)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 << 24 >> 24;
    L26: do {
     switch ($54|0) {
     case 1:  {
      $cond = ($__p$0233|0)==(3);
      if ($cond) {
       $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
       label = 298;
       break L4;
      }
      $77 = HEAP32[$__b>>2]|0;
      $78 = (($77) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($79|0)==($81|0);
      if ($82) {
       $83 = HEAP32[$77>>2]|0;
       $84 = (($83) + 36|0);
       $85 = HEAP32[$84>>2]|0;
       __THREW__ = 0;
       $86 = (invoke_ii($85|0,($77|0))|0);
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        label = 24;
        break L4;
       } else {
        $$0$i$i34 = $86;
       }
      } else {
       $89 = HEAP8[$79>>0]|0;
       $90 = $89&255;
       $$0$i$i34 = $90;
      }
      $91 = $$0$i$i34&255;
      $isascii1$i = ($91<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 40;
       break L4;
      }
      $sext202 = $$0$i$i34 << 24;
      $92 = $sext202 >> 24;
      $93 = HEAP32[$6>>2]|0;
      $94 = (($93) + ($92<<1)|0);
      $95 = HEAP16[$94>>1]|0;
      $96 = $95 & 8192;
      $97 = ($96<<16>>16)==(0);
      if ($97) {
       label = 40;
       break L4;
      }
      $98 = HEAP32[$__b>>2]|0;
      $99 = (($98) + 12|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($98) + 16|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($100|0)==($102|0);
      if ($103) {
       $104 = HEAP32[$98>>2]|0;
       $105 = (($104) + 40|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_ii($106|0,($98|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        label = 24;
        break L4;
       } else {
        $$0$i$i37 = $107;
       }
      } else {
       $110 = (($100) + 1|0);
       HEAP32[$99>>2] = $110;
       $111 = HEAP8[$100>>0]|0;
       $112 = $111&255;
       $$0$i$i37 = $112;
      }
      $113 = $$0$i$i37&255;
      __THREW__ = 0;
      invoke_vii(451,($__spaces|0),($113|0));
      $114 = __THREW__; __THREW__ = 0;
      $115 = $114&1;
      if ($115) {
       label = 24;
       break L4;
      } else {
       label = 41;
      }
      break;
     }
     case 4:  {
      $55 = HEAP8[$__ts>>0]|0;
      $609 = $893;$__ng$0 = 0;
      L40: while(1) {
       $538 = HEAP32[$__b>>2]|0;
       $539 = ($538|0)==(0|0);
       do {
        if ($539) {
         $552 = 0;
        } else {
         $540 = (($538) + 12|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = (($538) + 16|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ($541|0)==($543|0);
         if ($544) {
          $545 = HEAP32[$538>>2]|0;
          $546 = (($545) + 36|0);
          $547 = HEAP32[$546>>2]|0;
          __THREW__ = 0;
          $548 = (invoke_ii($547|0,($538|0))|0);
          $549 = __THREW__; __THREW__ = 0;
          $550 = $549&1;
          if ($550) {
           label = 23;
           break L4;
          }
          $551 = ($548|0)==(-1);
          if ($551) {
           HEAP32[$__b>>2] = 0;
           $552 = 0;
           break;
          } else {
           $$pre$i$i$i135 = HEAP32[$__b>>2]|0;
           $552 = $$pre$i$i$i135;
           break;
          }
         } else {
          $552 = $538;
         }
        }
       } while(0);
       $553 = ($552|0)==(0|0);
       $554 = HEAP32[$__e>>2]|0;
       $555 = ($554|0)==(0|0);
       do {
        if ($555) {
         label = 212;
        } else {
         $556 = (($554) + 12|0);
         $557 = HEAP32[$556>>2]|0;
         $558 = (($554) + 16|0);
         $559 = HEAP32[$558>>2]|0;
         $560 = ($557|0)==($559|0);
         if (!($560)) {
          if ($553) {
           break;
          } else {
           $$lcssa279 = $609;$__ng$0$lcssa280 = $__ng$0;
           break L40;
          }
         }
         $561 = HEAP32[$554>>2]|0;
         $562 = (($561) + 36|0);
         $563 = HEAP32[$562>>2]|0;
         __THREW__ = 0;
         $564 = (invoke_ii($563|0,($554|0))|0);
         $565 = __THREW__; __THREW__ = 0;
         $566 = $565&1;
         if ($566) {
          label = 23;
          break L4;
         }
         $567 = ($564|0)==(-1);
         if ($567) {
          HEAP32[$__e>>2] = 0;
          label = 212;
          break;
         } else {
          $$pre$i2$i$i139 = HEAP32[$__e>>2]|0;
          $568 = ($$pre$i2$i$i139|0)==(0|0);
          $tmp$i$i141 = $553 ^ $568;
          if ($tmp$i$i141) {
           break;
          } else {
           $$lcssa279 = $609;$__ng$0$lcssa280 = $__ng$0;
           break L40;
          }
         }
        }
       } while(0);
       if ((label|0) == 212) {
        label = 0;
        if ($553) {
         $$lcssa279 = $609;$__ng$0$lcssa280 = $__ng$0;
         break;
        }
       }
       $569 = HEAP32[$__b>>2]|0;
       $570 = (($569) + 12|0);
       $571 = HEAP32[$570>>2]|0;
       $572 = (($569) + 16|0);
       $573 = HEAP32[$572>>2]|0;
       $574 = ($571|0)==($573|0);
       if ($574) {
        $575 = HEAP32[$569>>2]|0;
        $576 = (($575) + 36|0);
        $577 = HEAP32[$576>>2]|0;
        __THREW__ = 0;
        $578 = (invoke_ii($577|0,($569|0))|0);
        $579 = __THREW__; __THREW__ = 0;
        $580 = $579&1;
        if ($580) {
         label = 23;
         break L4;
        } else {
         $$0$i$i131 = $578;
        }
       } else {
        $581 = HEAP8[$571>>0]|0;
        $582 = $581&255;
        $$0$i$i131 = $582;
       }
       $583 = $$0$i$i131&255;
       $isascii1$i129 = ($583<<24>>24)>(-1);
       if ($isascii1$i129) {
        $sext200 = $$0$i$i131 << 24;
        $584 = $sext200 >> 24;
        $585 = HEAP32[$6>>2]|0;
        $586 = (($585) + ($584<<1)|0);
        $587 = HEAP16[$586>>1]|0;
        $588 = $587 & 2048;
        $589 = ($588<<16>>16)==(0);
        if ($589) {
         label = 223;
        } else {
         $590 = HEAP32[$__wn>>2]|0;
         $591 = HEAP32[$0>>2]|0;
         $592 = ($590|0)==($591|0);
         if ($592) {
          __THREW__ = 0;
          invoke_viii(452,($__wb|0),($__wn|0),($0|0));
          $593 = __THREW__; __THREW__ = 0;
          $594 = $593&1;
          if ($594) {
           label = 23;
           break L4;
          }
          $$pre254 = HEAP32[$__wn>>2]|0;
          $596 = $$pre254;
         } else {
          $596 = $590;
         }
         $595 = (($596) + 1|0);
         HEAP32[$__wn>>2] = $595;
         HEAP8[$596>>0] = $583;
         $597 = (($__ng$0) + 1)|0;
         $898 = $609;$__ng$1 = $597;
        }
       } else {
        label = 223;
       }
       if ((label|0) == 223) {
        label = 0;
        $598 = HEAP8[$__grp>>0]|0;
        $599 = $598 & 1;
        $600 = ($599<<24>>24)==(0);
        if ($600) {
         $602 = $598&255;
         $603 = $602 >>> 1;
         $604 = $603;
        } else {
         $601 = HEAP32[$20>>2]|0;
         $604 = $601;
        }
        $605 = ($604|0)!=(0);
        $606 = ($__ng$0|0)!=(0);
        $or$cond7 = $605 & $606;
        $607 = ($583<<24>>24)==($55<<24>>24);
        $or$cond13 = $or$cond7 & $607;
        if (!($or$cond13)) {
         $$lcssa279 = $609;$__ng$0$lcssa280 = $__ng$0;
         break;
        }
        $608 = HEAP32[$__ge>>2]|0;
        $610 = ($609|0)==($608|0);
        if ($610) {
         __THREW__ = 0;
         invoke_viii(453,($__gb|0),($__gn|0),($__ge|0));
         $611 = __THREW__; __THREW__ = 0;
         $612 = $611&1;
         if ($612) {
          label = 23;
          break L4;
         }
         $$pre256 = HEAP32[$__gn>>2]|0;
         $614 = $$pre256;
        } else {
         $614 = $609;
        }
        $613 = (($614) + 4|0);
        HEAP32[$__gn>>2] = $613;
        HEAP32[$614>>2] = $__ng$0;
        $898 = $613;$__ng$1 = 0;
       }
       $615 = HEAP32[$__b>>2]|0;
       $616 = (($615) + 12|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = (($615) + 16|0);
       $619 = HEAP32[$618>>2]|0;
       $620 = ($617|0)==($619|0);
       if ($620) {
        $621 = HEAP32[$615>>2]|0;
        $622 = (($621) + 40|0);
        $623 = HEAP32[$622>>2]|0;
        __THREW__ = 0;
        (invoke_ii($623|0,($615|0))|0);
        $624 = __THREW__; __THREW__ = 0;
        $625 = $624&1;
        if ($625) {
         label = 23;
         break L4;
        }
       } else {
        $626 = (($617) + 1|0);
        HEAP32[$616>>2] = $626;
       }
       $609 = $898;$__ng$0 = $__ng$1;
      }
      $627 = HEAP32[$__gb>>2]|0;
      $628 = ($627|0)!=($$lcssa279|0);
      $629 = ($__ng$0$lcssa280|0)!=(0);
      $or$cond9 = $628 & $629;
      if ($or$cond9) {
       $630 = HEAP32[$__ge>>2]|0;
       $631 = ($$lcssa279|0)==($630|0);
       if ($631) {
        __THREW__ = 0;
        invoke_viii(453,($__gb|0),($__gn|0),($__ge|0));
        $632 = __THREW__; __THREW__ = 0;
        $633 = $632&1;
        if ($633) {
         label = 24;
         break L4;
        }
        $$pre252 = HEAP32[$__gn>>2]|0;
        $635 = $$pre252;
       } else {
        $635 = $$lcssa279;
       }
       $634 = (($635) + 4|0);
       HEAP32[$__gn>>2] = $634;
       HEAP32[$635>>2] = $__ng$0$lcssa280;
       $899 = $634;
      } else {
       $899 = $$lcssa279;
      }
      $636 = HEAP32[$__fd>>2]|0;
      $637 = ($636|0)>(0);
      if ($637) {
       $638 = HEAP32[$__b>>2]|0;
       $639 = ($638|0)==(0|0);
       do {
        if ($639) {
         $652 = 0;
        } else {
         $640 = (($638) + 12|0);
         $641 = HEAP32[$640>>2]|0;
         $642 = (($638) + 16|0);
         $643 = HEAP32[$642>>2]|0;
         $644 = ($641|0)==($643|0);
         if ($644) {
          $645 = HEAP32[$638>>2]|0;
          $646 = (($645) + 36|0);
          $647 = HEAP32[$646>>2]|0;
          __THREW__ = 0;
          $648 = (invoke_ii($647|0,($638|0))|0);
          $649 = __THREW__; __THREW__ = 0;
          $650 = $649&1;
          if ($650) {
           label = 24;
           break L4;
          }
          $651 = ($648|0)==(-1);
          if ($651) {
           HEAP32[$__b>>2] = 0;
           $652 = 0;
           break;
          } else {
           $$pre$i$i$i95 = HEAP32[$__b>>2]|0;
           $652 = $$pre$i$i$i95;
           break;
          }
         } else {
          $652 = $638;
         }
        }
       } while(0);
       $653 = ($652|0)==(0|0);
       $654 = HEAP32[$__e>>2]|0;
       $655 = ($654|0)==(0|0);
       do {
        if ($655) {
         label = 253;
        } else {
         $656 = (($654) + 12|0);
         $657 = HEAP32[$656>>2]|0;
         $658 = (($654) + 16|0);
         $659 = HEAP32[$658>>2]|0;
         $660 = ($657|0)==($659|0);
         if (!($660)) {
          if ($653) {
           break;
          } else {
           label = 259;
           break L4;
          }
         }
         $661 = HEAP32[$654>>2]|0;
         $662 = (($661) + 36|0);
         $663 = HEAP32[$662>>2]|0;
         __THREW__ = 0;
         $664 = (invoke_ii($663|0,($654|0))|0);
         $665 = __THREW__; __THREW__ = 0;
         $666 = $665&1;
         if ($666) {
          label = 24;
          break L4;
         }
         $667 = ($664|0)==(-1);
         if ($667) {
          HEAP32[$__e>>2] = 0;
          label = 253;
          break;
         } else {
          $$pre$i2$i$i99 = HEAP32[$__e>>2]|0;
          $668 = ($$pre$i2$i$i99|0)==(0|0);
          $tmp$i$i101 = $653 ^ $668;
          if ($tmp$i$i101) {
           break;
          } else {
           label = 259;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 253) {
        label = 0;
        if ($653) {
         label = 259;
         break L4;
        }
       }
       $669 = HEAP32[$__b>>2]|0;
       $670 = (($669) + 12|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = (($669) + 16|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = ($671|0)==($673|0);
       if ($674) {
        $675 = HEAP32[$669>>2]|0;
        $676 = (($675) + 36|0);
        $677 = HEAP32[$676>>2]|0;
        __THREW__ = 0;
        $678 = (invoke_ii($677|0,($669|0))|0);
        $679 = __THREW__; __THREW__ = 0;
        $680 = $679&1;
        if ($680) {
         label = 24;
         break L4;
        } else {
         $$0$i$i88 = $678;
        }
       } else {
        $681 = HEAP8[$671>>0]|0;
        $682 = $681&255;
        $$0$i$i88 = $682;
       }
       $683 = $$0$i$i88&255;
       $684 = HEAP8[$__dp>>0]|0;
       $685 = ($683<<24>>24)==($684<<24>>24);
       if (!($685)) {
        label = 259;
        break L4;
       }
       $688 = HEAP32[$__b>>2]|0;
       $689 = (($688) + 12|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = (($688) + 16|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ($690|0)==($692|0);
       if ($693) {
        $694 = HEAP32[$688>>2]|0;
        $695 = (($694) + 40|0);
        $696 = HEAP32[$695>>2]|0;
        __THREW__ = 0;
        (invoke_ii($696|0,($688|0))|0);
        $697 = __THREW__; __THREW__ = 0;
        $698 = $697&1;
        if ($698) {
         label = 24;
         break L4;
        }
       } else {
        $699 = (($690) + 1|0);
        HEAP32[$689>>2] = $699;
       }
       $777 = $636;
       while(1) {
        $700 = HEAP32[$__b>>2]|0;
        $701 = ($700|0)==(0|0);
        do {
         if ($701) {
          $714 = 0;
         } else {
          $702 = (($700) + 12|0);
          $703 = HEAP32[$702>>2]|0;
          $704 = (($700) + 16|0);
          $705 = HEAP32[$704>>2]|0;
          $706 = ($703|0)==($705|0);
          if ($706) {
           $707 = HEAP32[$700>>2]|0;
           $708 = (($707) + 36|0);
           $709 = HEAP32[$708>>2]|0;
           __THREW__ = 0;
           $710 = (invoke_ii($709|0,($700|0))|0);
           $711 = __THREW__; __THREW__ = 0;
           $712 = $711&1;
           if ($712) {
            label = 22;
            break L4;
           }
           $713 = ($710|0)==(-1);
           if ($713) {
            HEAP32[$__b>>2] = 0;
            $714 = 0;
            break;
           } else {
            $$pre$i$i$i71 = HEAP32[$__b>>2]|0;
            $714 = $$pre$i$i$i71;
            break;
           }
          } else {
           $714 = $700;
          }
         }
        } while(0);
        $715 = ($714|0)==(0|0);
        $716 = HEAP32[$__e>>2]|0;
        $717 = ($716|0)==(0|0);
        do {
         if ($717) {
          label = 276;
         } else {
          $718 = (($716) + 12|0);
          $719 = HEAP32[$718>>2]|0;
          $720 = (($716) + 16|0);
          $721 = HEAP32[$720>>2]|0;
          $722 = ($719|0)==($721|0);
          if (!($722)) {
           if ($715) {
            break;
           } else {
            label = 283;
            break L4;
           }
          }
          $723 = HEAP32[$716>>2]|0;
          $724 = (($723) + 36|0);
          $725 = HEAP32[$724>>2]|0;
          __THREW__ = 0;
          $726 = (invoke_ii($725|0,($716|0))|0);
          $727 = __THREW__; __THREW__ = 0;
          $728 = $727&1;
          if ($728) {
           label = 22;
           break L4;
          }
          $729 = ($726|0)==(-1);
          if ($729) {
           HEAP32[$__e>>2] = 0;
           label = 276;
           break;
          } else {
           $$pre$i2$i$i75 = HEAP32[$__e>>2]|0;
           $730 = ($$pre$i2$i$i75|0)==(0|0);
           $tmp$i$i77 = $715 ^ $730;
           if ($tmp$i$i77) {
            break;
           } else {
            label = 283;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 276) {
         label = 0;
         if ($715) {
          label = 283;
          break L4;
         }
        }
        $731 = HEAP32[$__b>>2]|0;
        $732 = (($731) + 12|0);
        $733 = HEAP32[$732>>2]|0;
        $734 = (($731) + 16|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = ($733|0)==($735|0);
        if ($736) {
         $737 = HEAP32[$731>>2]|0;
         $738 = (($737) + 36|0);
         $739 = HEAP32[$738>>2]|0;
         __THREW__ = 0;
         $740 = (invoke_ii($739|0,($731|0))|0);
         $741 = __THREW__; __THREW__ = 0;
         $742 = $741&1;
         if ($742) {
          label = 22;
          break L4;
         } else {
          $$0$i$i66 = $740;
         }
        } else {
         $743 = HEAP8[$733>>0]|0;
         $744 = $743&255;
         $$0$i$i66 = $744;
        }
        $745 = $$0$i$i66&255;
        $isascii1$i64 = ($745<<24>>24)>(-1);
        if (!($isascii1$i64)) {
         label = 283;
         break L4;
        }
        $sext = $$0$i$i66 << 24;
        $746 = $sext >> 24;
        $747 = HEAP32[$6>>2]|0;
        $748 = (($747) + ($746<<1)|0);
        $749 = HEAP16[$748>>1]|0;
        $750 = $749 & 2048;
        $751 = ($750<<16>>16)==(0);
        if ($751) {
         label = 283;
         break L4;
        }
        $754 = HEAP32[$__wn>>2]|0;
        $755 = HEAP32[$0>>2]|0;
        $756 = ($754|0)==($755|0);
        if ($756) {
         __THREW__ = 0;
         invoke_viii(452,($__wb|0),($__wn|0),($0|0));
         $757 = __THREW__; __THREW__ = 0;
         $758 = $757&1;
         if ($758) {
          label = 22;
          break L4;
         }
        }
        $759 = HEAP32[$__b>>2]|0;
        $760 = (($759) + 12|0);
        $761 = HEAP32[$760>>2]|0;
        $762 = (($759) + 16|0);
        $763 = HEAP32[$762>>2]|0;
        $764 = ($761|0)==($763|0);
        if ($764) {
         $765 = HEAP32[$759>>2]|0;
         $766 = (($765) + 36|0);
         $767 = HEAP32[$766>>2]|0;
         __THREW__ = 0;
         $768 = (invoke_ii($767|0,($759|0))|0);
         $769 = __THREW__; __THREW__ = 0;
         $770 = $769&1;
         if ($770) {
          label = 22;
          break L4;
         } else {
          $$0$i$i59 = $768;
         }
        } else {
         $771 = HEAP8[$761>>0]|0;
         $772 = $771&255;
         $$0$i$i59 = $772;
        }
        $773 = $$0$i$i59&255;
        $774 = HEAP32[$__wn>>2]|0;
        $775 = (($774) + 1|0);
        HEAP32[$__wn>>2] = $775;
        HEAP8[$774>>0] = $773;
        $776 = (($777) + -1)|0;
        HEAP32[$__fd>>2] = $776;
        $778 = HEAP32[$__b>>2]|0;
        $779 = (($778) + 12|0);
        $780 = HEAP32[$779>>2]|0;
        $781 = (($778) + 16|0);
        $782 = HEAP32[$781>>2]|0;
        $783 = ($780|0)==($782|0);
        if ($783) {
         $784 = HEAP32[$778>>2]|0;
         $785 = (($784) + 40|0);
         $786 = HEAP32[$785>>2]|0;
         __THREW__ = 0;
         (invoke_ii($786|0,($778|0))|0);
         $787 = __THREW__; __THREW__ = 0;
         $788 = $787&1;
         if ($788) {
          label = 22;
          break L4;
         }
        } else {
         $790 = (($780) + 1|0);
         HEAP32[$779>>2] = $790;
        }
        $789 = ($776|0)>(0);
        if ($789) {
         $777 = $776;
        } else {
         break;
        }
       }
      }
      $791 = HEAP32[$__wn>>2]|0;
      $792 = HEAP32[$__wb>>2]|0;
      $793 = ($791|0)==($792|0);
      if ($793) {
       label = 295;
       break L4;
      } else {
       $894 = $899;$__trailing_sign$1 = $__trailing_sign$0235;
      }
      break;
     }
     case 0:  {
      label = 41;
      break;
     }
     case 3:  {
      $189 = HEAP16[$__psn>>1]|0;
      $190 = $189&255;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      $193 = ($189&65535) >>> 8;
      $194 = $193&255;
      if ($192) {
       $$mask260 = $189 & 254;
       $196 = $$mask260&65535;
       $197 = $196 >>> 1;
       $209 = $197;
      } else {
       $195 = HEAP32[$9>>2]|0;
       $209 = $195;
      }
      $198 = HEAP16[$__nsn>>1]|0;
      $199 = $198&255;
      $200 = $199 & 1;
      $201 = ($200<<24>>24)==(0);
      $202 = ($198&65535) >>> 8;
      $203 = $202&255;
      if ($201) {
       $$mask259 = $198 & 254;
       $205 = $$mask259&65535;
       $206 = $205 >>> 1;
       $208 = $206;
      } else {
       $204 = HEAP32[$7>>2]|0;
       $208 = $204;
      }
      $207 = (0 - ($208))|0;
      $210 = ($209|0)==($207|0);
      if ($210) {
       $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
      } else {
       if ($192) {
        $$mask258 = $189 & 254;
        $212 = $$mask258&65535;
        $213 = $212 >>> 1;
        $214 = $213;
       } else {
        $211 = HEAP32[$9>>2]|0;
        $214 = $211;
       }
       $215 = ($214|0)==(0);
       if (!($215)) {
        if ($201) {
         $$mask257 = $198 & 254;
         $217 = $$mask257&65535;
         $218 = $217 >>> 1;
         $219 = $218;
        } else {
         $216 = HEAP32[$7>>2]|0;
         $219 = $216;
        }
        $220 = ($219|0)==(0);
        if (!($220)) {
         $308 = HEAP32[$__b>>2]|0;
         $309 = (($308) + 12|0);
         $310 = HEAP32[$309>>2]|0;
         $311 = (($308) + 16|0);
         $312 = HEAP32[$311>>2]|0;
         $313 = ($310|0)==($312|0);
         if ($313) {
          $314 = HEAP32[$308>>2]|0;
          $315 = (($314) + 36|0);
          $316 = HEAP32[$315>>2]|0;
          __THREW__ = 0;
          $317 = (invoke_ii($316|0,($308|0))|0);
          $318 = __THREW__; __THREW__ = 0;
          $319 = $318&1;
          if ($319) {
           label = 24;
           break L4;
          }
          $$pre247 = HEAP16[$__psn>>1]|0;
          $320 = $$pre247&255;
          $321 = ($$pre247&65535) >>> 8;
          $322 = $321&255;
          $$0$i$i112 = $317;$327 = $320;$897 = $322;
         } else {
          $323 = HEAP8[$310>>0]|0;
          $324 = $323&255;
          $$0$i$i112 = $324;$327 = $190;$897 = $194;
         }
         $325 = $$0$i$i112&255;
         $326 = $327 & 1;
         $328 = ($326<<24>>24)==(0);
         if ($328) {
          $331 = $897;
         } else {
          $329 = HEAP32[$10>>2]|0;
          $$pre248 = HEAP8[$329>>0]|0;
          $331 = $$pre248;
         }
         $330 = ($325<<24>>24)==($331<<24>>24);
         $332 = HEAP32[$__b>>2]|0;
         $333 = (($332) + 12|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = (($332) + 16|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = ($334|0)==($336|0);
         if ($330) {
          if ($337) {
           $338 = HEAP32[$332>>2]|0;
           $339 = (($338) + 40|0);
           $340 = HEAP32[$339>>2]|0;
           __THREW__ = 0;
           (invoke_ii($340|0,($332|0))|0);
           $341 = __THREW__; __THREW__ = 0;
           $342 = $341&1;
           if ($342) {
            label = 24;
            break L4;
           }
          } else {
           $343 = (($334) + 1|0);
           HEAP32[$333>>2] = $343;
          }
          $344 = HEAP8[$__psn>>0]|0;
          $345 = $344 & 1;
          $346 = ($345<<24>>24)==(0);
          if ($346) {
           $348 = $344&255;
           $349 = $348 >>> 1;
           $350 = $349;
          } else {
           $347 = HEAP32[$9>>2]|0;
           $350 = $347;
          }
          $351 = ($350>>>0)>(1);
          $__psn$__trailing_sign$010 = $351 ? $__psn : $__trailing_sign$0235;
          $894 = $893;$__trailing_sign$1 = $__psn$__trailing_sign$010;
          break L26;
         }
         if ($337) {
          $352 = HEAP32[$332>>2]|0;
          $353 = (($352) + 36|0);
          $354 = HEAP32[$353>>2]|0;
          __THREW__ = 0;
          $355 = (invoke_ii($354|0,($332|0))|0);
          $356 = __THREW__; __THREW__ = 0;
          $357 = $356&1;
          if ($357) {
           label = 24;
           break L4;
          } else {
           $$0$i$i121 = $355;
          }
         } else {
          $358 = HEAP8[$334>>0]|0;
          $359 = $358&255;
          $$0$i$i121 = $359;
         }
         $360 = $$0$i$i121&255;
         $361 = HEAP16[$__nsn>>1]|0;
         $362 = $361 & 1;
         $363 = ($362<<16>>16)==(0);
         if ($363) {
          $365 = ($361&65535) >>> 8;
          $366 = $365&255;
          $368 = $366;
         } else {
          $364 = HEAP32[$8>>2]|0;
          $$pre249 = HEAP8[$364>>0]|0;
          $368 = $$pre249;
         }
         $367 = ($360<<24>>24)==($368<<24>>24);
         if (!($367)) {
          label = 142;
          break L4;
         }
         $369 = HEAP32[$__b>>2]|0;
         $370 = (($369) + 12|0);
         $371 = HEAP32[$370>>2]|0;
         $372 = (($369) + 16|0);
         $373 = HEAP32[$372>>2]|0;
         $374 = ($371|0)==($373|0);
         if ($374) {
          $375 = HEAP32[$369>>2]|0;
          $376 = (($375) + 40|0);
          $377 = HEAP32[$376>>2]|0;
          __THREW__ = 0;
          (invoke_ii($377|0,($369|0))|0);
          $378 = __THREW__; __THREW__ = 0;
          $379 = $378&1;
          if ($379) {
           label = 24;
           break L4;
          }
         } else {
          $380 = (($371) + 1|0);
          HEAP32[$370>>2] = $380;
         }
         HEAP8[$__neg>>0] = 1;
         $381 = HEAP8[$__nsn>>0]|0;
         $382 = $381 & 1;
         $383 = ($382<<24>>24)==(0);
         if ($383) {
          $385 = $381&255;
          $386 = $385 >>> 1;
          $387 = $386;
         } else {
          $384 = HEAP32[$7>>2]|0;
          $387 = $384;
         }
         $388 = ($387>>>0)>(1);
         $__nsn$__trailing_sign$011 = $388 ? $__nsn : $__trailing_sign$0235;
         $894 = $893;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
         break L26;
        }
       }
       if ($192) {
        $$mask = $189 & 254;
        $222 = $$mask&65535;
        $223 = $222 >>> 1;
        $224 = $223;
       } else {
        $221 = HEAP32[$9>>2]|0;
        $224 = $221;
       }
       $225 = ($224|0)==(0);
       $226 = HEAP32[$__b>>2]|0;
       $227 = (($226) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($226) + 16|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ($228|0)==($230|0);
       if ($225) {
        if ($231) {
         $270 = HEAP32[$226>>2]|0;
         $271 = (($270) + 36|0);
         $272 = HEAP32[$271>>2]|0;
         __THREW__ = 0;
         $273 = (invoke_ii($272|0,($226|0))|0);
         $274 = __THREW__; __THREW__ = 0;
         $275 = $274&1;
         if ($275) {
          label = 24;
          break L4;
         }
         $$pre = HEAP16[$__nsn>>1]|0;
         $276 = $$pre&255;
         $277 = ($$pre&65535) >>> 8;
         $278 = $277&255;
         $$0$i$i105 = $273;$283 = $276;$896 = $278;
        } else {
         $279 = HEAP8[$228>>0]|0;
         $280 = $279&255;
         $$0$i$i105 = $280;$283 = $199;$896 = $203;
        }
        $281 = $$0$i$i105&255;
        $282 = $283 & 1;
        $284 = ($282<<24>>24)==(0);
        if ($284) {
         $287 = $896;
        } else {
         $285 = HEAP32[$8>>2]|0;
         $$pre242 = HEAP8[$285>>0]|0;
         $287 = $$pre242;
        }
        $286 = ($281<<24>>24)==($287<<24>>24);
        if (!($286)) {
         $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
         break L26;
        }
        $288 = HEAP32[$__b>>2]|0;
        $289 = (($288) + 12|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = (($288) + 16|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = ($290|0)==($292|0);
        if ($293) {
         $294 = HEAP32[$288>>2]|0;
         $295 = (($294) + 40|0);
         $296 = HEAP32[$295>>2]|0;
         __THREW__ = 0;
         (invoke_ii($296|0,($288|0))|0);
         $297 = __THREW__; __THREW__ = 0;
         $298 = $297&1;
         if ($298) {
          label = 24;
          break L4;
         }
        } else {
         $299 = (($290) + 1|0);
         HEAP32[$289>>2] = $299;
        }
        HEAP8[$__neg>>0] = 1;
        $300 = HEAP8[$__nsn>>0]|0;
        $301 = $300 & 1;
        $302 = ($301<<24>>24)==(0);
        if ($302) {
         $304 = $300&255;
         $305 = $304 >>> 1;
         $306 = $305;
        } else {
         $303 = HEAP32[$7>>2]|0;
         $306 = $303;
        }
        $307 = ($306>>>0)>(1);
        $__nsn$__trailing_sign$0 = $307 ? $__nsn : $__trailing_sign$0235;
        $894 = $893;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L26;
       }
       if ($231) {
        $232 = HEAP32[$226>>2]|0;
        $233 = (($232) + 36|0);
        $234 = HEAP32[$233>>2]|0;
        __THREW__ = 0;
        $235 = (invoke_ii($234|0,($226|0))|0);
        $236 = __THREW__; __THREW__ = 0;
        $237 = $236&1;
        if ($237) {
         label = 24;
         break L4;
        }
        $$pre244 = HEAP16[$__psn>>1]|0;
        $238 = $$pre244&255;
        $239 = ($$pre244&65535) >>> 8;
        $240 = $239&255;
        $$0$i$i85 = $235;$245 = $238;$895 = $240;
       } else {
        $241 = HEAP8[$228>>0]|0;
        $242 = $241&255;
        $$0$i$i85 = $242;$245 = $190;$895 = $194;
       }
       $243 = $$0$i$i85&255;
       $244 = $245 & 1;
       $246 = ($244<<24>>24)==(0);
       if ($246) {
        $249 = $895;
       } else {
        $247 = HEAP32[$10>>2]|0;
        $$pre245 = HEAP8[$247>>0]|0;
        $249 = $$pre245;
       }
       $248 = ($243<<24>>24)==($249<<24>>24);
       if (!($248)) {
        HEAP8[$__neg>>0] = 1;
        $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
        break L26;
       }
       $250 = HEAP32[$__b>>2]|0;
       $251 = (($250) + 12|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = (($250) + 16|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = ($252|0)==($254|0);
       if ($255) {
        $256 = HEAP32[$250>>2]|0;
        $257 = (($256) + 40|0);
        $258 = HEAP32[$257>>2]|0;
        __THREW__ = 0;
        (invoke_ii($258|0,($250|0))|0);
        $259 = __THREW__; __THREW__ = 0;
        $260 = $259&1;
        if ($260) {
         label = 24;
         break L4;
        }
       } else {
        $261 = (($252) + 1|0);
        HEAP32[$251>>2] = $261;
       }
       $262 = HEAP8[$__psn>>0]|0;
       $263 = $262 & 1;
       $264 = ($263<<24>>24)==(0);
       if ($264) {
        $266 = $262&255;
        $267 = $266 >>> 1;
        $268 = $267;
       } else {
        $265 = HEAP32[$9>>2]|0;
        $268 = $265;
       }
       $269 = ($268>>>0)>(1);
       $__psn$__trailing_sign$0 = $269 ? $__psn : $__trailing_sign$0235;
       $894 = $893;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $391 = ($__trailing_sign$0235|0)!=(0|0);
      $392 = ($__p$0233>>>0)<(2);
      $or$cond = $391 | $392;
      if (!($or$cond)) {
       $393 = ($__p$0233|0)==(2);
       if ($393) {
        $394 = HEAP8[$19>>0]|0;
        $395 = ($394<<24>>24)!=(0);
        $396 = $395;
       } else {
        $396 = 0;
       }
       $brmerge = $12 | $396;
       if (!($brmerge)) {
        $894 = $893;$__trailing_sign$1 = 0;
        break L26;
       }
      }
      $397 = HEAP8[$__sym>>0]|0;
      $398 = $397 & 1;
      $399 = ($398<<24>>24)==(0);
      $400 = HEAP32[$14>>2]|0;
      $$ = $399 ? $13 : $400;
      $401 = ($__p$0233|0)==(0);
      L277: do {
       if ($401) {
        $$ph = $$;
       } else {
        $402 = (($__p$0233) + -1)|0;
        $403 = (($__pat) + ($402)|0);
        $404 = HEAP8[$403>>0]|0;
        $switch = ($404&255)<(2);
        if ($switch) {
         $405 = $397&255;
         $406 = $405 >>> 1;
         $407 = HEAP32[$6>>2]|0;
         $408 = HEAP32[$14>>2]|0;
         $409 = HEAP32[$15>>2]|0;
         $411 = $$;
         while(1) {
          $$274 = $399 ? $13 : $408;
          $$275 = $399 ? $406 : $409;
          $410 = (($$274) + ($$275)|0);
          $412 = ($411|0)==($410|0);
          if ($412) {
           $$lcssa = $411;
           break;
          }
          $413 = HEAP8[$411>>0]|0;
          $isascii1$i162 = ($413<<24>>24)>(-1);
          if (!($isascii1$i162)) {
           $$lcssa = $411;
           break;
          }
          $414 = $413 << 24 >> 24;
          $415 = (($407) + ($414<<1)|0);
          $416 = HEAP16[$415>>1]|0;
          $417 = $416 & 8192;
          $418 = ($417<<16>>16)==(0);
          $419 = (($411) + 1|0);
          if ($418) {
           $$lcssa = $411;
           break;
          } else {
           $411 = $419;
          }
         }
         $$276 = $399 ? $13 : $408;
         $420 = $$lcssa;
         $421 = $$276;
         $422 = (($420) - ($421))|0;
         $423 = HEAP8[$__spaces>>0]|0;
         $424 = $423 & 1;
         $425 = ($424<<24>>24)==(0);
         if ($425) {
          $427 = $423&255;
          $428 = $427 >>> 1;
          $430 = $428;
         } else {
          $426 = HEAP32[$18>>2]|0;
          $430 = $426;
         }
         $429 = ($422>>>0)>($430>>>0);
         do {
          if (!($429)) {
           if ($425) {
            $434 = $423&255;
            $435 = $434 >>> 1;
            $$sum261 = (($435) - ($422))|0;
            $436 = ((($__spaces) + ($$sum261)|0) + 1|0);
            $437 = $423&255;
            $438 = $437 >>> 1;
            $440 = $16;$441 = $438;$442 = $436;
           } else {
            $431 = HEAP32[$17>>2]|0;
            $432 = HEAP32[$18>>2]|0;
            $$sum = (($432) - ($422))|0;
            $433 = (($431) + ($$sum)|0);
            $440 = $431;$441 = $432;$442 = $433;
           }
           $439 = (($440) + ($441)|0);
           $$277 = $399 ? $13 : $408;
           $443 = ($442|0)==($439|0);
           if ($443) {
            $$ph = $$lcssa;
            break L277;
           }
           $445 = $442;$447 = $$277;
           while(1) {
            $444 = HEAP8[$445>>0]|0;
            $446 = HEAP8[$447>>0]|0;
            $448 = ($444<<24>>24)==($446<<24>>24);
            if (!($448)) {
             label = 164;
             break;
            }
            $449 = (($445) + 1|0);
            $450 = (($447) + 1|0);
            $451 = ($449|0)==($439|0);
            if ($451) {
             label = 166;
             break;
            } else {
             $445 = $449;$447 = $450;
            }
           }
           if ((label|0) == 164) {
            label = 0;
            break;
           }
           else if ((label|0) == 166) {
            label = 0;
            $$ph = $$lcssa;
            break L277;
           }
          }
         } while(0);
         $$278 = $399 ? $13 : $408;
         $$ph = $$278;
        } else {
         $$ph = $$;
        }
       }
      } while(0);
      $453 = $397;$462 = $$ph;
      L304: while(1) {
       $452 = $453 & 1;
       $454 = ($452<<24>>24)==(0);
       if ($454) {
        $457 = $453&255;
        $458 = $457 >>> 1;
        $460 = $13;$461 = $458;
       } else {
        $455 = HEAP32[$14>>2]|0;
        $456 = HEAP32[$15>>2]|0;
        $460 = $455;$461 = $456;
       }
       $459 = (($460) + ($461)|0);
       $463 = ($462|0)==($459|0);
       if ($463) {
        $$lcssa281 = $462;
        break;
       }
       $464 = HEAP32[$__b>>2]|0;
       $465 = ($464|0)==(0|0);
       do {
        if ($465) {
         $478 = 0;
        } else {
         $466 = (($464) + 12|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = (($464) + 16|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = ($467|0)==($469|0);
         if ($470) {
          $471 = HEAP32[$464>>2]|0;
          $472 = (($471) + 36|0);
          $473 = HEAP32[$472>>2]|0;
          __THREW__ = 0;
          $474 = (invoke_ii($473|0,($464|0))|0);
          $475 = __THREW__; __THREW__ = 0;
          $476 = $475&1;
          if ($476) {
           label = 21;
           break L4;
          }
          $477 = ($474|0)==(-1);
          if ($477) {
           HEAP32[$__b>>2] = 0;
           $478 = 0;
           break;
          } else {
           $$pre$i$i$i152 = HEAP32[$__b>>2]|0;
           $478 = $$pre$i$i$i152;
           break;
          }
         } else {
          $478 = $464;
         }
        }
       } while(0);
       $479 = ($478|0)==(0|0);
       $480 = HEAP32[$__e>>2]|0;
       $481 = ($480|0)==(0|0);
       do {
        if ($481) {
         label = 184;
        } else {
         $482 = (($480) + 12|0);
         $483 = HEAP32[$482>>2]|0;
         $484 = (($480) + 16|0);
         $485 = HEAP32[$484>>2]|0;
         $486 = ($483|0)==($485|0);
         if (!($486)) {
          if ($479) {
           break;
          } else {
           $$lcssa281 = $462;
           break L304;
          }
         }
         $487 = HEAP32[$480>>2]|0;
         $488 = (($487) + 36|0);
         $489 = HEAP32[$488>>2]|0;
         __THREW__ = 0;
         $490 = (invoke_ii($489|0,($480|0))|0);
         $491 = __THREW__; __THREW__ = 0;
         $492 = $491&1;
         if ($492) {
          label = 21;
          break L4;
         }
         $493 = ($490|0)==(-1);
         if ($493) {
          HEAP32[$__e>>2] = 0;
          label = 184;
          break;
         } else {
          $$pre$i2$i$i156 = HEAP32[$__e>>2]|0;
          $494 = ($$pre$i2$i$i156|0)==(0|0);
          $tmp$i$i158 = $479 ^ $494;
          if ($tmp$i$i158) {
           break;
          } else {
           $$lcssa281 = $462;
           break L304;
          }
         }
        }
       } while(0);
       if ((label|0) == 184) {
        label = 0;
        if ($479) {
         $$lcssa281 = $462;
         break;
        }
       }
       $495 = HEAP32[$__b>>2]|0;
       $496 = (($495) + 12|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = (($495) + 16|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = ($497|0)==($499|0);
       if ($500) {
        $501 = HEAP32[$495>>2]|0;
        $502 = (($501) + 36|0);
        $503 = HEAP32[$502>>2]|0;
        __THREW__ = 0;
        $504 = (invoke_ii($503|0,($495|0))|0);
        $505 = __THREW__; __THREW__ = 0;
        $506 = $505&1;
        if ($506) {
         label = 21;
         break L4;
        } else {
         $$0$i$i148 = $504;
        }
       } else {
        $507 = HEAP8[$497>>0]|0;
        $508 = $507&255;
        $$0$i$i148 = $508;
       }
       $509 = $$0$i$i148&255;
       $510 = HEAP8[$462>>0]|0;
       $511 = ($509<<24>>24)==($510<<24>>24);
       if (!($511)) {
        $$lcssa281 = $462;
        break;
       }
       $512 = HEAP32[$__b>>2]|0;
       $513 = (($512) + 12|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($512) + 16|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = ($514|0)==($516|0);
       if ($517) {
        $518 = HEAP32[$512>>2]|0;
        $519 = (($518) + 40|0);
        $520 = HEAP32[$519>>2]|0;
        __THREW__ = 0;
        (invoke_ii($520|0,($512|0))|0);
        $521 = __THREW__; __THREW__ = 0;
        $522 = $521&1;
        if ($522) {
         label = 21;
         break L4;
        }
       } else {
        $523 = (($514) + 1|0);
        HEAP32[$513>>2] = $523;
       }
       $524 = (($462) + 1|0);
       $$pre250 = HEAP8[$__sym>>0]|0;
       $453 = $$pre250;$462 = $524;
      }
      if ($12) {
       $525 = HEAP8[$__sym>>0]|0;
       $526 = $525 & 1;
       $527 = ($526<<24>>24)==(0);
       if ($527) {
        $530 = $525&255;
        $531 = $530 >>> 1;
        $533 = $13;$534 = $531;
       } else {
        $528 = HEAP32[$14>>2]|0;
        $529 = HEAP32[$15>>2]|0;
        $533 = $528;$534 = $529;
       }
       $532 = (($533) + ($534)|0);
       $535 = ($$lcssa281|0)==($532|0);
       if ($535) {
        $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
       } else {
        label = 199;
        break L4;
       }
      } else {
       $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
      }
      break;
     }
     default: {
      $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
     }
     }
    } while(0);
    if ((label|0) == 41) {
     label = 0;
     $118 = ($__p$0233|0)==(3);
     if ($118) {
      $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
      label = 298;
      break;
     }
     L349: while(1) {
      $119 = HEAP32[$__b>>2]|0;
      $120 = ($119|0)==(0|0);
      do {
       if ($120) {
        $133 = 0;
       } else {
        $121 = (($119) + 12|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (($119) + 16|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = ($122|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$119>>2]|0;
         $127 = (($126) + 36|0);
         $128 = HEAP32[$127>>2]|0;
         __THREW__ = 0;
         $129 = (invoke_ii($128|0,($119|0))|0);
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if ($131) {
          label = 20;
          break L4;
         }
         $132 = ($129|0)==(-1);
         if ($132) {
          HEAP32[$__b>>2] = 0;
          $133 = 0;
          break;
         } else {
          $$pre$i$i$i40 = HEAP32[$__b>>2]|0;
          $133 = $$pre$i$i$i40;
          break;
         }
        } else {
         $133 = $119;
        }
       }
      } while(0);
      $134 = ($133|0)==(0|0);
      $135 = HEAP32[$__e>>2]|0;
      $136 = ($135|0)==(0|0);
      do {
       if ($136) {
        label = 55;
       } else {
        $137 = (($135) + 12|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($135) + 16|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = ($138|0)==($140|0);
        if (!($141)) {
         if ($134) {
          break;
         } else {
          break L349;
         }
        }
        $142 = HEAP32[$135>>2]|0;
        $143 = (($142) + 36|0);
        $144 = HEAP32[$143>>2]|0;
        __THREW__ = 0;
        $145 = (invoke_ii($144|0,($135|0))|0);
        $146 = __THREW__; __THREW__ = 0;
        $147 = $146&1;
        if ($147) {
         label = 20;
         break L4;
        }
        $148 = ($145|0)==(-1);
        if ($148) {
         HEAP32[$__e>>2] = 0;
         label = 55;
         break;
        } else {
         $$pre$i2$i$i44 = HEAP32[$__e>>2]|0;
         $149 = ($$pre$i2$i$i44|0)==(0|0);
         $tmp$i$i46 = $134 ^ $149;
         if ($tmp$i$i46) {
          break;
         } else {
          break L349;
         }
        }
       }
      } while(0);
      if ((label|0) == 55) {
       label = 0;
       if ($134) {
        break;
       }
      }
      $150 = HEAP32[$__b>>2]|0;
      $151 = (($150) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 16|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ($152|0)==($154|0);
      if ($155) {
       $156 = HEAP32[$150>>2]|0;
       $157 = (($156) + 36|0);
       $158 = HEAP32[$157>>2]|0;
       __THREW__ = 0;
       $159 = (invoke_ii($158|0,($150|0))|0);
       $160 = __THREW__; __THREW__ = 0;
       $161 = $160&1;
       if ($161) {
        label = 20;
        break L4;
       } else {
        $$0$i$i50 = $159;
       }
      } else {
       $162 = HEAP8[$152>>0]|0;
       $163 = $162&255;
       $$0$i$i50 = $163;
      }
      $164 = $$0$i$i50&255;
      $isascii1$i53 = ($164<<24>>24)>(-1);
      if (!($isascii1$i53)) {
       break;
      }
      $sext201 = $$0$i$i50 << 24;
      $165 = $sext201 >> 24;
      $166 = HEAP32[$6>>2]|0;
      $167 = (($166) + ($165<<1)|0);
      $168 = HEAP16[$167>>1]|0;
      $169 = $168 & 8192;
      $170 = ($169<<16>>16)==(0);
      if ($170) {
       break;
      }
      $171 = HEAP32[$__b>>2]|0;
      $172 = (($171) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = (($171) + 16|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($173|0)==($175|0);
      if ($176) {
       $177 = HEAP32[$171>>2]|0;
       $178 = (($177) + 40|0);
       $179 = HEAP32[$178>>2]|0;
       __THREW__ = 0;
       $180 = (invoke_ii($179|0,($171|0))|0);
       $181 = __THREW__; __THREW__ = 0;
       $182 = $181&1;
       if ($182) {
        label = 20;
        break L4;
       } else {
        $$0$i$i56 = $180;
       }
      } else {
       $183 = (($173) + 1|0);
       HEAP32[$172>>2] = $183;
       $184 = HEAP8[$173>>0]|0;
       $185 = $184&255;
       $$0$i$i56 = $185;
      }
      $186 = $$0$i$i56&255;
      __THREW__ = 0;
      invoke_vii(451,($__spaces|0),($186|0));
      $187 = __THREW__; __THREW__ = 0;
      $188 = $187&1;
      if ($188) {
       label = 20;
       break L4;
      }
     }
     $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
    }
    $796 = (($__p$0233) + 1)|0;
    $797 = ($796>>>0)<(4);
    if ($797) {
     $893 = $894;$__p$0233 = $796;$__trailing_sign$0235 = $__trailing_sign$1;
    } else {
     $881 = $894;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 298;
     break;
    }
   }
   L383:    switch (label|0) {
    case 20: {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi$index = $58;$lpad$phi$index7 = $59;
     break L1;
     break;
    }
    case 21: {
     $60 = ___cxa_find_matching_catch()|0;
     $61 = tempRet0;
     $lpad$phi$index = $60;$lpad$phi$index7 = $61;
     break L1;
     break;
    }
    case 22: {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index7 = $63;
     break L1;
     break;
    }
    case 23: {
     $64 = ___cxa_find_matching_catch()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index7 = $65;
     break L1;
     break;
    }
    case 24: {
     $66 = ___cxa_find_matching_catch()|0;
     $67 = tempRet0;
     $lpad$phi$index = $66;$lpad$phi$index7 = $67;
     break L1;
     break;
    }
    case 40: {
     $116 = HEAP32[$__err>>2]|0;
     $117 = $116 | 4;
     HEAP32[$__err>>2] = $117;
     $$0 = 0;
     break;
    }
    case 142: {
     $389 = HEAP32[$__err>>2]|0;
     $390 = $389 | 4;
     HEAP32[$__err>>2] = $390;
     $$0 = 0;
     break;
    }
    case 199: {
     $536 = HEAP32[$__err>>2]|0;
     $537 = $536 | 4;
     HEAP32[$__err>>2] = $537;
     $$0 = 0;
     break;
    }
    case 259: {
     $686 = HEAP32[$__err>>2]|0;
     $687 = $686 | 4;
     HEAP32[$__err>>2] = $687;
     $$0 = 0;
     break;
    }
    case 283: {
     $752 = HEAP32[$__err>>2]|0;
     $753 = $752 | 4;
     HEAP32[$__err>>2] = $753;
     $$0 = 0;
     break;
    }
    case 295: {
     $794 = HEAP32[$__err>>2]|0;
     $795 = $794 | 4;
     HEAP32[$__err>>2] = $795;
     $$0 = 0;
     break;
    }
    case 298: {
     $798 = ($__trailing_sign$0$lcssa|0)==(0|0);
     do {
      if (!($798)) {
       $799 = (($__trailing_sign$0$lcssa) + 1|0);
       $800 = (($__trailing_sign$0$lcssa) + 8|0);
       $801 = (($__trailing_sign$0$lcssa) + 4|0);
       $__i$0 = 1;
       L398: while(1) {
        $802 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $803 = $802 & 1;
        $804 = ($803<<24>>24)==(0);
        if ($804) {
         $806 = $802&255;
         $807 = $806 >>> 1;
         $809 = $807;
        } else {
         $805 = HEAP32[$801>>2]|0;
         $809 = $805;
        }
        $808 = ($__i$0>>>0)<($809>>>0);
        if (!($808)) {
         label = 329;
         break;
        }
        $810 = HEAP32[$__b>>2]|0;
        $811 = ($810|0)==(0|0);
        do {
         if ($811) {
          $824 = 0;
         } else {
          $812 = (($810) + 12|0);
          $813 = HEAP32[$812>>2]|0;
          $814 = (($810) + 16|0);
          $815 = HEAP32[$814>>2]|0;
          $816 = ($813|0)==($815|0);
          if ($816) {
           $817 = HEAP32[$810>>2]|0;
           $818 = (($817) + 36|0);
           $819 = HEAP32[$818>>2]|0;
           __THREW__ = 0;
           $820 = (invoke_ii($819|0,($810|0))|0);
           $821 = __THREW__; __THREW__ = 0;
           $822 = $821&1;
           if ($822) {
            label = 19;
            break L398;
           }
           $823 = ($820|0)==(-1);
           if ($823) {
            HEAP32[$__b>>2] = 0;
            $824 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $824 = $$pre$i$i$i;
            break;
           }
          } else {
           $824 = $810;
          }
         }
        } while(0);
        $825 = ($824|0)==(0|0);
        $826 = HEAP32[$__e>>2]|0;
        $827 = ($826|0)==(0|0);
        do {
         if ($827) {
          label = 316;
         } else {
          $828 = (($826) + 12|0);
          $829 = HEAP32[$828>>2]|0;
          $830 = (($826) + 16|0);
          $831 = HEAP32[$830>>2]|0;
          $832 = ($829|0)==($831|0);
          if (!($832)) {
           if ($825) {
            break;
           } else {
            label = 324;
            break L398;
           }
          }
          $833 = HEAP32[$826>>2]|0;
          $834 = (($833) + 36|0);
          $835 = HEAP32[$834>>2]|0;
          __THREW__ = 0;
          $836 = (invoke_ii($835|0,($826|0))|0);
          $837 = __THREW__; __THREW__ = 0;
          $838 = $837&1;
          if ($838) {
           label = 19;
           break L398;
          }
          $839 = ($836|0)==(-1);
          if ($839) {
           HEAP32[$__e>>2] = 0;
           label = 316;
           break;
          } else {
           $$pre$i2$i$i = HEAP32[$__e>>2]|0;
           $840 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $825 ^ $840;
           if ($tmp$i$i) {
            break;
           } else {
            label = 324;
            break L398;
           }
          }
         }
        } while(0);
        if ((label|0) == 316) {
         label = 0;
         if ($825) {
          label = 324;
          break;
         }
        }
        $841 = HEAP32[$__b>>2]|0;
        $842 = (($841) + 12|0);
        $843 = HEAP32[$842>>2]|0;
        $844 = (($841) + 16|0);
        $845 = HEAP32[$844>>2]|0;
        $846 = ($843|0)==($845|0);
        if ($846) {
         $847 = HEAP32[$841>>2]|0;
         $848 = (($847) + 36|0);
         $849 = HEAP32[$848>>2]|0;
         __THREW__ = 0;
         $850 = (invoke_ii($849|0,($841|0))|0);
         $851 = __THREW__; __THREW__ = 0;
         $852 = $851&1;
         if ($852) {
          label = 19;
          break;
         } else {
          $$0$i$i = $850;
         }
        } else {
         $853 = HEAP8[$843>>0]|0;
         $854 = $853&255;
         $$0$i$i = $854;
        }
        $855 = $$0$i$i&255;
        $856 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $857 = $856 & 1;
        $858 = ($857<<24>>24)==(0);
        if ($858) {
         $861 = $799;
        } else {
         $859 = HEAP32[$800>>2]|0;
         $861 = $859;
        }
        $860 = (($861) + ($__i$0)|0);
        $862 = HEAP8[$860>>0]|0;
        $863 = ($855<<24>>24)==($862<<24>>24);
        if (!($863)) {
         label = 324;
         break;
        }
        $866 = (($__i$0) + 1)|0;
        $867 = HEAP32[$__b>>2]|0;
        $868 = (($867) + 12|0);
        $869 = HEAP32[$868>>2]|0;
        $870 = (($867) + 16|0);
        $871 = HEAP32[$870>>2]|0;
        $872 = ($869|0)==($871|0);
        if ($872) {
         $873 = HEAP32[$867>>2]|0;
         $874 = (($873) + 40|0);
         $875 = HEAP32[$874>>2]|0;
         __THREW__ = 0;
         (invoke_ii($875|0,($867|0))|0);
         $876 = __THREW__; __THREW__ = 0;
         $877 = $876&1;
         if ($877) {
          label = 19;
          break;
         }
        } else {
         $878 = (($869) + 1|0);
         HEAP32[$868>>2] = $878;
        }
        $__i$0 = $866;
       }
       if ((label|0) == 19) {
        $56 = ___cxa_find_matching_catch()|0;
        $57 = tempRet0;
        $lpad$phi$index = $56;$lpad$phi$index7 = $57;
        break L1;
       }
       else if ((label|0) == 324) {
        $864 = HEAP32[$__err>>2]|0;
        $865 = $864 | 4;
        HEAP32[$__err>>2] = $865;
        $$0 = 0;
        break L383;
       }
       else if ((label|0) == 329) {
        break;
       }
      }
     } while(0);
     $879 = HEAP32[$__gb>>2]|0;
     $880 = ($879|0)==($881|0);
     if ($880) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$879,$881,$__et);
      $882 = HEAP32[$__et>>2]|0;
      $883 = ($882|0)==(0);
      if ($883) {
       $$0 = 1;
      } else {
       $884 = HEAP32[$__err>>2]|0;
       $885 = $884 | 4;
       HEAP32[$__err>>2] = $885;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $886 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $887 = ($886|0)==(0|0);
   if (!($887)) {
    $888 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_vi($888|0,($886|0));
    $889 = __THREW__; __THREW__ = 0;
    $890 = $889&1;
    if ($890) {
     $891 = ___cxa_find_matching_catch(0|0)|0;
     $892 = tempRet0;
     ___clang_call_terminate($891);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $70 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $71 = ($70|0)==(0|0);
 if (!($71)) {
  $72 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($72|0,($70|0));
  $73 = __THREW__; __THREW__ = 0;
  $74 = $73&1;
  if ($74) {
   $75 = ___cxa_find_matching_catch(0|0)|0;
   $76 = tempRet0;
   ___clang_call_terminate($75);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(454,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(26656|0),(350|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0113 = 0, $$0114 = 0, $$015 = 0, $$016 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$0$lcssa$ph = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 447;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(428,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0113 = $32;$$015 = $31;$95 = $__wbuf;
  label = 39;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(426,($__loc|0),(18040|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(448,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 1|0);
       HEAP8[$20>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP8[$18>>0] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 28|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(451,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -1|0);
      $42 = ($39>>>0)<($41>>>0);
      if ($42) {
       $__w$05 = $39;
       while(1) {
        $45 = HEAP8[$__w$05>>0]|0;
        $46 = ($45<<24>>24)==($36<<24>>24);
        $43 = (($__w$05) + 1|0);
        if (!($46)) {
         $__w$0$lcssa$ph = $__w$05;
         break;
        }
        $44 = ($43>>>0)<($41>>>0);
        if ($44) {
         $__w$05 = $43;
        } else {
         $__w$0$lcssa$ph = $43;
         break;
        }
       }
       $__w$0$lcssa = $__w$0$lcssa$ph;
      } else {
       $__w$0$lcssa = $39;
      }
      __THREW__ = 0;
      (invoke_iiii(455,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $63 = 0;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L4;
        }
        $62 = ($59|0)==(-1);
        if ($62) {
         HEAP32[$__b>>2] = 0;
         $63 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $63 = $$pre$i$i$i;
         break;
        }
       } else {
        $63 = $49;
       }
      }
     } while(0);
     $64 = ($63|0)==(0|0);
     $65 = ($8|0)==(0|0);
     do {
      if ($65) {
       label = 31;
      } else {
       $66 = (($8) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($8) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if (!($70)) {
        if ($64) {
         break;
        } else {
         label = 33;
         break;
        }
       }
       $71 = HEAP32[$8>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($8|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L4;
       }
       $77 = ($74|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 31;
        break;
       } else {
        $78 = ($8|0)==(0|0);
        $tmp$i$i = $64 ^ $78;
        if ($tmp$i$i) {
         break;
        } else {
         label = 33;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      if ($64) {
       label = 33;
      }
     }
     if ((label|0) == 33) {
      $79 = HEAP32[$__err>>2]|0;
      $80 = $79 | 2;
      HEAP32[$__err>>2] = $80;
     }
     $81 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     $82 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if (!($84)) {
      $85 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($85|0,($83|0));
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $88 = ___cxa_find_matching_catch(0|0)|0;
       $89 = tempRet0;
       ___clang_call_terminate($88);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0114 = $91;$$016 = $90;
  } else {
   $$0113 = $91;$$015 = $90;$95 = $$pre;
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $94 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0114 = $$0113;$$016 = $$015;
  }
 }
 ___resumeException($$016|0);
 // unreachable;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17480)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $24 = (($__nsn) + 1|0);
    HEAP8[$24>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = (($__nsn) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP8[$22>>0] = 0;
    $23 = (($__nsn) + 4|0);
    HEAP32[$23>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__nsn|0),0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
   $29 = HEAP32[$10>>2]|0;
   $30 = (($29) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
   $32 = HEAP8[$__psn>>0]|0;
   $33 = $32 & 1;
   $34 = ($33<<24>>24)==(0);
   if ($34) {
    $38 = (($__psn) + 1|0);
    HEAP8[$38>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $35 = (($__psn) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    HEAP8[$36>>0] = 0;
    $37 = (($__psn) + 4|0);
    HEAP32[$37>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__psn|0),0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $41 = ___cxa_find_matching_catch(0|0)|0;
    $42 = tempRet0;
    ___clang_call_terminate($41);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   $43 = HEAP32[$10>>2]|0;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
   HEAP8[$__dp>>0] = $46;
   $47 = HEAP32[$10>>2]|0;
   $48 = (($47) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
   HEAP8[$__ts>>0] = $50;
   $51 = HEAP32[$10>>2]|0;
   $52 = (($51) + 20|0);
   $53 = HEAP32[$52>>2]|0;
   FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
   $54 = HEAP8[$__grp>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $60 = (($__grp) + 1|0);
    HEAP8[$60>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $57 = (($__grp) + 8|0);
    $58 = HEAP32[$57>>2]|0;
    HEAP8[$58>>0] = 0;
    $59 = (($__grp) + 4|0);
    HEAP32[$59>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   if ($62) {
    $63 = ___cxa_find_matching_catch(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
   $65 = HEAP32[$10>>2]|0;
   $66 = (($65) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
   $68 = HEAP8[$__sym>>0]|0;
   $69 = $68 & 1;
   $70 = ($69<<24>>24)==(0);
   if ($70) {
    $74 = (($__sym) + 1|0);
    HEAP8[$74>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $71 = (($__sym) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP8[$72>>0] = 0;
    $73 = (($__sym) + 4|0);
    HEAP32[$73>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__sym|0),0);
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   if ($76) {
    $77 = ___cxa_find_matching_catch(0|0)|0;
    $78 = tempRet0;
    ___clang_call_terminate($77);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
    $79 = HEAP32[$10>>2]|0;
    $80 = (($79) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
    $storemerge = $82;
    break;
   }
  } else {
   $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17416)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + 44|0);
   $86 = HEAP32[$85>>2]|0;
   FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
   $87 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
   $88 = HEAP32[$83>>2]|0;
   $89 = (($88) + 32|0);
   $90 = HEAP32[$89>>2]|0;
   FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
   $91 = HEAP8[$__nsn>>0]|0;
   $92 = $91 & 1;
   $93 = ($92<<24>>24)==(0);
   if ($93) {
    $97 = (($__nsn) + 1|0);
    HEAP8[$97>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $94 = (($__nsn) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    HEAP8[$95>>0] = 0;
    $96 = (($__nsn) + 4|0);
    HEAP32[$96>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__nsn|0),0);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   if ($99) {
    $100 = ___cxa_find_matching_catch(0|0)|0;
    $101 = tempRet0;
    ___clang_call_terminate($100);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
   $102 = HEAP32[$83>>2]|0;
   $103 = (($102) + 28|0);
   $104 = HEAP32[$103>>2]|0;
   FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
   $105 = HEAP8[$__psn>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $111 = (($__psn) + 1|0);
    HEAP8[$111>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $108 = (($__psn) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    HEAP8[$109>>0] = 0;
    $110 = (($__psn) + 4|0);
    HEAP32[$110>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__psn|0),0);
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    $114 = ___cxa_find_matching_catch(0|0)|0;
    $115 = tempRet0;
    ___clang_call_terminate($114);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
   $116 = HEAP32[$83>>2]|0;
   $117 = (($116) + 12|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
   HEAP8[$__dp>>0] = $119;
   $120 = HEAP32[$83>>2]|0;
   $121 = (($120) + 16|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
   HEAP8[$__ts>>0] = $123;
   $124 = HEAP32[$83>>2]|0;
   $125 = (($124) + 20|0);
   $126 = HEAP32[$125>>2]|0;
   FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
   $127 = HEAP8[$__grp>>0]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $133 = (($__grp) + 1|0);
    HEAP8[$133>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $130 = (($__grp) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    HEAP8[$131>>0] = 0;
    $132 = (($__grp) + 4|0);
    HEAP32[$132>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    $136 = ___cxa_find_matching_catch(0|0)|0;
    $137 = tempRet0;
    ___clang_call_terminate($136);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
   $138 = HEAP32[$83>>2]|0;
   $139 = (($138) + 24|0);
   $140 = HEAP32[$139>>2]|0;
   FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
   $141 = HEAP8[$__sym>>0]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   if ($143) {
    $147 = (($__sym) + 1|0);
    HEAP8[$147>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $144 = (($__sym) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    HEAP8[$145>>0] = 0;
    $146 = (($__sym) + 4|0);
    HEAP32[$146>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__sym|0),0);
   $148 = __THREW__; __THREW__ = 0;
   $149 = $148&1;
   if ($149) {
    $150 = ___cxa_find_matching_catch(0|0)|0;
    $151 = tempRet0;
    ___clang_call_terminate($150);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
    $152 = HEAP32[$83>>2]|0;
    $153 = (($152) + 36|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
    $storemerge = $155;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $17$phi = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ig$011 = 0, $__r$012 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond2$lcssa17 = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7|0)==(0);
 L5: do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $20 = $0;
   } else {
    $10 = (($__g_end) + -4|0);
    $11 = ($10>>>0)>($__g>>>0);
    if ($11) {
     $$012$i$i = $__g;$14 = $10;$17 = $__g_end;
     while(1) {
      $12 = HEAP32[$$012$i$i>>2]|0;
      $13 = HEAP32[$14>>2]|0;
      HEAP32[$$012$i$i>>2] = $13;
      HEAP32[$14>>2] = $12;
      $15 = (($$012$i$i) + 4|0);
      $16 = (($17) + -8|0);
      $18 = ($15>>>0)<($16>>>0);
      if ($18) {
       $17$phi = $14;$$012$i$i = $15;$14 = $16;$17 = $17$phi;
      } else {
       break;
      }
     }
     $$pre = HEAP8[$__grouping>>0]|0;
     $20 = $$pre;
    } else {
     $20 = $0;
    }
   }
   $19 = $20 & 1;
   $21 = ($19<<24>>24)==(0);
   if ($21) {
    $26 = (($__grouping) + 1|0);
    $27 = $20&255;
    $28 = $27 >>> 1;
    $32 = $26;$35 = $28;
   } else {
    $22 = (($__grouping) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($__grouping) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $32 = $23;$35 = $25;
   }
   $29 = (($__g_end) + -4|0);
   $30 = ($29>>>0)>($__g>>>0);
   $31 = HEAP8[$32>>0]|0;
   $$not9 = ($31<<24>>24)<(1);
   $33 = ($31<<24>>24)==(127);
   $or$cond210 = $$not9 | $33;
   do {
    if ($30) {
     $34 = (($32) + ($35)|0);
     $36 = $34;
     $38 = $31;$__ig$011 = $32;$__r$012 = $__g;$or$cond213 = $or$cond210;
     while(1) {
      if (!($or$cond213)) {
       $37 = $38 << 24 >> 24;
       $39 = HEAP32[$__r$012>>2]|0;
       $40 = ($37|0)==($39|0);
       if (!($40)) {
        label = 17;
        break;
       }
      }
      $41 = $__ig$011;
      $42 = (($36) - ($41))|0;
      $43 = ($42|0)>(1);
      $44 = (($__ig$011) + 1|0);
      $$__ig$0 = $43 ? $44 : $__ig$011;
      $45 = (($__r$012) + 4|0);
      $46 = ($45>>>0)<($29>>>0);
      $47 = HEAP8[$$__ig$0>>0]|0;
      $$not = ($47<<24>>24)<(1);
      $48 = ($47<<24>>24)==(127);
      $or$cond2 = $$not | $48;
      if ($46) {
       $38 = $47;$__ig$011 = $$__ig$0;$__r$012 = $45;$or$cond213 = $or$cond2;
      } else {
       $$lcssa = $47;$or$cond2$lcssa17 = $or$cond2;
       label = 19;
       break;
      }
     }
     if ((label|0) == 17) {
      HEAP32[$__err>>2] = 4;
      break L5;
     }
     else if ((label|0) == 19) {
      $$lcssa6 = $$lcssa;$or$cond2$lcssa = $or$cond2$lcssa17;
      break;
     }
    } else {
     $$lcssa6 = $31;$or$cond2$lcssa = $or$cond210;
    }
   } while(0);
   if (!($or$cond2$lcssa)) {
    $49 = $$lcssa6 << 24 >> 24;
    $50 = HEAP32[$29>>2]|0;
    $51 = (($50) + -1)|0;
    $52 = ($51>>>0)<($49>>>0);
    if (!($52)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0;
 var $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 447;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(428,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$112 = $33;$$1210 = $34;$107 = 447;$108 = $__wbuf;
  label = 47;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(426,($__loc|0),(18032|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if ($7) {
    label = 11;
   } else {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(457,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 11;
    } else {
     if ($11) {
      $14 = HEAP32[$5>>2]|0;
      $15 = (($14) + 48|0);
      $16 = HEAP32[$15>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($16|0,($5|0),(17736|0),(((17736 + 10|0))|0),($__atoms|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       label = 11;
       break;
      }
      $19 = HEAP32[$__wn>>2]|0;
      $20 = HEAP32[$__wb>>2]|0;
      $21 = $19;
      $22 = $20;
      $23 = (($21) - ($22))|0;
      $24 = ($23|0)>(392);
      if ($24) {
       $25 = $23 >> 2;
       $26 = (($25) + 2)|0;
       $27 = (_malloc($26)|0);
       $28 = ($27|0)==(0|0);
       if ($28) {
        __THREW__ = 0;
        invoke_v(436);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         $31 = ___cxa_find_matching_catch()|0;
         $32 = tempRet0;
         $$0 = $31;$$01 = $32;
         break;
        } else {
         $39 = 0;$__nc$0 = 0;
        }
       } else {
        $39 = $27;$__nc$0 = $27;
       }
      } else {
       $39 = 0;$__nc$0 = $__nbuf;
      }
      $40 = HEAP8[$__neg>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $__nc$1 = $__nc$0;
      } else {
       $42 = (($__nc$0) + 1|0);
       HEAP8[$__nc$0>>0] = 45;
       $__nc$1 = $42;
      }
      $43 = ($20>>>0)<($19>>>0);
      if ($43) {
       $44 = (($__atoms) + 40|0);
       $45 = $__atoms;
       $__nc$26 = $__nc$1;$__w$07 = $20;
       while(1) {
        $46 = HEAP32[$__w$07>>2]|0;
        $$01$i = $__atoms;
        while(1) {
         $49 = HEAP32[$$01$i>>2]|0;
         $50 = ($49|0)==($46|0);
         $47 = (($$01$i) + 4|0);
         if ($50) {
          $$0$lcssa$i = $$01$i;
          break;
         }
         $48 = ($47|0)==($44|0);
         if ($48) {
          $$0$lcssa$i = $44;
          break;
         } else {
          $$01$i = $47;
         }
        }
        $51 = $$0$lcssa$i;
        $52 = (($51) - ($45))|0;
        $53 = $52 >> 2;
        $54 = (17736 + ($53)|0);
        $55 = HEAP8[$54>>0]|0;
        HEAP8[$__nc$26>>0] = $55;
        $56 = (($__w$07) + 4|0);
        $57 = (($__nc$26) + 1|0);
        $58 = HEAP32[$__wn>>2]|0;
        $59 = ($56>>>0)<($58>>>0);
        if ($59) {
         $__nc$26 = $57;$__w$07 = $56;
        } else {
         $$lcssa = $57;
         break;
        }
       }
       $__nc$2$lcssa = $$lcssa;
      } else {
       $__nc$2$lcssa = $__nc$1;
      }
      HEAP8[$__nc$2$lcssa>>0] = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $60 = (_sscanf($__nbuf,17672,$vararg_buffer)|0);
      $61 = ($60|0)==(1);
      if (!($61)) {
       __THREW__ = 0;
       invoke_vi(449,(17680|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        $37 = ___cxa_find_matching_catch()|0;
        $38 = tempRet0;
        _free($39);
        $$0 = $37;$$01 = $38;
        break;
       }
      }
      _free($39);
     }
     $64 = HEAP32[$__b>>2]|0;
     $65 = ($64|0)==(0|0);
     do {
      if ($65) {
       $113 = 1;
      } else {
       $66 = (($64) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($64) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if ($70) {
        $71 = HEAP32[$64>>2]|0;
        $72 = (($71) + 36|0);
        $73 = HEAP32[$72>>2]|0;
        __THREW__ = 0;
        $74 = (invoke_ii($73|0,($64|0))|0);
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         label = 11;
         break L4;
        } else {
         $$0$i$i$i$i = $74;
        }
       } else {
        $77 = HEAP32[$67>>2]|0;
        $$0$i$i$i$i = $77;
       }
       $78 = ($$0$i$i$i$i|0)==(-1);
       if ($78) {
        HEAP32[$__b>>2] = 0;
        $113 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $113 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $79 = HEAP32[$__e>>2]|0;
     $80 = ($79|0)==(0|0);
     do {
      if ($80) {
       label = 38;
      } else {
       $81 = (($79) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($79) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = (($86) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        __THREW__ = 0;
        $89 = (invoke_ii($88|0,($79|0))|0);
        $90 = __THREW__; __THREW__ = 0;
        $91 = $90&1;
        if ($91) {
         label = 11;
         break L4;
        } else {
         $$0$i$i1$i$i = $89;
        }
       } else {
        $92 = HEAP32[$82>>2]|0;
        $$0$i$i1$i$i = $92;
       }
       $93 = ($$0$i$i1$i$i|0)==(-1);
       if ($93) {
        HEAP32[$__e>>2] = 0;
        label = 38;
        break;
       } else {
        if ($113) {
         break;
        } else {
         label = 40;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 38) {
      if ($113) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $94 = HEAP32[$__err>>2]|0;
      $95 = $94 | 2;
      HEAP32[$__err>>2] = $95;
     }
     $96 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $96;
     $97 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($97)|0);
     $98 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $99 = ($98|0)==(0|0);
     if (!($99)) {
      $100 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($100|0,($98|0));
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       $103 = ___cxa_find_matching_catch(0|0)|0;
       $104 = tempRet0;
       ___clang_call_terminate($103);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 11) {
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;
  }
  $105 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($105)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $106 = ($$pre|0)==(0|0);
  if ($106) {
   $$113 = $$0;$$1211 = $$01;
  } else {
   $$pre15 = HEAP32[$1>>2]|0;
   $$112 = $$0;$$1210 = $$01;$107 = $$pre15;$108 = $$pre;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($107|0,($108|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if ($110) {
   $111 = ___cxa_find_matching_catch(0|0)|0;
   $112 = tempRet0;
   ___clang_call_terminate($111);
   // unreachable;
  } else {
   $$113 = $$112;$$1211 = $$1210;
  }
 }
 ___resumeException($$113|0);
 // unreachable;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i118 = 0, $$0$i$i$i$i150 = 0, $$0$i$i$i$i175 = 0, $$0$i$i$i$i23 = 0, $$0$i$i$i$i44 = 0, $$0$i$i$i$i84 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i124 = 0, $$0$i$i1$i$i156 = 0, $$0$i$i1$i$i181 = 0, $$0$i$i1$i$i29 = 0, $$0$i$i1$i$i50 = 0, $$0$i$i1$i$i90 = 0, $$0$i$i102 = 0, $$0$i$i111 = 0, $$0$i$i114 = 0;
 var $$0$i$i136 = 0, $$0$i$i147 = 0, $$0$i$i171 = 0, $$0$i$i38 = 0, $$0$i$i42 = 0, $$0$i$i59 = 0, $$0$i$i65 = 0, $$0$i$i70 = 0, $$0$i$i78 = 0, $$0$i$i81 = 0, $$278 = 0, $$279 = 0, $$280 = 0, $$281 = 0, $$282 = 0, $$283 = 0, $$284 = 0, $$lcssa = 0, $$lcssa286 = 0, $$lcssa290 = 0;
 var $$lcssa292 = 0, $$lcssa293 = 0, $$ph = 0, $$ph285 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i120 = 0, $$pre$i$i$i152 = 0, $$pre$i$i$i177 = 0, $$pre$i$i$i25 = 0, $$pre$i$i$i46 = 0, $$pre$i$i$i86 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i126 = 0, $$pre$i3$i$i158 = 0, $$pre$i3$i$i183 = 0, $$pre$i3$i$i31 = 0, $$pre$i3$i$i52 = 0, $$pre$i3$i$i92 = 0, $$pre261 = 0;
 var $$pre262 = 0, $$pre263 = 0, $$pre264 = 0, $$pre265 = 0, $$pre266 = 0, $$pre268 = 0, $$pre270 = 0, $$sum = 0, $$sum271 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0;
 var $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa287 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0251 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0253 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0;
 var $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i121 = 0, $phitmp$i$i$i153 = 0, $phitmp$i$i$i178 = 0, $phitmp$i$i$i26 = 0, $phitmp$i$i$i47 = 0, $phitmp$i$i$i87 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i127 = 0, $phitmp$i4$i$i159 = 0, $phitmp$i4$i$i184 = 0, $phitmp$i4$i$i32 = 0, $phitmp$i4$i$i53 = 0, $phitmp$i4$i$i93 = 0;
 var $switch = 0, $tmp$i$i = 0, $tmp$i$i129 = 0, $tmp$i$i161 = 0, $tmp$i$i186 = 0, $tmp$i$i34 = 0, $tmp$i$i55 = 0, $tmp$i$i95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 447;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(458,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $67 = ___cxa_find_matching_catch()|0;
   $68 = tempRet0;
   $lpad$phi$index = $67;$lpad$phi$index8 = $68;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 4|0);
   $9 = (($__psn) + 8|0);
   $10 = $__flags & 512;
   $11 = ($10|0)!=(0);
   $12 = (($__sym) + 4|0);
   $13 = (($__sym) + 8|0);
   $14 = (($__spaces) + 4|0);
   $15 = (($__spaces) + 8|0);
   $16 = (($__pat) + 3|0);
   $17 = (($__grp) + 4|0);
   $859 = $__gbuf;$__p$0251 = 0;$__trailing_sign$0253 = 0;
   L3: while(1) {
    $18 = HEAP32[$__b>>2]|0;
    $19 = ($18|0)==(0|0);
    do {
     if ($19) {
      $48 = 1;
     } else {
      $20 = (($18) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $25 = HEAP32[$18>>2]|0;
       $26 = (($25) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_ii($27|0,($18|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 26;
        break L3;
       } else {
        $$0$i$i$i$i23 = $28;
       }
      } else {
       $31 = HEAP32[$21>>2]|0;
       $$0$i$i$i$i23 = $31;
      }
      $32 = ($$0$i$i$i$i23|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $48 = 1;
       break;
      } else {
       $$pre$i$i$i25 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i26 = ($$pre$i$i$i25|0)==(0|0);
       $48 = $phitmp$i$i$i26;
       break;
      }
     }
    } while(0);
    $33 = HEAP32[$__e>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      label = 16;
     } else {
      $35 = (($33) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($33) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = (($40) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 26;
        break L3;
       } else {
        $$0$i$i1$i$i29 = $43;
       }
      } else {
       $46 = HEAP32[$36>>2]|0;
       $$0$i$i1$i$i29 = $46;
      }
      $47 = ($$0$i$i1$i$i29|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       $$pre$i3$i$i31 = HEAP32[$__e>>2]|0;
       $phitmp$i4$i$i32 = ($$pre$i3$i$i31|0)==(0|0);
       $tmp$i$i34 = $48 ^ $phitmp$i4$i$i32;
       if ($tmp$i$i34) {
        break;
       } else {
        $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
        label = 302;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($48) {
      $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
      label = 302;
      break;
     }
    }
    $49 = (($__pat) + ($__p$0251)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    L27: do {
     switch ($51|0) {
     case 1:  {
      $cond = ($__p$0251|0)==(3);
      if ($cond) {
       $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
       label = 302;
       break L3;
      }
      $76 = HEAP32[$__b>>2]|0;
      $77 = (($76) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($76) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78|0)==($80|0);
      if ($81) {
       $82 = HEAP32[$76>>2]|0;
       $83 = (($82) + 36|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_ii($84|0,($76|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        label = 26;
        break L3;
       } else {
        $$0$i$i38 = $85;
       }
      } else {
       $88 = HEAP32[$78>>2]|0;
       $$0$i$i38 = $88;
      }
      $89 = HEAP32[$__ct>>2]|0;
      $90 = (($89) + 12|0);
      $91 = HEAP32[$90>>2]|0;
      __THREW__ = 0;
      $92 = (invoke_iiii($91|0,($__ct|0),8192,($$0$i$i38|0))|0);
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       label = 26;
       break L3;
      }
      if (!($92)) {
       label = 42;
       break L3;
      }
      $95 = HEAP32[$__b>>2]|0;
      $96 = (($95) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (($95) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = (($101) + 40|0);
       $103 = HEAP32[$102>>2]|0;
       __THREW__ = 0;
       $104 = (invoke_ii($103|0,($95|0))|0);
       $105 = __THREW__; __THREW__ = 0;
       $106 = $105&1;
       if ($106) {
        label = 26;
        break L3;
       } else {
        $$0$i$i42 = $104;
       }
      } else {
       $107 = (($97) + 4|0);
       HEAP32[$96>>2] = $107;
       $108 = HEAP32[$97>>2]|0;
       $$0$i$i42 = $108;
      }
      __THREW__ = 0;
      invoke_vii(459,($__spaces|0),($$0$i$i42|0));
      $109 = __THREW__; __THREW__ = 0;
      $110 = $109&1;
      if ($110) {
       label = 26;
       break L3;
      } else {
       label = 43;
      }
      break;
     }
     case 0:  {
      label = 43;
      break;
     }
     case 4:  {
      $52 = HEAP32[$__ts>>2]|0;
      $584 = $859;$__ng$0 = 0;
      L41: while(1) {
       $515 = HEAP32[$__b>>2]|0;
       $516 = ($515|0)==(0|0);
       do {
        if ($516) {
         $545 = 1;
        } else {
         $517 = (($515) + 12|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = (($515) + 16|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ($518|0)==($520|0);
         if ($521) {
          $522 = HEAP32[$515>>2]|0;
          $523 = (($522) + 36|0);
          $524 = HEAP32[$523>>2]|0;
          __THREW__ = 0;
          $525 = (invoke_ii($524|0,($515|0))|0);
          $526 = __THREW__; __THREW__ = 0;
          $527 = $526&1;
          if ($527) {
           label = 25;
           break L3;
          } else {
           $$0$i$i$i$i150 = $525;
          }
         } else {
          $528 = HEAP32[$518>>2]|0;
          $$0$i$i$i$i150 = $528;
         }
         $529 = ($$0$i$i$i$i150|0)==(-1);
         if ($529) {
          HEAP32[$__b>>2] = 0;
          $545 = 1;
          break;
         } else {
          $$pre$i$i$i152 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i153 = ($$pre$i$i$i152|0)==(0|0);
          $545 = $phitmp$i$i$i153;
          break;
         }
        }
       } while(0);
       $530 = HEAP32[$__e>>2]|0;
       $531 = ($530|0)==(0|0);
       do {
        if ($531) {
         label = 214;
        } else {
         $532 = (($530) + 12|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = (($530) + 16|0);
         $535 = HEAP32[$534>>2]|0;
         $536 = ($533|0)==($535|0);
         if ($536) {
          $537 = HEAP32[$530>>2]|0;
          $538 = (($537) + 36|0);
          $539 = HEAP32[$538>>2]|0;
          __THREW__ = 0;
          $540 = (invoke_ii($539|0,($530|0))|0);
          $541 = __THREW__; __THREW__ = 0;
          $542 = $541&1;
          if ($542) {
           label = 25;
           break L3;
          } else {
           $$0$i$i1$i$i156 = $540;
          }
         } else {
          $543 = HEAP32[$533>>2]|0;
          $$0$i$i1$i$i156 = $543;
         }
         $544 = ($$0$i$i1$i$i156|0)==(-1);
         if ($544) {
          HEAP32[$__e>>2] = 0;
          label = 214;
          break;
         } else {
          $$pre$i3$i$i158 = HEAP32[$__e>>2]|0;
          $phitmp$i4$i$i159 = ($$pre$i3$i$i158|0)==(0|0);
          $tmp$i$i161 = $545 ^ $phitmp$i4$i$i159;
          if ($tmp$i$i161) {
           break;
          } else {
           $$lcssa286 = $584;$__ng$0$lcssa287 = $__ng$0;
           break L41;
          }
         }
        }
       } while(0);
       if ((label|0) == 214) {
        label = 0;
        if ($545) {
         $$lcssa286 = $584;$__ng$0$lcssa287 = $__ng$0;
         break;
        }
       }
       $546 = HEAP32[$__b>>2]|0;
       $547 = (($546) + 12|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = (($546) + 16|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = ($548|0)==($550|0);
       if ($551) {
        $552 = HEAP32[$546>>2]|0;
        $553 = (($552) + 36|0);
        $554 = HEAP32[$553>>2]|0;
        __THREW__ = 0;
        $555 = (invoke_ii($554|0,($546|0))|0);
        $556 = __THREW__; __THREW__ = 0;
        $557 = $556&1;
        if ($557) {
         label = 25;
         break L3;
        } else {
         $$0$i$i147 = $555;
        }
       } else {
        $558 = HEAP32[$548>>2]|0;
        $$0$i$i147 = $558;
       }
       $559 = HEAP32[$__ct>>2]|0;
       $560 = (($559) + 12|0);
       $561 = HEAP32[$560>>2]|0;
       __THREW__ = 0;
       $562 = (invoke_iiii($561|0,($__ct|0),2048,($$0$i$i147|0))|0);
       $563 = __THREW__; __THREW__ = 0;
       $564 = $563&1;
       if ($564) {
        label = 25;
        break L3;
       }
       if ($562) {
        $565 = HEAP32[$__wn>>2]|0;
        $566 = HEAP32[$0>>2]|0;
        $567 = ($565|0)==($566|0);
        if ($567) {
         __THREW__ = 0;
         invoke_viii(460,($__wb|0),($__wn|0),($0|0));
         $568 = __THREW__; __THREW__ = 0;
         $569 = $568&1;
         if ($569) {
          label = 25;
          break L3;
         }
         $$pre268 = HEAP32[$__wn>>2]|0;
         $571 = $$pre268;
        } else {
         $571 = $565;
        }
        $570 = (($571) + 4|0);
        HEAP32[$__wn>>2] = $570;
        HEAP32[$571>>2] = $$0$i$i147;
        $572 = (($__ng$0) + 1)|0;
        $861 = $584;$__ng$1 = $572;
       } else {
        $573 = HEAP8[$__grp>>0]|0;
        $574 = $573 & 1;
        $575 = ($574<<24>>24)==(0);
        if ($575) {
         $577 = $573&255;
         $578 = $577 >>> 1;
         $579 = $578;
        } else {
         $576 = HEAP32[$17>>2]|0;
         $579 = $576;
        }
        $580 = ($579|0)!=(0);
        $581 = ($__ng$0|0)!=(0);
        $or$cond7 = $580 & $581;
        $582 = ($$0$i$i147|0)==($52|0);
        $or$cond13 = $or$cond7 & $582;
        if (!($or$cond13)) {
         $$lcssa286 = $584;$__ng$0$lcssa287 = $__ng$0;
         break;
        }
        $583 = HEAP32[$__ge>>2]|0;
        $585 = ($584|0)==($583|0);
        if ($585) {
         __THREW__ = 0;
         invoke_viii(453,($__gb|0),($__gn|0),($__ge|0));
         $586 = __THREW__; __THREW__ = 0;
         $587 = $586&1;
         if ($587) {
          label = 25;
          break L3;
         }
         $$pre270 = HEAP32[$__gn>>2]|0;
         $589 = $$pre270;
        } else {
         $589 = $584;
        }
        $588 = (($589) + 4|0);
        HEAP32[$__gn>>2] = $588;
        HEAP32[$589>>2] = $__ng$0;
        $861 = $588;$__ng$1 = 0;
       }
       $590 = HEAP32[$__b>>2]|0;
       $591 = (($590) + 12|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = (($590) + 16|0);
       $594 = HEAP32[$593>>2]|0;
       $595 = ($592|0)==($594|0);
       if ($595) {
        $596 = HEAP32[$590>>2]|0;
        $597 = (($596) + 40|0);
        $598 = HEAP32[$597>>2]|0;
        __THREW__ = 0;
        (invoke_ii($598|0,($590|0))|0);
        $599 = __THREW__; __THREW__ = 0;
        $600 = $599&1;
        if ($600) {
         label = 25;
         break L3;
        }
       } else {
        $601 = (($592) + 4|0);
        HEAP32[$591>>2] = $601;
       }
       $584 = $861;$__ng$0 = $__ng$1;
      }
      $602 = HEAP32[$__gb>>2]|0;
      $603 = ($602|0)!=($$lcssa286|0);
      $604 = ($__ng$0$lcssa287|0)!=(0);
      $or$cond9 = $603 & $604;
      if ($or$cond9) {
       $605 = HEAP32[$__ge>>2]|0;
       $606 = ($$lcssa286|0)==($605|0);
       if ($606) {
        __THREW__ = 0;
        invoke_viii(453,($__gb|0),($__gn|0),($__ge|0));
        $607 = __THREW__; __THREW__ = 0;
        $608 = $607&1;
        if ($608) {
         label = 26;
         break L3;
        }
        $$pre266 = HEAP32[$__gn>>2]|0;
        $610 = $$pre266;
       } else {
        $610 = $$lcssa286;
       }
       $609 = (($610) + 4|0);
       HEAP32[$__gn>>2] = $609;
       HEAP32[$610>>2] = $__ng$0$lcssa287;
       $862 = $609;
      } else {
       $862 = $$lcssa286;
      }
      $611 = HEAP32[$__fd>>2]|0;
      $612 = ($611|0)>(0);
      if ($612) {
       $613 = HEAP32[$__b>>2]|0;
       $614 = ($613|0)==(0|0);
       do {
        if ($614) {
         $643 = 1;
        } else {
         $615 = (($613) + 12|0);
         $616 = HEAP32[$615>>2]|0;
         $617 = (($613) + 16|0);
         $618 = HEAP32[$617>>2]|0;
         $619 = ($616|0)==($618|0);
         if ($619) {
          $620 = HEAP32[$613>>2]|0;
          $621 = (($620) + 36|0);
          $622 = HEAP32[$621>>2]|0;
          __THREW__ = 0;
          $623 = (invoke_ii($622|0,($613|0))|0);
          $624 = __THREW__; __THREW__ = 0;
          $625 = $624&1;
          if ($625) {
           label = 26;
           break L3;
          } else {
           $$0$i$i$i$i118 = $623;
          }
         } else {
          $626 = HEAP32[$616>>2]|0;
          $$0$i$i$i$i118 = $626;
         }
         $627 = ($$0$i$i$i$i118|0)==(-1);
         if ($627) {
          HEAP32[$__b>>2] = 0;
          $643 = 1;
          break;
         } else {
          $$pre$i$i$i120 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i121 = ($$pre$i$i$i120|0)==(0|0);
          $643 = $phitmp$i$i$i121;
          break;
         }
        }
       } while(0);
       $628 = HEAP32[$__e>>2]|0;
       $629 = ($628|0)==(0|0);
       do {
        if ($629) {
         label = 256;
        } else {
         $630 = (($628) + 12|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (($628) + 16|0);
         $633 = HEAP32[$632>>2]|0;
         $634 = ($631|0)==($633|0);
         if ($634) {
          $635 = HEAP32[$628>>2]|0;
          $636 = (($635) + 36|0);
          $637 = HEAP32[$636>>2]|0;
          __THREW__ = 0;
          $638 = (invoke_ii($637|0,($628|0))|0);
          $639 = __THREW__; __THREW__ = 0;
          $640 = $639&1;
          if ($640) {
           label = 26;
           break L3;
          } else {
           $$0$i$i1$i$i124 = $638;
          }
         } else {
          $641 = HEAP32[$631>>2]|0;
          $$0$i$i1$i$i124 = $641;
         }
         $642 = ($$0$i$i1$i$i124|0)==(-1);
         if ($642) {
          HEAP32[$__e>>2] = 0;
          label = 256;
          break;
         } else {
          $$pre$i3$i$i126 = HEAP32[$__e>>2]|0;
          $phitmp$i4$i$i127 = ($$pre$i3$i$i126|0)==(0|0);
          $tmp$i$i129 = $643 ^ $phitmp$i4$i$i127;
          if ($tmp$i$i129) {
           break;
          } else {
           label = 262;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 256) {
        label = 0;
        if ($643) {
         label = 262;
         break L3;
        }
       }
       $644 = HEAP32[$__b>>2]|0;
       $645 = (($644) + 12|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = (($644) + 16|0);
       $648 = HEAP32[$647>>2]|0;
       $649 = ($646|0)==($648|0);
       if ($649) {
        $650 = HEAP32[$644>>2]|0;
        $651 = (($650) + 36|0);
        $652 = HEAP32[$651>>2]|0;
        __THREW__ = 0;
        $653 = (invoke_ii($652|0,($644|0))|0);
        $654 = __THREW__; __THREW__ = 0;
        $655 = $654&1;
        if ($655) {
         label = 26;
         break L3;
        } else {
         $$0$i$i111 = $653;
        }
       } else {
        $656 = HEAP32[$646>>2]|0;
        $$0$i$i111 = $656;
       }
       $657 = HEAP32[$__dp>>2]|0;
       $658 = ($$0$i$i111|0)==($657|0);
       if (!($658)) {
        label = 262;
        break L3;
       }
       $661 = HEAP32[$__b>>2]|0;
       $662 = (($661) + 12|0);
       $663 = HEAP32[$662>>2]|0;
       $664 = (($661) + 16|0);
       $665 = HEAP32[$664>>2]|0;
       $666 = ($663|0)==($665|0);
       if ($666) {
        $667 = HEAP32[$661>>2]|0;
        $668 = (($667) + 40|0);
        $669 = HEAP32[$668>>2]|0;
        __THREW__ = 0;
        (invoke_ii($669|0,($661|0))|0);
        $670 = __THREW__; __THREW__ = 0;
        $671 = $670&1;
        if ($671) {
         label = 26;
         break L3;
        }
       } else {
        $672 = (($663) + 4|0);
        HEAP32[$662>>2] = $672;
       }
       $746 = $611;
       while(1) {
        $673 = HEAP32[$__b>>2]|0;
        $674 = ($673|0)==(0|0);
        do {
         if ($674) {
          $703 = 1;
         } else {
          $675 = (($673) + 12|0);
          $676 = HEAP32[$675>>2]|0;
          $677 = (($673) + 16|0);
          $678 = HEAP32[$677>>2]|0;
          $679 = ($676|0)==($678|0);
          if ($679) {
           $680 = HEAP32[$673>>2]|0;
           $681 = (($680) + 36|0);
           $682 = HEAP32[$681>>2]|0;
           __THREW__ = 0;
           $683 = (invoke_ii($682|0,($673|0))|0);
           $684 = __THREW__; __THREW__ = 0;
           $685 = $684&1;
           if ($685) {
            label = 24;
            break L3;
           } else {
            $$0$i$i$i$i84 = $683;
           }
          } else {
           $686 = HEAP32[$676>>2]|0;
           $$0$i$i$i$i84 = $686;
          }
          $687 = ($$0$i$i$i$i84|0)==(-1);
          if ($687) {
           HEAP32[$__b>>2] = 0;
           $703 = 1;
           break;
          } else {
           $$pre$i$i$i86 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i87 = ($$pre$i$i$i86|0)==(0|0);
           $703 = $phitmp$i$i$i87;
           break;
          }
         }
        } while(0);
        $688 = HEAP32[$__e>>2]|0;
        $689 = ($688|0)==(0|0);
        do {
         if ($689) {
          label = 280;
         } else {
          $690 = (($688) + 12|0);
          $691 = HEAP32[$690>>2]|0;
          $692 = (($688) + 16|0);
          $693 = HEAP32[$692>>2]|0;
          $694 = ($691|0)==($693|0);
          if ($694) {
           $695 = HEAP32[$688>>2]|0;
           $696 = (($695) + 36|0);
           $697 = HEAP32[$696>>2]|0;
           __THREW__ = 0;
           $698 = (invoke_ii($697|0,($688|0))|0);
           $699 = __THREW__; __THREW__ = 0;
           $700 = $699&1;
           if ($700) {
            label = 24;
            break L3;
           } else {
            $$0$i$i1$i$i90 = $698;
           }
          } else {
           $701 = HEAP32[$691>>2]|0;
           $$0$i$i1$i$i90 = $701;
          }
          $702 = ($$0$i$i1$i$i90|0)==(-1);
          if ($702) {
           HEAP32[$__e>>2] = 0;
           label = 280;
           break;
          } else {
           $$pre$i3$i$i92 = HEAP32[$__e>>2]|0;
           $phitmp$i4$i$i93 = ($$pre$i3$i$i92|0)==(0|0);
           $tmp$i$i95 = $703 ^ $phitmp$i4$i$i93;
           if ($tmp$i$i95) {
            break;
           } else {
            label = 287;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 280) {
         label = 0;
         if ($703) {
          label = 287;
          break L3;
         }
        }
        $704 = HEAP32[$__b>>2]|0;
        $705 = (($704) + 12|0);
        $706 = HEAP32[$705>>2]|0;
        $707 = (($704) + 16|0);
        $708 = HEAP32[$707>>2]|0;
        $709 = ($706|0)==($708|0);
        if ($709) {
         $710 = HEAP32[$704>>2]|0;
         $711 = (($710) + 36|0);
         $712 = HEAP32[$711>>2]|0;
         __THREW__ = 0;
         $713 = (invoke_ii($712|0,($704|0))|0);
         $714 = __THREW__; __THREW__ = 0;
         $715 = $714&1;
         if ($715) {
          label = 24;
          break L3;
         } else {
          $$0$i$i78 = $713;
         }
        } else {
         $716 = HEAP32[$706>>2]|0;
         $$0$i$i78 = $716;
        }
        $717 = HEAP32[$__ct>>2]|0;
        $718 = (($717) + 12|0);
        $719 = HEAP32[$718>>2]|0;
        __THREW__ = 0;
        $720 = (invoke_iiii($719|0,($__ct|0),2048,($$0$i$i78|0))|0);
        $721 = __THREW__; __THREW__ = 0;
        $722 = $721&1;
        if ($722) {
         label = 24;
         break L3;
        }
        if (!($720)) {
         label = 287;
         break L3;
        }
        $725 = HEAP32[$__wn>>2]|0;
        $726 = HEAP32[$0>>2]|0;
        $727 = ($725|0)==($726|0);
        if ($727) {
         __THREW__ = 0;
         invoke_viii(460,($__wb|0),($__wn|0),($0|0));
         $728 = __THREW__; __THREW__ = 0;
         $729 = $728&1;
         if ($729) {
          label = 24;
          break L3;
         }
        }
        $730 = HEAP32[$__b>>2]|0;
        $731 = (($730) + 12|0);
        $732 = HEAP32[$731>>2]|0;
        $733 = (($730) + 16|0);
        $734 = HEAP32[$733>>2]|0;
        $735 = ($732|0)==($734|0);
        if ($735) {
         $736 = HEAP32[$730>>2]|0;
         $737 = (($736) + 36|0);
         $738 = HEAP32[$737>>2]|0;
         __THREW__ = 0;
         $739 = (invoke_ii($738|0,($730|0))|0);
         $740 = __THREW__; __THREW__ = 0;
         $741 = $740&1;
         if ($741) {
          label = 24;
          break L3;
         } else {
          $$0$i$i70 = $739;
         }
        } else {
         $742 = HEAP32[$732>>2]|0;
         $$0$i$i70 = $742;
        }
        $743 = HEAP32[$__wn>>2]|0;
        $744 = (($743) + 4|0);
        HEAP32[$__wn>>2] = $744;
        HEAP32[$743>>2] = $$0$i$i70;
        $745 = (($746) + -1)|0;
        HEAP32[$__fd>>2] = $745;
        $747 = HEAP32[$__b>>2]|0;
        $748 = (($747) + 12|0);
        $749 = HEAP32[$748>>2]|0;
        $750 = (($747) + 16|0);
        $751 = HEAP32[$750>>2]|0;
        $752 = ($749|0)==($751|0);
        if ($752) {
         $753 = HEAP32[$747>>2]|0;
         $754 = (($753) + 40|0);
         $755 = HEAP32[$754>>2]|0;
         __THREW__ = 0;
         (invoke_ii($755|0,($747|0))|0);
         $756 = __THREW__; __THREW__ = 0;
         $757 = $756&1;
         if ($757) {
          label = 24;
          break L3;
         }
        } else {
         $759 = (($749) + 4|0);
         HEAP32[$748>>2] = $759;
        }
        $758 = ($745|0)>(0);
        if ($758) {
         $746 = $745;
        } else {
         break;
        }
       }
      }
      $760 = HEAP32[$__wn>>2]|0;
      $761 = HEAP32[$__wb>>2]|0;
      $762 = ($760|0)==($761|0);
      if ($762) {
       label = 299;
       break L3;
      } else {
       $860 = $862;$__trailing_sign$1 = $__trailing_sign$0253;
      }
      break;
     }
     case 3:  {
      $180 = HEAP8[$__psn>>0]|0;
      $181 = $180 & 1;
      $182 = ($181<<24>>24)==(0);
      if ($182) {
       $184 = $180&255;
       $185 = $184 >>> 1;
       $194 = $185;
      } else {
       $183 = HEAP32[$8>>2]|0;
       $194 = $183;
      }
      $186 = HEAP8[$__nsn>>0]|0;
      $187 = $186 & 1;
      $188 = ($187<<24>>24)==(0);
      if ($188) {
       $190 = $186&255;
       $191 = $190 >>> 1;
       $193 = $191;
      } else {
       $189 = HEAP32[$6>>2]|0;
       $193 = $189;
      }
      $192 = (0 - ($193))|0;
      $195 = ($194|0)==($192|0);
      if ($195) {
       $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
      } else {
       if ($182) {
        $197 = $180&255;
        $198 = $197 >>> 1;
        $199 = $198;
       } else {
        $196 = HEAP32[$8>>2]|0;
        $199 = $196;
       }
       $200 = ($199|0)==(0);
       if (!($200)) {
        if ($188) {
         $202 = $186&255;
         $203 = $202 >>> 1;
         $204 = $203;
        } else {
         $201 = HEAP32[$6>>2]|0;
         $204 = $201;
        }
        $205 = ($204|0)==(0);
        if (!($205)) {
         $283 = HEAP32[$__b>>2]|0;
         $284 = (($283) + 12|0);
         $285 = HEAP32[$284>>2]|0;
         $286 = (($283) + 16|0);
         $287 = HEAP32[$286>>2]|0;
         $288 = ($285|0)==($287|0);
         if ($288) {
          $289 = HEAP32[$283>>2]|0;
          $290 = (($289) + 36|0);
          $291 = HEAP32[$290>>2]|0;
          __THREW__ = 0;
          $292 = (invoke_ii($291|0,($283|0))|0);
          $293 = __THREW__; __THREW__ = 0;
          $294 = $293&1;
          if ($294) {
           label = 26;
           break L3;
          }
          $$pre262 = HEAP8[$__psn>>0]|0;
          $$0$i$i114 = $292;$297 = $$pre262;
         } else {
          $295 = HEAP32[$285>>2]|0;
          $$0$i$i114 = $295;$297 = $180;
         }
         $296 = $297 & 1;
         $298 = ($296<<24>>24)==(0);
         $299 = HEAP32[$9>>2]|0;
         $$279 = $298 ? $8 : $299;
         $300 = HEAP32[$$279>>2]|0;
         $301 = ($$0$i$i114|0)==($300|0);
         $302 = HEAP32[$__b>>2]|0;
         $303 = (($302) + 12|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = (($302) + 16|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = ($304|0)==($306|0);
         if ($301) {
          if ($307) {
           $308 = HEAP32[$302>>2]|0;
           $309 = (($308) + 40|0);
           $310 = HEAP32[$309>>2]|0;
           __THREW__ = 0;
           (invoke_ii($310|0,($302|0))|0);
           $311 = __THREW__; __THREW__ = 0;
           $312 = $311&1;
           if ($312) {
            label = 26;
            break L3;
           }
          } else {
           $313 = (($304) + 4|0);
           HEAP32[$303>>2] = $313;
          }
          $314 = HEAP8[$__psn>>0]|0;
          $315 = $314 & 1;
          $316 = ($315<<24>>24)==(0);
          if ($316) {
           $318 = $314&255;
           $319 = $318 >>> 1;
           $320 = $319;
          } else {
           $317 = HEAP32[$8>>2]|0;
           $320 = $317;
          }
          $321 = ($320>>>0)>(1);
          $__psn$__trailing_sign$010 = $321 ? $__psn : $__trailing_sign$0253;
          $860 = $859;$__trailing_sign$1 = $__psn$__trailing_sign$010;
          break L27;
         }
         if ($307) {
          $322 = HEAP32[$302>>2]|0;
          $323 = (($322) + 36|0);
          $324 = HEAP32[$323>>2]|0;
          __THREW__ = 0;
          $325 = (invoke_ii($324|0,($302|0))|0);
          $326 = __THREW__; __THREW__ = 0;
          $327 = $326&1;
          if ($327) {
           label = 26;
           break L3;
          } else {
           $$0$i$i136 = $325;
          }
         } else {
          $328 = HEAP32[$304>>2]|0;
          $$0$i$i136 = $328;
         }
         $329 = HEAP8[$__nsn>>0]|0;
         $330 = $329 & 1;
         $331 = ($330<<24>>24)==(0);
         $332 = HEAP32[$7>>2]|0;
         $$280 = $331 ? $6 : $332;
         $333 = HEAP32[$$280>>2]|0;
         $334 = ($$0$i$i136|0)==($333|0);
         if (!($334)) {
          label = 136;
          break L3;
         }
         $335 = HEAP32[$__b>>2]|0;
         $336 = (($335) + 12|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = (($335) + 16|0);
         $339 = HEAP32[$338>>2]|0;
         $340 = ($337|0)==($339|0);
         if ($340) {
          $341 = HEAP32[$335>>2]|0;
          $342 = (($341) + 40|0);
          $343 = HEAP32[$342>>2]|0;
          __THREW__ = 0;
          (invoke_ii($343|0,($335|0))|0);
          $344 = __THREW__; __THREW__ = 0;
          $345 = $344&1;
          if ($345) {
           label = 26;
           break L3;
          }
         } else {
          $346 = (($337) + 4|0);
          HEAP32[$336>>2] = $346;
         }
         HEAP8[$__neg>>0] = 1;
         $347 = HEAP8[$__nsn>>0]|0;
         $348 = $347 & 1;
         $349 = ($348<<24>>24)==(0);
         if ($349) {
          $351 = $347&255;
          $352 = $351 >>> 1;
          $353 = $352;
         } else {
          $350 = HEAP32[$6>>2]|0;
          $353 = $350;
         }
         $354 = ($353>>>0)>(1);
         $__nsn$__trailing_sign$011 = $354 ? $__nsn : $__trailing_sign$0253;
         $860 = $859;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
         break L27;
        }
       }
       if ($182) {
        $207 = $180&255;
        $208 = $207 >>> 1;
        $209 = $208;
       } else {
        $206 = HEAP32[$8>>2]|0;
        $209 = $206;
       }
       $210 = ($209|0)==(0);
       $211 = HEAP32[$__b>>2]|0;
       $212 = (($211) + 12|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = (($211) + 16|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = ($213|0)==($215|0);
       if ($210) {
        if ($216) {
         $250 = HEAP32[$211>>2]|0;
         $251 = (($250) + 36|0);
         $252 = HEAP32[$251>>2]|0;
         __THREW__ = 0;
         $253 = (invoke_ii($252|0,($211|0))|0);
         $254 = __THREW__; __THREW__ = 0;
         $255 = $254&1;
         if ($255) {
          label = 26;
          break L3;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i102 = $253;$258 = $$pre;
        } else {
         $256 = HEAP32[$213>>2]|0;
         $$0$i$i102 = $256;$258 = $186;
        }
        $257 = $258 & 1;
        $259 = ($257<<24>>24)==(0);
        $260 = HEAP32[$7>>2]|0;
        $$278 = $259 ? $6 : $260;
        $261 = HEAP32[$$278>>2]|0;
        $262 = ($$0$i$i102|0)==($261|0);
        if (!($262)) {
         $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
         break L27;
        }
        $263 = HEAP32[$__b>>2]|0;
        $264 = (($263) + 12|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = (($263) + 16|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = ($265|0)==($267|0);
        if ($268) {
         $269 = HEAP32[$263>>2]|0;
         $270 = (($269) + 40|0);
         $271 = HEAP32[$270>>2]|0;
         __THREW__ = 0;
         (invoke_ii($271|0,($263|0))|0);
         $272 = __THREW__; __THREW__ = 0;
         $273 = $272&1;
         if ($273) {
          label = 26;
          break L3;
         }
        } else {
         $274 = (($265) + 4|0);
         HEAP32[$264>>2] = $274;
        }
        HEAP8[$__neg>>0] = 1;
        $275 = HEAP8[$__nsn>>0]|0;
        $276 = $275 & 1;
        $277 = ($276<<24>>24)==(0);
        if ($277) {
         $279 = $275&255;
         $280 = $279 >>> 1;
         $281 = $280;
        } else {
         $278 = HEAP32[$6>>2]|0;
         $281 = $278;
        }
        $282 = ($281>>>0)>(1);
        $__nsn$__trailing_sign$0 = $282 ? $__nsn : $__trailing_sign$0253;
        $860 = $859;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L27;
       }
       if ($216) {
        $217 = HEAP32[$211>>2]|0;
        $218 = (($217) + 36|0);
        $219 = HEAP32[$218>>2]|0;
        __THREW__ = 0;
        $220 = (invoke_ii($219|0,($211|0))|0);
        $221 = __THREW__; __THREW__ = 0;
        $222 = $221&1;
        if ($222) {
         label = 26;
         break L3;
        }
        $$pre261 = HEAP8[$__psn>>0]|0;
        $$0$i$i81 = $220;$225 = $$pre261;
       } else {
        $223 = HEAP32[$213>>2]|0;
        $$0$i$i81 = $223;$225 = $180;
       }
       $224 = $225 & 1;
       $226 = ($224<<24>>24)==(0);
       $227 = HEAP32[$9>>2]|0;
       $$ = $226 ? $8 : $227;
       $228 = HEAP32[$$>>2]|0;
       $229 = ($$0$i$i81|0)==($228|0);
       if (!($229)) {
        HEAP8[$__neg>>0] = 1;
        $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
        break L27;
       }
       $230 = HEAP32[$__b>>2]|0;
       $231 = (($230) + 12|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = (($230) + 16|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = ($232|0)==($234|0);
       if ($235) {
        $236 = HEAP32[$230>>2]|0;
        $237 = (($236) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        __THREW__ = 0;
        (invoke_ii($238|0,($230|0))|0);
        $239 = __THREW__; __THREW__ = 0;
        $240 = $239&1;
        if ($240) {
         label = 26;
         break L3;
        }
       } else {
        $241 = (($232) + 4|0);
        HEAP32[$231>>2] = $241;
       }
       $242 = HEAP8[$__psn>>0]|0;
       $243 = $242 & 1;
       $244 = ($243<<24>>24)==(0);
       if ($244) {
        $246 = $242&255;
        $247 = $246 >>> 1;
        $248 = $247;
       } else {
        $245 = HEAP32[$8>>2]|0;
        $248 = $245;
       }
       $249 = ($248>>>0)>(1);
       $__psn$__trailing_sign$0 = $249 ? $__psn : $__trailing_sign$0253;
       $860 = $859;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $357 = ($__trailing_sign$0253|0)!=(0|0);
      $358 = ($__p$0251>>>0)<(2);
      $or$cond = $357 | $358;
      if (!($or$cond)) {
       $359 = ($__p$0251|0)==(2);
       if ($359) {
        $360 = HEAP8[$16>>0]|0;
        $361 = ($360<<24>>24)!=(0);
        $362 = $361;
       } else {
        $362 = 0;
       }
       $brmerge = $11 | $362;
       if (!($brmerge)) {
        $860 = $859;$__trailing_sign$1 = 0;
        break L27;
       }
      }
      $363 = HEAP8[$__sym>>0]|0;
      $364 = $363 & 1;
      $365 = ($364<<24>>24)==(0);
      $366 = HEAP32[$13>>2]|0;
      $$281 = $365 ? $12 : $366;
      $367 = ($__p$0251|0)==(0);
      L270: do {
       if ($367) {
        $$ph = $363;$$ph285 = $$281;
       } else {
        $368 = (($__p$0251) + -1)|0;
        $369 = (($__pat) + ($368)|0);
        $370 = HEAP8[$369>>0]|0;
        $switch = ($370&255)<(2);
        if ($switch) {
         $372 = $363;$381 = $$281;
         while(1) {
          $371 = $372 & 1;
          $373 = ($371<<24>>24)==(0);
          if ($373) {
           $376 = $372&255;
           $377 = $376 >>> 1;
           $379 = $12;$380 = $377;
          } else {
           $374 = HEAP32[$13>>2]|0;
           $375 = HEAP32[$12>>2]|0;
           $379 = $374;$380 = $375;
          }
          $378 = (($379) + ($380<<2)|0);
          $382 = ($381|0)==($378|0);
          if ($382) {
           $$lcssa = $372;$$lcssa290 = $381;
           label = 152;
           break;
          }
          $383 = HEAP32[$381>>2]|0;
          $384 = HEAP32[$__ct>>2]|0;
          $385 = (($384) + 12|0);
          $386 = HEAP32[$385>>2]|0;
          __THREW__ = 0;
          $387 = (invoke_iiii($386|0,($__ct|0),8192,($383|0))|0);
          $388 = __THREW__; __THREW__ = 0;
          $389 = $388&1;
          if ($389) {
           label = 23;
           break L3;
          }
          if (!($387)) {
           $$lcssa292 = $381;
           label = 150;
           break;
          }
          $390 = (($381) + 4|0);
          $$pre264 = HEAP8[$__sym>>0]|0;
          $372 = $$pre264;$381 = $390;
         }
         if ((label|0) == 150) {
          label = 0;
          $$pre265 = HEAP8[$__sym>>0]|0;
          $392 = $$pre265;$395 = $$lcssa292;
         }
         else if ((label|0) == 152) {
          label = 0;
          $392 = $$lcssa;$395 = $$lcssa290;
         }
         $391 = $392 & 1;
         $393 = ($391<<24>>24)==(0);
         $394 = HEAP32[$13>>2]|0;
         $$282 = $393 ? $12 : $394;
         $396 = $395;
         $397 = $$282;
         $398 = (($396) - ($397))|0;
         $399 = $398 >> 2;
         $400 = HEAP8[$__spaces>>0]|0;
         $401 = $400 & 1;
         $402 = ($401<<24>>24)==(0);
         if ($402) {
          $404 = $400&255;
          $405 = $404 >>> 1;
          $407 = $405;
         } else {
          $403 = HEAP32[$14>>2]|0;
          $407 = $403;
         }
         $406 = ($399>>>0)>($407>>>0);
         do {
          if (!($406)) {
           if ($402) {
            $411 = $400&255;
            $412 = $411 >>> 1;
            $$sum271 = (($412) - ($399))|0;
            $413 = (($14) + ($$sum271<<2)|0);
            $414 = $400&255;
            $415 = $414 >>> 1;
            $417 = $14;$418 = $415;$420 = $413;
           } else {
            $408 = HEAP32[$15>>2]|0;
            $409 = HEAP32[$14>>2]|0;
            $$sum = (($409) - ($399))|0;
            $410 = (($408) + ($$sum<<2)|0);
            $417 = $408;$418 = $409;$420 = $410;
           }
           $416 = (($417) + ($418<<2)|0);
           $419 = HEAP32[$13>>2]|0;
           $$283 = $393 ? $12 : $419;
           $421 = ($420|0)==($416|0);
           if ($421) {
            $$ph = $392;$$ph285 = $395;
            break L270;
           }
           $423 = $420;$425 = $$283;
           while(1) {
            $422 = HEAP32[$423>>2]|0;
            $424 = HEAP32[$425>>2]|0;
            $426 = ($422|0)==($424|0);
            if (!($426)) {
             label = 164;
             break;
            }
            $427 = (($423) + 4|0);
            $428 = (($425) + 4|0);
            $429 = ($427|0)==($416|0);
            if ($429) {
             label = 166;
             break;
            } else {
             $423 = $427;$425 = $428;
            }
           }
           if ((label|0) == 164) {
            label = 0;
            break;
           }
           else if ((label|0) == 166) {
            label = 0;
            $$ph = $392;$$ph285 = $395;
            break L270;
           }
          }
         } while(0);
         $430 = HEAP32[$13>>2]|0;
         $$284 = $393 ? $12 : $430;
         $$ph = $392;$$ph285 = $$284;
        } else {
         $$ph = $363;$$ph285 = $$281;
        }
       }
      } while(0);
      $432 = $$ph;$441 = $$ph285;
      L305: while(1) {
       $431 = $432 & 1;
       $433 = ($431<<24>>24)==(0);
       if ($433) {
        $436 = $432&255;
        $437 = $436 >>> 1;
        $439 = $12;$440 = $437;
       } else {
        $434 = HEAP32[$13>>2]|0;
        $435 = HEAP32[$12>>2]|0;
        $439 = $434;$440 = $435;
       }
       $438 = (($439) + ($440<<2)|0);
       $442 = ($441|0)==($438|0);
       if ($442) {
        $$lcssa293 = $441;
        break;
       }
       $443 = HEAP32[$__b>>2]|0;
       $444 = ($443|0)==(0|0);
       do {
        if ($444) {
         $473 = 1;
        } else {
         $445 = (($443) + 12|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = (($443) + 16|0);
         $448 = HEAP32[$447>>2]|0;
         $449 = ($446|0)==($448|0);
         if ($449) {
          $450 = HEAP32[$443>>2]|0;
          $451 = (($450) + 36|0);
          $452 = HEAP32[$451>>2]|0;
          __THREW__ = 0;
          $453 = (invoke_ii($452|0,($443|0))|0);
          $454 = __THREW__; __THREW__ = 0;
          $455 = $454&1;
          if ($455) {
           label = 22;
           break L3;
          } else {
           $$0$i$i$i$i175 = $453;
          }
         } else {
          $456 = HEAP32[$446>>2]|0;
          $$0$i$i$i$i175 = $456;
         }
         $457 = ($$0$i$i$i$i175|0)==(-1);
         if ($457) {
          HEAP32[$__b>>2] = 0;
          $473 = 1;
          break;
         } else {
          $$pre$i$i$i177 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i178 = ($$pre$i$i$i177|0)==(0|0);
          $473 = $phitmp$i$i$i178;
          break;
         }
        }
       } while(0);
       $458 = HEAP32[$__e>>2]|0;
       $459 = ($458|0)==(0|0);
       do {
        if ($459) {
         label = 185;
        } else {
         $460 = (($458) + 12|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = (($458) + 16|0);
         $463 = HEAP32[$462>>2]|0;
         $464 = ($461|0)==($463|0);
         if ($464) {
          $465 = HEAP32[$458>>2]|0;
          $466 = (($465) + 36|0);
          $467 = HEAP32[$466>>2]|0;
          __THREW__ = 0;
          $468 = (invoke_ii($467|0,($458|0))|0);
          $469 = __THREW__; __THREW__ = 0;
          $470 = $469&1;
          if ($470) {
           label = 22;
           break L3;
          } else {
           $$0$i$i1$i$i181 = $468;
          }
         } else {
          $471 = HEAP32[$461>>2]|0;
          $$0$i$i1$i$i181 = $471;
         }
         $472 = ($$0$i$i1$i$i181|0)==(-1);
         if ($472) {
          HEAP32[$__e>>2] = 0;
          label = 185;
          break;
         } else {
          $$pre$i3$i$i183 = HEAP32[$__e>>2]|0;
          $phitmp$i4$i$i184 = ($$pre$i3$i$i183|0)==(0|0);
          $tmp$i$i186 = $473 ^ $phitmp$i4$i$i184;
          if ($tmp$i$i186) {
           break;
          } else {
           $$lcssa293 = $441;
           break L305;
          }
         }
        }
       } while(0);
       if ((label|0) == 185) {
        label = 0;
        if ($473) {
         $$lcssa293 = $441;
         break;
        }
       }
       $474 = HEAP32[$__b>>2]|0;
       $475 = (($474) + 12|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = (($474) + 16|0);
       $478 = HEAP32[$477>>2]|0;
       $479 = ($476|0)==($478|0);
       if ($479) {
        $480 = HEAP32[$474>>2]|0;
        $481 = (($480) + 36|0);
        $482 = HEAP32[$481>>2]|0;
        __THREW__ = 0;
        $483 = (invoke_ii($482|0,($474|0))|0);
        $484 = __THREW__; __THREW__ = 0;
        $485 = $484&1;
        if ($485) {
         label = 22;
         break L3;
        } else {
         $$0$i$i171 = $483;
        }
       } else {
        $486 = HEAP32[$476>>2]|0;
        $$0$i$i171 = $486;
       }
       $487 = HEAP32[$441>>2]|0;
       $488 = ($$0$i$i171|0)==($487|0);
       if (!($488)) {
        $$lcssa293 = $441;
        break;
       }
       $489 = HEAP32[$__b>>2]|0;
       $490 = (($489) + 12|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($489) + 16|0);
       $493 = HEAP32[$492>>2]|0;
       $494 = ($491|0)==($493|0);
       if ($494) {
        $495 = HEAP32[$489>>2]|0;
        $496 = (($495) + 40|0);
        $497 = HEAP32[$496>>2]|0;
        __THREW__ = 0;
        (invoke_ii($497|0,($489|0))|0);
        $498 = __THREW__; __THREW__ = 0;
        $499 = $498&1;
        if ($499) {
         label = 22;
         break L3;
        }
       } else {
        $500 = (($491) + 4|0);
        HEAP32[$490>>2] = $500;
       }
       $501 = (($441) + 4|0);
       $$pre263 = HEAP8[$__sym>>0]|0;
       $432 = $$pre263;$441 = $501;
      }
      if ($11) {
       $502 = HEAP8[$__sym>>0]|0;
       $503 = $502 & 1;
       $504 = ($503<<24>>24)==(0);
       if ($504) {
        $507 = $502&255;
        $508 = $507 >>> 1;
        $510 = $12;$511 = $508;
       } else {
        $505 = HEAP32[$13>>2]|0;
        $506 = HEAP32[$12>>2]|0;
        $510 = $505;$511 = $506;
       }
       $509 = (($510) + ($511<<2)|0);
       $512 = ($$lcssa293|0)==($509|0);
       if ($512) {
        $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
       } else {
        label = 200;
        break L3;
       }
      } else {
       $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
      }
      break;
     }
     default: {
      $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
     }
     }
    } while(0);
    if ((label|0) == 43) {
     label = 0;
     $113 = ($__p$0251|0)==(3);
     if ($113) {
      $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
      label = 302;
      break;
     }
     L352: while(1) {
      $114 = HEAP32[$__b>>2]|0;
      $115 = ($114|0)==(0|0);
      do {
       if ($115) {
        $144 = 1;
       } else {
        $116 = (($114) + 12|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = (($114) + 16|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = ($117|0)==($119|0);
        if ($120) {
         $121 = HEAP32[$114>>2]|0;
         $122 = (($121) + 36|0);
         $123 = HEAP32[$122>>2]|0;
         __THREW__ = 0;
         $124 = (invoke_ii($123|0,($114|0))|0);
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          label = 21;
          break L3;
         } else {
          $$0$i$i$i$i44 = $124;
         }
        } else {
         $127 = HEAP32[$117>>2]|0;
         $$0$i$i$i$i44 = $127;
        }
        $128 = ($$0$i$i$i$i44|0)==(-1);
        if ($128) {
         HEAP32[$__b>>2] = 0;
         $144 = 1;
         break;
        } else {
         $$pre$i$i$i46 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i47 = ($$pre$i$i$i46|0)==(0|0);
         $144 = $phitmp$i$i$i47;
         break;
        }
       }
      } while(0);
      $129 = HEAP32[$__e>>2]|0;
      $130 = ($129|0)==(0|0);
      do {
       if ($130) {
        label = 58;
       } else {
        $131 = (($129) + 12|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = (($129) + 16|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = ($132|0)==($134|0);
        if ($135) {
         $136 = HEAP32[$129>>2]|0;
         $137 = (($136) + 36|0);
         $138 = HEAP32[$137>>2]|0;
         __THREW__ = 0;
         $139 = (invoke_ii($138|0,($129|0))|0);
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if ($141) {
          label = 21;
          break L3;
         } else {
          $$0$i$i1$i$i50 = $139;
         }
        } else {
         $142 = HEAP32[$132>>2]|0;
         $$0$i$i1$i$i50 = $142;
        }
        $143 = ($$0$i$i1$i$i50|0)==(-1);
        if ($143) {
         HEAP32[$__e>>2] = 0;
         label = 58;
         break;
        } else {
         $$pre$i3$i$i52 = HEAP32[$__e>>2]|0;
         $phitmp$i4$i$i53 = ($$pre$i3$i$i52|0)==(0|0);
         $tmp$i$i55 = $144 ^ $phitmp$i4$i$i53;
         if ($tmp$i$i55) {
          break;
         } else {
          break L352;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       label = 0;
       if ($144) {
        break;
       }
      }
      $145 = HEAP32[$__b>>2]|0;
      $146 = (($145) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($145) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$145>>2]|0;
       $152 = (($151) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($145|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 21;
        break L3;
       } else {
        $$0$i$i59 = $154;
       }
      } else {
       $157 = HEAP32[$147>>2]|0;
       $$0$i$i59 = $157;
      }
      $158 = HEAP32[$__ct>>2]|0;
      $159 = (($158) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_iiii($160|0,($__ct|0),8192,($$0$i$i59|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 21;
       break L3;
      }
      if (!($161)) {
       break;
      }
      $164 = HEAP32[$__b>>2]|0;
      $165 = (($164) + 12|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($164) + 16|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($166|0)==($168|0);
      if ($169) {
       $170 = HEAP32[$164>>2]|0;
       $171 = (($170) + 40|0);
       $172 = HEAP32[$171>>2]|0;
       __THREW__ = 0;
       $173 = (invoke_ii($172|0,($164|0))|0);
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        label = 21;
        break L3;
       } else {
        $$0$i$i65 = $173;
       }
      } else {
       $176 = (($166) + 4|0);
       HEAP32[$165>>2] = $176;
       $177 = HEAP32[$166>>2]|0;
       $$0$i$i65 = $177;
      }
      __THREW__ = 0;
      invoke_vii(459,($__spaces|0),($$0$i$i65|0));
      $178 = __THREW__; __THREW__ = 0;
      $179 = $178&1;
      if ($179) {
       label = 21;
       break L3;
      }
     }
     $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
    }
    $765 = (($__p$0251) + 1)|0;
    $766 = ($765>>>0)<(4);
    if ($766) {
     $859 = $860;$__p$0251 = $765;$__trailing_sign$0253 = $__trailing_sign$1;
    } else {
     $847 = $860;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 302;
     break;
    }
   }
   L388:    switch (label|0) {
    case 21: {
     $55 = ___cxa_find_matching_catch()|0;
     $56 = tempRet0;
     $lpad$phi$index = $55;$lpad$phi$index8 = $56;
     break L1;
     break;
    }
    case 22: {
     $57 = ___cxa_find_matching_catch()|0;
     $58 = tempRet0;
     $lpad$phi$index = $57;$lpad$phi$index8 = $58;
     break L1;
     break;
    }
    case 23: {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi$index = $59;$lpad$phi$index8 = $60;
     break L1;
     break;
    }
    case 24: {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi$index = $61;$lpad$phi$index8 = $62;
     break L1;
     break;
    }
    case 25: {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi$index = $63;$lpad$phi$index8 = $64;
     break L1;
     break;
    }
    case 26: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index8 = $66;
     break L1;
     break;
    }
    case 42: {
     $111 = HEAP32[$__err>>2]|0;
     $112 = $111 | 4;
     HEAP32[$__err>>2] = $112;
     $$0 = 0;
     break;
    }
    case 136: {
     $355 = HEAP32[$__err>>2]|0;
     $356 = $355 | 4;
     HEAP32[$__err>>2] = $356;
     $$0 = 0;
     break;
    }
    case 200: {
     $513 = HEAP32[$__err>>2]|0;
     $514 = $513 | 4;
     HEAP32[$__err>>2] = $514;
     $$0 = 0;
     break;
    }
    case 262: {
     $659 = HEAP32[$__err>>2]|0;
     $660 = $659 | 4;
     HEAP32[$__err>>2] = $660;
     $$0 = 0;
     break;
    }
    case 287: {
     $723 = HEAP32[$__err>>2]|0;
     $724 = $723 | 4;
     HEAP32[$__err>>2] = $724;
     $$0 = 0;
     break;
    }
    case 299: {
     $763 = HEAP32[$__err>>2]|0;
     $764 = $763 | 4;
     HEAP32[$__err>>2] = $764;
     $$0 = 0;
     break;
    }
    case 302: {
     $767 = ($__trailing_sign$0$lcssa|0)==(0|0);
     do {
      if (!($767)) {
       $768 = (($__trailing_sign$0$lcssa) + 4|0);
       $769 = (($__trailing_sign$0$lcssa) + 8|0);
       $__i$0 = 1;
       L404: while(1) {
        $770 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $771 = $770 & 1;
        $772 = ($771<<24>>24)==(0);
        if ($772) {
         $774 = $770&255;
         $775 = $774 >>> 1;
         $777 = $775;
        } else {
         $773 = HEAP32[$768>>2]|0;
         $777 = $773;
        }
        $776 = ($__i$0>>>0)<($777>>>0);
        if (!($776)) {
         label = 334;
         break;
        }
        $778 = HEAP32[$__b>>2]|0;
        $779 = ($778|0)==(0|0);
        do {
         if ($779) {
          $808 = 1;
         } else {
          $780 = (($778) + 12|0);
          $781 = HEAP32[$780>>2]|0;
          $782 = (($778) + 16|0);
          $783 = HEAP32[$782>>2]|0;
          $784 = ($781|0)==($783|0);
          if ($784) {
           $785 = HEAP32[$778>>2]|0;
           $786 = (($785) + 36|0);
           $787 = HEAP32[$786>>2]|0;
           __THREW__ = 0;
           $788 = (invoke_ii($787|0,($778|0))|0);
           $789 = __THREW__; __THREW__ = 0;
           $790 = $789&1;
           if ($790) {
            label = 20;
            break L404;
           } else {
            $$0$i$i$i$i = $788;
           }
          } else {
           $791 = HEAP32[$781>>2]|0;
           $$0$i$i$i$i = $791;
          }
          $792 = ($$0$i$i$i$i|0)==(-1);
          if ($792) {
           HEAP32[$__b>>2] = 0;
           $808 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $808 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $793 = HEAP32[$__e>>2]|0;
        $794 = ($793|0)==(0|0);
        do {
         if ($794) {
          label = 321;
         } else {
          $795 = (($793) + 12|0);
          $796 = HEAP32[$795>>2]|0;
          $797 = (($793) + 16|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ($796|0)==($798|0);
          if ($799) {
           $800 = HEAP32[$793>>2]|0;
           $801 = (($800) + 36|0);
           $802 = HEAP32[$801>>2]|0;
           __THREW__ = 0;
           $803 = (invoke_ii($802|0,($793|0))|0);
           $804 = __THREW__; __THREW__ = 0;
           $805 = $804&1;
           if ($805) {
            label = 20;
            break L404;
           } else {
            $$0$i$i1$i$i = $803;
           }
          } else {
           $806 = HEAP32[$796>>2]|0;
           $$0$i$i1$i$i = $806;
          }
          $807 = ($$0$i$i1$i$i|0)==(-1);
          if ($807) {
           HEAP32[$__e>>2] = 0;
           label = 321;
           break;
          } else {
           $$pre$i3$i$i = HEAP32[$__e>>2]|0;
           $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
           $tmp$i$i = $808 ^ $phitmp$i4$i$i;
           if ($tmp$i$i) {
            break;
           } else {
            label = 329;
            break L404;
           }
          }
         }
        } while(0);
        if ((label|0) == 321) {
         label = 0;
         if ($808) {
          label = 329;
          break;
         }
        }
        $809 = HEAP32[$__b>>2]|0;
        $810 = (($809) + 12|0);
        $811 = HEAP32[$810>>2]|0;
        $812 = (($809) + 16|0);
        $813 = HEAP32[$812>>2]|0;
        $814 = ($811|0)==($813|0);
        if ($814) {
         $815 = HEAP32[$809>>2]|0;
         $816 = (($815) + 36|0);
         $817 = HEAP32[$816>>2]|0;
         __THREW__ = 0;
         $818 = (invoke_ii($817|0,($809|0))|0);
         $819 = __THREW__; __THREW__ = 0;
         $820 = $819&1;
         if ($820) {
          label = 20;
          break;
         } else {
          $$0$i$i = $818;
         }
        } else {
         $821 = HEAP32[$811>>2]|0;
         $$0$i$i = $821;
        }
        $822 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $823 = $822 & 1;
        $824 = ($823<<24>>24)==(0);
        if ($824) {
         $827 = $768;
        } else {
         $825 = HEAP32[$769>>2]|0;
         $827 = $825;
        }
        $826 = (($827) + ($__i$0<<2)|0);
        $828 = HEAP32[$826>>2]|0;
        $829 = ($$0$i$i|0)==($828|0);
        if (!($829)) {
         label = 329;
         break;
        }
        $832 = (($__i$0) + 1)|0;
        $833 = HEAP32[$__b>>2]|0;
        $834 = (($833) + 12|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = (($833) + 16|0);
        $837 = HEAP32[$836>>2]|0;
        $838 = ($835|0)==($837|0);
        if ($838) {
         $839 = HEAP32[$833>>2]|0;
         $840 = (($839) + 40|0);
         $841 = HEAP32[$840>>2]|0;
         __THREW__ = 0;
         (invoke_ii($841|0,($833|0))|0);
         $842 = __THREW__; __THREW__ = 0;
         $843 = $842&1;
         if ($843) {
          label = 20;
          break;
         }
        } else {
         $844 = (($835) + 4|0);
         HEAP32[$834>>2] = $844;
        }
        $__i$0 = $832;
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch()|0;
        $54 = tempRet0;
        $lpad$phi$index = $53;$lpad$phi$index8 = $54;
        break L1;
       }
       else if ((label|0) == 329) {
        $830 = HEAP32[$__err>>2]|0;
        $831 = $830 | 4;
        HEAP32[$__err>>2] = $831;
        $$0 = 0;
        break L388;
       }
       else if ((label|0) == 334) {
        break;
       }
      }
     } while(0);
     $845 = HEAP32[$__gb>>2]|0;
     $846 = ($845|0)==($847|0);
     if ($846) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$845,$847,$__et);
      $848 = HEAP32[$__et>>2]|0;
      $849 = ($848|0)==(0);
      if ($849) {
       $$0 = 1;
      } else {
       $850 = HEAP32[$__err>>2]|0;
       $851 = $850 | 4;
       HEAP32[$__err>>2] = $851;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $852 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $853 = ($852|0)==(0|0);
   if (!($853)) {
    $854 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_vi($854|0,($852|0));
    $855 = __THREW__; __THREW__ = 0;
    $856 = $855&1;
    if ($856) {
     $857 = ___cxa_find_matching_catch(0|0)|0;
     $858 = tempRet0;
     ___clang_call_terminate($857);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $69 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $70 = ($69|0)==(0|0);
 if (!($70)) {
  $71 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($71|0,($69|0));
  $72 = __THREW__; __THREW__ = 0;
  $73 = $72&1;
  if ($73) {
   $74 = ___cxa_find_matching_catch(0|0)|0;
   $75 = tempRet0;
   ___clang_call_terminate($74);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0112 = 0, $$0113 = 0, $$014 = 0, $$015 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$0$lcssa$ph = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 447;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(428,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0112 = $31;$$014 = $30;$93 = $__wbuf;
  label = 40;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(426,($__loc|0),(18032|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(457,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP32[$18>>2] = 0;
      }
      $19 = (($__v) + 4|0);
      HEAP32[$19>>2] = 0;
      $20 = HEAP8[$__neg>>0]|0;
      $21 = ($20<<24>>24)==(0);
      if (!($21)) {
       $22 = HEAP32[$5>>2]|0;
       $23 = (($22) + 44|0);
       $24 = HEAP32[$23>>2]|0;
       __THREW__ = 0;
       $25 = (invoke_iii($24|0,($5|0),45)|0);
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       if ($27) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(459,($__v|0),($25|0));
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        break;
       }
      }
      $32 = HEAP32[$5>>2]|0;
      $33 = (($32) + 44|0);
      $34 = HEAP32[$33>>2]|0;
      __THREW__ = 0;
      $35 = (invoke_iii($34|0,($5|0),48)|0);
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break;
      }
      $38 = HEAP32[$__wb>>2]|0;
      $39 = HEAP32[$__wn>>2]|0;
      $40 = (($39) + -4|0);
      $41 = ($38>>>0)<($40>>>0);
      if ($41) {
       $__w$05 = $38;
       while(1) {
        $44 = HEAP32[$__w$05>>2]|0;
        $45 = ($44|0)==($35|0);
        $42 = (($__w$05) + 4|0);
        if (!($45)) {
         $__w$0$lcssa$ph = $__w$05;
         break;
        }
        $43 = ($42>>>0)<($40>>>0);
        if ($43) {
         $__w$05 = $42;
        } else {
         $__w$0$lcssa$ph = $42;
         break;
        }
       }
       $__w$0$lcssa = $__w$0$lcssa$ph;
      } else {
       $__w$0$lcssa = $38;
      }
      __THREW__ = 0;
      (invoke_iiii(461,($__v|0),($__w$0$lcssa|0),($39|0))|0);
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if ($47) {
       break;
      }
     }
     $48 = HEAP32[$__b>>2]|0;
     $49 = ($48|0)==(0|0);
     do {
      if ($49) {
       $98 = 1;
      } else {
       $50 = (($48) + 12|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (($48) + 16|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($51|0)==($53|0);
       if ($54) {
        $55 = HEAP32[$48>>2]|0;
        $56 = (($55) + 36|0);
        $57 = HEAP32[$56>>2]|0;
        __THREW__ = 0;
        $58 = (invoke_ii($57|0,($48|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break L3;
        } else {
         $$0$i$i$i$i = $58;
        }
       } else {
        $61 = HEAP32[$51>>2]|0;
        $$0$i$i$i$i = $61;
       }
       $62 = ($$0$i$i$i$i|0)==(-1);
       if ($62) {
        HEAP32[$__b>>2] = 0;
        $98 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $98 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $63 = ($8|0)==(0|0);
     do {
      if ($63) {
       label = 32;
      } else {
       $64 = (($8) + 12|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($8) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($65|0)==($67|0);
       if ($68) {
        $69 = HEAP32[$8>>2]|0;
        $70 = (($69) + 36|0);
        $71 = HEAP32[$70>>2]|0;
        __THREW__ = 0;
        $72 = (invoke_ii($71|0,($8|0))|0);
        $73 = __THREW__; __THREW__ = 0;
        $74 = $73&1;
        if ($74) {
         break L3;
        } else {
         $$0$i$i1$i$i = $72;
        }
       } else {
        $75 = HEAP32[$65>>2]|0;
        $$0$i$i1$i$i = $75;
       }
       $76 = ($$0$i$i1$i$i|0)==(-1);
       if ($76) {
        HEAP32[$__e>>2] = 0;
        label = 32;
        break;
       } else {
        if ($98) {
         break;
        } else {
         label = 34;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 32) {
      if ($98) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $77 = HEAP32[$__err>>2]|0;
      $78 = $77 | 2;
      HEAP32[$__err>>2] = $78;
     }
     $79 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $79;
     $80 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
     $81 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $82 = ($81|0)==(0|0);
     if (!($82)) {
      $83 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($83|0,($81|0));
      $84 = __THREW__; __THREW__ = 0;
      $85 = $84&1;
      if ($85) {
       $86 = ___cxa_find_matching_catch(0|0)|0;
       $87 = tempRet0;
       ___clang_call_terminate($86);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $88 = ___cxa_find_matching_catch()|0;
  $89 = tempRet0;
  $90 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($90)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $91 = ($$pre|0)==(0|0);
  if ($91) {
   $$0113 = $89;$$015 = $88;
  } else {
   $$0112 = $89;$$014 = $88;$93 = $$pre;
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $92 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($92|0,($93|0));
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  } else {
   $$0113 = $$0112;$$015 = $$014;
  }
 }
 ___resumeException($$015|0);
 // unreachable;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17608)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = (($__nsn) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$22>>2] = 0;
   }
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__nsn|0),0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
   $28 = HEAP32[$10>>2]|0;
   $29 = (($28) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_vii[$30 & 1023]($2,$10);
   $31 = HEAP8[$__psn>>0]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $34 = (($__psn) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$35>>2] = 0;
   }
   $36 = (($__psn) + 4|0);
   HEAP32[$36>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__psn|0),0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $39 = ___cxa_find_matching_catch(0|0)|0;
    $40 = tempRet0;
    ___clang_call_terminate($39);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
   $41 = HEAP32[$10>>2]|0;
   $42 = (($41) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 1023]($10)|0);
   HEAP32[$__dp>>2] = $44;
   $45 = HEAP32[$10>>2]|0;
   $46 = (($45) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
   HEAP32[$__ts>>2] = $48;
   $49 = HEAP32[$10>>2]|0;
   $50 = (($49) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   FUNCTION_TABLE_vii[$51 & 1023]($3,$10);
   $52 = HEAP8[$__grp>>0]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   if ($54) {
    $58 = (($__grp) + 1|0);
    HEAP8[$58>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $55 = (($__grp) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP8[$56>>0] = 0;
    $57 = (($__grp) + 4|0);
    HEAP32[$57>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if ($60) {
    $61 = ___cxa_find_matching_catch(0|0)|0;
    $62 = tempRet0;
    ___clang_call_terminate($61);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
   $63 = HEAP32[$10>>2]|0;
   $64 = (($63) + 24|0);
   $65 = HEAP32[$64>>2]|0;
   FUNCTION_TABLE_vii[$65 & 1023]($4,$10);
   $66 = HEAP8[$__sym>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $69 = (($__sym) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$70>>2] = 0;
   }
   $71 = (($__sym) + 4|0);
   HEAP32[$71>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__sym|0),0);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $74 = ___cxa_find_matching_catch(0|0)|0;
    $75 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
    $76 = HEAP32[$10>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($10)|0);
    $storemerge = $79;
    break;
   }
  } else {
   $80 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17544)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + 44|0);
   $83 = HEAP32[$82>>2]|0;
   FUNCTION_TABLE_vii[$83 & 1023]($5,$80);
   $84 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$84&255;HEAP8[$__pat+1>>0]=($84>>8)&255;HEAP8[$__pat+2>>0]=($84>>16)&255;HEAP8[$__pat+3>>0]=$84>>24;
   $85 = HEAP32[$80>>2]|0;
   $86 = (($85) + 32|0);
   $87 = HEAP32[$86>>2]|0;
   FUNCTION_TABLE_vii[$87 & 1023]($6,$80);
   $88 = HEAP8[$__nsn>>0]|0;
   $89 = $88 & 1;
   $90 = ($89<<24>>24)==(0);
   if ($90) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $91 = (($__nsn) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$92>>2] = 0;
   }
   $93 = (($__nsn) + 4|0);
   HEAP32[$93>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__nsn|0),0);
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    $96 = ___cxa_find_matching_catch(0|0)|0;
    $97 = tempRet0;
    ___clang_call_terminate($96);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
   $98 = HEAP32[$80>>2]|0;
   $99 = (($98) + 28|0);
   $100 = HEAP32[$99>>2]|0;
   FUNCTION_TABLE_vii[$100 & 1023]($7,$80);
   $101 = HEAP8[$__psn>>0]|0;
   $102 = $101 & 1;
   $103 = ($102<<24>>24)==(0);
   if ($103) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $104 = (($__psn) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    HEAP32[$105>>2] = 0;
   }
   $106 = (($__psn) + 4|0);
   HEAP32[$106>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__psn|0),0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $109 = ___cxa_find_matching_catch(0|0)|0;
    $110 = tempRet0;
    ___clang_call_terminate($109);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
   $111 = HEAP32[$80>>2]|0;
   $112 = (($111) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (FUNCTION_TABLE_ii[$113 & 1023]($80)|0);
   HEAP32[$__dp>>2] = $114;
   $115 = HEAP32[$80>>2]|0;
   $116 = (($115) + 16|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 1023]($80)|0);
   HEAP32[$__ts>>2] = $118;
   $119 = HEAP32[$80>>2]|0;
   $120 = (($119) + 20|0);
   $121 = HEAP32[$120>>2]|0;
   FUNCTION_TABLE_vii[$121 & 1023]($8,$80);
   $122 = HEAP8[$__grp>>0]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $128 = (($__grp) + 1|0);
    HEAP8[$128>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $125 = (($__grp) + 8|0);
    $126 = HEAP32[$125>>2]|0;
    HEAP8[$126>>0] = 0;
    $127 = (($__grp) + 4|0);
    HEAP32[$127>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $129 = __THREW__; __THREW__ = 0;
   $130 = $129&1;
   if ($130) {
    $131 = ___cxa_find_matching_catch(0|0)|0;
    $132 = tempRet0;
    ___clang_call_terminate($131);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
   $133 = HEAP32[$80>>2]|0;
   $134 = (($133) + 24|0);
   $135 = HEAP32[$134>>2]|0;
   FUNCTION_TABLE_vii[$135 & 1023]($9,$80);
   $136 = HEAP8[$__sym>>0]|0;
   $137 = $136 & 1;
   $138 = ($137<<24>>24)==(0);
   if ($138) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $139 = (($__sym) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    HEAP32[$140>>2] = 0;
   }
   $141 = (($__sym) + 4|0);
   HEAP32[$141>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__sym|0),0);
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    $144 = ___cxa_find_matching_catch(0|0)|0;
    $145 = tempRet0;
    ___clang_call_terminate($144);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
    $146 = HEAP32[$80>>2]|0;
    $147 = (($146) + 36|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (FUNCTION_TABLE_ii[$148 & 1023]($80)|0);
    $storemerge = $149;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0;
 var $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,17792,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(430)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $112 = 0;$113 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(435,($__bb|0),($3|0),(17792|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $112 = 0;$113 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(436);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $112 = 0;$113 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $114 = $$pre;
     } else {
      $114 = $9;
     }
     $15 = (_malloc($6)|0);
     $16 = ($15|0)==(0|0);
     if ($16) {
      __THREW__ = 0;
      invoke_v(436);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       $112 = $114;$113 = 0;
       label = 7;
      } else {
       $107 = 0;$108 = $114;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $107 = $15;$108 = $114;$__db$0 = $15;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $107 = 0;$108 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(428,($__loc|0),($__iob|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $112 = $108;$113 = $107;
   label = 7;
  } else {
   __THREW__ = 0;
   $21 = (invoke_iii(426,($__loc|0),(18040|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 35;
   } else {
    $24 = HEAP32[$__bb>>2]|0;
    $25 = (($24) + ($__n$0)|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($28|0,($21|0),($24|0),($25|0),($__db$0|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 35;
    } else {
     $31 = ($__n$0|0)==(0);
     if ($31) {
      $35 = 0;
     } else {
      $32 = HEAP32[$__bb>>2]|0;
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(45);
      $35 = $34;
     }
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(463,($__intl|0),($35|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     do {
      if ($37) {
       $89 = ___cxa_find_matching_catch()|0;
       $90 = tempRet0;
       $$0 = $89;$$01 = $90;
      } else {
       $38 = HEAP32[$__fd>>2]|0;
       $39 = ($__n$0|0)>($38|0);
       if ($39) {
        $40 = (($__n$0) - ($38))|0;
        $41 = $40 << 1;
        $42 = HEAP8[$__sn>>0]|0;
        $43 = $42 & 1;
        $44 = ($43<<24>>24)==(0);
        if ($44) {
         $47 = $42&255;
         $48 = $47 >>> 1;
         $58 = $48;
        } else {
         $45 = (($__sn) + 4|0);
         $46 = HEAP32[$45>>2]|0;
         $58 = $46;
        }
        $49 = HEAP8[$__sym>>0]|0;
        $50 = $49 & 1;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         $54 = $49&255;
         $55 = $54 >>> 1;
         $60 = $55;
        } else {
         $52 = (($__sym) + 4|0);
         $53 = HEAP32[$52>>2]|0;
         $60 = $53;
        }
        $56 = $41 | 1;
        $57 = (($58) + ($56))|0;
        $59 = (($57) + ($60))|0;
        $$pn = $59;
       } else {
        $61 = HEAP8[$__sn>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        if ($63) {
         $66 = $61&255;
         $67 = $66 >>> 1;
         $76 = $67;
        } else {
         $64 = (($__sn) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $76 = $65;
        }
        $68 = HEAP8[$__sym>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $78 = $74;
        } else {
         $71 = (($__sym) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $78 = $72;
        }
        $75 = (($76) + 2)|0;
        $77 = (($75) + ($78))|0;
        $$pn = $77;
       }
       $79 = (($$pn) + ($38))|0;
       $80 = ($79>>>0)>(100);
       if ($80) {
        $81 = (_malloc($79)|0);
        $82 = ($81|0)==(0|0);
        if ($82) {
         __THREW__ = 0;
         invoke_v(436);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if ($84) {
          $85 = ___cxa_find_matching_catch()|0;
          $86 = tempRet0;
          $$0 = $85;$$01 = $86;
          break;
         } else {
          $93 = 0;$__mb$0 = 0;
         }
        } else {
         $93 = $81;$__mb$0 = $81;
        }
       } else {
        $93 = 0;$__mb$0 = $__mbuf;
       }
       $94 = (($__iob) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($__db$0) + ($__n$0)|0);
       $97 = HEAP8[$__dp>>0]|0;
       $98 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(464,($__mb$0|0),($__mi|0),($__me|0),($95|0),($__db$0|0),($96|0),($21|0),($35|0),($__pat|0),($97|0),($98|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if (!($100)) {
        $101 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $101;
        $102 = HEAP32[$__mi>>2]|0;
        $103 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(438,($agg$result|0),($$byval_copy|0),($__mb$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if (!($105)) {
         _free($93);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $106 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
         _free($107);
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       _free($93);
       $$0 = $91;$$01 = $92;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $$1 = $87;$$12 = $88;
   }
   $109 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
   $$2 = $$1;$$23 = $$12;$110 = $107;$111 = $108;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$110 = $113;$111 = $112;
 }
 _free($110);
 _free($111);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17480)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = (($13) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = (($17) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $26 = (($__sn) + 1|0);
      HEAP8[$26>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = (($__sn) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP8[$24>>0] = 0;
      $25 = (($__sn) + 4|0);
      HEAP32[$25>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(456,($__sn|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $29 = ___cxa_find_matching_catch(0|0)|0;
      $30 = tempRet0;
      ___clang_call_terminate($29);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
      break;
     }
    } else {
     $31 = (($13) + 40|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
     $33 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
     $34 = HEAP32[$12>>2]|0;
     $35 = (($34) + 28|0);
     $36 = HEAP32[$35>>2]|0;
     FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
     $37 = HEAP8[$__sn>>0]|0;
     $38 = $37 & 1;
     $39 = ($38<<24>>24)==(0);
     if ($39) {
      $43 = (($__sn) + 1|0);
      HEAP8[$43>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $40 = (($__sn) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP8[$41>>0] = 0;
      $42 = (($__sn) + 4|0);
      HEAP32[$42>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(456,($__sn|0),0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch(0|0)|0;
      $47 = tempRet0;
      ___clang_call_terminate($46);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
      break;
     }
    }
   } while(0);
   $48 = HEAP32[$12>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
   HEAP8[$__dp>>0] = $51;
   $52 = HEAP32[$12>>2]|0;
   $53 = (($52) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
   HEAP8[$__ts>>0] = $55;
   $56 = HEAP32[$12>>2]|0;
   $57 = (($56) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
   $59 = HEAP8[$__grp>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $65 = (($__grp) + 1|0);
    HEAP8[$65>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $62 = (($__grp) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP8[$63>>0] = 0;
    $64 = (($__grp) + 4|0);
    HEAP32[$64>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if ($67) {
    $68 = ___cxa_find_matching_catch(0|0)|0;
    $69 = tempRet0;
    ___clang_call_terminate($68);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   $70 = HEAP32[$12>>2]|0;
   $71 = (($70) + 24|0);
   $72 = HEAP32[$71>>2]|0;
   FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
   $73 = HEAP8[$__sym>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   if ($75) {
    $79 = (($__sym) + 1|0);
    HEAP8[$79>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $76 = (($__sym) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    HEAP8[$77>>0] = 0;
    $78 = (($__sym) + 4|0);
    HEAP32[$78>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__sym|0),0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    $82 = ___cxa_find_matching_catch(0|0)|0;
    $83 = tempRet0;
    ___clang_call_terminate($82);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
    $84 = HEAP32[$12>>2]|0;
    $85 = (($84) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
    $storemerge = $87;
    break;
   }
  } else {
   $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17416)|0);
   $89 = HEAP32[$88>>2]|0;
   do {
    if ($__neg) {
     $90 = (($89) + 44|0);
     $91 = HEAP32[$90>>2]|0;
     FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
     $92 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
     $93 = HEAP32[$88>>2]|0;
     $94 = (($93) + 32|0);
     $95 = HEAP32[$94>>2]|0;
     FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
     $96 = HEAP8[$__sn>>0]|0;
     $97 = $96 & 1;
     $98 = ($97<<24>>24)==(0);
     if ($98) {
      $102 = (($__sn) + 1|0);
      HEAP8[$102>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $99 = (($__sn) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      HEAP8[$100>>0] = 0;
      $101 = (($__sn) + 4|0);
      HEAP32[$101>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(456,($__sn|0),0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      $105 = ___cxa_find_matching_catch(0|0)|0;
      $106 = tempRet0;
      ___clang_call_terminate($105);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
      break;
     }
    } else {
     $107 = (($89) + 40|0);
     $108 = HEAP32[$107>>2]|0;
     FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
     $109 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
     $110 = HEAP32[$88>>2]|0;
     $111 = (($110) + 28|0);
     $112 = HEAP32[$111>>2]|0;
     FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
     $113 = HEAP8[$__sn>>0]|0;
     $114 = $113 & 1;
     $115 = ($114<<24>>24)==(0);
     if ($115) {
      $119 = (($__sn) + 1|0);
      HEAP8[$119>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $116 = (($__sn) + 8|0);
      $117 = HEAP32[$116>>2]|0;
      HEAP8[$117>>0] = 0;
      $118 = (($__sn) + 4|0);
      HEAP32[$118>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(456,($__sn|0),0);
     $120 = __THREW__; __THREW__ = 0;
     $121 = $120&1;
     if ($121) {
      $122 = ___cxa_find_matching_catch(0|0)|0;
      $123 = tempRet0;
      ___clang_call_terminate($122);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
      break;
     }
    }
   } while(0);
   $124 = HEAP32[$88>>2]|0;
   $125 = (($124) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
   HEAP8[$__dp>>0] = $127;
   $128 = HEAP32[$88>>2]|0;
   $129 = (($128) + 16|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
   HEAP8[$__ts>>0] = $131;
   $132 = HEAP32[$88>>2]|0;
   $133 = (($132) + 20|0);
   $134 = HEAP32[$133>>2]|0;
   FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
   $135 = HEAP8[$__grp>>0]|0;
   $136 = $135 & 1;
   $137 = ($136<<24>>24)==(0);
   if ($137) {
    $141 = (($__grp) + 1|0);
    HEAP8[$141>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $138 = (($__grp) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    HEAP8[$139>>0] = 0;
    $140 = (($__grp) + 4|0);
    HEAP32[$140>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    $144 = ___cxa_find_matching_catch(0|0)|0;
    $145 = tempRet0;
    ___clang_call_terminate($144);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
   $146 = HEAP32[$88>>2]|0;
   $147 = (($146) + 24|0);
   $148 = HEAP32[$147>>2]|0;
   FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
   $149 = HEAP8[$__sym>>0]|0;
   $150 = $149 & 1;
   $151 = ($150<<24>>24)==(0);
   if ($151) {
    $155 = (($__sym) + 1|0);
    HEAP8[$155>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $152 = (($__sym) + 8|0);
    $153 = HEAP32[$152>>2]|0;
    HEAP8[$153>>0] = 0;
    $154 = (($__sym) + 4|0);
    HEAP32[$154>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__sym|0),0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    $158 = ___cxa_find_matching_catch(0|0)|0;
    $159 = tempRet0;
    ___clang_call_terminate($158);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
    $160 = HEAP32[$88>>2]|0;
    $161 = (($160) + 36|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
    $storemerge = $163;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i16 = 0, $$01$i$i = 0, $$01$i$i14 = 0, $$012$i$i = 0, $$056 = 0, $$2 = 0, $$80 = 0, $$81 = 0, $$82 = 0, $$lcssa = 0, $$lcssa34 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$pn = 0, $$pre = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $148$phi = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $171$phi = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa$ph = 0, $__d$0$lcssa66 = 0;
 var $__d$036 = 0, $__d$1$lcssa78 = 0, $__d$1$lcssa79 = 0, $__d$141 = 0, $__d$2 = 0, $__d$350 = 0, $__f$0$lcssa76 = 0, $__f$0$lcssa77 = 0, $__f$042 = 0, $__f$147 = 0, $__gl$053 = 0, $__gl$053$ph = 0, $__gl$1 = 0, $__ig$052 = 0, $__ig$1 = 0, $__ng$051 = 0, $__ng$1 = 0, $__p$055 = 0, $exitcond = 0, $isascii1$i = 0;
 var $or$cond = 0, $or$cond3 = 0, $scevgep69 = 0, $scevgep6970 = 0, $scevgep71 = 0, $umax = 0, $umax68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$056 = $__db;$__p$055 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$055)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$056) + 1|0);
   $$$0 = $__neg ? $60 : $$056;
   $61 = ($$$0>>>0)<($__de>>>0);
   if ($61) {
    $62 = HEAP32[$12>>2]|0;
    $__d$036 = $$$0;
    while(1) {
     $65 = HEAP8[$__d$036>>0]|0;
     $isascii1$i = ($65<<24>>24)>(-1);
     if (!($isascii1$i)) {
      $__d$0$lcssa$ph = $__d$036;
      break;
     }
     $66 = $65 << 24 >> 24;
     $67 = (($62) + ($66<<1)|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68 & 2048;
     $70 = ($69<<16>>16)==(0);
     $63 = (($__d$036) + 1|0);
     if ($70) {
      $__d$0$lcssa$ph = $__d$036;
      break;
     }
     $64 = ($63>>>0)<($__de>>>0);
     if ($64) {
      $__d$036 = $63;
     } else {
      $__d$0$lcssa$ph = $63;
      break;
     }
    }
    $__d$0$lcssa = $__d$0$lcssa$ph;
   } else {
    $__d$0$lcssa = $$$0;
   }
   $__d$0$lcssa66 = $__d$0$lcssa;
   if ($8) {
    $71 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($71) {
     $72 = $$$0;
     $73 = (($72) - ($__d$0$lcssa66))|0;
     $74 = ($73>>>0)<($13>>>0);
     $umax = $74 ? $13 : $73;
     $umax68 = $umax;
     $scevgep69 = (($umax68) + ($__fd)|0);
     $scevgep6970 = $scevgep69;
     $78 = $59;$__d$141 = $__d$0$lcssa;$__f$042 = $__fd;
     while(1) {
      $75 = (($__d$141) + -1|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($78) + 1|0);
      HEAP32[$__me>>2] = $77;
      HEAP8[$78>>0] = $76;
      $79 = (($__f$042) + -1)|0;
      $80 = ($75>>>0)>($$$0>>>0);
      $81 = ($79|0)>(0);
      $or$cond = $80 & $81;
      if (!($or$cond)) {
       $$lcssa83 = $81;
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $78 = $$pre;$__d$141 = $75;$__f$042 = $79;
     }
     $scevgep71 = (($__d$0$lcssa) + ($umax)|0);
     if ($$lcssa83) {
      $__d$1$lcssa79 = $scevgep71;$__f$0$lcssa77 = $scevgep6970;
      label = 34;
     } else {
      $89 = 0;$__d$1$lcssa78 = $scevgep71;$__f$0$lcssa76 = $scevgep6970;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 1023]($__ct,48)|0);
     $89 = $85;$__d$1$lcssa78 = $__d$1$lcssa79;$__f$0$lcssa76 = $__f$0$lcssa77;
    }
    $86 = ($__f$0$lcssa76|0)>(0);
    $87 = HEAP32[$__me>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$__me>>2] = $88;
    if ($86) {
     $90 = $87;$__f$147 = $__f$0$lcssa76;
     while(1) {
      HEAP8[$90>>0] = $89;
      $91 = (($__f$147) + -1)|0;
      $92 = ($91|0)>(0);
      $93 = HEAP32[$__me>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$__me>>2] = $94;
      if ($92) {
       $90 = $93;$__f$147 = $91;
      } else {
       $$lcssa84 = $93;
       break;
      }
     }
     $$lcssa34 = $$lcssa84;
    } else {
     $$lcssa34 = $87;
    }
    HEAP8[$$lcssa34>>0] = $__dp;
    $__d$2 = $__d$1$lcssa78;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $95 = ($__d$2|0)==($$$0|0);
   if ($95) {
    $96 = HEAP32[$__ct>>2]|0;
    $97 = (($96) + 28|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (FUNCTION_TABLE_iii[$98 & 1023]($__ct,48)|0);
    $100 = HEAP32[$__me>>2]|0;
    $101 = (($100) + 1|0);
    HEAP32[$__me>>2] = $101;
    HEAP8[$100>>0] = $99;
   } else {
    $102 = HEAP8[$__grp>>0]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if ($104) {
     $106 = $102&255;
     $107 = $106 >>> 1;
     $108 = $107;
    } else {
     $105 = HEAP32[$11>>2]|0;
     $108 = $105;
    }
    $109 = ($108|0)==(0);
    if ($109) {
     $__gl$053$ph = -1;
    } else {
     $110 = HEAP32[$10>>2]|0;
     $$80 = $104 ? $9 : $110;
     $111 = HEAP8[$$80>>0]|0;
     $112 = $111 << 24 >> 24;
     $__gl$053$ph = $112;
    }
    $__d$350 = $__d$2;$__gl$053 = $__gl$053$ph;$__ig$052 = 0;$__ng$051 = 0;
    while(1) {
     $113 = ($__ng$051|0)==($__gl$053|0);
     if ($113) {
      $114 = HEAP32[$__me>>2]|0;
      $115 = (($114) + 1|0);
      HEAP32[$__me>>2] = $115;
      HEAP8[$114>>0] = $__ts;
      $116 = (($__ig$052) + 1)|0;
      $117 = HEAP8[$__grp>>0]|0;
      $118 = $117 & 1;
      $119 = ($118<<24>>24)==(0);
      if ($119) {
       $121 = $117&255;
       $122 = $121 >>> 1;
       $124 = $122;
      } else {
       $120 = HEAP32[$11>>2]|0;
       $124 = $120;
      }
      $123 = ($116>>>0)<($124>>>0);
      if ($123) {
       $125 = HEAP32[$10>>2]|0;
       $$81 = $119 ? $9 : $125;
       $126 = (($$81) + ($116)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = ($127<<24>>24)==(127);
       if ($128) {
        $__gl$1 = -1;$__ig$1 = $116;$__ng$1 = 0;
       } else {
        $129 = HEAP32[$10>>2]|0;
        $$82 = $119 ? $9 : $129;
        $130 = (($$82) + ($116)|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = $131 << 24 >> 24;
        $__gl$1 = $132;$__ig$1 = $116;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$053;$__ig$1 = $116;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$053;$__ig$1 = $__ig$052;$__ng$1 = $__ng$051;
     }
     $133 = (($__d$350) + -1|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = HEAP32[$__me>>2]|0;
     $136 = (($135) + 1|0);
     HEAP32[$__me>>2] = $136;
     HEAP8[$135>>0] = $134;
     $137 = (($__ng$1) + 1)|0;
     $138 = ($133|0)==($$$0|0);
     if ($138) {
      break;
     } else {
      $__d$350 = $133;$__gl$053 = $__gl$1;$__ig$052 = $__ig$1;$__ng$051 = $137;
     }
    }
   }
   $139 = HEAP32[$__me>>2]|0;
   $140 = ($59|0)==($139|0);
   if ($140) {
    $$2 = $$$0;
   } else {
    $141 = (($139) + -1|0);
    $142 = ($141>>>0)>($59>>>0);
    if ($142) {
     $$012$i$i = $59;$145 = $141;$148 = $139;
     while(1) {
      $143 = HEAP8[$$012$i$i>>0]|0;
      $144 = HEAP8[$145>>0]|0;
      HEAP8[$$012$i$i>>0] = $144;
      HEAP8[$145>>0] = $143;
      $146 = (($$012$i$i) + 1|0);
      $147 = (($148) + -2|0);
      $149 = ($146>>>0)<($147>>>0);
      if ($149) {
       $148$phi = $145;$$012$i$i = $146;$145 = $147;$148 = $148$phi;
      } else {
       break;
      }
     }
     $$2 = $$$0;
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 2:  {
   $37 = HEAP8[$__sym>>0]|0;
   $38 = $37 & 1;
   $39 = ($38<<24>>24)==(0);
   if ($39) {
    $41 = $37&255;
    $42 = $41 >>> 1;
    $43 = $42;
   } else {
    $40 = HEAP32[$7>>2]|0;
    $43 = $40;
   }
   $44 = ($43|0)==(0);
   $or$cond3 = $44 | $4;
   if ($or$cond3) {
    $$2 = $$056;
   } else {
    if ($39) {
     $47 = $37&255;
     $48 = $47 >>> 1;
     $50 = $5;$51 = $48;
    } else {
     $45 = HEAP32[$6>>2]|0;
     $46 = HEAP32[$7>>2]|0;
     $50 = $45;$51 = $46;
    }
    $49 = (($50) + ($51)|0);
    $52 = HEAP32[$__me>>2]|0;
    $53 = ($50|0)==($49|0);
    if ($53) {
     $$0$lcssa$i$i16 = $52;
    } else {
     $$01$i$i14 = $52;$55 = $50;
     while(1) {
      $54 = HEAP8[$55>>0]|0;
      HEAP8[$$01$i$i14>>0] = $54;
      $56 = (($55) + 1|0);
      $57 = (($$01$i$i14) + 1|0);
      $58 = ($56|0)==($49|0);
      if ($58) {
       $$lcssa85 = $57;
       break;
      } else {
       $$01$i$i14 = $57;$55 = $56;
      }
     }
     $$0$lcssa$i$i16 = $$lcssa85;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i16;
    $$2 = $$056;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$056;
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $31 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $31 = $28;
   }
   $32 = ($31|0)==(0);
   if ($32) {
    $$2 = $$056;
   } else {
    $33 = HEAP32[$1>>2]|0;
    $$ = $27 ? $0 : $33;
    $34 = HEAP8[$$>>0]|0;
    $35 = HEAP32[$__me>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__me>>2] = $36;
    HEAP8[$35>>0] = $34;
    $$2 = $$056;
   }
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$056;
   break;
  }
  default: {
   $$2 = $$056;
  }
  }
  $150 = (($__p$055) + 1)|0;
  $exitcond = ($150|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$056 = $$2;$__p$055 = $150;
  }
 }
 $151 = HEAP8[$__sn>>0]|0;
 $152 = $151 & 1;
 $153 = ($152<<24>>24)==(0);
 if ($153) {
  $155 = $151&255;
  $156 = $155 >>> 1;
  $157 = $156;
 } else {
  $154 = HEAP32[$2>>2]|0;
  $157 = $154;
 }
 $158 = ($157>>>0)>(1);
 if ($158) {
  if ($153) {
   $161 = $151&255;
   $162 = $161 >>> 1;
   $$pn = $0;$165 = $162;
  } else {
   $159 = HEAP32[$1>>2]|0;
   $160 = HEAP32[$2>>2]|0;
   $$pn = $159;$165 = $160;
  }
  $163 = (($$pn) + 1|0);
  $164 = (($$pn) + ($165)|0);
  $166 = HEAP32[$__me>>2]|0;
  $167 = ($163|0)==($164|0);
  if ($167) {
   $$0$lcssa$i$i = $166;
  } else {
   $$01$i$i = $166;$169 = $163;$171 = $$pn;
   while(1) {
    $168 = HEAP8[$169>>0]|0;
    HEAP8[$$01$i$i>>0] = $168;
    $170 = (($171) + 2|0);
    $172 = (($$01$i$i) + 1|0);
    $173 = ($170|0)==($164|0);
    if ($173) {
     $$lcssa = $172;
     break;
    } else {
     $171$phi = $169;$$01$i$i = $172;$169 = $170;$171 = $171$phi;
    }
   }
   $$0$lcssa$i$i = $$lcssa;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $174 = $__flags & 176;
 if ((($174|0) == 32)) {
  $175 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $175;
 } else if (!((($174|0) == 16))) {
  HEAP32[$__mi>>2] = $__mb;
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0;
 var $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(426,($__loc|0),(18040|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 38;
  } else {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $11 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $11 = $8;
   }
   $12 = ($11|0)==(0);
   if ($12) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 1|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP8[$17>>0]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 38;
     break;
    }
    $24 = ($16<<24>>24)==($21<<24>>24);
    $25 = $24;
   }
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(463,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $92 = ___cxa_find_matching_catch()|0;
     $93 = tempRet0;
     $$0 = $92;$$01 = $93;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $36 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $36 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $37 = ($36|0)>($35|0);
     if ($37) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = (_malloc($82)|0);
       $85 = ($84|0)==(0|0);
       if ($85) {
        __THREW__ = 0;
        invoke_v(436);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if ($87) {
         $88 = ___cxa_find_matching_catch()|0;
         $89 = tempRet0;
         $$0 = $88;$$01 = $89;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $100 = $$pre;$96 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $100 = $28;$96 = $84;$__mb$0 = $84;
       }
      } else {
       $100 = $28;$96 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $97 = (($__iob) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $100 & 1;
     $101 = ($99<<24>>24)==(0);
     if ($101) {
      $106 = (($__digits) + 1|0);
      $107 = $100&255;
      $108 = $107 >>> 1;
      $110 = $106;$111 = $108;
     } else {
      $102 = (($__digits) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($__digits) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $110 = $103;$111 = $105;
     }
     $109 = (($110) + ($111)|0);
     $112 = HEAP8[$__dp>>0]|0;
     $113 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(464,($__mb$0|0),($__mi|0),($__me|0),($98|0),($110|0),($109|0),($1|0),($25|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if (!($115)) {
      $116 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $116;
      $117 = HEAP32[$__mi>>2]|0;
      $118 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(438,($agg$result|0),($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if (!($120)) {
       _free($96);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       STACKTOP = sp;return;
      }
     }
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     _free($96);
     $$0 = $94;$$01 = $95;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
  }
 } while(0);
 if ((label|0) == 38) {
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $$1 = $90;$$12 = $91;
 }
 $122 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,17792,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(430)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $118 = 0;$119 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(435,($__bb|0),($3|0),(17792|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $118 = 0;$119 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(436);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $118 = 0;$119 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $120 = $$pre;
     } else {
      $120 = $9;
     }
     $15 = $6 << 2;
     $16 = (_malloc($15)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      __THREW__ = 0;
      invoke_v(436);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $118 = $120;$119 = 0;
       label = 7;
      } else {
       $111 = 0;$113 = $120;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $111 = $16;$113 = $120;$__db$0 = $16;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $111 = 0;$113 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(428,($__loc|0),($__iob|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $118 = $113;$119 = $111;
   label = 7;
  } else {
   __THREW__ = 0;
   $22 = (invoke_iii(426,($__loc|0),(18032|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 35;
   } else {
    $25 = HEAP32[$__bb>>2]|0;
    $26 = (($25) + ($__n$0)|0);
    $27 = HEAP32[$22>>2]|0;
    $28 = (($27) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($29|0,($22|0),($25|0),($26|0),($__db$0|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 35;
    } else {
     $32 = ($__n$0|0)==(0);
     if ($32) {
      $36 = 0;
     } else {
      $33 = HEAP32[$__bb>>2]|0;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(45);
      $36 = $35;
     }
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(465,($__intl|0),($36|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     do {
      if ($38) {
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       $$0 = $91;$$01 = $92;
      } else {
       $39 = HEAP32[$__fd>>2]|0;
       $40 = ($__n$0|0)>($39|0);
       if ($40) {
        $41 = (($__n$0) - ($39))|0;
        $42 = $41 << 1;
        $43 = HEAP8[$__sn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $48 = $43&255;
         $49 = $48 >>> 1;
         $59 = $49;
        } else {
         $46 = (($__sn) + 4|0);
         $47 = HEAP32[$46>>2]|0;
         $59 = $47;
        }
        $50 = HEAP8[$__sym>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        if ($52) {
         $55 = $50&255;
         $56 = $55 >>> 1;
         $61 = $56;
        } else {
         $53 = (($__sym) + 4|0);
         $54 = HEAP32[$53>>2]|0;
         $61 = $54;
        }
        $57 = $42 | 1;
        $58 = (($59) + ($57))|0;
        $60 = (($58) + ($61))|0;
        $$pn = $60;
       } else {
        $62 = HEAP8[$__sn>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        if ($64) {
         $67 = $62&255;
         $68 = $67 >>> 1;
         $77 = $68;
        } else {
         $65 = (($__sn) + 4|0);
         $66 = HEAP32[$65>>2]|0;
         $77 = $66;
        }
        $69 = HEAP8[$__sym>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         $74 = $69&255;
         $75 = $74 >>> 1;
         $79 = $75;
        } else {
         $72 = (($__sym) + 4|0);
         $73 = HEAP32[$72>>2]|0;
         $79 = $73;
        }
        $76 = (($77) + 2)|0;
        $78 = (($76) + ($79))|0;
        $$pn = $78;
       }
       $80 = (($$pn) + ($39))|0;
       $81 = ($80>>>0)>(100);
       if ($81) {
        $82 = $80 << 2;
        $83 = (_malloc($82)|0);
        $84 = ($83|0)==(0|0);
        if ($84) {
         __THREW__ = 0;
         invoke_v(436);
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if ($86) {
          $87 = ___cxa_find_matching_catch()|0;
          $88 = tempRet0;
          $$0 = $87;$$01 = $88;
          break;
         } else {
          $95 = 0;$__mb$0 = 0;
         }
        } else {
         $95 = $83;$__mb$0 = $83;
        }
       } else {
        $95 = 0;$__mb$0 = $__mbuf;
       }
       $97 = (($__iob) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($__db$0) + ($__n$0<<2)|0);
       $100 = HEAP32[$__dp>>2]|0;
       $101 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(466,($__mb$0|0),($__mi|0),($__me|0),($98|0),($__db$0|0),($99|0),($22|0),($36|0),($__pat|0),($100|0),($101|0),($__grp|0),($__sym|0),($__sn|0),($39|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if (!($103)) {
        $104 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $104;
        $105 = HEAP32[$__mi>>2]|0;
        $106 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(443,($agg$result|0),($$byval_copy|0),($__mb$0|0),($105|0),($106|0),($__iob|0),($__fl|0));
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         $109 = ($95|0)==(0|0);
         if (!($109)) {
          _free($95);
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $110 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($110)|0);
         $112 = ($111|0)==(0|0);
         if (!($112)) {
          _free($111);
         }
         _free($113);
         STACKTOP = sp;return;
        }
       }
       $93 = ___cxa_find_matching_catch()|0;
       $94 = tempRet0;
       $96 = ($95|0)==(0|0);
       if ($96) {
        $$0 = $93;$$01 = $94;
       } else {
        _free($95);
        $$0 = $93;$$01 = $94;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $$1 = $89;$$12 = $90;
   }
   $114 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($114)|0);
   $$2 = $$1;$$23 = $$12;$115 = $111;$117 = $113;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$115 = $119;$117 = $118;
 }
 $116 = ($115|0)==(0|0);
 if (!($116)) {
  _free($115);
 }
 _free($117);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17608)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = (($13) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = (($17) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = (($__sn) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP32[$24>>2] = 0;
     }
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
     __THREW__ = 0;
     invoke_vii(462,($__sn|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $28 = ___cxa_find_matching_catch(0|0)|0;
      $29 = tempRet0;
      ___clang_call_terminate($28);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
      break;
     }
    } else {
     $30 = (($13) + 40|0);
     $31 = HEAP32[$30>>2]|0;
     FUNCTION_TABLE_vii[$31 & 1023]($2,$12);
     $32 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$32&255;HEAP8[$__pat+1>>0]=($32>>8)&255;HEAP8[$__pat+2>>0]=($32>>16)&255;HEAP8[$__pat+3>>0]=$32>>24;
     $33 = HEAP32[$12>>2]|0;
     $34 = (($33) + 28|0);
     $35 = HEAP32[$34>>2]|0;
     FUNCTION_TABLE_vii[$35 & 1023]($3,$12);
     $36 = HEAP8[$__sn>>0]|0;
     $37 = $36 & 1;
     $38 = ($37<<24>>24)==(0);
     if ($38) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $39 = (($__sn) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      HEAP32[$40>>2] = 0;
     }
     $41 = (($__sn) + 4|0);
     HEAP32[$41>>2] = 0;
     __THREW__ = 0;
     invoke_vii(462,($__sn|0),0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $44 = ___cxa_find_matching_catch(0|0)|0;
      $45 = tempRet0;
      ___clang_call_terminate($44);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
      break;
     }
    }
   } while(0);
   $46 = HEAP32[$12>>2]|0;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_ii[$48 & 1023]($12)|0);
   HEAP32[$__dp>>2] = $49;
   $50 = HEAP32[$12>>2]|0;
   $51 = (($50) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
   HEAP32[$__ts>>2] = $53;
   $54 = HEAP32[$12>>2]|0;
   $55 = (($54) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_vii[$56 & 1023]($4,$12);
   $57 = HEAP8[$__grp>>0]|0;
   $58 = $57 & 1;
   $59 = ($58<<24>>24)==(0);
   if ($59) {
    $63 = (($__grp) + 1|0);
    HEAP8[$63>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $60 = (($__grp) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    HEAP8[$61>>0] = 0;
    $62 = (($__grp) + 4|0);
    HEAP32[$62>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $66 = ___cxa_find_matching_catch(0|0)|0;
    $67 = tempRet0;
    ___clang_call_terminate($66);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   $68 = HEAP32[$12>>2]|0;
   $69 = (($68) + 24|0);
   $70 = HEAP32[$69>>2]|0;
   FUNCTION_TABLE_vii[$70 & 1023]($5,$12);
   $71 = HEAP8[$__sym>>0]|0;
   $72 = $71 & 1;
   $73 = ($72<<24>>24)==(0);
   if ($73) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $74 = (($__sym) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    HEAP32[$75>>2] = 0;
   }
   $76 = (($__sym) + 4|0);
   HEAP32[$76>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__sym|0),0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    $79 = ___cxa_find_matching_catch(0|0)|0;
    $80 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
    $81 = HEAP32[$12>>2]|0;
    $82 = (($81) + 36|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (FUNCTION_TABLE_ii[$83 & 1023]($12)|0);
    $storemerge = $84;
    break;
   }
  } else {
   $85 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,17544)|0);
   $86 = HEAP32[$85>>2]|0;
   do {
    if ($__neg) {
     $87 = (($86) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     FUNCTION_TABLE_vii[$88 & 1023]($6,$85);
     $89 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$89&255;HEAP8[$__pat+1>>0]=($89>>8)&255;HEAP8[$__pat+2>>0]=($89>>16)&255;HEAP8[$__pat+3>>0]=$89>>24;
     $90 = HEAP32[$85>>2]|0;
     $91 = (($90) + 32|0);
     $92 = HEAP32[$91>>2]|0;
     FUNCTION_TABLE_vii[$92 & 1023]($7,$85);
     $93 = HEAP8[$__sn>>0]|0;
     $94 = $93 & 1;
     $95 = ($94<<24>>24)==(0);
     if ($95) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $96 = (($__sn) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      HEAP32[$97>>2] = 0;
     }
     $98 = (($__sn) + 4|0);
     HEAP32[$98>>2] = 0;
     __THREW__ = 0;
     invoke_vii(462,($__sn|0),0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      $101 = ___cxa_find_matching_catch(0|0)|0;
      $102 = tempRet0;
      ___clang_call_terminate($101);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
      break;
     }
    } else {
     $103 = (($86) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     FUNCTION_TABLE_vii[$104 & 1023]($8,$85);
     $105 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$105&255;HEAP8[$__pat+1>>0]=($105>>8)&255;HEAP8[$__pat+2>>0]=($105>>16)&255;HEAP8[$__pat+3>>0]=$105>>24;
     $106 = HEAP32[$85>>2]|0;
     $107 = (($106) + 28|0);
     $108 = HEAP32[$107>>2]|0;
     FUNCTION_TABLE_vii[$108 & 1023]($9,$85);
     $109 = HEAP8[$__sn>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $112 = (($__sn) + 8|0);
      $113 = HEAP32[$112>>2]|0;
      HEAP32[$113>>2] = 0;
     }
     $114 = (($__sn) + 4|0);
     HEAP32[$114>>2] = 0;
     __THREW__ = 0;
     invoke_vii(462,($__sn|0),0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      $117 = ___cxa_find_matching_catch(0|0)|0;
      $118 = tempRet0;
      ___clang_call_terminate($117);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
      break;
     }
    }
   } while(0);
   $119 = HEAP32[$85>>2]|0;
   $120 = (($119) + 12|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (FUNCTION_TABLE_ii[$121 & 1023]($85)|0);
   HEAP32[$__dp>>2] = $122;
   $123 = HEAP32[$85>>2]|0;
   $124 = (($123) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 1023]($85)|0);
   HEAP32[$__ts>>2] = $126;
   $127 = HEAP32[$85>>2]|0;
   $128 = (($127) + 20|0);
   $129 = HEAP32[$128>>2]|0;
   FUNCTION_TABLE_vii[$129 & 1023]($10,$85);
   $130 = HEAP8[$__grp>>0]|0;
   $131 = $130 & 1;
   $132 = ($131<<24>>24)==(0);
   if ($132) {
    $136 = (($__grp) + 1|0);
    HEAP8[$136>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $133 = (($__grp) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    HEAP8[$134>>0] = 0;
    $135 = (($__grp) + 4|0);
    HEAP32[$135>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(456,($__grp|0),0);
   $137 = __THREW__; __THREW__ = 0;
   $138 = $137&1;
   if ($138) {
    $139 = ___cxa_find_matching_catch(0|0)|0;
    $140 = tempRet0;
    ___clang_call_terminate($139);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
   $141 = HEAP32[$85>>2]|0;
   $142 = (($141) + 24|0);
   $143 = HEAP32[$142>>2]|0;
   FUNCTION_TABLE_vii[$143 & 1023]($11,$85);
   $144 = HEAP8[$__sym>>0]|0;
   $145 = $144 & 1;
   $146 = ($145<<24>>24)==(0);
   if ($146) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $147 = (($__sym) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    HEAP32[$148>>2] = 0;
   }
   $149 = (($__sym) + 4|0);
   HEAP32[$149>>2] = 0;
   __THREW__ = 0;
   invoke_vii(462,($__sym|0),0);
   $150 = __THREW__; __THREW__ = 0;
   $151 = $150&1;
   if ($151) {
    $152 = ___cxa_find_matching_catch(0|0)|0;
    $153 = tempRet0;
    ___clang_call_terminate($152);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
    $154 = HEAP32[$85>>2]|0;
    $155 = (($154) + 36|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (FUNCTION_TABLE_ii[$156 & 1023]($85)|0);
    $storemerge = $157;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i18 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$81 = 0, $$82 = 0, $$83 = 0, $$lcssa = 0, $$lcssa35 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$lcssa87 = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$pn = 0;
 var $$promoted4$i$i = 0, $$promoted4$i$i12 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $143$phi = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $169$phi = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $86$phi = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa$ph = 0, $__d$036 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$140 = 0, $__d$2 = 0, $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$041 = 0, $__f$147 = 0, $__gl$057 = 0, $__gl$057$ph = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0;
 var $__me$promoted = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $or$cond84 = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i13 = 0, $scevgep6$i$i = 0, $scevgep6$i$i16 = 0, $scevgep71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$060 = $__db;$__p$059 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$059)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 2:  {
   $33 = HEAP8[$__sym>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $37 = $33&255;
    $38 = $37 >>> 1;
    $39 = $38;
   } else {
    $36 = HEAP32[$4>>2]|0;
    $39 = $36;
   }
   $40 = ($39|0)==(0);
   $or$cond3 = $40 | $3;
   if ($or$cond3) {
    $$2 = $$060;
   } else {
    if ($35) {
     $43 = $33&255;
     $44 = $43 >>> 1;
     $46 = $4;$47 = $44;
    } else {
     $41 = HEAP32[$5>>2]|0;
     $42 = HEAP32[$4>>2]|0;
     $46 = $41;$47 = $42;
    }
    $45 = (($46) + ($47<<2)|0);
    $48 = HEAP32[$__me>>2]|0;
    $49 = ($46|0)==($45|0);
    if ($49) {
     $$0$lcssa$i$i18 = $48;
    } else {
     $$promoted4$i$i12 = $46;
     $$sum33 = (($47) + -1)|0;
     $scevgep$i$i13 = (($46) + ($$sum33<<2)|0);
     $50 = $scevgep$i$i13;
     $51 = (($50) - ($$promoted4$i$i12))|0;
     $52 = $51 >>> 2;
     $$01$i$i15 = $48;$54 = $46;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$01$i$i15>>2] = $53;
      $55 = (($54) + 4|0);
      $56 = (($$01$i$i15) + 4|0);
      $57 = ($55|0)==($45|0);
      if ($57) {
       break;
      } else {
       $$01$i$i15 = $56;$54 = $55;
      }
     }
     $58 = (($52) + 1)|0;
     $scevgep6$i$i16 = (($48) + ($58<<2)|0);
     $$0$lcssa$i$i18 = $scevgep6$i$i16;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i18;
    $$2 = $$060;
   }
   break;
  }
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$060) + 4|0);
   $$$0 = $__neg ? $60 : $$060;
   $61 = ($$$0>>>0)<($__de>>>0);
   if ($61) {
    $__d$036 = $$$0;
    while(1) {
     $64 = HEAP32[$__d$036>>2]|0;
     $65 = HEAP32[$__ct>>2]|0;
     $66 = (($65) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (FUNCTION_TABLE_iiii[$67 & 1023]($__ct,2048,$64)|0);
     $62 = (($__d$036) + 4|0);
     if (!($68)) {
      $__d$0$lcssa$ph = $__d$036;
      break;
     }
     $63 = ($62>>>0)<($__de>>>0);
     if ($63) {
      $__d$036 = $62;
     } else {
      $__d$0$lcssa$ph = $62;
      break;
     }
    }
    $__d$0$lcssa = $__d$0$lcssa$ph;
   } else {
    $__d$0$lcssa = $$$0;
   }
   if ($6) {
    $69 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($69) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $73 = $__me$promoted;$__d$140 = $__d$0$lcssa;$__f$041 = $__fd;
     while(1) {
      $70 = (($__d$140) + -4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($73) + 4|0);
      HEAP32[$73>>2] = $71;
      $74 = (($__f$041) + -1)|0;
      $75 = ($70>>>0)>($$$0>>>0);
      $76 = ($74|0)>(0);
      $or$cond = $75 & $76;
      if ($or$cond) {
       $73 = $72;$__d$140 = $70;$__f$041 = $74;
      } else {
       $$lcssa = $70;$$lcssa85 = $72;$$lcssa86 = $74;$$lcssa87 = $76;
       break;
      }
     }
     HEAP32[$__me>>2] = $$lcssa85;
     if ($$lcssa87) {
      $__d$1$lcssa79 = $$lcssa;$__f$0$lcssa77 = $$lcssa86;
      label = 33;
     } else {
      $77 = HEAP32[$__me>>2]|0;
      $78 = (($77) + 4|0);
      HEAP32[$__me>>2] = $78;
      $$lcssa35 = $77;$__d$1$lcssa7880 = $$lcssa;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $79 = HEAP32[$__ct>>2]|0;
     $80 = (($79) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (FUNCTION_TABLE_iii[$81 & 1023]($__ct,48)|0);
     $83 = ($__f$0$lcssa77|0)>(0);
     $84 = HEAP32[$__me>>2]|0;
     $85 = (($84) + 4|0);
     HEAP32[$__me>>2] = $85;
     if ($83) {
      $175 = $85;$86 = $84;$__f$147 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$86>>2] = $82;
       $87 = (($__f$147) + -1)|0;
       $88 = ($87|0)>(0);
       $89 = (($86) + 8|0);
       if ($88) {
        $86$phi = $175;$175 = $89;$__f$147 = $87;$86 = $86$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($84) + ($$sum75<<2)|0);
      $scevgep71 = (($84) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa35 = $scevgep71;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa35 = $84;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa35>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $90 = ($__d$2|0)==($$$0|0);
   if ($90) {
    $91 = HEAP32[$__ct>>2]|0;
    $92 = (($91) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (FUNCTION_TABLE_iii[$93 & 1023]($__ct,48)|0);
    $95 = HEAP32[$__me>>2]|0;
    $96 = (($95) + 4|0);
    HEAP32[$__me>>2] = $96;
    HEAP32[$95>>2] = $94;
    $135 = $96;$136 = $95;
   } else {
    $97 = HEAP8[$__grp>>0]|0;
    $98 = $97 & 1;
    $99 = ($98<<24>>24)==(0);
    if ($99) {
     $101 = $97&255;
     $102 = $101 >>> 1;
     $103 = $102;
    } else {
     $100 = HEAP32[$9>>2]|0;
     $103 = $100;
    }
    $104 = ($103|0)==(0);
    if ($104) {
     $__gl$057$ph = -1;
    } else {
     $105 = HEAP32[$8>>2]|0;
     $$81 = $99 ? $7 : $105;
     $106 = HEAP8[$$81>>0]|0;
     $107 = $106 << 24 >> 24;
     $__gl$057$ph = $107;
    }
    $__d$354 = $__d$2;$__gl$057 = $__gl$057$ph;$__ig$056 = 0;$__ng$055 = 0;
    while(1) {
     $108 = ($__ng$055|0)==($__gl$057|0);
     $109 = HEAP32[$__me>>2]|0;
     if ($108) {
      $110 = (($109) + 4|0);
      HEAP32[$__me>>2] = $110;
      HEAP32[$109>>2] = $__ts;
      $111 = (($__ig$056) + 1)|0;
      $112 = HEAP8[$__grp>>0]|0;
      $113 = $112 & 1;
      $114 = ($113<<24>>24)==(0);
      if ($114) {
       $116 = $112&255;
       $117 = $116 >>> 1;
       $119 = $117;
      } else {
       $115 = HEAP32[$9>>2]|0;
       $119 = $115;
      }
      $118 = ($111>>>0)<($119>>>0);
      if ($118) {
       $120 = HEAP32[$8>>2]|0;
       $$82 = $114 ? $7 : $120;
       $121 = (($$82) + ($111)|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = ($122<<24>>24)==(127);
       if ($123) {
        $131 = $110;$__gl$1 = -1;$__ig$1 = $111;$__ng$1 = 0;
       } else {
        $124 = HEAP32[$8>>2]|0;
        $$83 = $114 ? $7 : $124;
        $125 = (($$83) + ($111)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = $126 << 24 >> 24;
        $131 = $110;$__gl$1 = $127;$__ig$1 = $111;$__ng$1 = 0;
       }
      } else {
       $131 = $110;$__gl$1 = $__gl$057;$__ig$1 = $111;$__ng$1 = 0;
      }
     } else {
      $131 = $109;$__gl$1 = $__gl$057;$__ig$1 = $__ig$056;$__ng$1 = $__ng$055;
     }
     $128 = (($__d$354) + -4|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($131) + 4|0);
     HEAP32[$__me>>2] = $130;
     HEAP32[$131>>2] = $129;
     $132 = (($__ng$1) + 1)|0;
     $133 = ($128|0)==($$$0|0);
     if ($133) {
      $$lcssa88 = $131;$$lcssa89 = $130;
      break;
     } else {
      $__d$354 = $128;$__gl$057 = $__gl$1;$__ig$056 = $__ig$1;$__ng$055 = $132;
     }
    }
    $135 = $$lcssa89;$136 = $$lcssa88;
   }
   $134 = ($59|0)!=($135|0);
   $137 = ($136>>>0)>($59>>>0);
   $or$cond84 = $134 & $137;
   if ($or$cond84) {
    $$012$i$i = $59;$140 = $136;$143 = $135;
    while(1) {
     $138 = HEAP32[$$012$i$i>>2]|0;
     $139 = HEAP32[$140>>2]|0;
     HEAP32[$$012$i$i>>2] = $139;
     HEAP32[$140>>2] = $138;
     $141 = (($$012$i$i) + 4|0);
     $142 = (($143) + -8|0);
     $144 = ($141>>>0)<($142>>>0);
     if ($144) {
      $143$phi = $140;$$012$i$i = $141;$140 = $142;$143 = $143$phi;
     } else {
      break;
     }
    }
    $$2 = $$$0;
   } else {
    $$2 = $$$0;
   }
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $27 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $27 = $24;
   }
   $28 = ($27|0)==(0);
   if ($28) {
    $$2 = $$060;
   } else {
    $29 = HEAP32[$1>>2]|0;
    $$ = $23 ? $0 : $29;
    $30 = HEAP32[$$>>2]|0;
    $31 = HEAP32[$__me>>2]|0;
    $32 = (($31) + 4|0);
    HEAP32[$__me>>2] = $32;
    HEAP32[$31>>2] = $30;
    $$2 = $$060;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$060;
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$060;
   break;
  }
  default: {
   $$2 = $$060;
  }
  }
  $145 = (($__p$059) + 1)|0;
  $exitcond = ($145|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$060 = $$2;$__p$059 = $145;
  }
 }
 $146 = HEAP8[$__sn>>0]|0;
 $147 = $146 & 1;
 $148 = ($147<<24>>24)==(0);
 if ($148) {
  $150 = $146&255;
  $151 = $150 >>> 1;
  $152 = $151;
 } else {
  $149 = HEAP32[$0>>2]|0;
  $152 = $149;
 }
 $153 = ($152>>>0)>(1);
 if ($153) {
  if ($148) {
   $156 = $146&255;
   $157 = $156 >>> 1;
   $$pn = $0;$160 = $157;
  } else {
   $154 = HEAP32[$1>>2]|0;
   $155 = HEAP32[$0>>2]|0;
   $$pn = $154;$160 = $155;
  }
  $158 = (($$pn) + 4|0);
  $159 = (($$pn) + ($160<<2)|0);
  $161 = HEAP32[$__me>>2]|0;
  $162 = ($158|0)==($159|0);
  if ($162) {
   $$0$lcssa$i$i = $161;
  } else {
   $$promoted4$i$i = $158;
   $$sum = (($160) + -1)|0;
   $scevgep$i$i = (($$pn) + ($$sum<<2)|0);
   $163 = $scevgep$i$i;
   $164 = (($163) - ($$promoted4$i$i))|0;
   $165 = $164 >>> 2;
   $$01$i$i = $161;$167 = $158;$169 = $$pn;
   while(1) {
    $166 = HEAP32[$167>>2]|0;
    HEAP32[$$01$i$i>>2] = $166;
    $168 = (($169) + 8|0);
    $170 = (($$01$i$i) + 4|0);
    $171 = ($168|0)==($159|0);
    if ($171) {
     break;
    } else {
     $169$phi = $167;$$01$i$i = $170;$167 = $168;$169 = $169$phi;
    }
   }
   $172 = (($165) + 1)|0;
   $scevgep6$i$i = (($161) + ($172<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $173 = $__flags & 176;
 if ((($173|0) == 32)) {
  $174 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $174;
 } else if (!((($173|0) == 16))) {
  HEAP32[$__mi>>2] = $__mb;
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(426,($__loc|0),(18032|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 38;
  } else {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $11 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $11 = $8;
   }
   $12 = ($11|0)==(0);
   if ($12) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 4|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP32[$17>>2]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 38;
     break;
    }
    $24 = ($16|0)==($21|0);
    $25 = $24;
   }
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(465,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $93 = ___cxa_find_matching_catch()|0;
     $94 = tempRet0;
     $$0 = $93;$$01 = $94;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $36 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $36 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $37 = ($36|0)>($35|0);
     if ($37) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = $82 << 2;
       $85 = (_malloc($84)|0);
       $86 = ($85|0)==(0|0);
       if ($86) {
        __THREW__ = 0;
        invoke_v(436);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         $89 = ___cxa_find_matching_catch()|0;
         $90 = tempRet0;
         $$0 = $89;$$01 = $90;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $102 = $$pre;$97 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $102 = $28;$97 = $85;$__mb$0 = $85;
       }
      } else {
       $102 = $28;$97 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $99 = (($__iob) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $102 & 1;
     $103 = ($101<<24>>24)==(0);
     if ($103) {
      $108 = (($__digits) + 4|0);
      $109 = $102&255;
      $110 = $109 >>> 1;
      $112 = $108;$113 = $110;
     } else {
      $104 = (($__digits) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($__digits) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $112 = $105;$113 = $107;
     }
     $111 = (($112) + ($113<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(466,($__mb$0|0),($__mi|0),($__me|0),($100|0),($112|0),($111|0),($1|0),($25|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if (!($117)) {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(443,($agg$result|0),($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0));
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = ($97|0)==(0|0);
       if (!($123)) {
        _free($97);
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       STACKTOP = sp;return;
      }
     }
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     $98 = ($97|0)==(0|0);
     if ($98) {
      $$0 = $95;$$01 = $96;
     } else {
      _free($97);
      $$0 = $95;$$01 = $96;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
  }
 } while(0);
 if ((label|0) == 38) {
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  $$1 = $91;$$12 = $92;
 }
 $125 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i5 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$14 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$14 = $4;
 }
 $11 = (($12) + ($13)|0);
 $15 = ($14>>>0)<($11>>>0);
 do {
  if ($15) {
   $$01$i5 = $14;
   while(1) {
    $20 = HEAP8[$$01$i5>>0]|0;
    __THREW__ = 0;
    invoke_vii(451,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 13;
     break;
    }
    $23 = (($$01$i5) + 1|0);
    $exitcond$i6 = ($23|0)==($11|0);
    if ($exitcond$i6) {
     break;
    } else {
     $$01$i5 = $23;
    }
   }
   if ((label|0) == 13) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    label = 15;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 11;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 12;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 12;
 }
 L17: do {
  if ((label|0) == 12) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(467,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    label = 15;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   do {
    if ($42) {
     $$01$i = $33;
     while(1) {
      $43 = HEAP8[$$01$i>>0]|0;
      __THREW__ = 0;
      invoke_vii(451,($agg$result|0),($43|0));
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 20;
       break;
      }
      $46 = (($$01$i) + 1|0);
      $exitcond$i = ($46|0)==($41|0);
      if ($exitcond$i) {
       label = 21;
       break;
      } else {
       $$01$i = $46;
      }
     }
     if ((label|0) == 20) {
      $47 = ___cxa_find_matching_catch()|0;
      $48 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
      $$01 = $47;$$02 = $48;
      break L17;
     }
     else if ((label|0) == 21) {
      break;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 15) {
  $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$05$i = 0, $$05$i13 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre43 = 0, $$pre8$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i11 = 0, $__buf$i = 0, $__buf$i10 = 0, $__mb$i = 0, $__mb$i9 = 0, $__ndflt = 0, $__nn$i = 0, $__p$04$i = 0, $__p$04$i18 = 0, $__wn$i = 0;
 var $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi37$index = 0, $lpad$phi37$index3 = 0, $or$cond3$i = 0, $or$cond3$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i9 = sp + 184|0;
 $__buf$i10 = sp + 192|0;
 $__bn$i11 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((19688 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$17 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$17 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $18 = ($17>>>0)<($14>>>0);
 L5: do {
  if ($18) {
   $19 = (($__buf$i10) + 32|0);
   $$05$i13 = $17;$21 = ((19688 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$05$i13;
    $20 = (($21) + 12|0);
    $22 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $23 = (invoke_iiiiiiiii($22|0,($0|0),($__mb$i9|0),($$05$i13|0),($14|0),($__wn$i|0),($__buf$i10|0),($19|0),($__bn$i11|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if ($25) {
     label = 24;
     break;
    }
    $26 = ($23|0)==(2);
    $27 = HEAP32[$__wn$i>>2]|0;
    $28 = ($27|0)==($$05$i13|0);
    $or$cond3$i14 = $26 | $28;
    if ($or$cond3$i14) {
     label = 10;
     break;
    }
    $29 = HEAP32[$__bn$i11>>2]|0;
    $30 = ($__buf$i10>>>0)<($29>>>0);
    if ($30) {
     $__p$04$i18 = $__buf$i10;
     while(1) {
      $33 = HEAP8[$__p$04$i18>>0]|0;
      __THREW__ = 0;
      invoke_vii(451,($__ndflt|0),($33|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       label = 23;
       break L7;
      }
      $36 = (($__p$04$i18) + 1|0);
      $37 = HEAP32[$__bn$i11>>2]|0;
      $38 = ($36>>>0)<($37>>>0);
      if ($38) {
       $__p$04$i18 = $36;
      } else {
       break;
      }
     }
     $$pre8$i = HEAP32[$__wn$i>>2]|0;
     $39 = $$pre8$i;
    } else {
     $39 = $27;
    }
    $40 = ($39>>>0)<($14>>>0);
    if (!($40)) {
     label = 17;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$05$i13 = $39;$21 = $$pre;
   }
   do {
    if ((label|0) == 10) {
     __THREW__ = 0;
     invoke_vi(449,(18920|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $61 = ___cxa_find_matching_catch()|0;
      $62 = tempRet0;
      $lpad$phi37$index = $61;$lpad$phi37$index3 = $62;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 17) {
     label = 18;
     break L5;
    }
    else if ((label|0) == 23) {
     $57 = ___cxa_find_matching_catch()|0;
     $58 = tempRet0;
     $lpad$phi37$index = $57;$lpad$phi37$index3 = $58;
    }
    else if ((label|0) == 24) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi37$index = $59;$lpad$phi37$index3 = $60;
    }
   } while(0);
   $$1 = $lpad$phi37$index;$$13 = $lpad$phi37$index3;
  } else {
   label = 18;
  }
 } while(0);
 L28: do {
  if ((label|0) == 18) {
   $41 = ($__c|0)==(-1);
   $42 = $__c << 1;
   $43 = $42;
   $44 = $41 ? (-1) : $43;
   $45 = HEAP8[$__ndflt>>0]|0;
   $46 = $45 & 1;
   $47 = ($46<<24>>24)==(0);
   if ($47) {
    $50 = (($__ndflt) + 1|0);
    $51 = $50;
   } else {
    $48 = (($__ndflt) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $51 = $49;
   }
   __THREW__ = 0;
   $52 = (invoke_iiiii(467,($44|0),($__set|0),($__msgid|0),($51|0))|0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $55 = ___cxa_find_matching_catch()|0;
    $56 = tempRet0;
    $$1 = $55;$$13 = $56;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $63 = (($1) + 4|0);
   HEAP32[$63>>2] = 0;
   HEAP32[$1>>2] = ((19792 + 8|0));
   $64 = (_strlen(($52|0))|0);
   $65 = (($52) + ($64)|0);
   $66 = ($64|0)>(0);
   L37: do {
    if ($66) {
     $67 = $65;
     $68 = (($__buf$i) + 128|0);
     $$05$i = $52;$70 = ((19792 + 8|0));
     L39: while(1) {
      HEAP32[$__nn$i>>2] = $$05$i;
      $69 = (($70) + 16|0);
      $71 = HEAP32[$69>>2]|0;
      $72 = $$05$i;
      $73 = (($67) - ($72))|0;
      $74 = ($73|0)>(32);
      $75 = (($$05$i) + 32|0);
      $76 = $74 ? $75 : $65;
      __THREW__ = 0;
      $77 = (invoke_iiiiiiiii($71|0,($1|0),($__mb$i|0),($$05$i|0),($76|0),($__nn$i|0),($__buf$i|0),($68|0),($__bn$i|0))|0);
      $78 = __THREW__; __THREW__ = 0;
      $79 = $78&1;
      if ($79) {
       label = 43;
       break;
      }
      $80 = ($77|0)==(2);
      $81 = HEAP32[$__nn$i>>2]|0;
      $82 = ($81|0)==($$05$i|0);
      $or$cond3$i = $80 | $82;
      if ($or$cond3$i) {
       label = 33;
       break;
      }
      $83 = HEAP32[$__bn$i>>2]|0;
      $84 = ($__buf$i>>>0)<($83>>>0);
      if ($84) {
       $__p$04$i = $__buf$i;
       while(1) {
        $87 = HEAP32[$__p$04$i>>2]|0;
        __THREW__ = 0;
        invoke_vii(459,($agg$result|0),($87|0));
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         label = 42;
         break L39;
        }
        $90 = (($__p$04$i) + 4|0);
        $91 = HEAP32[$__bn$i>>2]|0;
        $92 = ($90>>>0)<($91>>>0);
        if ($92) {
         $__p$04$i = $90;
        } else {
         break;
        }
       }
       $$pre$i = HEAP32[$__nn$i>>2]|0;
       $93 = $$pre$i;
      } else {
       $93 = $81;
      }
      $94 = ($93>>>0)<($65>>>0);
      if (!($94)) {
       label = 40;
       break;
      }
      $$pre43 = HEAP32[$1>>2]|0;
      $$05$i = $93;$70 = $$pre43;
     }
     do {
      if ((label|0) == 33) {
       __THREW__ = 0;
       invoke_vi(449,(18920|0));
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        $99 = ___cxa_find_matching_catch()|0;
        $100 = tempRet0;
        $lpad$phi$index = $99;$lpad$phi$index10 = $100;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 40) {
       break L37;
      }
      else if ((label|0) == 42) {
       $95 = ___cxa_find_matching_catch()|0;
       $96 = tempRet0;
       $lpad$phi$index = $95;$lpad$phi$index10 = $96;
      }
      else if ((label|0) == 43) {
       $97 = ___cxa_find_matching_catch()|0;
       $98 = tempRet0;
       $lpad$phi$index = $97;$lpad$phi$index10 = $98;
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
     $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
     break L28;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(418,($0|0),(17920|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((26568 + 8|0));
  ___cxa_throw(($0|0),(26616|0),(347|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((17952 + 8|0));
 $2 = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(468,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$1 = $86;$$12 = $85;
 } else {
  $5 = (($this) + 144|0);
  __THREW__ = 0;
  invoke_viii(469,($5|0),(17944|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $$0 = $88;$$01 = $87;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = (($this) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($8|0);
   if (!($11)) {
    $__new_last2$i$i$i = $8;
    $scevgep$i$i$i = (($10) + -4|0);
    $12 = $scevgep$i$i$i;
    $13 = (($12) - ($__new_last2$i$i$i))|0;
    $14 = $13 >>> 2;
    $15 = $14 ^ -1;
    $scevgep4$i$i$i = (($10) + ($15<<2)|0);
    HEAP32[$9>>2] = $scevgep4$i$i$i;
   }
   HEAP32[((22848 + 4|0))>>2] = 0;
   HEAP32[22848>>2] = ((16400 + 8|0));
   __THREW__ = 0;
   invoke_vii(470,($this|0),(22848|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   do {
    if ($17) {
     label = 41;
    } else {
     HEAP32[((22840 + 4|0))>>2] = 0;
     HEAP32[22840>>2] = ((16440 + 8|0));
     __THREW__ = 0;
     invoke_vii(471,($this|0),(22840|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      label = 41;
     } else {
      HEAP32[((22824 + 4|0))>>2] = 0;
      HEAP32[22824>>2] = ((18048 + 8|0));
      HEAP32[((22824 + 8|0))>>2] = 0;
      HEAP8[((22824 + 12|0))>>0] = 0;
      $20 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[((22824 + 8|0))>>2] = $20;
      __THREW__ = 0;
      invoke_vii(472,($this|0),(22824|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       label = 41;
      } else {
       HEAP32[((22816 + 4|0))>>2] = 0;
       HEAP32[22816>>2] = ((19008 + 8|0));
       __THREW__ = 0;
       invoke_vii(473,($this|0),(22816|0));
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if ($24) {
        label = 41;
       } else {
        HEAP32[((22808 + 4|0))>>2] = 0;
        HEAP32[22808>>2] = ((19224 + 8|0));
        __THREW__ = 0;
        invoke_vii(474,($this|0),(22808|0));
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if ($26) {
         label = 41;
        } else {
         __THREW__ = 0;
         invoke_vii(475,(22792|0),1);
         $27 = __THREW__; __THREW__ = 0;
         $28 = $27&1;
         if ($28) {
          label = 41;
         } else {
          __THREW__ = 0;
          invoke_vii(476,($this|0),(22792|0));
          $29 = __THREW__; __THREW__ = 0;
          $30 = $29&1;
          if ($30) {
           label = 41;
          } else {
           HEAP32[((22784 + 4|0))>>2] = 0;
           HEAP32[22784>>2] = ((19448 + 8|0));
           __THREW__ = 0;
           invoke_vii(477,($this|0),(22784|0));
           $31 = __THREW__; __THREW__ = 0;
           $32 = $31&1;
           if ($32) {
            label = 41;
           } else {
            HEAP32[((22776 + 4|0))>>2] = 0;
            HEAP32[22776>>2] = ((19568 + 8|0));
            __THREW__ = 0;
            invoke_vii(478,($this|0),(22776|0));
            $33 = __THREW__; __THREW__ = 0;
            $34 = $33&1;
            if ($34) {
             label = 41;
            } else {
             HEAP32[((22752 + 4|0))>>2] = 0;
             HEAP32[22752>>2] = ((18200 + 8|0));
             HEAP8[((22752 + 8|0))>>0] = 46;
             HEAP8[((22752 + 9|0))>>0] = 44;
             ;HEAP32[((22752 + 12|0))+0>>2]=0|0;HEAP32[((22752 + 12|0))+4>>2]=0|0;HEAP32[((22752 + 12|0))+8>>2]=0|0;
             __THREW__ = 0;
             invoke_vii(479,($this|0),(22752|0));
             $35 = __THREW__; __THREW__ = 0;
             $36 = $35&1;
             if ($36) {
              label = 41;
             } else {
              HEAP32[((22720 + 4|0))>>2] = 0;
              HEAP32[22720>>2] = ((18240 + 8|0));
              HEAP32[((22720 + 8|0))>>2] = 46;
              HEAP32[((22720 + 12|0))>>2] = 44;
              ;HEAP32[((22720 + 16|0))+0>>2]=0|0;HEAP32[((22720 + 16|0))+4>>2]=0|0;HEAP32[((22720 + 16|0))+8>>2]=0|0;
              __THREW__ = 0;
              invoke_vii(480,($this|0),(22720|0));
              $37 = __THREW__; __THREW__ = 0;
              $38 = $37&1;
              if ($38) {
               label = 41;
              } else {
               HEAP32[((22712 + 4|0))>>2] = 0;
               HEAP32[22712>>2] = ((16480 + 8|0));
               __THREW__ = 0;
               invoke_vii(481,($this|0),(22712|0));
               $39 = __THREW__; __THREW__ = 0;
               $40 = $39&1;
               if ($40) {
                label = 41;
               } else {
                HEAP32[((22704 + 4|0))>>2] = 0;
                HEAP32[22704>>2] = ((16600 + 8|0));
                __THREW__ = 0;
                invoke_vii(482,($this|0),(22704|0));
                $41 = __THREW__; __THREW__ = 0;
                $42 = $41&1;
                if ($42) {
                 label = 41;
                } else {
                 HEAP32[((22696 + 4|0))>>2] = 0;
                 HEAP32[22696>>2] = ((16672 + 8|0));
                 __THREW__ = 0;
                 invoke_vii(483,($this|0),(22696|0));
                 $43 = __THREW__; __THREW__ = 0;
                 $44 = $43&1;
                 if ($44) {
                  label = 41;
                 } else {
                  HEAP32[((22688 + 4|0))>>2] = 0;
                  HEAP32[22688>>2] = ((16768 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(484,($this|0),(22688|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22680 + 4|0))>>2] = 0;
                  HEAP32[22680>>2] = ((17360 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(485,($this|0),(22680|0));
                  $47 = __THREW__; __THREW__ = 0;
                  $48 = $47&1;
                  if ($48) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22672 + 4|0))>>2] = 0;
                  HEAP32[22672>>2] = ((17424 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(486,($this|0),(22672|0));
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22664 + 4|0))>>2] = 0;
                  HEAP32[22664>>2] = ((17488 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(487,($this|0),(22664|0));
                  $51 = __THREW__; __THREW__ = 0;
                  $52 = $51&1;
                  if ($52) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22656 + 4|0))>>2] = 0;
                  HEAP32[22656>>2] = ((17552 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(488,($this|0),(22656|0));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22648 + 4|0))>>2] = 0;
                  HEAP32[22648>>2] = ((17616 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(489,($this|0),(22648|0));
                  $55 = __THREW__; __THREW__ = 0;
                  $56 = $55&1;
                  if ($56) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22640 + 4|0))>>2] = 0;
                  HEAP32[22640>>2] = ((17696 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(490,($this|0),(22640|0));
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22632 + 4|0))>>2] = 0;
                  HEAP32[22632>>2] = ((17752 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(491,($this|0),(22632|0));
                  $59 = __THREW__; __THREW__ = 0;
                  $60 = $59&1;
                  if ($60) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22624 + 4|0))>>2] = 0;
                  HEAP32[22624>>2] = ((17800 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(492,($this|0),(22624|0));
                  $61 = __THREW__; __THREW__ = 0;
                  $62 = $61&1;
                  if ($62) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22608 + 4|0))>>2] = 0;
                  HEAP32[22608>>2] = ((16848 + 8|0));
                  HEAP32[((22608 + 8|0))>>2] = ((16848 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(493,($this|0),(22608|0));
                  $63 = __THREW__; __THREW__ = 0;
                  $64 = $63&1;
                  if ($64) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22592 + 4|0))>>2] = 0;
                  HEAP32[22592>>2] = ((17000 + 8|0));
                  HEAP32[((22592 + 8|0))>>2] = ((17000 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(494,($this|0),(22592|0));
                  $65 = __THREW__; __THREW__ = 0;
                  $66 = $65&1;
                  if ($66) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22576 + 4|0))>>2] = 0;
                  HEAP32[22576>>2] = ((18944 + 8|0));
                  __THREW__ = 0;
                  $67 = (invoke_i(430)|0);
                  $68 = __THREW__; __THREW__ = 0;
                  $69 = $68&1;
                  if ($69) {
                   $70 = ___cxa_find_matching_catch()|0;
                   $71 = tempRet0;
                   $eh$lpad$body$index3Z2D = $71;$eh$lpad$body$indexZ2D = $70;
                   break;
                  }
                  HEAP32[((22576 + 8|0))>>2] = $67;
                  HEAP32[22576>>2] = ((17296 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(495,($this|0),(22576|0));
                  $72 = __THREW__; __THREW__ = 0;
                  $73 = $72&1;
                  if ($73) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22560 + 4|0))>>2] = 0;
                  HEAP32[22560>>2] = ((18944 + 8|0));
                  __THREW__ = 0;
                  $74 = (invoke_i(430)|0);
                  $75 = __THREW__; __THREW__ = 0;
                  $76 = $75&1;
                  if ($76) {
                   $77 = ___cxa_find_matching_catch()|0;
                   $78 = tempRet0;
                   $eh$lpad$body$index3Z2D = $78;$eh$lpad$body$indexZ2D = $77;
                   break;
                  }
                  HEAP32[((22560 + 8|0))>>2] = $74;
                  HEAP32[22560>>2] = ((17328 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(496,($this|0),(22560|0));
                  $79 = __THREW__; __THREW__ = 0;
                  $80 = $79&1;
                  if ($80) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22552 + 4|0))>>2] = 0;
                  HEAP32[22552>>2] = ((17840 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(497,($this|0),(22552|0));
                  $81 = __THREW__; __THREW__ = 0;
                  $82 = $81&1;
                  if ($82) {
                   label = 41;
                   break;
                  }
                  HEAP32[((22544 + 4|0))>>2] = 0;
                  HEAP32[22544>>2] = ((17880 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(498,($this|0),(22544|0));
                  $83 = __THREW__; __THREW__ = 0;
                  $84 = $83&1;
                  if ($84) {
                   label = 41;
                   break;
                  }
                  return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 41) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $eh$lpad$body$index3Z2D = $90;$eh$lpad$body$indexZ2D = $89;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17992>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17992|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(499)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((17992|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[17984>>2] = 17976;
     ___cxa_guard_release((17992|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[17984>>2]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(500,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if (!($14)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  $$pre2 = HEAP32[$0>>2]|0;
  $20 = $$pre2;
 }
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((17952 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $18 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $10 = $18;$12 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $10 = $$pre;$12 = $$pre2;
   }
   $9 = (($i$01) + 1)|0;
   $11 = $10;
   $13 = $12;
   $14 = (($11) - ($13))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $18 = $10;$6 = $12;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = (($this) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(26752|0),(353|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(22384,1);
 HEAP32[17976>>2] = 22384;
 return (17976|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[18000>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (18000|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18016>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18016|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(501)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((18016|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[18008>>2] = 18000;
     ___cxa_guard_release((18016|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[18008>>2]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(502)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (503);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,504);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = (($1) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[18024>>2]|0;HEAP32[18024>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(505)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $low5 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low5))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$012 = $low;$$03 = $vec;
  while(1) {
   $5 = HEAP32[$$012>>2]|0;
   $isascii = ($5>>>0)<(128);
   if ($isascii) {
    $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $7 = (($6) + ($5<<1)|0);
    $8 = HEAP16[$7>>1]|0;
    $9 = $8;
   } else {
    $9 = 0;
   }
   HEAP16[$$03>>1] = $9;
   $10 = (($$012) + 4|0);
   $11 = (($$03) + 2|0);
   $12 = ($10|0)==($high|0);
   if ($12) {
    break;
   } else {
    $$012 = $10;$$03 = $11;
   }
  }
  $scevgep7 = (($low) + ($4<<2)|0);
  $$01$lcssa = $scevgep7;
 }
 return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$01 = $low;
  while(1) {
   $1 = HEAP32[$$01>>2]|0;
   $isascii = ($1>>>0)<(128);
   if ($isascii) {
    $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $3 = (($2) + ($1<<1)|0);
    $4 = HEAP16[$3>>1]|0;
    $5 = $4 & $m;
    $6 = ($5<<16>>16)==(0);
    if (!($6)) {
     $$0$lcssa$ph = $$01;
     break;
    }
   }
   $7 = (($$01) + 4|0);
   $8 = ($7|0)==($high|0);
   if ($8) {
    $$0$lcssa$ph = $high;
    break;
   } else {
    $$01 = $7;
   }
  }
  $$0$lcssa = $$0$lcssa$ph;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$01 = $low;
  while(1) {
   $3 = HEAP32[$$01>>2]|0;
   $isascii = ($3>>>0)<(128);
   if (!($isascii)) {
    $$0$lcssa$ph = $$01;
    break;
   }
   $4 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $5 = (($4) + ($3<<1)|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = $6 & $m;
   $8 = ($7<<16>>16)==(0);
   $1 = (($$01) + 4|0);
   if ($8) {
    $$0$lcssa$ph = $$01;
    break;
   }
   $2 = ($1|0)==($high|0);
   if ($2) {
    $$0$lcssa$ph = $high;
    break;
   } else {
    $$01 = $1;
   }
  }
  $$0$lcssa = $$0$lcssa$ph;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(506)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $low3 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low3))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$01 = $low;
  while(1) {
   $5 = HEAP32[$$01>>2]|0;
   $isascii = ($5>>>0)<(128);
   if ($isascii) {
    $6 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8;
   } else {
    $9 = $5;
   }
   HEAP32[$$01>>2] = $9;
   $10 = (($$01) + 4|0);
   $11 = ($10|0)==($high|0);
   if ($11) {
    break;
   } else {
    $$01 = $10;
   }
  }
  $scevgep5 = (($low) + ($4<<2)|0);
  $$0$lcssa = $scevgep5;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(507)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $low3 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low3))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$01 = $low;
  while(1) {
   $5 = HEAP32[$$01>>2]|0;
   $isascii = ($5>>>0)<(128);
   if ($isascii) {
    $6 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8;
   } else {
    $9 = $5;
   }
   HEAP32[$$01>>2] = $9;
   $10 = (($$01) + 4|0);
   $11 = ($10|0)==($high|0);
   if ($11) {
    break;
   } else {
    $$01 = $10;
   }
  }
  $scevgep5 = (($low) + ($4<<2)|0);
  $$0$lcssa = $scevgep5;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   $2 = $1 << 24 >> 24;
   HEAP32[$$03>>2] = $2;
   $3 = (($$012) + 1|0);
   $4 = (($$03) + 4|0);
   $5 = ($3|0)==($high|0);
   if ($5) {
    break;
   } else {
    $$012 = $3;$$03 = $4;
   }
  }
  $$01$lcssa = $high;
 }
 return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $low5 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low5))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$012 = $low;$$03 = $dest;
  while(1) {
   $5 = HEAP32[$$012>>2]|0;
   $isascii = ($5>>>0)<(128);
   $6 = $5&255;
   $$dfault = $isascii ? $6 : $dfault;
   HEAP8[$$03>>0] = $$dfault;
   $7 = (($$012) + 4|0);
   $8 = (($$03) + 1|0);
   $9 = ($7|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$012 = $7;$$03 = $8;
   }
  }
  $scevgep7 = (($low) + ($4<<2)|0);
  $$01$lcssa = $scevgep7;
 }
 return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18048 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = (($$02) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
  $$0$lcssa = $high;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = (($$02) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
  $$0$lcssa = $high;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
  $$01$lcssa = $high;
 }
 return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$013 = $low;$$04 = $dest;
  while(1) {
   $1 = HEAP8[$$013>>0]|0;
   $isascii2 = ($1<<24>>24)>(-1);
   $$dfault = $isascii2 ? $1 : $dfault;
   HEAP8[$$04>>0] = $$dfault;
   $2 = (($$013) + 1|0);
   $3 = (($$04) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$013 = $2;$$04 = $3;
   }
  }
  $$01$lcssa = $high;
 }
 return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((18120 + 8|0));
 __THREW__ = 0;
 $2 = (invoke_i(430)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = (($this) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0$ph = 0, $$0150 = 0, $$0150$lcssa108 = 0, $$0249 = 0, $$0249$lcssa115 = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$136 = 0, $$lcssa = 0, $$lcssa121 = 0, $$lcssa129 = 0, $$lcssa131 = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre103 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $108$phi = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$055 = 0, $fend$151 = 0, $fend$2$lcssa = 0, $fend$2$lcssa$ph = 0, $fend$242 = 0, $fend$3 = 0;
 var $n$038 = 0, $not$ = 0, $or$cond = 0, $or$cond48 = 0, $p$039 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $113 = $frm;
   label = 58;
  } else {
   $fend$055 = $frm;
   while(1) {
    $3 = HEAP32[$fend$055>>2]|0;
    $4 = ($3|0)==(0);
    $1 = (($fend$055) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$055;
     break;
    }
    $2 = ($1|0)==($frm_end|0);
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$055 = $1;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond48 = $0 | $5;
   if ($or$cond48) {
    $113 = $frm;
    label = 58;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0150 = $frm;$$0249 = $to;$fend$151 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$151;
     $19 = $$0150;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0249;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(508,($$0249|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$lcssa121 = $25;
      label = 12;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(446,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 11;
       break;
      }
     }
     if ((($26|0) == -1)) {
      $$0150$lcssa108 = $$0150;$$0249$lcssa115 = $$0249;
      label = 17;
      break;
     } else if ((($26|0) == 0)) {
      $$0$ph = 1;
      label = 59;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 56;
      break;
     }
     $71 = ($fend$151|0)==($frm_end|0);
     if ($71) {
      $$pre100 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre100;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(509,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       $$lcssa129 = $73;
       label = 38;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(446,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 37;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0$ph = 2;
       label = 59;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0$ph = 1;
       label = 59;
       break;
      }
      $94 = ($74|0)==(0);
      if (!($94)) {
       $97 = $90;$n$038 = $74;$p$039 = $tmp;
       while(1) {
        $95 = HEAP8[$p$039>>0]|0;
        $96 = (($97) + 1|0);
        HEAP32[$to_nxt>>2] = $96;
        HEAP8[$97>>0] = $95;
        $98 = (($n$038) + -1)|0;
        $99 = ($98|0)==(0);
        if ($99) {
         break;
        }
        $100 = (($p$039) + 1|0);
        $$pre103 = HEAP32[$to_nxt>>2]|0;
        $97 = $$pre103;$n$038 = $98;$p$039 = $100;
       }
      }
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      if ($103) {
       $fend$2$lcssa = $frm_end;
      } else {
       $108 = $101;$fend$242 = $102;
       while(1) {
        $106 = HEAP32[$fend$242>>2]|0;
        $107 = ($106|0)==(0);
        $104 = (($108) + 8|0);
        if ($107) {
         $fend$2$lcssa$ph = $fend$242;
         break;
        }
        $105 = ($104|0)==($frm_end|0);
        if ($105) {
         $fend$2$lcssa$ph = $frm_end;
         break;
        } else {
         $108$phi = $fend$242;$fend$242 = $104;$108 = $108$phi;
        }
       }
       $fend$2$lcssa = $fend$2$lcssa$ph;
      }
      $$pre101 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre101;$fend$3 = $fend$2$lcssa;
     }
     $110 = ($109|0)==($frm_end|0);
     $112 = ($111|0)==($to_end|0);
     $or$cond = $110 | $112;
     if ($or$cond) {
      $$lcssa131 = $109;
      label = 57;
      break;
     } else {
      $$0150 = $109;$$0249 = $111;$fend$151 = $fend$3;
     }
    }
    if ((label|0) == 11) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 12) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($$lcssa121|0)==(0|0);
     if (!($36)) {
      __THREW__ = 0;
      (invoke_ii(446,($$lcssa121|0))|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       $39 = ___cxa_find_matching_catch(0|0)|0;
       $40 = tempRet0;
       ___clang_call_terminate($39);
       // unreachable;
      }
     }
     ___resumeException($34|0);
     // unreachable;
    }
    else if ((label|0) == 17) {
     HEAP32[$to_nxt>>2] = $$0249$lcssa115;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0150$lcssa108|0)==($41|0);
     do {
      if ($42) {
       $$1$lcssa = $$0150$lcssa108;
      } else {
       $$136 = $$0150$lcssa108;$46 = $$0249$lcssa115;
       while(1) {
        $43 = HEAP32[$$136>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(509,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $$lcssa = $45;
         label = 23;
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(446,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 22;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa$ph = $$136;
         label = 29;
         break;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$136) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa$ph = $65;
         label = 29;
         break;
        } else {
         $$136 = $65;$46 = $64;
        }
       }
       if ((label|0) == 22) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 23) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($$lcssa|0)==(0|0);
        if (!($57)) {
         __THREW__ = 0;
         (invoke_ii(446,($$lcssa|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          $60 = ___cxa_find_matching_catch(0|0)|0;
          $61 = tempRet0;
          ___clang_call_terminate($60);
          // unreachable;
         }
        }
        ___resumeException($55|0);
        // unreachable;
       }
       else if ((label|0) == 29) {
        $$1$lcssa = $$1$lcssa$ph;
        break;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     break;
    }
    else if ((label|0) == 37) {
     $80 = ___cxa_find_matching_catch(0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $84 = ($$lcssa129|0)==(0|0);
     if (!($84)) {
      __THREW__ = 0;
      (invoke_ii(446,($$lcssa129|0))|0);
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if ($86) {
       $87 = ___cxa_find_matching_catch(0|0)|0;
       $88 = tempRet0;
       ___clang_call_terminate($87);
       // unreachable;
      }
     }
     ___resumeException($82|0);
     // unreachable;
    }
    else if ((label|0) == 56) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $113 = $$pre;
     label = 58;
     break;
    }
    else if ((label|0) == 57) {
     $113 = $$lcssa131;
     label = 58;
     break;
    }
    else if ((label|0) == 59) {
     $$0 = $$0$ph;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $not$ = ($113|0)!=($frm_end|0);
  $114 = $not$&1;
  $$0 = $114;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0157 = 0, $$0157$lcssa128 = 0, $$0256 = 0, $$0256$lcssa135 = 0, $$1$lcssa = 0, $$148 = 0, $$148$lcssa120 = 0, $$148$lcssa121 = 0, $$2 = 0, $$2$lcssa = 0, $$lcssa = 0, $$lcssa143 = 0, $$lcssa149 = 0, $$lcssa157 = 0, $$lcssa159 = 0, $$pre = 0, $$pre116 = 0, $$pre117 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $100$phi = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$062 = 0, $fend$158 = 0, $fend$2$lcssa = 0, $fend$2$lcssa$ph = 0, $fend$249 = 0, $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond55 = 0, $save_state = 0, $storemerge47 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $105 = $frm;
   label = 55;
  } else {
   $fend$062 = $frm;
   while(1) {
    $3 = HEAP8[$fend$062>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $1 = (($fend$062) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$062;
     break;
    }
    $2 = ($1|0)==($frm_end|0);
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$062 = $1;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond55 = $0 | $5;
   if ($or$cond55) {
    $105 = $frm;
    label = 55;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0157 = $frm;$$0256 = $to;$fend$158 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$158;
     $19 = $$0157;
     $20 = (($18) - ($19))|0;
     $21 = $$0256;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(510,($$0256|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$lcssa149 = $25;
      label = 12;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(446,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 11;
       break;
      }
     }
     if ((($26|0) == 0)) {
      label = 56;
      break;
     } else if ((($26|0) == -1)) {
      $$0157$lcssa128 = $$0157;$$0256$lcssa135 = $$0256;$$lcssa143 = $18;
      label = 17;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 53;
      break;
     }
     $72 = ($fend$158|0)==($frm_end|0);
     $$pre116 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre116;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(511,($70|0),($$pre116|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       $$lcssa157 = $74;
       label = 41;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(446,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 40;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       label = 56;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      if ($95) {
       $fend$2$lcssa = $frm_end;
      } else {
       $100 = $93;$fend$249 = $94;
       while(1) {
        $98 = HEAP8[$fend$249>>0]|0;
        $99 = ($98<<24>>24)==(0);
        $96 = (($100) + 2|0);
        if ($99) {
         $fend$2$lcssa$ph = $fend$249;
         break;
        }
        $97 = ($96|0)==($frm_end|0);
        if ($97) {
         $fend$2$lcssa$ph = $frm_end;
         break;
        } else {
         $100$phi = $fend$249;$fend$249 = $96;$100 = $100$phi;
        }
       }
       $fend$2$lcssa = $fend$2$lcssa$ph;
      }
      $$pre117 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre117;$fend$3 = $fend$2$lcssa;
     }
     $102 = ($101|0)==($frm_end|0);
     $104 = ($103|0)==($to_end|0);
     $or$cond = $102 | $104;
     if ($or$cond) {
      $$lcssa159 = $101;
      label = 54;
      break;
     } else {
      $$0157 = $101;$$0256 = $103;$fend$158 = $fend$3;
     }
    }
    if ((label|0) == 11) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 12) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($$lcssa149|0)==(0|0);
     if (!($36)) {
      __THREW__ = 0;
      (invoke_ii(446,($$lcssa149|0))|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       $39 = ___cxa_find_matching_catch(0|0)|0;
       $40 = tempRet0;
       ___clang_call_terminate($39);
       // unreachable;
      }
     }
     ___resumeException($34|0);
     // unreachable;
    }
    else if ((label|0) == 17) {
     HEAP32[$to_nxt>>2] = $$0256$lcssa135;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0157$lcssa128|0)==($41|0);
     do {
      if ($42) {
       $$1$lcssa = $$0157$lcssa128;
      } else {
       $$148 = $$0157$lcssa128;$storemerge47 = $$0256$lcssa135;
       while(1) {
        $43 = $$148;
        $44 = (($$lcssa143) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(511,($storemerge47|0),($$148|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $$lcssa = $46;
         label = 23;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(446,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 22;
          break;
         }
        }
        if ((($47|0) == 0)) {
         $62 = (($$148) + 1|0);
         $$2 = $62;
        } else if ((($47|0) == -1)) {
         $$148$lcssa120 = $$148;
         label = 29;
         break;
        } else if ((($47|0) == -2)) {
         $$148$lcssa121 = $$148;
         label = 30;
         break;
        } else {
         $63 = (($$148) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$2$lcssa = $$2;
         label = 33;
         break;
        } else {
         $$148 = $$2;$storemerge47 = $65;
        }
       }
       if ((label|0) == 22) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 23) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($$lcssa|0)==(0|0);
        if (!($57)) {
         __THREW__ = 0;
         (invoke_ii(446,($$lcssa|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          $60 = ___cxa_find_matching_catch(0|0)|0;
          $61 = tempRet0;
          ___clang_call_terminate($60);
          // unreachable;
         }
        }
        ___resumeException($55|0);
        // unreachable;
       }
       else if ((label|0) == 29) {
        HEAP32[$frm_nxt>>2] = $$148$lcssa120;
        $$0 = 2;
        break L1;
       }
       else if ((label|0) == 30) {
        HEAP32[$frm_nxt>>2] = $$148$lcssa121;
        $$0 = 1;
        break L1;
       }
       else if ((label|0) == 33) {
        $$1$lcssa = $$2$lcssa;
        break;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     break;
    }
    else if ((label|0) == 40) {
     $81 = ___cxa_find_matching_catch(0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 41) {
     $83 = ___cxa_find_matching_catch()|0;
     $84 = tempRet0;
     $85 = ($$lcssa157|0)==(0|0);
     if (!($85)) {
      __THREW__ = 0;
      (invoke_ii(446,($$lcssa157|0))|0);
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $88 = ___cxa_find_matching_catch(0|0)|0;
       $89 = tempRet0;
       ___clang_call_terminate($88);
       // unreachable;
      }
     }
     ___resumeException($83|0);
     // unreachable;
    }
    else if ((label|0) == 53) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $105 = $$pre;
     label = 55;
     break;
    }
    else if ((label|0) == 54) {
     $105 = $$lcssa159;
     label = 55;
     break;
    }
    else if ((label|0) == 56) {
     $$0 = 2;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 55) {
  $not$ = ($105|0)!=($frm_end|0);
  $106 = $not$&1;
  $$0 = $106;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(509,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(446,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(446,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
 } else {
  $18 = (($3) + -1)|0;
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = $to_end;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $23 = ($18>>>0)>($22>>>0);
  if ($23) {
   $$0 = 1;
  } else {
   $24 = ($18|0)==(0);
   if ($24) {
    $$0 = 0;
   } else {
    $27 = $19;$n$02 = $18;$p$03 = $tmp;
    while(1) {
     $25 = HEAP8[$p$03>>0]|0;
     $26 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $26;
     HEAP8[$27>>0] = $25;
     $28 = (($n$02) + -1)|0;
     $29 = ($28|0)==(0);
     if ($29) {
      break;
     }
     $30 = (($p$03) + 1|0);
     $$pre = HEAP32[$to_nxt>>2]|0;
     $27 = $$pre;$n$02 = $28;$p$03 = $30;
    }
    $$0 = 0;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(446,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(512,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(446,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(446,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(446,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(446,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$0$lcssa$ph = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 do {
  if ($or$cond5) {
   $nbytes$0$lcssa = 0;
  } else {
   $2 = $frm_end;
   $3 = (($this) + 8|0);
   $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
   while(1) {
    $4 = $$016;
    $5 = (($2) - ($4))|0;
    $6 = HEAP32[$3>>2]|0;
    $7 = (_uselocale(($6|0))|0);
    __THREW__ = 0;
    $8 = (invoke_iiii(513,($$016|0),($5|0),($st|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $$lcssa = $7;
     label = 7;
     break;
    }
    $11 = ($7|0)==(0|0);
    if (!($11)) {
     __THREW__ = 0;
     (invoke_ii(446,($7|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 6;
      break;
     }
    }
    if ((($8|0) == 0)) {
     $23 = (($$016) + 1|0);
     $$1 = $23;$$pn = 1;
    } else if ((($8|0) == -2) | (($8|0) == -1)) {
     $nbytes$0$lcssa$ph = $nbytes$07;
     label = 15;
     break;
    } else {
     $24 = (($$016) + ($8)|0);
     $$1 = $24;$$pn = $8;
    }
    $nbytes$1 = (($$pn) + ($nbytes$07))|0;
    $25 = (($nwchar_t$08) + 1)|0;
    $26 = ($25>>>0)>=($mx>>>0);
    $27 = ($$1|0)==($frm_end|0);
    $or$cond = $26 | $27;
    if ($or$cond) {
     $nbytes$0$lcssa$ph = $nbytes$1;
     label = 15;
     break;
    } else {
     $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
    }
   }
   if ((label|0) == 6) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   else if ((label|0) == 7) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $18 = ($$lcssa|0)==(0|0);
    if (!($18)) {
     __THREW__ = 0;
     (invoke_ii(446,($$lcssa|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $21 = ___cxa_find_matching_catch(0|0)|0;
      $22 = tempRet0;
      ___clang_call_terminate($21);
      // unreachable;
     }
    }
    ___resumeException($16|0);
    // unreachable;
   }
   else if ((label|0) == 15) {
    $nbytes$0$lcssa = $nbytes$0$lcssa$ph;
    break;
   }
  }
 } while(0);
 return ($nbytes$0$lcssa|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(446,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(446,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18200 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18240 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,18280,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(18288)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,18288,$0);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,18312,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(18320)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,18320,$0);
 return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0 = 0;
 } else if ((($2|0) == 64)) {
  $$0 = 8;
 } else if ((($2|0) == 8)) {
  $$0 = 16;
 } else {
  $$0 = 10;
 }
 return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18352>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18352|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[25552>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((25552|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((25384|0),0,168)|0;
      (___cxa_atexit((514|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((25552|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(515,(25384|0),(25560|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(515,(((25384 + 12|0))|0),(25568|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      __THREW__ = 0;
      (invoke_iii(515,(((25384 + 24|0))|0),(25576|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_iii(515,(((25384 + 36|0))|0),(25584|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        __THREW__ = 0;
        (invoke_iii(515,(((25384 + 48|0))|0),(25600|0))|0);
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if (!($17)) {
         __THREW__ = 0;
         (invoke_iii(515,(((25384 + 60|0))|0),(25616|0))|0);
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if (!($19)) {
          __THREW__ = 0;
          (invoke_iii(515,(((25384 + 72|0))|0),(25624|0))|0);
          $20 = __THREW__; __THREW__ = 0;
          $21 = $20&1;
          if (!($21)) {
           __THREW__ = 0;
           (invoke_iii(515,(((25384 + 84|0))|0),(25640|0))|0);
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           if (!($23)) {
            __THREW__ = 0;
            (invoke_iii(515,(((25384 + 96|0))|0),(25648|0))|0);
            $24 = __THREW__; __THREW__ = 0;
            $25 = $24&1;
            if (!($25)) {
             __THREW__ = 0;
             (invoke_iii(515,(((25384 + 108|0))|0),(25656|0))|0);
             $26 = __THREW__; __THREW__ = 0;
             $27 = $26&1;
             if (!($27)) {
              __THREW__ = 0;
              (invoke_iii(515,(((25384 + 120|0))|0),(25664|0))|0);
              $28 = __THREW__; __THREW__ = 0;
              $29 = $28&1;
              if (!($29)) {
               __THREW__ = 0;
               (invoke_iii(515,(((25384 + 132|0))|0),(25672|0))|0);
               $30 = __THREW__; __THREW__ = 0;
               $31 = $30&1;
               if (!($31)) {
                __THREW__ = 0;
                (invoke_iii(515,(((25384 + 144|0))|0),(25680|0))|0);
                $32 = __THREW__; __THREW__ = 0;
                $33 = $32&1;
                if (!($33)) {
                 __THREW__ = 0;
                 (invoke_iii(515,(((25384 + 156|0))|0),(25688|0))|0);
                 $34 = __THREW__; __THREW__ = 0;
                 $35 = $34&1;
                 if (!($35)) {
                  HEAP32[18344>>2] = 25384;
                  ___cxa_guard_release((18352|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    ___cxa_guard_abort((18352|0));
    ___resumeException($37|0);
    // unreachable;
   }
  }
 } while(0);
 $36 = HEAP32[18344>>2]|0;
 return ($36|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18368>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18368|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[25016>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((25016|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((24848|0),0,168)|0;
      (___cxa_atexit((516|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((25016|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(517,(24848|0),(25024|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(517,(((24848 + 12|0))|0),(25056|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      __THREW__ = 0;
      (invoke_iii(517,(((24848 + 24|0))|0),(25088|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_iii(517,(((24848 + 36|0))|0),(25120|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        __THREW__ = 0;
        (invoke_iii(517,(((24848 + 48|0))|0),(25160|0))|0);
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if (!($17)) {
         __THREW__ = 0;
         (invoke_iii(517,(((24848 + 60|0))|0),(25200|0))|0);
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if (!($19)) {
          __THREW__ = 0;
          (invoke_iii(517,(((24848 + 72|0))|0),(25232|0))|0);
          $20 = __THREW__; __THREW__ = 0;
          $21 = $20&1;
          if (!($21)) {
           __THREW__ = 0;
           (invoke_iii(517,(((24848 + 84|0))|0),(25272|0))|0);
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           if (!($23)) {
            __THREW__ = 0;
            (invoke_iii(517,(((24848 + 96|0))|0),(25288|0))|0);
            $24 = __THREW__; __THREW__ = 0;
            $25 = $24&1;
            if (!($25)) {
             __THREW__ = 0;
             (invoke_iii(517,(((24848 + 108|0))|0),(25304|0))|0);
             $26 = __THREW__; __THREW__ = 0;
             $27 = $26&1;
             if (!($27)) {
              __THREW__ = 0;
              (invoke_iii(517,(((24848 + 120|0))|0),(25320|0))|0);
              $28 = __THREW__; __THREW__ = 0;
              $29 = $28&1;
              if (!($29)) {
               __THREW__ = 0;
               (invoke_iii(517,(((24848 + 132|0))|0),(25336|0))|0);
               $30 = __THREW__; __THREW__ = 0;
               $31 = $30&1;
               if (!($31)) {
                __THREW__ = 0;
                (invoke_iii(517,(((24848 + 144|0))|0),(25352|0))|0);
                $32 = __THREW__; __THREW__ = 0;
                $33 = $32&1;
                if (!($33)) {
                 __THREW__ = 0;
                 (invoke_iii(517,(((24848 + 156|0))|0),(25368|0))|0);
                 $34 = __THREW__; __THREW__ = 0;
                 $35 = $34&1;
                 if (!($35)) {
                  HEAP32[18360>>2] = 24848;
                  ___cxa_guard_release((18368|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    ___cxa_guard_abort((18368|0));
    ___resumeException($37|0);
    // unreachable;
   }
  }
 } while(0);
 $36 = HEAP32[18360>>2]|0;
 return ($36|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18384>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18384|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[24624>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((24624|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((24336|0),0,288)|0;
      (___cxa_atexit((518|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((24624|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(515,(24336|0),(24632|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    do {
     if (!($9)) {
      __THREW__ = 0;
      (invoke_iii(515,(((24336 + 12|0))|0),(24640|0))|0);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       (invoke_iii(515,(((24336 + 24|0))|0),(24656|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        __THREW__ = 0;
        (invoke_iii(515,(((24336 + 36|0))|0),(24664|0))|0);
        $14 = __THREW__; __THREW__ = 0;
        $15 = $14&1;
        if (!($15)) {
         __THREW__ = 0;
         (invoke_iii(515,(((24336 + 48|0))|0),(24672|0))|0);
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if (!($17)) {
          __THREW__ = 0;
          (invoke_iii(515,(((24336 + 60|0))|0),(24680|0))|0);
          $18 = __THREW__; __THREW__ = 0;
          $19 = $18&1;
          if (!($19)) {
           __THREW__ = 0;
           (invoke_iii(515,(((24336 + 72|0))|0),(24688|0))|0);
           $20 = __THREW__; __THREW__ = 0;
           $21 = $20&1;
           if (!($21)) {
            __THREW__ = 0;
            (invoke_iii(515,(((24336 + 84|0))|0),(24696|0))|0);
            $22 = __THREW__; __THREW__ = 0;
            $23 = $22&1;
            if (!($23)) {
             __THREW__ = 0;
             (invoke_iii(515,(((24336 + 96|0))|0),(24704|0))|0);
             $24 = __THREW__; __THREW__ = 0;
             $25 = $24&1;
             if (!($25)) {
              __THREW__ = 0;
              (invoke_iii(515,(((24336 + 108|0))|0),(24720|0))|0);
              $26 = __THREW__; __THREW__ = 0;
              $27 = $26&1;
              if (!($27)) {
               __THREW__ = 0;
               (invoke_iii(515,(((24336 + 120|0))|0),(24728|0))|0);
               $28 = __THREW__; __THREW__ = 0;
               $29 = $28&1;
               if (!($29)) {
                __THREW__ = 0;
                (invoke_iii(515,(((24336 + 132|0))|0),(24744|0))|0);
                $30 = __THREW__; __THREW__ = 0;
                $31 = $30&1;
                if (!($31)) {
                 __THREW__ = 0;
                 (invoke_iii(515,(((24336 + 144|0))|0),(24760|0))|0);
                 $32 = __THREW__; __THREW__ = 0;
                 $33 = $32&1;
                 if (!($33)) {
                  __THREW__ = 0;
                  (invoke_iii(515,(((24336 + 156|0))|0),(24768|0))|0);
                  $34 = __THREW__; __THREW__ = 0;
                  $35 = $34&1;
                  if (!($35)) {
                   __THREW__ = 0;
                   (invoke_iii(515,(((24336 + 168|0))|0),(24776|0))|0);
                   $36 = __THREW__; __THREW__ = 0;
                   $37 = $36&1;
                   if (!($37)) {
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 180|0))|0),(24784|0))|0);
                    $38 = __THREW__; __THREW__ = 0;
                    $39 = $38&1;
                    if ($39) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 192|0))|0),(24672|0))|0);
                    $40 = __THREW__; __THREW__ = 0;
                    $41 = $40&1;
                    if ($41) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 204|0))|0),(24792|0))|0);
                    $42 = __THREW__; __THREW__ = 0;
                    $43 = $42&1;
                    if ($43) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 216|0))|0),(24800|0))|0);
                    $44 = __THREW__; __THREW__ = 0;
                    $45 = $44&1;
                    if ($45) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 228|0))|0),(24808|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if ($47) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 240|0))|0),(24816|0))|0);
                    $48 = __THREW__; __THREW__ = 0;
                    $49 = $48&1;
                    if ($49) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 252|0))|0),(24824|0))|0);
                    $50 = __THREW__; __THREW__ = 0;
                    $51 = $50&1;
                    if ($51) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 264|0))|0),(24832|0))|0);
                    $52 = __THREW__; __THREW__ = 0;
                    $53 = $52&1;
                    if ($53) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(515,(((24336 + 276|0))|0),(24840|0))|0);
                    $54 = __THREW__; __THREW__ = 0;
                    $55 = $54&1;
                    if ($55) {
                     break;
                    }
                    HEAP32[18376>>2] = 24336;
                    ___cxa_guard_release((18384|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    ___cxa_guard_abort((18384|0));
    ___resumeException($57|0);
    // unreachable;
   }
  }
 } while(0);
 $56 = HEAP32[18376>>2]|0;
 return ($56|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18400>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18400|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[23784>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((23784|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((23496|0),0,288)|0;
      (___cxa_atexit((519|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((23784|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(517,(23496|0),(23792|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    do {
     if (!($9)) {
      __THREW__ = 0;
      (invoke_iii(517,(((23496 + 12|0))|0),(23824|0))|0);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       (invoke_iii(517,(((23496 + 24|0))|0),(23864|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        __THREW__ = 0;
        (invoke_iii(517,(((23496 + 36|0))|0),(23888|0))|0);
        $14 = __THREW__; __THREW__ = 0;
        $15 = $14&1;
        if (!($15)) {
         __THREW__ = 0;
         (invoke_iii(517,(((23496 + 48|0))|0),(23912|0))|0);
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if (!($17)) {
          __THREW__ = 0;
          (invoke_iii(517,(((23496 + 60|0))|0),(23928|0))|0);
          $18 = __THREW__; __THREW__ = 0;
          $19 = $18&1;
          if (!($19)) {
           __THREW__ = 0;
           (invoke_iii(517,(((23496 + 72|0))|0),(23952|0))|0);
           $20 = __THREW__; __THREW__ = 0;
           $21 = $20&1;
           if (!($21)) {
            __THREW__ = 0;
            (invoke_iii(517,(((23496 + 84|0))|0),(23976|0))|0);
            $22 = __THREW__; __THREW__ = 0;
            $23 = $22&1;
            if (!($23)) {
             __THREW__ = 0;
             (invoke_iii(517,(((23496 + 96|0))|0),(24008|0))|0);
             $24 = __THREW__; __THREW__ = 0;
             $25 = $24&1;
             if (!($25)) {
              __THREW__ = 0;
              (invoke_iii(517,(((23496 + 108|0))|0),(24048|0))|0);
              $26 = __THREW__; __THREW__ = 0;
              $27 = $26&1;
              if (!($27)) {
               __THREW__ = 0;
               (invoke_iii(517,(((23496 + 120|0))|0),(24080|0))|0);
               $28 = __THREW__; __THREW__ = 0;
               $29 = $28&1;
               if (!($29)) {
                __THREW__ = 0;
                (invoke_iii(517,(((23496 + 132|0))|0),(24120|0))|0);
                $30 = __THREW__; __THREW__ = 0;
                $31 = $30&1;
                if (!($31)) {
                 __THREW__ = 0;
                 (invoke_iii(517,(((23496 + 144|0))|0),(24160|0))|0);
                 $32 = __THREW__; __THREW__ = 0;
                 $33 = $32&1;
                 if (!($33)) {
                  __THREW__ = 0;
                  (invoke_iii(517,(((23496 + 156|0))|0),(24176|0))|0);
                  $34 = __THREW__; __THREW__ = 0;
                  $35 = $34&1;
                  if (!($35)) {
                   __THREW__ = 0;
                   (invoke_iii(517,(((23496 + 168|0))|0),(24192|0))|0);
                   $36 = __THREW__; __THREW__ = 0;
                   $37 = $36&1;
                   if (!($37)) {
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 180|0))|0),(24208|0))|0);
                    $38 = __THREW__; __THREW__ = 0;
                    $39 = $38&1;
                    if ($39) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 192|0))|0),(23912|0))|0);
                    $40 = __THREW__; __THREW__ = 0;
                    $41 = $40&1;
                    if ($41) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 204|0))|0),(24224|0))|0);
                    $42 = __THREW__; __THREW__ = 0;
                    $43 = $42&1;
                    if ($43) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 216|0))|0),(24240|0))|0);
                    $44 = __THREW__; __THREW__ = 0;
                    $45 = $44&1;
                    if ($45) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 228|0))|0),(24256|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if ($47) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 240|0))|0),(24272|0))|0);
                    $48 = __THREW__; __THREW__ = 0;
                    $49 = $48&1;
                    if ($49) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 252|0))|0),(24288|0))|0);
                    $50 = __THREW__; __THREW__ = 0;
                    $51 = $50&1;
                    if ($51) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 264|0))|0),(24304|0))|0);
                    $52 = __THREW__; __THREW__ = 0;
                    $53 = $52&1;
                    if ($53) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(517,(((23496 + 276|0))|0),(24320|0))|0);
                    $54 = __THREW__; __THREW__ = 0;
                    $55 = $54&1;
                    if ($55) {
                     break;
                    }
                    HEAP32[18392>>2] = 23496;
                    ___cxa_guard_release((18400|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    ___cxa_guard_abort((18400|0));
    ___resumeException($57|0);
    // unreachable;
   }
  }
 } while(0);
 $56 = HEAP32[18392>>2]|0;
 return ($56|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18416>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18416|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[23472>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((23472|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((23184|0),0,288)|0;
      (___cxa_atexit((520|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((23472|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(515,(23184|0),(23480|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(515,(((23184 + 12|0))|0),(23488|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[18408>>2] = 23184;
      ___cxa_guard_release((18416|0));
      break;
     }
    }
    $13 = ___cxa_find_matching_catch()|0;
    $14 = tempRet0;
    ___cxa_guard_abort((18416|0));
    ___resumeException($13|0);
    // unreachable;
   }
  }
 } while(0);
 $12 = HEAP32[18408>>2]|0;
 return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18432>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18432|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[23144>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((23144|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((22856|0),0,288)|0;
      (___cxa_atexit((521|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((23144|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(517,(22856|0),(23152|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(517,(((22856 + 12|0))|0),(23168|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[18424>>2] = 22856;
      ___cxa_guard_release((18432|0));
      break;
     }
    }
    $13 = ___cxa_find_matching_catch()|0;
    $14 = tempRet0;
    ___cxa_guard_abort((18432|0));
    ___resumeException($13|0);
    // unreachable;
   }
  }
 } while(0);
 $12 = HEAP32[18424>>2]|0;
 return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18456>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18456|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(469,(18440|0),(18464|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((18456|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((522|0),(18440|0),(___dso_handle|0))|0);
     ___cxa_guard_release((18456|0));
     break;
    }
   }
  }
 } while(0);
 return (18440|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18496>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18496|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(523,(18504|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(524,(18480|0),(18504|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((525|0),(18480|0),(___dso_handle|0))|0);
      ___cxa_guard_release((18496|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18496|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (18480|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18560>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18560|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(469,(18544|0),(18568|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((18560|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((522|0),(18544|0),(___dso_handle|0))|0);
     ___cxa_guard_release((18560|0));
     break;
    }
   }
  }
 } while(0);
 return (18544|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18600>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18600|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(523,(18608|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(524,(18584|0),(18608|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((525|0),(18584|0),(___dso_handle|0))|0);
      ___cxa_guard_release((18600|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18600|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (18584|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18664>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18664|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(469,(18648|0),(18672|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((18664|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((522|0),(18648|0),(___dso_handle|0))|0);
     ___cxa_guard_release((18664|0));
     break;
    }
   }
  }
 } while(0);
 return (18648|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18712>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18712|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(523,(18720|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(524,(18696|0),(18720|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((525|0),(18696|0),(___dso_handle|0))|0);
      ___cxa_guard_release((18712|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18712|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (18696|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18824>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18824|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(469,(18808|0),(18832|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((18824|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((522|0),(18808|0),(___dso_handle|0))|0);
     ___cxa_guard_release((18824|0));
     break;
    }
   }
  }
 } while(0);
 return (18808|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18864>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18864|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(523,(18872|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(524,(18848|0),(18872|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((525|0),(18848|0),(___dso_handle|0))|0);
      ___cxa_guard_release((18864|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18864|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (18848|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18120 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(430)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(444,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((526|0),(14160|0),(___dso_handle|0))|0);
 return;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((14888 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(59,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((14776 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(426,($0|0),(18104|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((14632 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(37,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((14520 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(426,($0|0),(18112|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($2) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
 } else {
  $15 = $__last;
  $16 = (($15) - ($0))|0;
  $$02 = $__first;$__p$01 = $__p$0$ph;
  while(1) {
   $17 = HEAP8[$$02>>0]|0;
   HEAP8[$__p$01>>0] = $17;
   $18 = (($$02) + 1|0);
   $19 = (($__p$01) + 1|0);
   $20 = ($18|0)==($__last|0);
   if ($20) {
    break;
   } else {
    $$02 = $18;$__p$01 = $19;
   }
  }
  $scevgep4 = (($__p$0$ph) + ($16)|0);
  $__p$0$lcssa = $scevgep4;
 }
 HEAP8[$__p$0$lcssa>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
 } else {
  $scevgep = (($__last) + -4|0);
  $17 = $scevgep;
  $18 = (($17) - ($0))|0;
  $19 = $18 >>> 2;
  $20 = (($19) + 1)|0;
  $$02 = $__first;$__p$01 = $__p$0$ph;
  while(1) {
   $21 = HEAP32[$$02>>2]|0;
   HEAP32[$__p$01>>2] = $21;
   $22 = (($$02) + 4|0);
   $23 = (($__p$01) + 4|0);
   $24 = ($22|0)==($__last|0);
   if ($24) {
    break;
   } else {
    $$02 = $22;$__p$01 = $23;
   }
  }
  $scevgep5 = (($__p$0$ph) + ($20<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$030 = 0, $$041 = 0, $$041$lcssa = 0, $$index = 0, $$index15 = 0, $$lcssa = 0, $$lcssa89 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $$pre$i2$i$i16$lcssa = 0, $$pre$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__c$0$lcssa = 0, $__consume$0$off046 = 0, $__consume$1$off0 = 0, $__consume$1$off0$lcssa = 0, $__indx$0 = 0, $__indx$0$lcssa86 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$062 = 0, $__ky1$047 = 0, $__ky2$056 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$060 = 0, $__n_does_match$1 = 0, $__n_does_match$1$lcssa = 0, $__n_does_match$2$ph = 0;
 var $__n_does_match$2$ph$be = 0, $__n_does_match$343 = 0, $__n_does_match$4 = 0, $__n_does_match$4$lcssa = 0, $__n_does_match$554 = 0, $__n_does_match$6 = 0, $__n_does_match$6$lcssa = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$059 = 0, $__n_might_match$1 = 0, $__n_might_match$1$lcssa = 0, $__n_might_match$2$ph = 0, $__n_might_match$342 = 0, $__n_might_match$4 = 0, $__n_might_match$4$lcssa = 0, $__st$061 = 0, $__st$144 = 0, $__st$255 = 0, $__st$340 = 0, $__statbuf = 0;
 var $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $lpad$phi83$index = 0, $lpad$phi83$index2 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(436);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index15 = $10;
   } else {
    $19 = 0;$__status$0 = 0;
    label = 13;
   }
  } else {
   $19 = $5;$__status$0 = $5;
   label = 13;
  }
 } else {
  $19 = 0;$__status$0 = $__statbuf;
  label = 13;
 }
 if ((label|0) == 13) {
  $21 = ($__kb|0)==($__ke|0);
  if ($21) {
   $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
  } else {
   $__ky$062 = $__kb;$__n_does_match$060 = 0;$__n_might_match$059 = $3;$__st$061 = $__status$0;
   while(1) {
    $22 = HEAP8[$__ky$062>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $29 = $28;
    } else {
     $25 = (($__ky$062) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $29 = $26;
    }
    $30 = ($29|0)==(0);
    if ($30) {
     HEAP8[$__st$061>>0] = 2;
     $31 = (($__n_might_match$059) + -1)|0;
     $32 = (($__n_does_match$060) + 1)|0;
     $__n_does_match$1 = $32;$__n_might_match$1 = $31;
    } else {
     HEAP8[$__st$061>>0] = 1;
     $__n_does_match$1 = $__n_does_match$060;$__n_might_match$1 = $__n_might_match$059;
    }
    $33 = (($__ky$062) + 12|0);
    $34 = (($__st$061) + 1|0);
    $35 = ($33|0)==($__ke|0);
    if ($35) {
     $__n_does_match$1$lcssa = $__n_does_match$1;$__n_might_match$1$lcssa = $__n_might_match$1;
     break;
    } else {
     $__ky$062 = $33;$__n_does_match$060 = $__n_does_match$1;$__n_might_match$059 = $__n_might_match$1;$__st$061 = $34;
    }
   }
   $__n_does_match$0$lcssa = $__n_does_match$1$lcssa;$__n_might_match$0$lcssa = $__n_might_match$1$lcssa;
  }
  $__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
  L21: while(1) {
   $__indx$0 = $__indx$0$ph;
   while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $50 = 0;
     } else {
      $38 = (($36) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($36) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = (($43) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 6;
        break L21;
       }
       $49 = ($46|0)==(-1);
       if ($49) {
        HEAP32[$__b>>2] = 0;
        $50 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $50 = $$pre$i$i$i;
        break;
       }
      } else {
       $50 = $36;
      }
     }
    } while(0);
    $51 = ($50|0)==(0|0);
    $52 = HEAP32[$__e>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     $$pre$i2$i$i16 = 0;
    } else {
     $54 = (($52) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($52) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($55|0)==($57|0);
     if ($58) {
      $59 = HEAP32[$52>>2]|0;
      $60 = (($59) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      __THREW__ = 0;
      $62 = (invoke_ii($61|0,($52|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 6;
       break L21;
      }
      $65 = ($62|0)==(-1);
      if ($65) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i16 = 0;
      } else {
       $$pre$i2$i$i16 = $52;
      }
     } else {
      $$pre$i2$i$i16 = $52;
     }
    }
    $66 = ($$pre$i2$i$i16|0)==(0|0);
    $tmp$i$i = $51 ^ $66;
    $67 = ($__n_might_match$2$ph|0)!=(0);
    $$ = $tmp$i$i & $67;
    $68 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     $$lcssa = $66;$$lcssa89 = $68;$$pre$i2$i$i16$lcssa = $$pre$i2$i$i16;
     label = 73;
     break L21;
    }
    $69 = (($68) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($70|0)==($72|0);
    if ($73) {
     $74 = HEAP32[$68>>2]|0;
     $75 = (($74) + 36|0);
     $76 = HEAP32[$75>>2]|0;
     __THREW__ = 0;
     $77 = (invoke_ii($76|0,($68|0))|0);
     $78 = __THREW__; __THREW__ = 0;
     $79 = $78&1;
     if ($79) {
      label = 6;
      break L21;
     } else {
      $$0$i$i = $77;
     }
    } else {
     $80 = HEAP8[$70>>0]|0;
     $81 = $80&255;
     $$0$i$i = $81;
    }
    $82 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $82;
    } else {
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     $86 = (invoke_iii($85|0,($__ct|0),($82|0))|0);
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      label = 6;
      break L21;
     } else {
      $__c$0 = $86;
     }
    }
    $$pre = (($__indx$0) + 1)|0;
    if ($21) {
     $__indx$0 = $$pre;
    } else {
     $$pre$lcssa = $$pre;$__c$0$lcssa = $__c$0;$__indx$0$lcssa86 = $__indx$0;
     break;
    }
   }
   $__consume$0$off046 = 0;$__ky1$047 = $__kb;$__n_does_match$343 = $__n_does_match$2$ph;$__n_might_match$342 = $__n_might_match$2$ph;$__st$144 = $__status$0;
   while(1) {
    $89 = HEAP8[$__st$144>>0]|0;
    $90 = ($89<<24>>24)==(1);
    do {
     if ($90) {
      $91 = HEAP8[$__ky1$047>>0]|0;
      $92 = $91 & 1;
      $93 = ($92<<24>>24)==(0);
      if ($93) {
       $96 = (($__ky1$047) + 1|0);
       $98 = $96;
      } else {
       $94 = (($__ky1$047) + 8|0);
       $95 = HEAP32[$94>>2]|0;
       $98 = $95;
      }
      $97 = (($98) + ($__indx$0$lcssa86)|0);
      $99 = HEAP8[$97>>0]|0;
      if ($__case_sensitive) {
       $__kc$0 = $99;
      } else {
       $100 = HEAP32[$__ct>>2]|0;
       $101 = (($100) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_iii($102|0,($__ct|0),($99|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 5;
        break L21;
       } else {
        $__kc$0 = $103;
       }
      }
      $106 = ($__c$0$lcssa<<24>>24)==($__kc$0<<24>>24);
      if (!($106)) {
       HEAP8[$__st$144>>0] = 0;
       $118 = (($__n_might_match$342) + -1)|0;
       $__consume$1$off0 = $__consume$0$off046;$__n_does_match$4 = $__n_does_match$343;$__n_might_match$4 = $118;
       break;
      }
      $107 = HEAP8[$__ky1$047>>0]|0;
      $108 = $107 & 1;
      $109 = ($108<<24>>24)==(0);
      if ($109) {
       $112 = $107&255;
       $113 = $112 >>> 1;
       $114 = $113;
      } else {
       $110 = (($__ky1$047) + 4|0);
       $111 = HEAP32[$110>>2]|0;
       $114 = $111;
      }
      $115 = ($114|0)==($$pre$lcssa|0);
      if ($115) {
       HEAP8[$__st$144>>0] = 2;
       $116 = (($__n_might_match$342) + -1)|0;
       $117 = (($__n_does_match$343) + 1)|0;
       $__consume$1$off0 = 1;$__n_does_match$4 = $117;$__n_might_match$4 = $116;
      } else {
       $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$343;$__n_might_match$4 = $__n_might_match$342;
      }
     } else {
      $__consume$1$off0 = $__consume$0$off046;$__n_does_match$4 = $__n_does_match$343;$__n_might_match$4 = $__n_might_match$342;
     }
    } while(0);
    $119 = (($__ky1$047) + 12|0);
    $120 = (($__st$144) + 1|0);
    $121 = ($119|0)==($__ke|0);
    if ($121) {
     $__consume$1$off0$lcssa = $__consume$1$off0;$__n_does_match$4$lcssa = $__n_does_match$4;$__n_might_match$4$lcssa = $__n_might_match$4;
     break;
    } else {
     $__consume$0$off046 = $__consume$1$off0;$__ky1$047 = $119;$__n_does_match$343 = $__n_does_match$4;$__n_might_match$342 = $__n_might_match$4;$__st$144 = $120;
    }
   }
   if ($__consume$1$off0$lcssa) {
    $122 = HEAP32[$__b>>2]|0;
    $123 = (($122) + 12|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($122) + 16|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($124|0)==($126|0);
    if ($127) {
     $128 = HEAP32[$122>>2]|0;
     $129 = (($128) + 40|0);
     $130 = HEAP32[$129>>2]|0;
     __THREW__ = 0;
     (invoke_ii($130|0,($122|0))|0);
     $131 = __THREW__; __THREW__ = 0;
     $132 = $131&1;
     if ($132) {
      label = 7;
      break;
     }
    } else {
     $133 = (($124) + 1|0);
     HEAP32[$123>>2] = $133;
    }
    $134 = (($__n_does_match$4$lcssa) + ($__n_might_match$4$lcssa))|0;
    $$not = ($134>>>0)<(2);
    if ($$not) {
     $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
    } else {
     $__ky2$056 = $__kb;$__n_does_match$554 = $__n_does_match$4$lcssa;$__st$255 = $__status$0;
     while(1) {
      $135 = HEAP8[$__st$255>>0]|0;
      $136 = ($135<<24>>24)==(2);
      if ($136) {
       $137 = HEAP8[$__ky2$056>>0]|0;
       $138 = $137 & 1;
       $139 = ($138<<24>>24)==(0);
       if ($139) {
        $142 = $137&255;
        $143 = $142 >>> 1;
        $144 = $143;
       } else {
        $140 = (($__ky2$056) + 4|0);
        $141 = HEAP32[$140>>2]|0;
        $144 = $141;
       }
       $145 = ($144|0)==($$pre$lcssa|0);
       if ($145) {
        $__n_does_match$6 = $__n_does_match$554;
       } else {
        HEAP8[$__st$255>>0] = 0;
        $146 = (($__n_does_match$554) + -1)|0;
        $__n_does_match$6 = $146;
       }
      } else {
       $__n_does_match$6 = $__n_does_match$554;
      }
      $147 = (($__ky2$056) + 12|0);
      $148 = (($__st$255) + 1|0);
      $149 = ($147|0)==($__ke|0);
      if ($149) {
       $__n_does_match$6$lcssa = $__n_does_match$6;
       break;
      } else {
       $__ky2$056 = $147;$__n_does_match$554 = $__n_does_match$6;$__st$255 = $148;
      }
     }
     $__n_does_match$2$ph$be = $__n_does_match$6$lcssa;
    }
   } else {
    $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
   }
   $__indx$0$ph = $$pre$lcssa;$__n_does_match$2$ph = $__n_does_match$2$ph$be;$__n_might_match$2$ph = $__n_might_match$4$lcssa;
  }
  if ((label|0) == 5) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $lpad$phi$index = $11;$lpad$phi$index8 = $12;
  }
  else if ((label|0) == 6) {
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $lpad$phi83$index = $13;$lpad$phi83$index2 = $14;
   label = 8;
  }
  else if ((label|0) == 7) {
   $15 = ___cxa_find_matching_catch()|0;
   $16 = tempRet0;
   $lpad$phi83$index = $15;$lpad$phi83$index2 = $16;
   label = 8;
  }
  else if ((label|0) == 73) {
   $150 = ($$lcssa89|0)==(0|0);
   do {
    if ($150) {
     $163 = 0;
     label = 79;
    } else {
     $151 = (($$lcssa89) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$lcssa89) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$lcssa89>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$lcssa89|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if (!($161)) {
       $162 = ($159|0)==(-1);
       if ($162) {
        HEAP32[$__b>>2] = 0;
        $163 = 0;
        label = 79;
        break;
       } else {
        $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
        $163 = $$pre$i$i$i12;
        label = 79;
        break;
       }
      }
     } else {
      $163 = $$lcssa89;
      label = 79;
     }
    }
   } while(0);
   L99: do {
    if ((label|0) == 79) {
     $164 = ($163|0)==(0|0);
     do {
      if ($$lcssa) {
       label = 85;
      } else {
       $165 = (($$pre$i2$i$i16$lcssa) + 12|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = (($$pre$i2$i$i16$lcssa) + 16|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($166|0)==($168|0);
       if (!($169)) {
        if ($164) {
         break;
        } else {
         label = 87;
         break;
        }
       }
       $170 = HEAP32[$$pre$i2$i$i16$lcssa>>2]|0;
       $171 = (($170) + 36|0);
       $172 = HEAP32[$171>>2]|0;
       __THREW__ = 0;
       $173 = (invoke_ii($172|0,($$pre$i2$i$i16$lcssa|0))|0);
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        break L99;
       }
       $176 = ($173|0)==(-1);
       if ($176) {
        HEAP32[$__e>>2] = 0;
        label = 85;
        break;
       } else {
        if ($164) {
         break;
        } else {
         label = 87;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      if ($164) {
       label = 87;
      }
     }
     if ((label|0) == 87) {
      $177 = HEAP32[$__err>>2]|0;
      $178 = $177 | 2;
      HEAP32[$__err>>2] = $178;
     }
     do {
      if ($21) {
       label = 93;
      } else {
       $$041 = $__kb;$__st$340 = $__status$0;
       while(1) {
        $179 = HEAP8[$__st$340>>0]|0;
        $180 = ($179<<24>>24)==(2);
        if ($180) {
         $$041$lcssa = $$041;
         label = 94;
         break;
        }
        $181 = (($$041) + 12|0);
        $182 = (($__st$340) + 1|0);
        $183 = ($181|0)==($__ke|0);
        if ($183) {
         label = 92;
         break;
        } else {
         $$041 = $181;$__st$340 = $182;
        }
       }
       if ((label|0) == 92) {
        label = 93;
        break;
       }
       else if ((label|0) == 94) {
        $$030 = $$041$lcssa;
        break;
       }
      }
     } while(0);
     if ((label|0) == 93) {
      $184 = HEAP32[$__err>>2]|0;
      $185 = $184 | 4;
      HEAP32[$__err>>2] = $185;
      $$030 = $__ke;
     }
     $186 = ($19|0)==(0|0);
     if (!($186)) {
      _free($19);
     }
     STACKTOP = sp;return ($$030|0);
    }
   } while(0);
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $lpad$phi$index = $17;$lpad$phi$index8 = $18;
  }
  if ((label|0) == 8) {
   $lpad$phi$index = $lpad$phi83$index;$lpad$phi$index8 = $lpad$phi83$index2;
  }
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  } else {
   _free($19);
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  }
 }
 ___resumeException($$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i4;
      }
     } else {
      $25 = $$pre$i$i$i4;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(527,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$lcssa;
      }
     } else {
      $138 = $$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($139) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $139 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($139) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $138;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i4;
      }
     } else {
      $25 = $$pre$i$i$i4;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(528,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 34;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = (($$lcssa) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($$lcssa) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$lcssa>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 34;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$lcssa;
      }
     } else {
      $143 = $$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 62;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if ($144) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       label = 34;
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $158 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $144 ^ $158;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($144) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i4;
      }
     } else {
      $25 = $$pre$i$i$i4;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(529,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$lcssa;
      }
     } else {
      $138 = $$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($139) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $139 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($139) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $138;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i4;
      }
     } else {
      $25 = $$pre$i$i$i4;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(530,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$lcssa;
      }
     } else {
      $138 = $$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($139) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $139 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($139) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $138;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i4;
      }
     } else {
      $25 = $$pre$i$i$i4;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(531,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$lcssa;
      }
     } else {
      $138 = $$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($139) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $139 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($139) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $138;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i4;
      }
     } else {
      $25 = $$pre$i$i$i4;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(532,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 34;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = (($$lcssa) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($$lcssa) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$lcssa>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 34;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$lcssa;
      }
     } else {
      $143 = $$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 62;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if ($144) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       label = 34;
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $158 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $144 ^ $158;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($144) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 34;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i5;
      }
     } else {
      $25 = $$pre$i$i$i5;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i5 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $112 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(533,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 34;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = (($$lcssa) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($$lcssa) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$lcssa>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 34;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$lcssa;
      }
     } else {
      $140 = $$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if ($141) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       label = 34;
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $155 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $141 ^ $155;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($141) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $156 = HEAP32[$__err>>2]|0;
     $157 = $156 | 2;
     HEAP32[$__err>>2] = $157;
    }
    HEAP32[$agg$result>>2] = $140;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 34;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i5;
      }
     } else {
      $25 = $$pre$i$i$i5;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i5 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $112 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(534,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 34;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = (($$lcssa) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($$lcssa) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$lcssa>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 34;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$lcssa;
      }
     } else {
      $140 = $$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if ($141) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       label = 34;
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $155 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $141 ^ $155;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($141) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $156 = HEAP32[$__err>>2]|0;
     $157 = $156 | 2;
     HEAP32[$__err>>2] = $157;
    }
    HEAP32[$agg$result>>2] = $140;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 34;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $25 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $25 = 0;
      } else {
       $25 = $$pre$i$i$i5;
      }
     } else {
      $25 = $$pre$i$i$i5;
     }
    }
    $26 = ($25|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($26) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($26) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $25;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($26) {
      $$lcssa = $25;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($25) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($25) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$25>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($25|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $25;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$25>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($25|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i5 = $25;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $111 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $111 = $108;
   }
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $112 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(535,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 34;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = (($$lcssa) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($$lcssa) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$lcssa>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 34;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$lcssa;
      }
     } else {
      $140 = $$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if ($141) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       label = 34;
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $155 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $141 ^ $155;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($141) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $156 = HEAP32[$__err>>2]|0;
     $157 = $156 | 2;
     HEAP32[$__err>>2] = $157;
    }
    HEAP32[$agg$result>>2] = $140;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(446,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$034 = 0, $$045 = 0, $$045$lcssa = 0, $$index = 0, $$index15 = 0, $$lcssa = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $$pre$i3$i$i19$lcssa = 0, $$pre$lcssa = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__c$0$lcssa = 0, $__consume$0$off050 = 0, $__consume$1$off0 = 0, $__consume$1$off0$lcssa = 0, $__indx$0 = 0, $__indx$0$lcssa85 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$066 = 0, $__ky1$051 = 0, $__ky2$060 = 0, $__n_does_match$0$lcssa = 0;
 var $__n_does_match$064 = 0, $__n_does_match$1 = 0, $__n_does_match$1$lcssa = 0, $__n_does_match$2$ph = 0, $__n_does_match$2$ph$be = 0, $__n_does_match$347 = 0, $__n_does_match$4 = 0, $__n_does_match$4$lcssa = 0, $__n_does_match$558 = 0, $__n_does_match$6 = 0, $__n_does_match$6$lcssa = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$063 = 0, $__n_might_match$1 = 0, $__n_might_match$1$lcssa = 0, $__n_might_match$2$ph = 0, $__n_might_match$346 = 0, $__n_might_match$4 = 0, $__n_might_match$4$lcssa = 0, $__st$065 = 0;
 var $__st$148 = 0, $__st$259 = 0, $__st$344 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $lpad$phi82$index = 0, $lpad$phi82$index2 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(436);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index15 = $10;
   } else {
    $19 = 0;$__status$0 = 0;
    label = 13;
   }
  } else {
   $19 = $5;$__status$0 = $5;
   label = 13;
  }
 } else {
  $19 = 0;$__status$0 = $__statbuf;
  label = 13;
 }
 if ((label|0) == 13) {
  $21 = ($__kb|0)==($__ke|0);
  if ($21) {
   $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
  } else {
   $__ky$066 = $__kb;$__n_does_match$064 = 0;$__n_might_match$063 = $3;$__st$065 = $__status$0;
   while(1) {
    $22 = HEAP8[$__ky$066>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $29 = $28;
    } else {
     $25 = (($__ky$066) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $29 = $26;
    }
    $30 = ($29|0)==(0);
    if ($30) {
     HEAP8[$__st$065>>0] = 2;
     $31 = (($__n_might_match$063) + -1)|0;
     $32 = (($__n_does_match$064) + 1)|0;
     $__n_does_match$1 = $32;$__n_might_match$1 = $31;
    } else {
     HEAP8[$__st$065>>0] = 1;
     $__n_does_match$1 = $__n_does_match$064;$__n_might_match$1 = $__n_might_match$063;
    }
    $33 = (($__ky$066) + 12|0);
    $34 = (($__st$065) + 1|0);
    $35 = ($33|0)==($__ke|0);
    if ($35) {
     $__n_does_match$1$lcssa = $__n_does_match$1;$__n_might_match$1$lcssa = $__n_might_match$1;
     break;
    } else {
     $__ky$066 = $33;$__n_does_match$064 = $__n_does_match$1;$__n_might_match$063 = $__n_might_match$1;$__st$065 = $34;
    }
   }
   $__n_does_match$0$lcssa = $__n_does_match$1$lcssa;$__n_might_match$0$lcssa = $__n_might_match$1$lcssa;
  }
  $__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
  L21: while(1) {
   $__indx$0 = $__indx$0$ph;
   while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $67 = 1;
     } else {
      $38 = (($36) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($36) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = (($43) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 6;
        break L21;
       } else {
        $$0$i$i$i$i = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i$i$i = $49;
      }
      $50 = ($$0$i$i$i$i|0)==(-1);
      if ($50) {
       HEAP32[$__b>>2] = 0;
       $67 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $67 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $$pre$i3$i$i19 = 0;$66 = 1;
    } else {
     $53 = (($51) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($51) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = (($58) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 6;
       break L21;
      } else {
       $$0$i$i1$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $$0$i$i1$i$i = $64;
     }
     $65 = ($$0$i$i1$i$i|0)==(-1);
     if ($65) {
      HEAP32[$__e>>2] = 0;
      $$pre$i3$i$i19 = 0;$66 = 1;
     } else {
      $$pre$i3$i$i19 = $51;$66 = 0;
     }
    }
    $tmp$i$i = $67 ^ $66;
    $68 = ($__n_might_match$2$ph|0)!=(0);
    $$ = $tmp$i$i & $68;
    $69 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     $$lcssa = $69;$$pre$i3$i$i19$lcssa = $$pre$i3$i$i19;
     label = 75;
     break L21;
    }
    $70 = (($69) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($71|0)==($73|0);
    if ($74) {
     $75 = HEAP32[$69>>2]|0;
     $76 = (($75) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     __THREW__ = 0;
     $78 = (invoke_ii($77|0,($69|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 6;
      break L21;
     } else {
      $$0$i$i = $78;
     }
    } else {
     $81 = HEAP32[$71>>2]|0;
     $$0$i$i = $81;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     __THREW__ = 0;
     $85 = (invoke_iii($84|0,($__ct|0),($$0$i$i|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 6;
      break L21;
     } else {
      $__c$0 = $85;
     }
    }
    $$pre = (($__indx$0) + 1)|0;
    if ($21) {
     $__indx$0 = $$pre;
    } else {
     $$pre$lcssa = $$pre;$__c$0$lcssa = $__c$0;$__indx$0$lcssa85 = $__indx$0;
     break;
    }
   }
   $__consume$0$off050 = 0;$__ky1$051 = $__kb;$__n_does_match$347 = $__n_does_match$2$ph;$__n_might_match$346 = $__n_might_match$2$ph;$__st$148 = $__status$0;
   while(1) {
    $88 = HEAP8[$__st$148>>0]|0;
    $89 = ($88<<24>>24)==(1);
    do {
     if ($89) {
      $90 = HEAP8[$__ky1$051>>0]|0;
      $91 = $90 & 1;
      $92 = ($91<<24>>24)==(0);
      if ($92) {
       $95 = (($__ky1$051) + 4|0);
       $97 = $95;
      } else {
       $93 = (($__ky1$051) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $97 = $94;
      }
      $96 = (($97) + ($__indx$0$lcssa85<<2)|0);
      $98 = HEAP32[$96>>2]|0;
      if ($__case_sensitive) {
       $__kc$0 = $98;
      } else {
       $99 = HEAP32[$__ct>>2]|0;
       $100 = (($99) + 28|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_iii($101|0,($__ct|0),($98|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 5;
        break L21;
       } else {
        $__kc$0 = $102;
       }
      }
      $105 = ($__c$0$lcssa|0)==($__kc$0|0);
      if (!($105)) {
       HEAP8[$__st$148>>0] = 0;
       $117 = (($__n_might_match$346) + -1)|0;
       $__consume$1$off0 = $__consume$0$off050;$__n_does_match$4 = $__n_does_match$347;$__n_might_match$4 = $117;
       break;
      }
      $106 = HEAP8[$__ky1$051>>0]|0;
      $107 = $106 & 1;
      $108 = ($107<<24>>24)==(0);
      if ($108) {
       $111 = $106&255;
       $112 = $111 >>> 1;
       $113 = $112;
      } else {
       $109 = (($__ky1$051) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $113 = $110;
      }
      $114 = ($113|0)==($$pre$lcssa|0);
      if ($114) {
       HEAP8[$__st$148>>0] = 2;
       $115 = (($__n_might_match$346) + -1)|0;
       $116 = (($__n_does_match$347) + 1)|0;
       $__consume$1$off0 = 1;$__n_does_match$4 = $116;$__n_might_match$4 = $115;
      } else {
       $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$347;$__n_might_match$4 = $__n_might_match$346;
      }
     } else {
      $__consume$1$off0 = $__consume$0$off050;$__n_does_match$4 = $__n_does_match$347;$__n_might_match$4 = $__n_might_match$346;
     }
    } while(0);
    $118 = (($__ky1$051) + 12|0);
    $119 = (($__st$148) + 1|0);
    $120 = ($118|0)==($__ke|0);
    if ($120) {
     $__consume$1$off0$lcssa = $__consume$1$off0;$__n_does_match$4$lcssa = $__n_does_match$4;$__n_might_match$4$lcssa = $__n_might_match$4;
     break;
    } else {
     $__consume$0$off050 = $__consume$1$off0;$__ky1$051 = $118;$__n_does_match$347 = $__n_does_match$4;$__n_might_match$346 = $__n_might_match$4;$__st$148 = $119;
    }
   }
   if ($__consume$1$off0$lcssa) {
    $121 = HEAP32[$__b>>2]|0;
    $122 = (($121) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($121) + 16|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($123|0)==($125|0);
    if ($126) {
     $127 = HEAP32[$121>>2]|0;
     $128 = (($127) + 40|0);
     $129 = HEAP32[$128>>2]|0;
     __THREW__ = 0;
     (invoke_ii($129|0,($121|0))|0);
     $130 = __THREW__; __THREW__ = 0;
     $131 = $130&1;
     if ($131) {
      label = 7;
      break;
     }
    } else {
     $132 = (($123) + 4|0);
     HEAP32[$122>>2] = $132;
    }
    $133 = (($__n_does_match$4$lcssa) + ($__n_might_match$4$lcssa))|0;
    $$not = ($133>>>0)<(2);
    if ($$not) {
     $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
    } else {
     $__ky2$060 = $__kb;$__n_does_match$558 = $__n_does_match$4$lcssa;$__st$259 = $__status$0;
     while(1) {
      $134 = HEAP8[$__st$259>>0]|0;
      $135 = ($134<<24>>24)==(2);
      if ($135) {
       $136 = HEAP8[$__ky2$060>>0]|0;
       $137 = $136 & 1;
       $138 = ($137<<24>>24)==(0);
       if ($138) {
        $141 = $136&255;
        $142 = $141 >>> 1;
        $143 = $142;
       } else {
        $139 = (($__ky2$060) + 4|0);
        $140 = HEAP32[$139>>2]|0;
        $143 = $140;
       }
       $144 = ($143|0)==($$pre$lcssa|0);
       if ($144) {
        $__n_does_match$6 = $__n_does_match$558;
       } else {
        HEAP8[$__st$259>>0] = 0;
        $145 = (($__n_does_match$558) + -1)|0;
        $__n_does_match$6 = $145;
       }
      } else {
       $__n_does_match$6 = $__n_does_match$558;
      }
      $146 = (($__ky2$060) + 12|0);
      $147 = (($__st$259) + 1|0);
      $148 = ($146|0)==($__ke|0);
      if ($148) {
       $__n_does_match$6$lcssa = $__n_does_match$6;
       break;
      } else {
       $__ky2$060 = $146;$__n_does_match$558 = $__n_does_match$6;$__st$259 = $147;
      }
     }
     $__n_does_match$2$ph$be = $__n_does_match$6$lcssa;
    }
   } else {
    $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
   }
   $__indx$0$ph = $$pre$lcssa;$__n_does_match$2$ph = $__n_does_match$2$ph$be;$__n_might_match$2$ph = $__n_might_match$4$lcssa;
  }
  if ((label|0) == 5) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $lpad$phi$index = $11;$lpad$phi$index8 = $12;
  }
  else if ((label|0) == 6) {
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $lpad$phi82$index = $13;$lpad$phi82$index2 = $14;
   label = 8;
  }
  else if ((label|0) == 7) {
   $15 = ___cxa_find_matching_catch()|0;
   $16 = tempRet0;
   $lpad$phi82$index = $15;$lpad$phi82$index2 = $16;
   label = 8;
  }
  else if ((label|0) == 75) {
   $149 = ($$lcssa|0)==(0|0);
   do {
    if ($149) {
     $187 = 1;
     label = 82;
    } else {
     $150 = (($$lcssa) + 12|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($$lcssa) + 16|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($151|0)==($153|0);
     if ($154) {
      $155 = HEAP32[$$lcssa>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$lcssa|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break;
      } else {
       $$0$i$i$i$i11 = $158;
      }
     } else {
      $161 = HEAP32[$151>>2]|0;
      $$0$i$i$i$i11 = $161;
     }
     $162 = ($$0$i$i$i$i11|0)==(-1);
     if ($162) {
      HEAP32[$__b>>2] = 0;
      $187 = 1;
      label = 82;
      break;
     } else {
      $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
      $187 = $phitmp$i$i$i14;
      label = 82;
      break;
     }
    }
   } while(0);
   L106: do {
    if ((label|0) == 82) {
     $163 = ($$pre$i3$i$i19$lcssa|0)==(0|0);
     do {
      if ($163) {
       label = 88;
      } else {
       $164 = (($$pre$i3$i$i19$lcssa) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($$pre$i3$i$i19$lcssa) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$$pre$i3$i$i19$lcssa>>2]|0;
        $170 = (($169) + 36|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($$pre$i3$i$i19$lcssa|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         break L106;
        } else {
         $$0$i$i1$i$i17 = $172;
        }
       } else {
        $175 = HEAP32[$165>>2]|0;
        $$0$i$i1$i$i17 = $175;
       }
       $176 = ($$0$i$i1$i$i17|0)==(-1);
       if ($176) {
        HEAP32[$__e>>2] = 0;
        label = 88;
        break;
       } else {
        if ($187) {
         break;
        } else {
         label = 90;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 88) {
      if ($187) {
       label = 90;
      }
     }
     if ((label|0) == 90) {
      $177 = HEAP32[$__err>>2]|0;
      $178 = $177 | 2;
      HEAP32[$__err>>2] = $178;
     }
     do {
      if ($21) {
       label = 96;
      } else {
       $$045 = $__kb;$__st$344 = $__status$0;
       while(1) {
        $179 = HEAP8[$__st$344>>0]|0;
        $180 = ($179<<24>>24)==(2);
        if ($180) {
         $$045$lcssa = $$045;
         label = 97;
         break;
        }
        $181 = (($$045) + 12|0);
        $182 = (($__st$344) + 1|0);
        $183 = ($181|0)==($__ke|0);
        if ($183) {
         label = 95;
         break;
        } else {
         $$045 = $181;$__st$344 = $182;
        }
       }
       if ((label|0) == 95) {
        label = 96;
        break;
       }
       else if ((label|0) == 97) {
        $$034 = $$045$lcssa;
        break;
       }
      }
     } while(0);
     if ((label|0) == 96) {
      $184 = HEAP32[$__err>>2]|0;
      $185 = $184 | 4;
      HEAP32[$__err>>2] = $185;
      $$034 = $__ke;
     }
     $186 = ($19|0)==(0|0);
     if (!($186)) {
      _free($19);
     }
     STACKTOP = sp;return ($$034|0);
    }
   } while(0);
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $lpad$phi$index = $17;$lpad$phi$index8 = $18;
  }
  if ((label|0) == 8) {
   $lpad$phi$index = $lpad$phi82$index;$lpad$phi$index8 = $lpad$phi82$index2;
  }
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  } else {
   _free($19);
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  }
 }
 ___resumeException($$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(527,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(528,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 35;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$lcssa|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($$lcssa) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($$lcssa) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$lcssa>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $$lcssa;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 64;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($162) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(529,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(530,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(531,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(532,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 35;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$lcssa|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($$lcssa) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($$lcssa) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$lcssa>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $$lcssa;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 64;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($162) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 35;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $111 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(533,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 35;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$lcssa|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($$lcssa) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($$lcssa) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$lcssa>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $$lcssa;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($159) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 35;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $111 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(534,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 35;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$lcssa|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($$lcssa) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($$lcssa) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$lcssa>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $$lcssa;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($159) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(429,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 35;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(429,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $110 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $110 = $107;
   }
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $111 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(535,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 35;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$lcssa|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($$lcssa) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($$lcssa) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$lcssa>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $$lcssa;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($159) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(446,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   HEAP32[$agg$result>>2] = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = (($__iob) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>($4|0);
   $8 = (($6) - ($4))|0;
   $__ns$0 = $7 ? $8 : 0;
   $9 = $__op;
   $10 = (($9) - ($3))|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[$0>>2]|0;
    $13 = (($12) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_iiii[$14 & 1023]($0,$__ob,$10)|0);
    $16 = ($15|0)==($10|0);
    if (!($16)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   $17 = ($__ns$0|0)>(0);
   do {
    if ($17) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
     $18 = HEAP8[$__sp>>0]|0;
     $19 = $18 & 1;
     $20 = ($19<<24>>24)==(0);
     if ($20) {
      $23 = (($__sp) + 1|0);
      $27 = $23;
     } else {
      $21 = (($__sp) + 8|0);
      $22 = HEAP32[$21>>2]|0;
      $27 = $22;
     }
     $24 = HEAP32[$0>>2]|0;
     $25 = (($24) + 48|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     $28 = (invoke_iiii($26|0,($0|0),($27|0),($__ns$0|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $32 = ___cxa_find_matching_catch()|0;
      $33 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
      ___resumeException($32|0);
      // unreachable;
     }
     $31 = ($28|0)==($__ns$0|0);
     if ($31) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      HEAP32[$agg$result>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
      break L1;
     }
    }
   } while(0);
   $34 = (($2) - ($9))|0;
   $35 = ($34|0)>(0);
   if ($35) {
    $36 = HEAP32[$0>>2]|0;
    $37 = (($36) + 48|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiii[$38 & 1023]($0,$__op,$34)|0);
    $40 = ($39|0)==($34|0);
    if (!($40)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   HEAP32[$5>>2] = 0;
   HEAP32[$agg$result>>2] = $0;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(536,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(446,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(446,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   HEAP32[$agg$result>>2] = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = (($__iob) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__sp) + 4|0);
      $29 = $25;
     } else {
      $23 = (($__sp) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $29 = $24;
     }
     $26 = HEAP32[$0>>2]|0;
     $27 = (($26) + 48|0);
     $28 = HEAP32[$27>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      HEAP32[$agg$result>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = (($39) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   HEAP32[$agg$result>>2] = $0;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $__r$0$lcssa31 = 0, $__r$032 = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $156 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $156 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = (($__ct) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = (($50) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = (($55) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($55) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = (($61) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
     } else {
      $64 = (($57) + 1|0);
      HEAP32[$56>>2] = $64;
     }
     $$0$in = $__n;$$pre$i2$i$i7 = $156;$79 = $156;$__r$0$in = $54;
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $77 = 0;
       } else {
        $67 = (($65) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = (($65) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = (($72) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i3;
          break;
         }
        } else {
         $77 = $65;
        }
       }
      } while(0);
      $78 = ($77|0)==(0|0);
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
      } else {
       $81 = (($79) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($79) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = (($86) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($79)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$91 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
       }
      }
      $92 = ($91|0)==(0|0);
      $tmp$i$i9 = $78 ^ $92;
      $93 = ($$0|0)>(0);
      $$ = $tmp$i$i9 & $93;
      $94 = HEAP32[$__b>>2]|0;
      if (!($$)) {
       $$lcssa = $94;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($94) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$94>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
       $$0$i$i10 = $103;
      } else {
       $104 = HEAP8[$96>>0]|0;
       $105 = $104&255;
       $$0$i$i10 = $105;
      }
      $106 = $$0$i$i10&255;
      $isascii1$i12 = ($106<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $__r$0$lcssa31 = $__r$0;
       label = 54;
       break;
      }
      $sext24 = $$0$i$i10 << 24;
      $107 = $sext24 >> 24;
      $108 = HEAP32[$42>>2]|0;
      $109 = (($108) + ($107<<1)|0);
      $110 = HEAP16[$109>>1]|0;
      $111 = $110 & 2048;
      $112 = ($111<<16>>16)==(0);
      if ($112) {
       $__r$0$lcssa31 = $__r$0;
       label = 54;
       break;
      }
      $113 = ($__r$0*10)|0;
      $114 = HEAP32[$__ct>>2]|0;
      $115 = (($114) + 36|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($__ct,$106,0)|0);
      $118 = $117 << 24 >> 24;
      $119 = (($118) + ($113))|0;
      $120 = HEAP32[$__b>>2]|0;
      $121 = (($120) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($122|0)==($124|0);
      if ($125) {
       $126 = HEAP32[$120>>2]|0;
       $127 = (($126) + 40|0);
       $128 = HEAP32[$127>>2]|0;
       (FUNCTION_TABLE_ii[$128 & 1023]($120)|0);
      } else {
       $129 = (($122) + 1|0);
       HEAP32[$121>>2] = $129;
      }
      $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $119;
     }
     if ((label|0) == 54) {
      $$01 = $__r$0$lcssa31;
      break;
     }
     $130 = ($$lcssa|0)==(0|0);
     do {
      if ($130) {
       $141 = 0;
      } else {
       $131 = (($$lcssa) + 12|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (($$lcssa) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($132|0)==($134|0);
       if ($135) {
        $136 = HEAP32[$$lcssa>>2]|0;
        $137 = (($136) + 36|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (FUNCTION_TABLE_ii[$138 & 1023]($$lcssa)|0);
        $140 = ($139|0)==(-1);
        if ($140) {
         HEAP32[$__b>>2] = 0;
         $141 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $141 = $$pre$i$i$i16;
         break;
        }
       } else {
        $141 = $$lcssa;
       }
      }
     } while(0);
     $142 = ($141|0)==(0|0);
     $143 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($143) {
       label = 52;
      } else {
       $144 = (($$pre$i2$i$i20$lcssa) + 12|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($$pre$i2$i$i20$lcssa) + 16|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ($145|0)==($147|0);
       if ($148) {
        $149 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $150 = (($149) + 36|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i2$i$i20$lcssa)|0);
        $153 = ($152|0)==(-1);
        if ($153) {
         HEAP32[$__e>>2] = 0;
         label = 52;
         break;
        }
       }
       if ($142) {
        $$01 = $__r$0$lcssa;
        break L16;
       } else {
        $__r$032 = $__r$0$lcssa;
       }
      }
     } while(0);
     if ((label|0) == 52) {
      if ($142) {
       $__r$032 = $__r$0$lcssa;
      } else {
       $$01 = $__r$0$lcssa;
       break;
      }
     }
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
     $$01 = $__r$032;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$01 = 0;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $__r$0$lcssa36 = 0, $__r$037 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$01 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = (($45) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($50) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = (($56) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
   } else {
    $59 = (($52) + 4|0);
    HEAP32[$51>>2] = $59;
   }
   $$0$in = $__n;$$pre$i3$i$i10 = $148;$73 = $148;$__r$0$in = $49;
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $87 = 1;
     } else {
      $62 = (($60) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($60) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = (($67) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $87 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $87 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $74 = ($73|0)==(0|0);
    do {
     if ($74) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$86 = 1;
     } else {
      $75 = (($73) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($73) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$73>>2]|0;
       $81 = (($80) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($73)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$149 = 0;$86 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$86 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $87 ^ $86;
    $88 = ($$0|0)>(0);
    $$ = $tmp$i$i13 & $88;
    $89 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     $$lcssa = $89;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $90 = (($89) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$89>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (FUNCTION_TABLE_ii[$97 & 1023]($89)|0);
     $$0$i$i14 = $98;
    } else {
     $99 = HEAP32[$91>>2]|0;
     $$0$i$i14 = $99;
    }
    $100 = HEAP32[$__ct>>2]|0;
    $101 = (($100) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($__ct,2048,$$0$i$i14)|0);
    if (!($103)) {
     $__r$0$lcssa36 = $__r$0;
     label = 65;
     break;
    }
    $104 = ($__r$0*10)|0;
    $105 = HEAP32[$__ct>>2]|0;
    $106 = (($105) + 52|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (FUNCTION_TABLE_iiii[$107 & 1023]($__ct,$$0$i$i14,0)|0);
    $109 = $108 << 24 >> 24;
    $110 = (($109) + ($104))|0;
    $111 = HEAP32[$__b>>2]|0;
    $112 = (($111) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($111) + 16|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($113|0)==($115|0);
    if ($116) {
     $117 = HEAP32[$111>>2]|0;
     $118 = (($117) + 40|0);
     $119 = HEAP32[$118>>2]|0;
     (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
    } else {
     $120 = (($113) + 4|0);
     HEAP32[$112>>2] = $120;
    }
    $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $149;$__r$0$in = $110;
   }
   if ((label|0) == 65) {
    $$01 = $__r$0$lcssa36;
    break;
   }
   $121 = ($$lcssa|0)==(0|0);
   do {
    if ($121) {
     $150 = 1;
    } else {
     $122 = (($$lcssa) + 12|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (($$lcssa) + 16|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($123|0)==($125|0);
     if ($126) {
      $127 = HEAP32[$$lcssa>>2]|0;
      $128 = (($127) + 36|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (FUNCTION_TABLE_ii[$129 & 1023]($$lcssa)|0);
      $$0$i$i$i$i17 = $130;
     } else {
      $131 = HEAP32[$123>>2]|0;
      $$0$i$i$i$i17 = $131;
     }
     $132 = ($$0$i$i$i$i17|0)==(-1);
     if ($132) {
      HEAP32[$__b>>2] = 0;
      $150 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $150 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $133 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($133) {
     label = 62;
    } else {
     $134 = (($$pre$i3$i$i25$lcssa) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($$pre$i3$i$i25$lcssa) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (FUNCTION_TABLE_ii[$141 & 1023]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $142;
     } else {
      $143 = HEAP32[$135>>2]|0;
      $$0$i$i1$i$i23 = $143;
     }
     $144 = ($$0$i$i1$i$i23|0)==(-1);
     if ($144) {
      HEAP32[$__e>>2] = 0;
      label = 62;
      break;
     } else {
      if ($150) {
       $$01 = $__r$0$lcssa;
       break L22;
      } else {
       $__r$037 = $__r$0$lcssa;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 62) {
    if ($150) {
     $__r$037 = $__r$0$lcssa;
    } else {
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $145 = HEAP32[$__err>>2]|0;
   $146 = $145 | 2;
   HEAP32[$__err>>2] = $146;
   $$01 = $__r$037;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(447|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $23 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $14;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 537;
 $22 = (($23) + ($12)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(447|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 537;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = $5;$16 = 10;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $7;$16 = $phitmp$i;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($16) - ($15))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($15) + ($12))|0;
    $19 = (($18) - ($16))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $40;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = (($this) + 1|0);
    $27 = $25;
   } else {
    $23 = (($this) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   }
   $26 = (($27) + ($15)|0);
   $28 = (($15) - ($0))|0;
   $scevgep = (($__last) + ($28)|0);
   $scevgep3 = $scevgep;
   $$01 = $__first;$__p$02 = $26;
   while(1) {
    $29 = HEAP8[$$01>>0]|0;
    HEAP8[$__p$02>>0] = $29;
    $30 = (($__p$02) + 1|0);
    $31 = (($$01) + 1|0);
    $32 = ($31|0)==($__last|0);
    if ($32) {
     break;
    } else {
     $$01 = $31;$__p$02 = $30;
    }
   }
   $scevgep4 = (($27) + ($scevgep3)|0);
   HEAP8[$scevgep4>>0] = 0;
   $33 = (($15) + ($12))|0;
   $34 = HEAP8[$this>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $33 << 1;
    $39 = $38&255;
    HEAP8[$this>>0] = $39;
    break;
   } else {
    $37 = (($this) + 4|0);
    HEAP32[$37>>2] = $33;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(447|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 537;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = $5;$17 = 1;$46 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $7;$17 = $phitmp$i;$46 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($17) - ($16))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($16) + ($13))|0;
    $20 = (($19) - ($17))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$17,$20,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $46;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = (($this) + 4|0);
    $28 = $26;
   } else {
    $24 = (($this) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   }
   $27 = (($28) + ($16<<2)|0);
   $29 = ($__first|0)==($__last|0);
   if ($29) {
    $__p$0$lcssa = $27;
   } else {
    $scevgep = (($__last) + -4|0);
    $30 = $scevgep;
    $31 = (($30) - ($0))|0;
    $32 = $31 >>> 2;
    $33 = (($16) + ($32))|0;
    $34 = (($33) + 1)|0;
    $$01 = $__first;$__p$02 = $27;
    while(1) {
     $35 = HEAP32[$$01>>2]|0;
     HEAP32[$__p$02>>2] = $35;
     $36 = (($__p$02) + 4|0);
     $37 = (($$01) + 4|0);
     $38 = ($37|0)==($__last|0);
     if ($38) {
      break;
     } else {
      $$01 = $37;$__p$02 = $36;
     }
    }
    $scevgep5 = (($28) + ($34<<2)|0);
    $__p$0$lcssa = $scevgep5;
   }
   HEAP32[$__p$0$lcssa>>2] = 0;
   $39 = (($16) + ($13))|0;
   $40 = HEAP8[$this>>0]|0;
   $41 = $40 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $44 = $39 << 1;
    $45 = $44&255;
    HEAP8[$this>>0] = $45;
    break;
   } else {
    $43 = (($this) + 4|0);
    HEAP32[$43>>2] = $39;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   invoke_vii(538,($this|0),($__n|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch()|0;
    $7 = tempRet0;
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
    ___resumeException($6|0);
    // unreachable;
   } else {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(16432)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(16472)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18040)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18032)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18104)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18112)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18168)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18176)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18184)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18192)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(16544)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(16664)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(16728)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(16824)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17416)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17480)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17544)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17608)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17728)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17784)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17832)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(16936)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17088)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17320)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17352)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17872)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(17912)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = (($this) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($0|0);
   if (!($4)) {
    $__new_last2$i$i = $0;
    $scevgep$i$i = (($3) + -4|0);
    $5 = $scevgep$i$i;
    $6 = (($5) - ($__new_last2$i$i))|0;
    $7 = $6 >>> 2;
    $8 = $7 ^ -1;
    $scevgep4$i$i = (($3) + ($8<<2)|0);
    HEAP32[$2>>2] = $scevgep4$i$i;
   }
   $9 = (($this) + 16|0);
   $10 = ($9|0)==($0|0);
   if ($10) {
    $11 = (($this) + 128|0);
    HEAP8[$11>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
 } else {
  $9 = ($6>>>0)>($__sz>>>0);
  if ($9) {
   $10 = (($2) + ($__sz<<2)|0);
   $11 = ($1|0)==($10|0);
   if (!($11)) {
    $__new_last2$i$i = $10;
    $scevgep$i$i = (($1) + -4|0);
    $12 = $scevgep$i$i;
    $13 = (($12) - ($__new_last2$i$i))|0;
    $14 = $13 >>> 2;
    $15 = $14 ^ -1;
    $scevgep4$i$i = (($1) + ($15<<2)|0);
    HEAP32[$0>>2] = $scevgep4$i$i;
   }
  }
 }
 return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if ($8) {
  $9 = (($3) + ($id<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $$index1 = (($0) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = $to_end;
  $3 = $to;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)<(3);
  if ($5) {
   $$0 = 1;
  } else {
   $6 = (($to) + 1|0);
   HEAP32[$to_nxt>>2] = $6;
   HEAP8[$to>>0] = -17;
   $7 = HEAP32[$to_nxt>>2]|0;
   $8 = (($7) + 1|0);
   HEAP32[$to_nxt>>2] = $8;
   HEAP8[$7>>0] = -69;
   $9 = HEAP32[$to_nxt>>2]|0;
   $10 = (($9) + 1|0);
   HEAP32[$to_nxt>>2] = $10;
   HEAP8[$9>>0] = -65;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $11 = $frm_end;
  $12 = HEAP32[$frm_nxt>>2]|0;
  $13 = ($12>>>0)<($frm_end>>>0);
  if ($13) {
   $14 = $to_end;
   $16 = $12;
   L7: while(1) {
    $15 = HEAP16[$16>>1]|0;
    $17 = $15&65535;
    $18 = ($17>>>0)>($Maxcode>>>0);
    if ($18) {
     $$0$ph = 2;
     break;
    }
    $19 = ($15&65535)<(128);
    do {
     if ($19) {
      $20 = HEAP32[$to_nxt>>2]|0;
      $21 = $20;
      $22 = (($14) - ($21))|0;
      $23 = ($22|0)<(1);
      if ($23) {
       $$0$ph = 1;
       break L7;
      }
      $24 = $15&255;
      $25 = (($20) + 1|0);
      HEAP32[$to_nxt>>2] = $25;
      HEAP8[$20>>0] = $24;
     } else {
      $26 = ($15&65535)<(2048);
      if ($26) {
       $27 = HEAP32[$to_nxt>>2]|0;
       $28 = $27;
       $29 = (($14) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0$ph = 1;
        break L7;
       }
       $31 = $17 >>> 6;
       $32 = $31 | 192;
       $33 = $32&255;
       $34 = (($27) + 1|0);
       HEAP32[$to_nxt>>2] = $34;
       HEAP8[$27>>0] = $33;
       $35 = $17 & 63;
       $36 = $35 | 128;
       $37 = $36&255;
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = (($38) + 1|0);
       HEAP32[$to_nxt>>2] = $39;
       HEAP8[$38>>0] = $37;
       break;
      }
      $40 = ($15&65535)<(55296);
      if ($40) {
       $41 = HEAP32[$to_nxt>>2]|0;
       $42 = $41;
       $43 = (($14) - ($42))|0;
       $44 = ($43|0)<(3);
       if ($44) {
        $$0$ph = 1;
        break L7;
       }
       $45 = $17 >>> 12;
       $46 = $45 | 224;
       $47 = $46&255;
       $48 = (($41) + 1|0);
       HEAP32[$to_nxt>>2] = $48;
       HEAP8[$41>>0] = $47;
       $49 = $17 >>> 6;
       $50 = $49 & 63;
       $51 = $50 | 128;
       $52 = $51&255;
       $53 = HEAP32[$to_nxt>>2]|0;
       $54 = (($53) + 1|0);
       HEAP32[$to_nxt>>2] = $54;
       HEAP8[$53>>0] = $52;
       $55 = $17 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$to_nxt>>2]|0;
       $59 = (($58) + 1|0);
       HEAP32[$to_nxt>>2] = $59;
       HEAP8[$58>>0] = $57;
       break;
      }
      $60 = ($15&65535)<(56320);
      if (!($60)) {
       $112 = ($15&65535)<(57344);
       if ($112) {
        $$0$ph = 2;
        break L7;
       }
       $113 = HEAP32[$to_nxt>>2]|0;
       $114 = $113;
       $115 = (($14) - ($114))|0;
       $116 = ($115|0)<(3);
       if ($116) {
        $$0$ph = 1;
        break L7;
       }
       $117 = $17 >>> 12;
       $118 = $117 | 224;
       $119 = $118&255;
       $120 = (($113) + 1|0);
       HEAP32[$to_nxt>>2] = $120;
       HEAP8[$113>>0] = $119;
       $121 = $17 >>> 6;
       $122 = $121 & 63;
       $123 = $122 | 128;
       $124 = $123&255;
       $125 = HEAP32[$to_nxt>>2]|0;
       $126 = (($125) + 1|0);
       HEAP32[$to_nxt>>2] = $126;
       HEAP8[$125>>0] = $124;
       $127 = $17 & 63;
       $128 = $127 | 128;
       $129 = $128&255;
       $130 = HEAP32[$to_nxt>>2]|0;
       $131 = (($130) + 1|0);
       HEAP32[$to_nxt>>2] = $131;
       HEAP8[$130>>0] = $129;
       break;
      }
      $61 = $16;
      $62 = (($11) - ($61))|0;
      $63 = ($62|0)<(4);
      if ($63) {
       $$0$ph = 1;
       break L7;
      }
      $64 = (($16) + 2|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = $65&65535;
      $67 = $66 & 64512;
      $68 = ($67|0)==(56320);
      if (!($68)) {
       $$0$ph = 2;
       break L7;
      }
      $69 = HEAP32[$to_nxt>>2]|0;
      $70 = $69;
      $71 = (($14) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0$ph = 1;
       break L7;
      }
      $73 = $17 & 960;
      $74 = $73 << 10;
      $75 = (($74) + 65536)|0;
      $76 = $17 << 10;
      $77 = $76 & 64512;
      $78 = $75 | $77;
      $79 = $66 & 1023;
      $80 = $78 | $79;
      $81 = ($80>>>0)>($Maxcode>>>0);
      if ($81) {
       $$0$ph = 2;
       break L7;
      }
      HEAP32[$frm_nxt>>2] = $64;
      $82 = $73 >>> 6;
      $83 = (($82) + 1)|0;
      $84 = $83 >>> 2;
      $85 = $84 | 240;
      $86 = $85&255;
      $87 = HEAP32[$to_nxt>>2]|0;
      $88 = (($87) + 1|0);
      HEAP32[$to_nxt>>2] = $88;
      HEAP8[$87>>0] = $86;
      $89 = $83 << 4;
      $90 = $89 & 48;
      $91 = $17 >>> 2;
      $92 = $91 & 15;
      $93 = $92 | $90;
      $94 = $93 | 128;
      $95 = $94&255;
      $96 = HEAP32[$to_nxt>>2]|0;
      $97 = (($96) + 1|0);
      HEAP32[$to_nxt>>2] = $97;
      HEAP8[$96>>0] = $95;
      $98 = $17 << 4;
      $99 = $98 & 48;
      $100 = $66 >>> 6;
      $101 = $100 & 15;
      $102 = $99 | $101;
      $103 = $102 | 128;
      $104 = $103&255;
      $105 = HEAP32[$to_nxt>>2]|0;
      $106 = (($105) + 1|0);
      HEAP32[$to_nxt>>2] = $106;
      HEAP8[$105>>0] = $104;
      $107 = $66 & 63;
      $108 = $107 | 128;
      $109 = $108&255;
      $110 = HEAP32[$to_nxt>>2]|0;
      $111 = (($110) + 1|0);
      HEAP32[$to_nxt>>2] = $111;
      HEAP8[$110>>0] = $109;
     }
    } while(0);
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = (($132) + 2|0);
    HEAP32[$frm_nxt>>2] = $133;
    $134 = ($133>>>0)<($frm_end>>>0);
    if ($134) {
     $16 = $133;
    } else {
     $$0$ph = 0;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $$off = 0, $$ph = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $15 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $15 = $14;
     } else {
      $15 = $$pre;
     }
    } else {
     $15 = $$pre;
    }
   } else {
    $15 = $$pre;
   }
  } else {
   $15 = $$pre;
  }
 }
 $16 = ($15>>>0)<($frm_end>>>0);
 do {
  if ($16) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre5 = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre5;$22 = $15;
   L10: while(1) {
    $20 = ($19>>>0)<($to_end>>>0);
    if (!($20)) {
     $$ph = $22;
     label = 40;
     break;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0$ph = 2;
     label = 42;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$19>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0$ph = 1;
        label = 42;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$19>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0$ph = 1;
        label = 42;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0$ph = 2;
         label = 42;
         break L10;
        }
       } else if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0$ph = 2;
         label = 42;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0$ph = 2;
         label = 42;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$19>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0$ph = 1;
       label = 42;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
      } else if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $94 = $19;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0$ph = 1;
       label = 42;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$19>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($19) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $19 = $131;$22 = $132;
    } else {
     $$ph = $132;
     label = 40;
     break;
    }
   }
   if ((label|0) == 40) {
    $134 = $$ph;
    label = 41;
    break;
   }
   else if ((label|0) == 42) {
    $$0 = $$0$ph;
    break;
   }
  } else {
   $134 = $15;
   label = 41;
  }
 } while(0);
 if ((label|0) == 41) {
  $135 = ($134>>>0)<($frm_end>>>0);
  $136 = $135&1;
  $$0 = $136;
 }
 return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$lcssa78 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$lcssa$ph = 0, $frm_nxt$1$ph = 0, $frm_nxt$117 = 0, $frm_nxt$2 = 0, $nchar16_t$016 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond15 = $15 & $16;
 do {
  if ($or$cond15) {
   $17 = $frm_end;
   $frm_nxt$117 = $frm_nxt$1$ph;$nchar16_t$016 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$117>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa$ph = $frm_nxt$117;
     label = 43;
     break;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$117) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$016;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$117;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $28 = (($frm_nxt$117) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $38 = (($frm_nxt$117) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$117;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $43 = (($frm_nxt$117) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$117) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         $$lcssa77 = $40;
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         $$lcssa76 = $40;
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$lcssa78 = $40;
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $71 = (($frm_nxt$117) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $73 = $frm_nxt$117;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      $76 = (($mx) - ($nchar16_t$016))|0;
      $77 = ($76>>>0)<(2);
      $or$cond2 = $75 | $77;
      if ($or$cond2) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $78 = (($frm_nxt$117) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$117) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$117) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$lcssa = $73;
        label = 35;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        $$lcssa74 = $73;
        label = 33;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        $$lcssa75 = $73;
        label = 37;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $113 = (($nchar16_t$016) + 1)|0;
      $114 = (($frm_nxt$117) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$117 = $frm_nxt$2;$nchar16_t$016 = $115;
    } else {
     $frm_nxt$1$lcssa$ph = $frm_nxt$2;
     label = 43;
     break;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($$lcssa77) - ($49))|0;
    $$0 = $50;
    break;
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($$lcssa76) - ($53))|0;
    $$0 = $54;
    break;
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($$lcssa78) - ($57))|0;
    $$0 = $58;
    break;
   }
   else if ((label|0) == 33) {
    $85 = $frm;
    $86 = (($$lcssa74) - ($85))|0;
    $$0 = $86;
    break;
   }
   else if ((label|0) == 35) {
    $89 = $frm;
    $90 = (($$lcssa) - ($89))|0;
    $$0 = $90;
    break;
   }
   else if ((label|0) == 37) {
    $93 = $frm;
    $94 = (($$lcssa75) - ($93))|0;
    $$0 = $94;
    break;
   }
   else if ((label|0) == 43) {
    $frm_nxt$1$lcssa = $frm_nxt$1$lcssa$ph;
    label = 44;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $118 = $frm_nxt$1$lcssa;
  $119 = $frm;
  $120 = (($118) - ($119))|0;
  $$0 = $120;
 }
 return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = $to_end;
  $3 = $to;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)<(3);
  if ($5) {
   $$0 = 1;
  } else {
   $6 = (($to) + 1|0);
   HEAP32[$to_nxt>>2] = $6;
   HEAP8[$to>>0] = -17;
   $7 = HEAP32[$to_nxt>>2]|0;
   $8 = (($7) + 1|0);
   HEAP32[$to_nxt>>2] = $8;
   HEAP8[$7>>0] = -69;
   $9 = HEAP32[$to_nxt>>2]|0;
   $10 = (($9) + 1|0);
   HEAP32[$to_nxt>>2] = $10;
   HEAP8[$9>>0] = -65;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $11 = HEAP32[$frm_nxt>>2]|0;
  $12 = ($11>>>0)<($frm_end>>>0);
  if ($12) {
   $13 = $to_end;
   $15 = $11;
   L7: while(1) {
    $14 = HEAP32[$15>>2]|0;
    $16 = $14 & -2048;
    $17 = ($16|0)==(55296);
    $18 = ($14>>>0)>($Maxcode>>>0);
    $or$cond = $17 | $18;
    if ($or$cond) {
     $$0$ph = 2;
     break;
    }
    $19 = ($14>>>0)<(128);
    do {
     if ($19) {
      $20 = HEAP32[$to_nxt>>2]|0;
      $21 = $20;
      $22 = (($13) - ($21))|0;
      $23 = ($22|0)<(1);
      if ($23) {
       $$0$ph = 1;
       break L7;
      }
      $24 = $14&255;
      $25 = (($20) + 1|0);
      HEAP32[$to_nxt>>2] = $25;
      HEAP8[$20>>0] = $24;
     } else {
      $26 = ($14>>>0)<(2048);
      if ($26) {
       $27 = HEAP32[$to_nxt>>2]|0;
       $28 = $27;
       $29 = (($13) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0$ph = 1;
        break L7;
       }
       $31 = $14 >>> 6;
       $32 = $31 | 192;
       $33 = $32&255;
       $34 = (($27) + 1|0);
       HEAP32[$to_nxt>>2] = $34;
       HEAP8[$27>>0] = $33;
       $35 = $14 & 63;
       $36 = $35 | 128;
       $37 = $36&255;
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = (($38) + 1|0);
       HEAP32[$to_nxt>>2] = $39;
       HEAP8[$38>>0] = $37;
       break;
      }
      $40 = ($14>>>0)<(65536);
      $41 = HEAP32[$to_nxt>>2]|0;
      $42 = $41;
      $43 = (($13) - ($42))|0;
      if ($40) {
       $44 = ($43|0)<(3);
       if ($44) {
        $$0$ph = 1;
        break L7;
       }
       $45 = $14 >>> 12;
       $46 = $45 | 224;
       $47 = $46&255;
       $48 = (($41) + 1|0);
       HEAP32[$to_nxt>>2] = $48;
       HEAP8[$41>>0] = $47;
       $49 = $14 >>> 6;
       $50 = $49 & 63;
       $51 = $50 | 128;
       $52 = $51&255;
       $53 = HEAP32[$to_nxt>>2]|0;
       $54 = (($53) + 1|0);
       HEAP32[$to_nxt>>2] = $54;
       HEAP8[$53>>0] = $52;
       $55 = $14 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$to_nxt>>2]|0;
       $59 = (($58) + 1|0);
       HEAP32[$to_nxt>>2] = $59;
       HEAP8[$58>>0] = $57;
       break;
      } else {
       $60 = ($43|0)<(4);
       if ($60) {
        $$0$ph = 1;
        break L7;
       }
       $61 = $14 >>> 18;
       $62 = $61 | 240;
       $63 = $62&255;
       $64 = (($41) + 1|0);
       HEAP32[$to_nxt>>2] = $64;
       HEAP8[$41>>0] = $63;
       $65 = $14 >>> 12;
       $66 = $65 & 63;
       $67 = $66 | 128;
       $68 = $67&255;
       $69 = HEAP32[$to_nxt>>2]|0;
       $70 = (($69) + 1|0);
       HEAP32[$to_nxt>>2] = $70;
       HEAP8[$69>>0] = $68;
       $71 = $14 >>> 6;
       $72 = $71 & 63;
       $73 = $72 | 128;
       $74 = $73&255;
       $75 = HEAP32[$to_nxt>>2]|0;
       $76 = (($75) + 1|0);
       HEAP32[$to_nxt>>2] = $76;
       HEAP8[$75>>0] = $74;
       $77 = $14 & 63;
       $78 = $77 | 128;
       $79 = $78&255;
       $80 = HEAP32[$to_nxt>>2]|0;
       $81 = (($80) + 1|0);
       HEAP32[$to_nxt>>2] = $81;
       HEAP8[$80>>0] = $79;
       break;
      }
     }
    } while(0);
    $82 = HEAP32[$frm_nxt>>2]|0;
    $83 = (($82) + 4|0);
    HEAP32[$frm_nxt>>2] = $83;
    $84 = ($83>>>0)<($frm_end>>>0);
    if ($84) {
     $15 = $83;
    } else {
     $$0$ph = 0;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $$off = 0, $$ph = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $15 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $15 = $14;
     } else {
      $15 = $$pre;
     }
    } else {
     $15 = $$pre;
    }
   } else {
    $15 = $$pre;
   }
  } else {
   $15 = $$pre;
  }
 }
 $16 = ($15>>>0)<($frm_end>>>0);
 do {
  if ($16) {
   $17 = $frm_end;
   $$pre5 = HEAP32[$to_nxt>>2]|0;
   $18 = $$pre5;$21 = $15;
   L10: while(1) {
    $19 = ($18>>>0)<($to_end>>>0);
    if (!($19)) {
     $$ph = $21;
     label = 39;
     break;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      HEAP32[$18>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0$ph = 1;
        label = 41;
        break L10;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       HEAP32[$18>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0$ph = 1;
        label = 41;
        break L10;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0$ph = 2;
         label = 41;
         break L10;
        }
       } else if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0$ph = 2;
         label = 41;
         break L10;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0$ph = 2;
         label = 41;
         break L10;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       HEAP32[$18>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0$ph = 1;
       label = 41;
       break L10;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      HEAP32[$18>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $18 = $104;$21 = $105;
    } else {
     $$ph = $105;
     label = 39;
     break;
    }
   }
   if ((label|0) == 39) {
    $107 = $$ph;
    label = 40;
    break;
   }
   else if ((label|0) == 41) {
    $$0 = $$0$ph;
    break;
   }
  } else {
   $107 = $15;
   label = 40;
  }
 } while(0);
 if ((label|0) == 40) {
  $108 = ($107>>>0)<($frm_end>>>0);
  $109 = $108&1;
  $$0 = $109;
 }
 return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$lcssa$ph = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         $$lcssa75 = $40;
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         $$lcssa74 = $40;
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$lcssa76 = $40;
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        $$lcssa72 = $73;
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$lcssa = $73;
        label = 35;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        $$lcssa73 = $73;
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = (($nchar32_t$014) + 1)|0;
    $113 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $114 = ($112>>>0)<($mx>>>0);
    $or$cond = $113 & $114;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $112;
    } else {
     $frm_nxt$1$lcssa$ph = $frm_nxt$2;
     label = 43;
     break;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($$lcssa75) - ($49))|0;
    $$0 = $50;
    break;
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($$lcssa74) - ($53))|0;
    $$0 = $54;
    break;
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($$lcssa76) - ($57))|0;
    $$0 = $58;
    break;
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($$lcssa72) - ($83))|0;
    $$0 = $84;
    break;
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($$lcssa) - ($87))|0;
    $$0 = $88;
    break;
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($$lcssa73) - ($91))|0;
    $$0 = $92;
    break;
   }
   else if ((label|0) == 43) {
    $frm_nxt$1$lcssa = $frm_nxt$1$lcssa$ph;
    label = 44;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $115 = $frm_nxt$1$lcssa;
  $116 = $frm;
  $117 = (($115) - ($116))|0;
  $$0 = $117;
 }
 return ($$0|0);
}
function ___cxx_global_array_dtor108($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25384 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(25384);
 return;
}
function ___cxx_global_array_dtor93($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24848 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(24848);
 return;
}
function ___cxx_global_array_dtor69($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((24336 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(24336);
 return;
}
function ___cxx_global_array_dtor45($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23496 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(23496);
 return;
}
function ___cxx_global_array_dtor42($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23184 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(23184);
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((22856 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(22856);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18112)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 else if ((label|0) == 5) {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$ph = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ($__n|0)>(0);
  if ($3) {
   $$012 = $__s;$__i$03 = 0;
   while(1) {
    $7 = HEAP32[$this>>2]|0;
    $8 = (($7) + 52|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$$012>>2]|0;
    $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $$0$ph = $__i$03;
     break;
    }
    $13 = (($__i$03) + 1)|0;
    $14 = (($$012) + 4|0);
    $15 = ($13|0)<($__n|0);
    if ($15) {
     $$012 = $14;$__i$03 = $13;
    } else {
     $$0$ph = $13;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 } else {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
 }
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 do {
  if ($0) {
   label = 12;
  } else {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     label = 13;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     $pbase$0$lcssa6 = $pbase$0;
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     label = 13;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     label = 13;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0$lcssa6|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   else if ((label|0) == 11) {
    label = 12;
    break;
   }
   else if ((label|0) == 13) {
    $$0 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18112)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(14736);
 }
 return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = (($this) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = (($this) + 48|0);
   do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     HEAP32[$__ci>>2] = $9;
     $10 = (($this) + 36|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($this) + 40|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($__ci) + 4|0);
     $15 = (($__extbuf) + 8|0);
     $16 = HEAP32[$11>>2]|0;
     $17 = (($16) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
     if ((($19|0) == 1) | (($19|0) == 2)) {
      $$01 = -1;
      break L1;
     } else if ((($19|0) == 3)) {
      $20 = HEAP32[$8>>2]|0;
      $21 = $20&255;
      HEAP8[$__extbuf>>0] = $21;
      $22 = (($__extbuf) + 1|0);
      HEAP32[$__enxt>>2] = $22;
     }
     $23 = (($this) + 32|0);
     while(1) {
      $24 = HEAP32[$__enxt>>2]|0;
      $25 = ($24>>>0)>($__extbuf>>>0);
      if (!($25)) {
       label = 10;
       break;
      }
      $26 = (($24) + -1|0);
      HEAP32[$__enxt>>2] = $26;
      $27 = HEAP8[$26>>0]|0;
      $28 = $27 << 24 >> 24;
      $29 = HEAP32[$23>>2]|0;
      $30 = (_ungetc(($28|0),($29|0))|0);
      $31 = ($30|0)==(-1);
      if ($31) {
       label = 12;
       break;
      }
     }
     if ((label|0) == 10) {
      break;
     }
     else if ((label|0) == 12) {
      $$01 = -1;
      break L1;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18104)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 else if ((label|0) == 5) {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$ph = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ($__n|0)>(0);
  if ($3) {
   $$012 = $__s;$__i$03 = 0;
   while(1) {
    $7 = HEAP32[$this>>2]|0;
    $8 = (($7) + 52|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP8[$$012>>0]|0;
    $11 = $10&255;
    $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0$ph = $__i$03;
     break;
    }
    $14 = (($__i$03) + 1)|0;
    $15 = (($$012) + 1|0);
    $16 = ($14|0)<($__n|0);
    if ($16) {
     $$012 = $15;$__i$03 = $14;
    } else {
     $$0$ph = $14;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 } else {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
 }
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 do {
  if ($0) {
   label = 12;
  } else {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     label = 13;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     $pbase$0$lcssa6 = $pbase$0;
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     label = 13;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     label = 13;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0$lcssa6|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   else if ((label|0) == 11) {
    label = 12;
    break;
   }
   else if ((label|0) == 13) {
    $$0 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18104)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(14736);
 }
 return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = (($this) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = (($this) + 48|0);
   do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     $10 = $9&255;
     HEAP8[$__ci>>0] = $10;
     $11 = (($this) + 36|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($this) + 40|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($__ci) + 1|0);
     $16 = (($__extbuf) + 8|0);
     $17 = HEAP32[$12>>2]|0;
     $18 = (($17) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
     if ((($20|0) == 1) | (($20|0) == 2)) {
      $$01 = -1;
      break L1;
     } else if ((($20|0) == 3)) {
      $21 = HEAP32[$8>>2]|0;
      $22 = $21&255;
      HEAP8[$__extbuf>>0] = $22;
      $23 = (($__extbuf) + 1|0);
      HEAP32[$__enxt>>2] = $23;
     }
     $24 = (($this) + 32|0);
     while(1) {
      $25 = HEAP32[$__enxt>>2]|0;
      $26 = ($25>>>0)>($__extbuf>>>0);
      if (!($26)) {
       label = 10;
       break;
      }
      $27 = (($25) + -1|0);
      HEAP32[$__enxt>>2] = $27;
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 << 24 >> 24;
      $30 = HEAP32[$24>>2]|0;
      $31 = (_ungetc(($29|0),($30|0))|0);
      $32 = ($31|0)==(-1);
      if ($32) {
       label = 12;
       break;
      }
     }
     if ((label|0) == 10) {
      break;
     }
     else if ((label|0) == 12) {
      $$01 = -1;
      break L1;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 L1: do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   do {
    if ($10) {
     HEAP32[$__err>>2] = 4;
     $21 = ($5|0)>(0);
     $22 = ($4>>>0)>(0);
     $23 = ($5|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$0 = 2147483647;
      break L1;
     }
    } else {
     $11 = ($5|0)<(-1);
     $12 = ($4>>>0)<(2147483648);
     $13 = ($5|0)==(-1);
     $14 = $13 & $12;
     $15 = $11 | $14;
     if ($15) {
      HEAP32[$__err>>2] = 4;
      break;
     }
     $16 = ($5|0)>(0);
     $17 = ($4>>>0)>(2147483647);
     $18 = ($5|0)==(0);
     $19 = $18 & $17;
     $20 = $16 | $19;
     if ($20) {
      HEAP32[$__err>>2] = 4;
      $$0 = 2147483647;
      break L1;
     } else {
      $$0 = $4;
      break L1;
     }
    }
   } while(0);
   $$0 = -2147483648;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    tempRet0 = $17;
    STACKTOP = sp;return ($16|0);
   } else {
    $18 = $5;$19 = $4;
   }
  }
 } while(0);
 tempRet0 = $18;
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(65535);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $12 | $17;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $18 = $6&65535;
    $$0 = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $12 | $17;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $12 | $17;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $$not$i$i & $3;
 if ($or$cond$i$i) {
  $4 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = (($this) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  $2 = ($1|0)==(0|0);
  if ($2) {
   $4 = 0;
  } else {
   HEAP32[$1>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if ($8) {
  $9 = (($this) + 16|0);
  $10 = HEAP32[$this>>2]|0;
  $11 = $10;
  $12 = (($5) - ($11))|0;
  $13 = $12 >> 2;
  $14 = (($13) + ($__n))|0;
  $15 = ($14>>>0)>(1073741823);
  if ($15) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $16 = (($4) - ($11))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  if ($18) {
   $19 = $16 >> 1;
   $20 = ($19>>>0)<($14>>>0);
   $21 = $20 ? $14 : $19;
   $$0$i = $21;
  } else {
   $$0$i = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa = 0, $__nread$0$lcssa14 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = (($this) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ($8|0)>(0);
   do {
    if ($9) {
     $10 = (($this) + 32|0);
     $__i$09 = 0;
     while(1) {
      $11 = HEAP32[$10>>2]|0;
      $12 = (_getc(($11|0))|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       label = 26;
       break;
      }
      $14 = $12&255;
      $15 = (($__extbuf) + ($__i$09)|0);
      HEAP8[$15>>0] = $14;
      $16 = (($__i$09) + 1)|0;
      $17 = ($16|0)<($8|0);
      if ($17) {
       $__i$09 = $16;
      } else {
       label = 8;
       break;
      }
     }
     if ((label|0) == 8) {
      break;
     }
     else if ((label|0) == 26) {
      $$0 = -1;
      break L1;
     }
    }
   } while(0);
   $18 = (($this) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   do {
    if ($20) {
     $21 = (($this) + 40|0);
     $22 = (($this) + 36|0);
     $23 = (($__1buf) + 4|0);
     $24 = (($this) + 32|0);
     $__nread$0 = $8;
     while(1) {
      $27 = HEAP32[$21>>2]|0;
      $28 = $27;
      $29 = $28;
      $30 = HEAP32[$29>>2]|0;
      $31 = (($28) + 4)|0;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = HEAP32[$22>>2]|0;
      $35 = (($__extbuf) + ($__nread$0)|0);
      $36 = HEAP32[$34>>2]|0;
      $37 = (($36) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
      if ((($39|0) == 2)) {
       label = 25;
       break;
      } else if ((($39|0) == 3)) {
       $__nread$0$lcssa14 = $__nread$0;
       label = 15;
       break;
      } else if (!((($39|0) == 1))) {
       $__nread$0$lcssa = $__nread$0;
       label = 17;
       break;
      }
      $40 = HEAP32[$21>>2]|0;
      $41 = $40;
      $42 = $41;
      HEAP32[$42>>2] = $30;
      $43 = (($41) + 4)|0;
      $44 = $43;
      HEAP32[$44>>2] = $33;
      $45 = ($__nread$0|0)==(8);
      if ($45) {
       label = 25;
       break;
      }
      $46 = HEAP32[$24>>2]|0;
      $47 = (_getc(($46|0))|0);
      $48 = ($47|0)==(-1);
      if ($48) {
       label = 25;
       break;
      }
      $51 = $47&255;
      HEAP8[$35>>0] = $51;
      $52 = (($__nread$0) + 1)|0;
      $__nread$0 = $52;
     }
     if ((label|0) == 15) {
      $49 = HEAP8[$__extbuf>>0]|0;
      $50 = $49 << 24 >> 24;
      HEAP32[$__1buf>>2] = $50;
      $__nread$2 = $__nread$0$lcssa14;
      break;
     }
     else if ((label|0) == 17) {
      $__nread$2 = $__nread$0$lcssa;
      break;
     }
     else if ((label|0) == 25) {
      $$0 = -1;
      break L1;
     }
    } else {
     $25 = HEAP8[$__extbuf>>0]|0;
     $26 = $25 << 24 >> 24;
     HEAP32[$__1buf>>2] = $26;
     $__nread$2 = $8;
    }
   } while(0);
   if ($__consume) {
    $62 = HEAP32[$__1buf>>2]|0;
    $63 = (($this) + 48|0);
    HEAP32[$63>>2] = $62;
    $$0 = $62;
    break;
   }
   $53 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $54 = ($__i2$0|0)>(0);
    if (!($54)) {
     label = 23;
     break;
    }
    $55 = (($__i2$0) + -1)|0;
    $56 = (($__extbuf) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = HEAP32[$53>>2]|0;
    $60 = (_ungetc(($58|0),($59|0))|0);
    $61 = ($60|0)==(-1);
    if ($61) {
     label = 24;
     break;
    } else {
     $__i2$0 = $55;
    }
   }
   if ((label|0) == 23) {
    $$pre = HEAP32[$__1buf>>2]|0;
    $$0 = $$pre;
    break;
   }
   else if ((label|0) == 24) {
    $$0 = -1;
    break;
   }
  } else {
   $3 = (($this) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa = 0, $__nread$0$lcssa14 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = (($this) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ($8|0)>(0);
   do {
    if ($9) {
     $10 = (($this) + 32|0);
     $__i$09 = 0;
     while(1) {
      $11 = HEAP32[$10>>2]|0;
      $12 = (_getc(($11|0))|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       label = 27;
       break;
      }
      $14 = $12&255;
      $15 = (($__extbuf) + ($__i$09)|0);
      HEAP8[$15>>0] = $14;
      $16 = (($__i$09) + 1)|0;
      $17 = ($16|0)<($8|0);
      if ($17) {
       $__i$09 = $16;
      } else {
       label = 8;
       break;
      }
     }
     if ((label|0) == 8) {
      break;
     }
     else if ((label|0) == 27) {
      $$0 = -1;
      break L1;
     }
    }
   } while(0);
   $18 = (($this) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   do {
    if ($20) {
     $21 = (($this) + 40|0);
     $22 = (($this) + 36|0);
     $23 = (($__1buf) + 1|0);
     $24 = (($this) + 32|0);
     $__nread$0 = $8;
     while(1) {
      $26 = HEAP32[$21>>2]|0;
      $27 = $26;
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($27) + 4)|0;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = (($__extbuf) + ($__nread$0)|0);
      $35 = HEAP32[$33>>2]|0;
      $36 = (($35) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
      if ((($38|0) == 3)) {
       $__nread$0$lcssa14 = $__nread$0;
       label = 15;
       break;
      } else if ((($38|0) == 2)) {
       label = 26;
       break;
      } else if (!((($38|0) == 1))) {
       $__nread$0$lcssa = $__nread$0;
       label = 17;
       break;
      }
      $39 = HEAP32[$21>>2]|0;
      $40 = $39;
      $41 = $40;
      HEAP32[$41>>2] = $29;
      $42 = (($40) + 4)|0;
      $43 = $42;
      HEAP32[$43>>2] = $32;
      $44 = ($__nread$0|0)==(8);
      if ($44) {
       label = 26;
       break;
      }
      $45 = HEAP32[$24>>2]|0;
      $46 = (_getc(($45|0))|0);
      $47 = ($46|0)==(-1);
      if ($47) {
       label = 26;
       break;
      }
      $49 = $46&255;
      HEAP8[$34>>0] = $49;
      $50 = (($__nread$0) + 1)|0;
      $__nread$0 = $50;
     }
     if ((label|0) == 15) {
      $48 = HEAP8[$__extbuf>>0]|0;
      HEAP8[$__1buf>>0] = $48;
      $__nread$2 = $__nread$0$lcssa14;
      break;
     }
     else if ((label|0) == 17) {
      $__nread$2 = $__nread$0$lcssa;
      break;
     }
     else if ((label|0) == 26) {
      $$0 = -1;
      break L1;
     }
    } else {
     $25 = HEAP8[$__extbuf>>0]|0;
     HEAP8[$__1buf>>0] = $25;
     $__nread$2 = $8;
    }
   } while(0);
   do {
    if ($__consume) {
     $60 = HEAP8[$__1buf>>0]|0;
     $61 = $60&255;
     $62 = (($this) + 48|0);
     HEAP32[$62>>2] = $61;
     $64 = $60;
    } else {
     $51 = (($this) + 32|0);
     $__i2$0 = $__nread$2;
     while(1) {
      $52 = ($__i2$0|0)>(0);
      if (!($52)) {
       label = 23;
       break;
      }
      $53 = (($__i2$0) + -1)|0;
      $54 = (($__extbuf) + ($53)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = HEAP32[$51>>2]|0;
      $58 = (_ungetc(($56|0),($57|0))|0);
      $59 = ($58|0)==(-1);
      if ($59) {
       label = 25;
       break;
      } else {
       $__i2$0 = $53;
      }
     }
     if ((label|0) == 23) {
      $$pre = HEAP8[$__1buf>>0]|0;
      $64 = $$pre;
      break;
     }
     else if ((label|0) == 25) {
      $$0 = -1;
      break L1;
     }
    }
   } while(0);
   $63 = $64&255;
   $$0 = $63;
  } else {
   $3 = (($this) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $$not$i$i & $5;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $12;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  $2 = ($1|0)==(0|0);
  if ($2) {
   $4 = 0;
  } else {
   HEAP32[$1>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $__new_last2$i$i$i = $1;
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i$i;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if (!($10)) {
   $11 = (($this) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($9|0);
   if ($13) {
    $14 = (($12) + 112|0);
    HEAP8[$14>>0] = 0;
    break;
   } else {
    __ZdlPv($9);
    break;
   }
  }
 } while(0);
 return;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 25904;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa16 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$st = $1 ? 25912 : $st;
 $2 = HEAP32[$$st>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (25696 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     }
     $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       $$lcssa = $34;$$lcssa16 = $35;
       label = 15;
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $$lcssa14 = $34;
       label = 18;
       break;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       label = 20;
       break;
      }
     }
     if ((label|0) == 15) {
      HEAP32[$$st>>2] = 0;
      HEAP32[$11>>2] = $$lcssa;
      $37 = (($n) - ($$lcssa16))|0;
      $$0 = $37;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 18) {
      $c$2 = $$lcssa14;
      break;
     }
     else if ((label|0) == 20) {
      break L1;
     }
    }
   } while(0);
   HEAP32[$$st>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$st>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$014$ = 0, $$014$lcssa = 0, $$014$lcssa$ph = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa57 = 0, $$old4 = 0, $$old7 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0$lcssa = 0, $cnt$0$lcssa$ph = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0;
 var $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$0$lcssa = 0, $ws$0$lcssa$ph = 0, $ws$030 = 0, $ws$1 = 0, $ws$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)!=(0|0);
 $3 = ($wn$|0)!=(0);
 $or$cond27 = $2 & $3;
 do {
  if ($or$cond27) {
   $$01428 = $wn$;$$031 = $n;$32 = $0;$cnt$029 = 0;$ws$030 = $wcs$;
   while(1) {
    $4 = $$031 >>> 2;
    $5 = ($4>>>0)>=($$01428>>>0);
    $6 = ($$031>>>0)>(131);
    $or$cond13 = $5 | $6;
    if (!($or$cond13)) {
     $$0$lcssa$ph = $$031;$$014$lcssa$ph = $$01428;$$ph = $32;$cnt$0$lcssa$ph = $cnt$029;$ws$0$lcssa$ph = $ws$030;
     label = 8;
     break;
    }
    $$014$ = $5 ? $$01428 : $4;
    $7 = (($$031) - ($$014$))|0;
    $8 = (_mbsrtowcs($ws$030,$s,$$014$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     label = 17;
     break;
    }
    $10 = ($ws$030|0)==($wbuf|0);
    if ($10) {
     $$115 = $$01428;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$030) + ($8<<2)|0);
     $12 = (($$01428) - ($8))|0;
     $$115 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$029))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$115|0)!=(0);
    $or$cond = $15 & $16;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $7;$32 = $14;$cnt$029 = $13;$ws$030 = $ws$1;
    } else {
     $$0$lcssa$ph = $7;$$014$lcssa$ph = $$115;$$ph = $14;$cnt$0$lcssa$ph = $13;$ws$0$lcssa$ph = $ws$1;
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    $$0$lcssa = $$0$lcssa$ph;$$014$lcssa = $$014$lcssa$ph;$17 = $$ph;$cnt$0$lcssa = $cnt$0$lcssa$ph;$ws$0$lcssa = $ws$0$lcssa$ph;
    label = 9;
    break;
   }
   else if ((label|0) == 17) {
    $cnt$3 = -1;
    break;
   }
  } else {
   $$0$lcssa = $n;$$014$lcssa = $wn$;$17 = $0;$cnt$0$lcssa = 0;$ws$0$lcssa = $wcs$;
   label = 9;
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $18 = ($17|0)!=(0|0);
   $19 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $18 & $19;
   $20 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $20;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $17;$cnt$2 = $cnt$0$lcssa;$ws$2 = $ws$0$lcssa;
    while(1) {
     $22 = (_mbrtowc($ws$2,$21,$$2,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      $$lcssa = $22;$cnt$2$lcssa = $cnt$2;
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$2) - ($22))|0;
     $28 = (($ws$2) + 4|0);
     $29 = (($$3) + -1)|0;
     $30 = (($cnt$2) + 1)|0;
     $$old4 = ($29|0)!=(0);
     $$old7 = ($$2|0)!=($22|0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $27;$$3 = $29;$21 = $26;$cnt$2 = $30;$ws$2 = $28;
     } else {
      $$lcssa57 = $30;
      label = 16;
      break;
     }
    }
    if ((label|0) == 16) {
     $cnt$3 = $$lcssa57;
     break;
    }
    if ((($$lcssa|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else if ((($$lcssa|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
     break;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $31 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $31;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$03$ph = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1413 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0;
 var $$5 = 0, $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$830 = 0, $$in = 0, $$lcssa = 0, $$lcssa35 = 0, $$lcssa36 = 0, $$lcssa37 = 0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$lcssa49 = 0, $$lcssa51 = 0, $$old1 = 0, $$pre$pre = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$0$ph = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1033 = 0, $s$1034 = 0, $s$114 = 0;
 var $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 20;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 43;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03$ph = $wn;$s$0$ph = $0;
   label = 6;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 7;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $$03 = $$03$ph;$s$0 = $s$0$ph;
   while(1) {
    $7 = HEAP8[$s$0>>0]|0;
    $8 = $7&255;
    $9 = (($8) + -1)|0;
    $10 = ($9>>>0)<(127);
    if ($10) {
     $11 = $s$0;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $14 = HEAP32[$s$0>>2]|0;
      $15 = (($14) + -16843009)|0;
      $16 = $15 | $14;
      $17 = $16 & -2139062144;
      $18 = ($17|0)==(0);
      if ($18) {
       $$1413 = $$03;$s$114 = $s$0;
       while(1) {
        $19 = (($s$114) + 4|0);
        $20 = (($$1413) + -4)|0;
        $21 = HEAP32[$19>>2]|0;
        $22 = (($21) + -16843009)|0;
        $23 = $22 | $21;
        $24 = $23 & -2139062144;
        $25 = ($24|0)==(0);
        if ($25) {
         $$1413 = $20;$s$114 = $19;
        } else {
         $$lcssa = $19;$$lcssa35 = $20;$$lcssa36 = $21;
         break;
        }
       }
       $$14$lcssa = $$lcssa35;$$in = $$lcssa36;$s$1$lcssa = $$lcssa;
      } else {
       $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
      }
      $26 = $$in&255;
      $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
     } else {
      $$25 = $$03;$28 = $7;$s$2 = $s$0;
     }
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
    $27 = $28&255;
    $29 = (($27) + -1)|0;
    $30 = ($29>>>0)<(127);
    if (!($30)) {
     $$25$lcssa = $$25;$$lcssa37 = $27;$s$2$lcssa = $s$2;
     break;
    }
    $31 = (($s$2) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
   }
   $33 = (($$lcssa37) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$432 = $ws;$$830 = $$25$lcssa;$s$1034 = $s$2$lcssa;
    label = 54;
    break;
   }
   $35 = (($s$2$lcssa) + 1|0);
   $36 = (25696 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 20;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 31;
    break;
   }
   $$0217 = $$02$ph;$$4716 = $$47$ph;$s$518 = $s$5$ph;
   while(1) {
    $63 = HEAP8[$s$518>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$518;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4716>>>0)>(4);
      $or$cond = $69 & $70;
      if ($or$cond) {
       $$1 = $$0217;$$5 = $$4716;$s$6 = $s$518;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        $76 = $71&255;
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa41 = $76;$s$6$lcssa = $s$6;
         label = 38;
         break;
        }
        $77 = (($s$6) + 1|0);
        $78 = $71 & 255;
        $79 = (($$1) + 4|0);
        HEAP32[$$1>>2] = $78;
        $80 = (($s$6) + 2|0);
        $81 = HEAP8[$77>>0]|0;
        $82 = $81&255;
        $83 = (($$1) + 8|0);
        HEAP32[$79>>2] = $82;
        $84 = (($s$6) + 3|0);
        $85 = HEAP8[$80>>0]|0;
        $86 = $85&255;
        $87 = (($$1) + 12|0);
        HEAP32[$83>>2] = $86;
        $88 = (($s$6) + 4|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = (($$1) + 16|0);
        HEAP32[$87>>2] = $90;
        $92 = (($$5) + -4)|0;
        $$old1 = ($92>>>0)>(4);
        if ($$old1) {
         $$1 = $91;$$5 = $92;$s$6 = $88;
        } else {
         $$lcssa43 = $88;$$lcssa44 = $91;$$lcssa45 = $92;
         label = 37;
         break;
        }
       }
       if ((label|0) == 37) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa43>>0]|0;
        $$2 = $$lcssa44;$$6 = $$lcssa45;$94 = $$pre$pre;$s$7 = $$lcssa43;
        break;
       }
       else if ((label|0) == 38) {
        label = 0;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $$lcssa41;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
      }
     } else {
      $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa49 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = (($s$7) + 1|0);
    $98 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $$lcssa51 = $97;
     label = 30;
     break L7;
    } else {
     $$0217 = $98;$$4716 = $99;$s$518 = $97;
    }
   }
   $101 = (($$lcssa49) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$432 = $$2$lcssa;$$830 = $$6$lcssa;$s$1034 = $s$7$lcssa;
    label = 54;
    break;
   }
   $103 = (($s$7$lcssa) + 1|0);
   $104 = (25696 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 43;
   continue;
  }
  else if ((label|0) == 20) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 21;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 24;
     break;
    }
    $54 = (($s$3) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 27;
      break;
     }
     $61 = (($s$3) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03$ph = $62;$s$0$ph = $s$4;
   label = 6;
   continue;
  }
  else if ((label|0) == 43) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 44;
    break;
   }
   $115 = $c$4 << 6;
   $116 = (($s$8) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 47;
     break;
    }
    $125 = $118 << 6;
    $126 = (($s$8) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 50;
      break;
     }
     $135 = $128 << 6;
     $136 = (($s$8) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 7;
   continue;
  }
 }
 if ((label|0) == 21) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 53;
 }
 else if ((label|0) == 24) {
  $53 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 53;
 }
 else if ((label|0) == 27) {
  $60 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 53;
 }
 else if ((label|0) == 30) {
  $s$5$lcssa = $$lcssa51;
  label = 31;
 }
 else if ((label|0) == 44) {
  $114 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 53;
 }
 else if ((label|0) == 47) {
  $124 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $118;$s$10 = $124;
  label = 53;
 }
 else if ((label|0) == 50) {
  $134 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $128;$s$10 = $134;
  label = 53;
 }
 if ((label|0) == 31) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  return ($$0|0);
 }
 else if ((label|0) == 53) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$432 = $$4;$$830 = $$8;$s$1034 = $s$10;
   label = 54;
  } else {
   $$431 = $$4;$s$1033 = $s$10;
  }
 }
 if ((label|0) == 54) {
  $142 = HEAP8[$s$1034>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$432|0)==(0|0);
   if (!($144)) {
    HEAP32[$$432>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$830))|0;
   $$0 = $145;
   return ($$0|0);
  } else {
   $$431 = $$432;$s$1033 = $s$1034;
  }
 }
 $146 = (___errno_location()|0);
 HEAP32[$146>>2] = 84;
 $147 = ($$431|0)==(0|0);
 if ($147) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1033;
 $$0 = -1;
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (25696 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$014$$0 = 0, $$014$lcssa = 0, $$014$lcssa$ph = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa57 = 0, $$old4 = 0, $$old7 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$0$lcssa = 0, $cnt$0$lcssa$ph = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond10 = 0;
 var $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s$0$lcssa = 0, $s$0$lcssa$ph = 0, $s$030 = 0, $s$1 = 0, $s$2 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)!=(0|0);
 $3 = ($n$|0)!=(0);
 $or$cond27 = $2 & $3;
 do {
  if ($or$cond27) {
   $$01428 = $n$;$$031 = $wn;$33 = $0;$cnt$029 = 0;$s$030 = $dst$;
   while(1) {
    $4 = ($$031>>>0)>=($$01428>>>0);
    $5 = ($$031>>>0)>(32);
    $or$cond13 = $4 | $5;
    if (!($or$cond13)) {
     $$0$lcssa$ph = $$031;$$014$lcssa$ph = $$01428;$$ph = $33;$cnt$0$lcssa$ph = $cnt$029;$s$0$lcssa$ph = $s$030;
     label = 8;
     break;
    }
    $$014$$0 = $4 ? $$01428 : $$031;
    $6 = (($$031) - ($$014$$0))|0;
    $7 = (_wcsrtombs($s$030,$ws,$$014$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     label = 16;
     break;
    }
    $9 = ($s$030|0)==($buf|0);
    if ($9) {
     $$115 = $$01428;$s$1 = $buf;
    } else {
     $10 = (($s$030) + ($7)|0);
     $11 = (($$01428) - ($7))|0;
     $$115 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$029))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)!=(0|0);
    $15 = ($$115|0)!=(0);
    $or$cond = $14 & $15;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $6;$33 = $13;$cnt$029 = $12;$s$030 = $s$1;
    } else {
     $$0$lcssa$ph = $6;$$014$lcssa$ph = $$115;$$ph = $13;$cnt$0$lcssa$ph = $12;$s$0$lcssa$ph = $s$1;
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    $$0$lcssa = $$0$lcssa$ph;$$014$lcssa = $$014$lcssa$ph;$16 = $$ph;$cnt$0$lcssa = $cnt$0$lcssa$ph;$s$0$lcssa = $s$0$lcssa$ph;
    label = 9;
    break;
   }
   else if ((label|0) == 16) {
    $cnt$3 = -1;
    break;
   }
  } else {
   $$0$lcssa = $wn;$$014$lcssa = $n$;$16 = $0;$cnt$0$lcssa = 0;$s$0$lcssa = $dst$;
   label = 9;
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $17 = ($16|0)!=(0|0);
   $18 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $17 & $18;
   $19 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $19;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $16;$cnt$2 = $cnt$0$lcssa;$s$2 = $s$0$lcssa;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$2,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      $$lcssa = $22;$cnt$2$lcssa = $cnt$2;
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$2) + -1)|0;
     $29 = (($s$2) + ($22)|0);
     $30 = (($$3) - ($22))|0;
     $31 = (($cnt$2) + 1)|0;
     $$old4 = ($$3|0)!=($22|0);
     $$old7 = ($28|0)!=(0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $28;$$3 = $30;$21 = $27;$cnt$2 = $31;$s$2 = $29;
     } else {
      $$lcssa57 = $31;
      label = 15;
      break;
     }
    }
    if ((label|0) == 15) {
     $cnt$3 = $$lcssa57;
     break;
    }
    $25 = ($$lcssa|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $32 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $32;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$0$ph = 0, $$0$ph47 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$1$lcssa = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$35$lcssa = 0, $$422 = 0, $$422$lcssa = 0;
 var $$422$lcssa52 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $$0218 = 0;$5 = $3;$ws2$019 = $2;
  while(1) {
   $6 = ($5>>>0)>(127);
   if ($6) {
    $7 = (_wcrtomb($buf,$5,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0$ph = -1;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$0218))|0;
   $9 = (($ws2$019) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0$ph = $$13;
    break;
   } else {
    $$0218 = $$13;$5 = $10;$ws2$019 = $9;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($n>>>0)>(3);
 do {
  if ($1) {
   $$pre = HEAP32[$ws>>2]|0;
   $$0129 = $s;$$2428 = $n;$14 = $$pre;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
      label = 14;
      break;
     }
     $19 = (_wcrtomb($$0129,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      label = 30;
      break;
     }
     $21 = (($$0129) + ($19)|0);
     $22 = (($$2428) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0129) + 1|0);
     HEAP8[$$0129>>0] = $23;
     $25 = (($$2428) + -1)|0;
     $$pre43 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre43;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0129 = $$1;$$2428 = $$35;$14 = $26;
    } else {
     $$1$lcssa = $$1;$$35$lcssa = $$35;
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    $$01$lcssa = $$1$lcssa;$$24$lcssa = $$35$lcssa;
    break;
   }
   else if ((label|0) == 14) {
    HEAP8[$$0129$lcssa>>0] = 0;
    HEAP32[$ws>>2] = 0;
    $18 = (($n) - ($$2428$lcssa))|0;
    $$0 = $18;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 30) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre44 = HEAP32[$ws>>2]|0;
 $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    $$223$lcssa = $$223;$$422$lcssa = $$422;
    label = 21;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0$ph47 = -1;
    label = 29;
    break;
   }
   $37 = ($$422>>>0)<($35>>>0);
   if ($37) {
    $$422$lcssa52 = $$422;
    label = 24;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$223,$39,0)|0);
   $40 = (($$223) + ($35)|0);
   $41 = (($$422) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$223) + 1|0);
   HEAP8[$$223>>0] = $42;
   $44 = (($$422) + -1)|0;
   $$pre45 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre45;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0$ph47 = $n;
   label = 29;
   break;
  } else {
   $$223 = $$3;$$422 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 21) {
  HEAP8[$$223$lcssa>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$422$lcssa))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  $38 = (($n) - ($$422$lcssa52))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 29) {
  $$0 = $$0$ph47;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa = 0, $$lcssa231 = 0, $$lcssa232 = 0, $$lcssa233 = 0, $$lcssa234 = 0, $$lcssa280 = 0, $$lcssa39 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi219Z2D = 0, $$pre205 = 0, $$pre207 = 0, $$pre211 = 0;
 var $$pre213 = 0, $$pre214 = 0, $$pre216 = 0, $$pre217 = 0, $$pre218 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0$lcssa = 0, $alloc$0$lcssa295 = 0, $alloc$0$lcssa296 = 0, $alloc$0$lcssa297 = 0;
 var $alloc$0$lcssa299 = 0, $alloc$0$lcssa300 = 0, $alloc$0$lcssa301 = 0, $alloc$0200 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0101 = 0, $dest$0 = 0, $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph$lcssa247 = 0;
 var $i$0$ph21 = 0, $i$0$ph21$lcssa = 0, $i$0$ph21$lcssa250 = 0, $i$0$ph21$us106 = 0, $i$0$ph21$us106$lcssa = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$lcssa = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$3$lcssa = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit796 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp695 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0111 = 0, $matches$0111$lcssa = 0, $matches$0111$lcssa252 = 0, $matches$0111$lcssa253 = 0, $matches$0111$lcssa254 = 0, $matches$0111$lcssa255 = 0, $matches$0111$lcssa256 = 0, $matches$0111$lcssa257 = 0, $matches$0111$lcssa258 = 0, $matches$0111$lcssa259 = 0, $matches$0111261 = 0, $matches$1 = 0, $matches$1$lcssa = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0117 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$lcssa = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0116 = 0;
 var $pos$1 = 0, $pos$2 = 0, $s$0109 = 0, $s$0109$lcssa = 0, $s$1 = 0, $s$1$lcssa282 = 0, $s$2$ph = 0, $s$2$ph$lcssa = 0, $s$2$ph$lcssa237 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$6$ph = 0, $s$7 = 0, $s$8 = 0, $s$8$ph = 0, $scanset = 0, $size$0 = 0, $st = 0;
 var $vacopy_currentptr = 0, $wc = 0, $wcs$0110 = 0, $wcs$0110$lcssa = 0, $wcs$1 = 0, $wcs$1$lcssa289 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph$lcssa$lcssa = 0, $wcs$3$ph$lcssa240 = 0, $wcs$3$ph$lcssa241 = 0, $wcs$3$ph$lcssa244 = 0, $wcs$3$ph141 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$7$ph = 0, $wcs$8 = 0;
 var $wcs$9 = 0, $wcs$9$ph = 0, $width$0$lcssa = 0, $width$098 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0111 = 0;$p$0117 = $fmt;$pos$0116 = 0;$s$0109 = 0;$wcs$0110 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0117>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L22: do {
     if ($43) {
      $44 = (($p$0117) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0117) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L22;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0117) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            $$lcssa = $72;
            break;
           }
          }
          $74 = (($p$0117) + 3|0);
          $dest$0 = $$lcssa;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp695 = (($77) + -48)|0;
      $isdigit796 = ($isdigittmp695>>>0)<(10);
      if ($isdigit796) {
       $81 = $77;$p$397 = $p$2;$width$098 = 0;
       while(1) {
        $78 = ($width$098*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$397) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$397 = $82;$width$098 = $80;
        } else {
         $$lcssa231 = $80;$$lcssa232 = $82;$$lcssa233 = $83;
         break;
        }
       }
       $$lcssa39 = $$lcssa233;$p$3$lcssa = $$lcssa232;$width$0$lcssa = $$lcssa231;
      } else {
       $$lcssa39 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa39<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa39;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0109;$wcs$1 = $wcs$0110;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      default: {
       $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
       label = 188;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0116;$width$1 = $$width$0;
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0116;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 110)) {
       $104 = ($pos$0116|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0116;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $107 = $pos$0116&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $108 = $pos$0116&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre205 = HEAP32[$3>>2]|0;
       if ($124) {
        $128 = $$pre205;
       } else {
        $125 = (($$pre205) + -1|0);
        HEAP32[$3>>2] = $125;
        $128 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $129 = $128;
       $130 = $127;
       $131 = (($126) + ($pos$0116))|0;
       $132 = (($131) + ($129))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $140 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
        label = 188;
        break L4;
       }
       $$pre207 = HEAP32[$4>>2]|0;
       $140 = $$pre207;
      }
      $141 = ($140|0)==(0|0);
      if (!($141)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L81: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        if ($146) {
         $147 = ($$|0)==(115);
         _memset(($scanset|0),-1,257)|0;
         HEAP8[$scanset>>0] = 0;
         if ($147) {
          HEAP8[$8>>0] = 0;
          ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
          $p$9 = $p$5;
         } else {
          $p$9 = $p$5;
         }
        } else {
         $148 = (($p$5) + 1|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = ($149<<24>>24)==(94);
         $151 = (($p$5) + 2|0);
         $invert$0 = $150&1;
         $152 = $150 ? $148 : $p$5;
         $p$6 = $150 ? $151 : $148;
         $153 = $150&1;
         _memset(($scanset|0),($153|0),257)|0;
         HEAP8[$scanset>>0] = 0;
         $154 = HEAP8[$p$6>>0]|0;
         if ((($154<<24>>24) == 45)) {
          $155 = (($152) + 2|0);
          $156 = $invert$0 ^ 1;
          $157 = $156&255;
          HEAP8[$10>>0] = $157;
          $$pre$phi219Z2D = $157;$p$7$ph = $155;
         } else if ((($154<<24>>24) == 93)) {
          $158 = (($152) + 2|0);
          $159 = $invert$0 ^ 1;
          $160 = $159&255;
          HEAP8[$11>>0] = $160;
          $$pre$phi219Z2D = $160;$p$7$ph = $158;
         } else {
          $$pre217 = $invert$0 ^ 1;
          $$pre218 = $$pre217&255;
          $$pre$phi219Z2D = $$pre218;$p$7$ph = $p$6;
         }
         $p$7 = $p$7$ph;
         while(1) {
          $161 = HEAP8[$p$7>>0]|0;
          if ((($161<<24>>24) == 45)) {
           $162 = (($p$7) + 1|0);
           $163 = HEAP8[$162>>0]|0;
           if ((($163<<24>>24) == 93) | (($163<<24>>24) == 0)) {
            $174 = 45;$p$8 = $p$7;
           } else {
            $164 = (($p$7) + -1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165&255)<($163&255);
            if ($166) {
             $167 = $165&255;
             $c$0101 = $167;
             while(1) {
              $168 = (($c$0101) + 1)|0;
              $169 = (($scanset) + ($168)|0);
              HEAP8[$169>>0] = $$pre$phi219Z2D;
              $170 = HEAP8[$162>>0]|0;
              $171 = $170&255;
              $172 = ($168|0)<($171|0);
              if ($172) {
               $c$0101 = $168;
              } else {
               $$lcssa234 = $170;
               break;
              }
             }
             $174 = $$lcssa234;$p$8 = $162;
            } else {
             $174 = $163;$p$8 = $162;
            }
           }
          } else if ((($161<<24>>24) == 93)) {
           $p$7$lcssa = $p$7;
           break;
          } else if ((($161<<24>>24) == 0)) {
           $alloc$0$lcssa296 = $alloc$0;$matches$0111$lcssa254 = $matches$0111;$s$1$lcssa282 = $s$1;$wcs$1$lcssa289 = $wcs$1;
           label = 187;
           break L4;
          } else {
           $174 = $161;$p$8 = $p$7;
          }
          $173 = $174&255;
          $175 = (($173) + 1)|0;
          $176 = (($scanset) + ($175)|0);
          HEAP8[$176>>0] = $$pre$phi219Z2D;
          $177 = (($p$8) + 1|0);
          $p$7 = $177;
         }
         $p$9 = $p$7$lcssa;
        }
        $178 = (($width$1) + 1)|0;
        $$8 = $144 ? $178 : 31;
        $179 = ($$size$0|0)==(1);
        $180 = ($alloc$0|0)!=(0);
        do {
         if ($179) {
          if ($180) {
           $181 = $$8 << 2;
           $182 = (_malloc($181)|0);
           $183 = ($182|0)==(0|0);
           if ($183) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $182;
            label = 188;
            break L4;
           } else {
            $wcs$2 = $182;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L110: while(1) {
           $184 = ($wcs$3$ph|0)==(0|0);
           if ($184) {
            while(1) {
             $187 = HEAP32[$3>>2]|0;
             $198 = HEAP32[$4>>2]|0;
             $199 = ($187>>>0)<($198>>>0);
             if ($199) {
              $186 = (($187) + 1|0);
              HEAP32[$3>>2] = $186;
              $188 = HEAP8[$187>>0]|0;
              $189 = $188&255;
              $191 = $189;
             } else {
              $185 = (___shgetc($f)|0);
              $191 = $185;
             }
             $190 = (($191) + 1)|0;
             $192 = (($scanset) + ($190)|0);
             $193 = HEAP8[$192>>0]|0;
             $194 = ($193<<24>>24)==(0);
             if ($194) {
              $i$0$ph$lcssa247 = $i$0$ph;
              label = 120;
              break L110;
             }
             $195 = $191&255;
             HEAP8[$0>>0] = $195;
             $196 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($196|0) == -1)) {
              $alloc$0$lcssa300 = $alloc$0;$matches$0111$lcssa258 = $matches$0111;
              label = 184;
              break L4;
             } else if (!((($196|0) == -2))) {
              $197 = ($i$0$ph|0)==($k$0$ph|0);
              $or$cond$us = $180 & $197;
              if ($or$cond$us) {
               break;
              }
             }
            }
            $i$1$lcssa = $i$0$ph;
           } else {
            if (!($180)) {
             $i$0$ph$lcssa = $i$0$ph;$wcs$3$ph$lcssa = $wcs$3$ph;
             label = 91;
             break;
            }
            $i$0$ph21$us106 = $i$0$ph;
            while(1) {
             while(1) {
              $202 = HEAP32[$3>>2]|0;
              $216 = HEAP32[$4>>2]|0;
              $217 = ($202>>>0)<($216>>>0);
              if ($217) {
               $201 = (($202) + 1|0);
               HEAP32[$3>>2] = $201;
               $203 = HEAP8[$202>>0]|0;
               $204 = $203&255;
               $206 = $204;
              } else {
               $200 = (___shgetc($f)|0);
               $206 = $200;
              }
              $205 = (($206) + 1)|0;
              $207 = (($scanset) + ($205)|0);
              $208 = HEAP8[$207>>0]|0;
              $209 = ($208<<24>>24)==(0);
              if ($209) {
               $i$0$ph21$us106$lcssa = $i$0$ph21$us106;$wcs$3$ph$lcssa240 = $wcs$3$ph;
               label = 118;
               break L110;
              }
              $210 = $206&255;
              HEAP8[$0>>0] = $210;
              $211 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($211|0) == -1)) {
               $alloc$0$lcssa299 = $alloc$0;$matches$0111$lcssa257 = $matches$0111;$wcs$3$ph$lcssa241 = $wcs$3$ph;
               label = 182;
               break L4;
              } else if (!((($211|0) == -2))) {
               break;
              }
             }
             $212 = HEAP32[$wc>>2]|0;
             $213 = (($i$0$ph21$us106) + 1)|0;
             $214 = (($wcs$3$ph) + ($i$0$ph21$us106<<2)|0);
             HEAP32[$214>>2] = $212;
             $215 = ($213|0)==($k$0$ph|0);
             if ($215) {
              break;
             } else {
              $i$0$ph21$us106 = $213;
             }
            }
            $i$1$lcssa = $k$0$ph;
           }
           $factor = $k$0$ph << 1;
           $235 = $factor | 1;
           $236 = $235 << 2;
           $237 = (_realloc($wcs$3$ph,$236)|0);
           $238 = ($237|0)==(0|0);
           if ($238) {
            $alloc$0$lcssa301 = $alloc$0;$matches$0111$lcssa259 = $matches$0111;$wcs$3$ph$lcssa244 = $wcs$3$ph;
            label = 185;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $235;$wcs$3$ph = $237;
          }
          if ((label|0) == 91) {
           label = 0;
           $i$0$ph21 = $i$0$ph$lcssa;
           L142: while(1) {
            while(1) {
             $218 = HEAP32[$3>>2]|0;
             $219 = HEAP32[$4>>2]|0;
             $220 = ($218>>>0)<($219>>>0);
             if ($220) {
              $221 = (($218) + 1|0);
              HEAP32[$3>>2] = $221;
              $222 = HEAP8[$218>>0]|0;
              $223 = $222&255;
              $226 = $223;
             } else {
              $224 = (___shgetc($f)|0);
              $226 = $224;
             }
             $225 = (($226) + 1)|0;
             $227 = (($scanset) + ($225)|0);
             $228 = HEAP8[$227>>0]|0;
             $229 = ($228<<24>>24)==(0);
             if ($229) {
              $i$0$ph21$lcssa250 = $i$0$ph21;
              break L142;
             }
             $230 = $226&255;
             HEAP8[$0>>0] = $230;
             $231 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($231|0) == -1)) {
              $matches$0111$lcssa256 = $matches$0111;$wcs$3$ph$lcssa$lcssa = $wcs$3$ph$lcssa;
              label = 183;
              break L4;
             } else if (!((($231|0) == -2))) {
              break;
             }
            }
            $232 = HEAP32[$wc>>2]|0;
            $233 = (($i$0$ph21) + 1)|0;
            $234 = (($wcs$3$ph$lcssa) + ($i$0$ph21<<2)|0);
            HEAP32[$234>>2] = $232;
            $i$0$ph21 = $233;
           }
           $i$0$ph21$lcssa = $i$0$ph21$lcssa250;$wcs$3$ph141 = $wcs$3$ph$lcssa;
          }
          else if ((label|0) == 118) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph21$us106$lcssa;$wcs$3$ph141 = $wcs$3$ph$lcssa240;
          }
          else if ((label|0) == 120) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph$lcssa247;$wcs$3$ph141 = 0;
          }
          $239 = (_mbsinit($st)|0);
          $240 = ($239|0)==(0);
          if ($240) {
           $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $wcs$3$ph141;
           label = 188;
           break L4;
          } else {
           $i$4 = $i$0$ph21$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph141;
          }
         } else {
          if ($180) {
           $241 = (_malloc($$8)|0);
           $242 = ($241|0)==(0|0);
           if ($242) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = 0;
            label = 188;
            break L4;
           }
           $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $241;
           L160: while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $243 = HEAP32[$3>>2]|0;
             $244 = HEAP32[$4>>2]|0;
             $245 = ($243>>>0)<($244>>>0);
             if ($245) {
              $246 = (($243) + 1|0);
              HEAP32[$3>>2] = $246;
              $247 = HEAP8[$243>>0]|0;
              $248 = $247&255;
              $251 = $248;
             } else {
              $249 = (___shgetc($f)|0);
              $251 = $249;
             }
             $250 = (($251) + 1)|0;
             $252 = (($scanset) + ($250)|0);
             $253 = HEAP8[$252>>0]|0;
             $254 = ($253<<24>>24)==(0);
             if ($254) {
              $i$2$lcssa = $i$2;$s$2$ph$lcssa = $s$2$ph;
              break L160;
             }
             $255 = $251&255;
             $256 = (($i$2) + 1)|0;
             $257 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$257>>0] = $255;
             $258 = ($256|0)==($k$1$ph|0);
             if ($258) {
              break;
             } else {
              $i$2 = $256;
             }
            }
            $factor17 = $k$1$ph << 1;
            $259 = $factor17 | 1;
            $260 = (_realloc($s$2$ph,$259)|0);
            $261 = ($260|0)==(0|0);
            if ($261) {
             $alloc$0$lcssa297 = $alloc$0;$matches$0111$lcssa255 = $matches$0111;$s$2$ph$lcssa237 = $s$2$ph;
             label = 186;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $259;$s$2$ph = $260;$i$2$ph = $i$2$ph$phi;
            }
           }
           $i$4 = $i$2$lcssa;$s$3 = $s$2$ph$lcssa;$wcs$4 = 0;
           break;
          }
          $262 = ($dest$0|0)==(0|0);
          if ($262) {
           $280 = $140;
           while(1) {
            $278 = HEAP32[$3>>2]|0;
            $279 = ($278>>>0)<($280>>>0);
            if ($279) {
             $281 = (($278) + 1|0);
             HEAP32[$3>>2] = $281;
             $282 = HEAP8[$278>>0]|0;
             $283 = $282&255;
             $286 = $283;
            } else {
             $284 = (___shgetc($f)|0);
             $286 = $284;
            }
            $285 = (($286) + 1)|0;
            $287 = (($scanset) + ($285)|0);
            $288 = HEAP8[$287>>0]|0;
            $289 = ($288<<24>>24)==(0);
            if ($289) {
             break;
            }
            $$pre213 = HEAP32[$4>>2]|0;
            $280 = $$pre213;
           }
           $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
           break;
          } else {
           $265 = $140;$i$3 = 0;
           while(1) {
            $263 = HEAP32[$3>>2]|0;
            $264 = ($263>>>0)<($265>>>0);
            if ($264) {
             $266 = (($263) + 1|0);
             HEAP32[$3>>2] = $266;
             $267 = HEAP8[$263>>0]|0;
             $268 = $267&255;
             $271 = $268;
            } else {
             $269 = (___shgetc($f)|0);
             $271 = $269;
            }
            $270 = (($271) + 1)|0;
            $272 = (($scanset) + ($270)|0);
            $273 = HEAP8[$272>>0]|0;
            $274 = ($273<<24>>24)==(0);
            if ($274) {
             $i$3$lcssa = $i$3;
             break;
            }
            $275 = $271&255;
            $276 = (($i$3) + 1)|0;
            $277 = (($dest$0) + ($i$3)|0);
            HEAP8[$277>>0] = $275;
            $$pre214 = HEAP32[$4>>2]|0;
            $265 = $$pre214;$i$3 = $276;
           }
           $i$4 = $i$3$lcssa;$s$3 = $dest$0;$wcs$4 = 0;
           break;
          }
         }
        } while(0);
        $290 = HEAP32[$4>>2]|0;
        $291 = ($290|0)==(0|0);
        $$pre211 = HEAP32[$3>>2]|0;
        if ($291) {
         $295 = $$pre211;
        } else {
         $292 = (($$pre211) + -1|0);
         HEAP32[$3>>2] = $292;
         $295 = $292;
        }
        $293 = HEAP32[$5>>2]|0;
        $294 = HEAP32[$6>>2]|0;
        $296 = $295;
        $297 = $294;
        $298 = (($296) - ($297))|0;
        $299 = (($298) + ($293))|0;
        $300 = ($299|0)==(0);
        if ($300) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        $$not = $144 ^ 1;
        $301 = ($299|0)==($width$1|0);
        $or$cond9 = $301 | $$not;
        if (!($or$cond9)) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        do {
         if ($180) {
          if ($179) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $302 = ($wcs$4|0)==(0|0);
         if (!($302)) {
          $303 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$303>>2] = 0;
         }
         $304 = ($s$3|0)==(0|0);
         if ($304) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $305 = (($s$3) + ($i$4)|0);
          HEAP8[$305>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 164;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 164;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 164;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $325 = (+___floatscan($f,$$size$0,0));
        $326 = HEAP32[$5>>2]|0;
        $327 = HEAP32[$3>>2]|0;
        $328 = HEAP32[$6>>2]|0;
        $329 = $327;
        $330 = $328;
        $331 = (($330) - ($329))|0;
        $332 = ($326|0)==($331|0);
        if ($332) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $333 = ($dest$0|0)==(0|0);
        if ($333) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         } else if ((($$size$0|0) == 0)) {
          $334 = $325;
          HEAPF32[$dest$0>>2] = $334;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L81;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 164;
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L218: do {
       if ((label|0) == 164) {
        label = 0;
        $306 = (___intscan($f,$base$0,0,-1,-1)|0);
        $307 = tempRet0;
        $308 = HEAP32[$5>>2]|0;
        $309 = HEAP32[$3>>2]|0;
        $310 = HEAP32[$6>>2]|0;
        $311 = $309;
        $312 = $310;
        $313 = (($312) - ($311))|0;
        $314 = ($308|0)==($313|0);
        if ($314) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $315 = ($$|0)==(112);
        $316 = ($dest$0|0)!=(0|0);
        $or$cond3 = $315 & $316;
        if ($or$cond3) {
         $317 = $306;
         HEAP32[$dest$0>>2] = $317;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $318 = ($dest$0|0)==(0|0);
        if ($318) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $319 = $306&255;
          HEAP8[$dest$0>>0] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case -1:  {
          $320 = $306&65535;
          HEAP16[$dest$0>>1] = $320;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         case 3:  {
          $321 = $dest$0;
          $322 = $321;
          HEAP32[$322>>2] = $306;
          $323 = (($321) + 4)|0;
          $324 = $323;
          HEAP32[$324>>2] = $307;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L218;
         }
         }
        }
       }
      } while(0);
      $335 = HEAP32[$5>>2]|0;
      $336 = HEAP32[$3>>2]|0;
      $337 = HEAP32[$6>>2]|0;
      $338 = $336;
      $339 = $337;
      $340 = (($335) + ($pos$1))|0;
      $341 = (($340) + ($338))|0;
      $342 = (($341) - ($339))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $343 = $not$&1;
      $matches$0$ = (($343) + ($matches$0111))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $342;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0117) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     $$lcssa280 = $57;$matches$0111$lcssa = $matches$0111;$s$0109$lcssa = $s$0109;$wcs$0110$lcssa = $wcs$0110;
     label = 20;
     break L4;
    }
    $65 = (($pos$0116) + 1)|0;
    $matches$1 = $matches$0111;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   } else {
    $p$1 = $p$0117;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre216 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre216;
    } else {
     $33 = (($$pre216) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0116))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0111;$p$11 = $p$1$lcssa;$pos$2 = $41;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   }
  } while(0);
  $344 = (($p$11) + 1|0);
  $345 = HEAP8[$344>>0]|0;
  $346 = ($345<<24>>24)==(0);
  if ($346) {
   $matches$1$lcssa = $matches$1;
   label = 194;
   break;
  } else {
   $13 = $345;$matches$0111 = $matches$1;$p$0117 = $344;$pos$0116 = $pos$2;$s$0109 = $s$5;$wcs$0110 = $wcs$6;
  }
 }
 switch (label|0) {
  case 20: {
   $59 = HEAP32[$4>>2]|0;
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    $61 = HEAP32[$3>>2]|0;
    $62 = (($61) + -1|0);
    HEAP32[$3>>2] = $62;
   }
   $63 = ($$lcssa280|0)>(-1);
   $64 = ($matches$0111$lcssa|0)!=(0);
   $or$cond5 = $63 | $64;
   if ($or$cond5) {
    $matches$3 = $matches$0111$lcssa;
    STACKTOP = sp;return ($matches$3|0);
   } else {
    $alloc$1 = 0;$s$7 = $s$0109$lcssa;$wcs$8 = $wcs$0110$lcssa;
    label = 190;
   }
   break;
  }
  case 182: {
   $alloc$0200 = $alloc$0$lcssa299;$matches$0111261 = $matches$0111$lcssa257;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa241;
   label = 189;
   break;
  }
  case 183: {
   $alloc$0200 = 0;$matches$0111261 = $matches$0111$lcssa256;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa$lcssa;
   label = 189;
   break;
  }
  case 184: {
   $alloc$0200 = $alloc$0$lcssa300;$matches$0111261 = $matches$0111$lcssa258;$s$6 = 0;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 185: {
   $alloc$0200 = $alloc$0$lcssa301;$matches$0111261 = $matches$0111$lcssa259;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa244;
   label = 189;
   break;
  }
  case 186: {
   $alloc$0200 = $alloc$0$lcssa297;$matches$0111261 = $matches$0111$lcssa255;$s$6 = $s$2$ph$lcssa237;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 187: {
   $alloc$0200 = $alloc$0$lcssa296;$matches$0111261 = $matches$0111$lcssa254;$s$6 = $s$1$lcssa282;$wcs$7 = $wcs$1$lcssa289;
   label = 189;
   break;
  }
  case 188: {
   $alloc$0200 = $alloc$0$lcssa;$matches$0111261 = $matches$0111$lcssa252;$s$6 = $s$6$ph;$wcs$7 = $wcs$7$ph;
   label = 189;
   break;
  }
  case 191: {
   $alloc$2 = $alloc$0$lcssa295;$matches$2 = $matches$0111$lcssa253;$s$8 = $s$8$ph;$wcs$9 = $wcs$9$ph;
   break;
  }
  case 194: {
   $matches$3 = $matches$1$lcssa;
   STACKTOP = sp;return ($matches$3|0);
   break;
  }
 }
 if ((label|0) == 189) {
  $$old4 = ($matches$0111261|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0200;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 190;
  } else {
   $alloc$2 = $alloc$0200;$matches$2 = $matches$0111261;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 if ((label|0) == 190) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $347 = ($alloc$2|0)==(0);
 if ($347) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 539;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 }
 $$014 = $n;$$023 = $s;$$05 = $d;
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if ($5) {
   return ($d|0);
  }
  $$in = $n;
  while(1) {
   $6 = (($$in) + -1)|0;
   $7 = (($s) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($d) + ($6<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)==(0);
   if ($10) {
    break;
   } else {
    $$in = $6;
   }
  }
  return ($d|0);
 } else {
  if ($5) {
   return ($d|0);
  }
  $$025 = $s;$$07 = $d;$$16 = $n;
  while(1) {
   $11 = (($$16) + -1)|0;
   $12 = (($$025) + 4|0);
   $13 = HEAP32[$$025>>2]|0;
   $14 = (($$07) + 4|0);
   HEAP32[$$07>>2] = $13;
   $15 = ($11|0)==(0);
   if ($15) {
    break;
   } else {
    $$025 = $12;$$07 = $14;$$16 = $11;
   }
  }
  return ($d|0);
 }
 return (0)|0;
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 }
 $$012 = $n;$$03 = $d;
 while(1) {
  $1 = (($$012) + -1)|0;
  $2 = (($$03) + 4|0);
  HEAP32[$$03>>2] = $c;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012 = $1;$$03 = $2;
  }
 }
 return ($d|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((26112|0),(540|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[26104>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(26120,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$lcssa3 = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     label = 5;
     break;
    }
    FUNCTION_TABLE_v[$3 & 1023]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa3 = $5;
     label = 6;
     break;
    }
   }
   if ((label|0) == 5) {
    $7 = (___cxa_allocate_exception(4)|0);
    HEAP32[$7>>2] = ((26288 + 8|0));
    ___cxa_throw(($7|0),(26344|0),(344|0));
    // unreachable;
   }
   else if ((label|0) == 6) {
    $$lcssa = $$lcssa3;
    break;
   }
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26288 + 8|0));
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26312|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(541,(26360|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(541,(26400|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(397);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ___clang_call_terminate($8);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(542)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (($4) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = (($4) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[6480]|0;HEAP32[6480] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[26456>>2]|0;HEAP32[26456>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26488 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26512 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26672 + 8|0));
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26696|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,26808,26864,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = (($info) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = (($info) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = (($info) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = (($7) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = (($info) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = (($info) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$1 = 1;
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = (($info) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = (($info) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = (($info) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = (($info) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = (($info) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = (($info) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = (($this) + 16|0);
  $4 = (($this) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($this) + ($5<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
  $7 = ($5|0)>(1);
  if ($7) {
   $8 = (($this) + 24|0);
   $9 = (($info) + 54|0);
   $p$0 = $8;
   while(1) {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if (!($11)) {
     break;
    }
    $12 = (($p$0) + 8|0);
    $13 = ($12>>>0)<($6>>>0);
    if ($13) {
     $p$0 = $12;
    } else {
     break;
    }
   }
  }
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = (($info) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$6>>2]|0;
   $19 = (($18) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($6,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = (($info) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = (($24) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = (($info) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = (($info) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = (($info) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = (($info) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = (($info) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = (($info) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = (($info) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = (($info) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = (($info) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = (($info) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = (($info) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off016 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off018 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off032 = 0, $is_dst_type_derived_from_static_type$2$off033 = 0, $p$017 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $59 = (($this) + 16|0);
    $60 = (($this) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($this) + ($61<<3)|0) + 16|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
    $63 = (($this) + 24|0);
    $64 = ($61|0)>(1);
    if (!($64)) {
     break;
    }
    $65 = (($this) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66 & 2;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = (($info) + 36|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(1);
     if (!($71)) {
      $77 = $66 & 1;
      $78 = ($77|0)==(0);
      if ($78) {
       $81 = (($info) + 54|0);
       $p2$2 = $63;
       while(1) {
        $90 = HEAP8[$81>>0]|0;
        $91 = ($90<<24>>24)==(0);
        if (!($91)) {
         break;
        }
        $92 = HEAP32[$69>>2]|0;
        $93 = ($92|0)==(1);
        if ($93) {
         break;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $94 = (($p2$2) + 8|0);
        $95 = ($94>>>0)<($62>>>0);
        if ($95) {
         $p2$2 = $94;
        } else {
         break;
        }
       }
       break;
      }
      $79 = (($info) + 24|0);
      $80 = (($info) + 54|0);
      $p2$1 = $63;
      while(1) {
       $82 = HEAP8[$80>>0]|0;
       $83 = ($82<<24>>24)==(0);
       if (!($83)) {
        break;
       }
       $84 = HEAP32[$69>>2]|0;
       $85 = ($84|0)==(1);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = ($86|0)==(1);
        if ($87) {
         break;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $88 = (($p2$1) + 8|0);
       $89 = ($88>>>0)<($62>>>0);
       if ($89) {
        $p2$1 = $88;
       } else {
        break;
       }
      }
      break;
     }
    }
    $72 = (($info) + 54|0);
    $p2$0 = $63;
    while(1) {
     $73 = HEAP8[$72>>0]|0;
     $74 = ($73<<24>>24)==(0);
     if (!($74)) {
      break;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $75 = (($p2$0) + 8|0);
     $76 = ($75>>>0)<($62>>>0);
     if ($76) {
      $p2$0 = $75;
     } else {
      break;
     }
    }
    break;
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($this) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($this) + ($24<<3)|0) + 16|0);
     $26 = ($24|0)>(0);
     do {
      if ($26) {
       $27 = (($this) + 16|0);
       $28 = (($info) + 52|0);
       $29 = (($info) + 53|0);
       $30 = (($info) + 54|0);
       $31 = (($this) + 8|0);
       $32 = (($info) + 24|0);
       $does_dst_type_point_to_our_static_type$0$off016 = 0;$is_dst_type_derived_from_static_type$0$off018 = 0;$p$017 = $27;
       L39: while(1) {
        HEAP8[$28>>0] = 0;
        HEAP8[$29>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$017,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$30>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off018;
         label = 20;
         break;
        }
        $35 = HEAP8[$29>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off018;
         } else {
          $37 = HEAP8[$28>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$31>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L39;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$32>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           label = 25;
           break L39;
          }
          $41 = HEAP32[$31>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           label = 25;
           break L39;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = (($p$017) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off016 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off018 = $is_dst_type_derived_from_static_type$1$off0;$p$017 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
       if ((label|0) == 20) {
        if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
         $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off0;
         label = 24;
         break;
        } else {
         $is_dst_type_derived_from_static_type$2$off032 = $is_dst_type_derived_from_static_type$2$off0;
         label = 21;
         break;
        }
       }
       else if ((label|0) == 25) {
        label = 26;
        break;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off032 = 0;
       label = 21;
      }
     } while(0);
     if ((label|0) == 21) {
      HEAP32[$14>>2] = $current_ptr;
      $49 = (($info) + 40|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($50) + 1)|0;
      HEAP32[$49>>2] = $51;
      $52 = (($info) + 36|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)==(1);
      if ($54) {
       $55 = (($info) + 24|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(2);
       if ($57) {
        $58 = (($info) + 54|0);
        HEAP8[$58>>0] = 1;
        if ($is_dst_type_derived_from_static_type$2$off032) {
         label = 26;
        } else {
         label = 27;
        }
       } else {
        $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
        label = 24;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
       label = 24;
      }
     }
     if ((label|0) == 24) {
      if ($is_dst_type_derived_from_static_type$2$off033) {
       label = 26;
      } else {
       label = 27;
      }
     }
     if ((label|0) == 26) {
      HEAP32[$20>>2] = 3;
      break;
     }
     else if ((label|0) == 27) {
      HEAP32[$20>>2] = 4;
      break;
     }
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = (($this) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($info) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = (($info) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = (($info) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = (($info) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = (($info) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = (($info) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($9|0)==($this|0);
   if ($10) {
    $11 = (($info) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = (($info) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = (($info) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = (($info) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = (($info) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = (($info) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = (($info) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = (($info) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = (($info) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($info) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($info) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($this) + 16|0);
  $8 = (($this) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($this) + ($9<<3)|0) + 16|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,26808,26976,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(26344|0),(344|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($2) + 80|0);
   $5 = (($2) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[25928>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(26048,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = (($2) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[26480>>2]|0;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](26480,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[25928>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = (($31) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(25952,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[25928>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(26000,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(26088,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((26104|0),(543|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(26176,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[26104>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(26232,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa110 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$lcssa137 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0;
 var $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0;
 var $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0;
 var $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0;
 var $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0;
 var $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0, $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0;
 var $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0;
 var $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0;
 var $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$2$i$ph = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0;
 var $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$1$i$ph = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$2$i$ph = 0, $v$3$lcssa$i = 0;
 var $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[27328>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((27328 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((27328 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[27328>>2] = $22;
     } else {
      $23 = HEAP32[((27328 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((27328 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((27328 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((27328 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[27328>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((27328 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((27328 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((27328 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((27328 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[27328>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[27328>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((27328 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((27328 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((27328 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((27328 + 8|0))>>2] = $81;
     HEAP32[((27328 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((27328 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((27328 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((27328 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((27328 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((27328 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((27328 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((27328 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((27328 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((27328 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((27328 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((27328 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((27328 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[27328>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[27328>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((27328 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((27328 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((27328 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((27328 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((27328 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((27328 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((27328 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     if ($277) {
      $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
     } else {
      $278 = ($idx$0$i|0)==(31);
      if ($278) {
       $282 = 0;
      } else {
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $282 = $280;
      }
      $281 = $246 << $282;
      $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
      while(1) {
       $283 = (($t$0$i14) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284 & -8;
       $286 = (($285) - ($246))|0;
       $287 = ($286>>>0)<($rsize$0$i15>>>0);
       if ($287) {
        $288 = ($285|0)==($246|0);
        if ($288) {
         $rsize$2$i$ph = $286;$t$1$i$ph = $t$0$i14;$v$2$i$ph = $t$0$i14;
         break;
        } else {
         $rsize$1$i = $286;$v$1$i = $t$0$i14;
        }
       } else {
        $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
       }
       $289 = (($t$0$i14) + 20|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = $sizebits$0$i >>> 31;
       $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = ($290|0)==(0|0);
       $295 = ($290|0)==($293|0);
       $or$cond19$i = $294 | $295;
       $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
       $296 = ($293|0)==(0|0);
       $297 = $sizebits$0$i << 1;
       if ($296) {
        $rsize$2$i$ph = $rsize$1$i;$t$1$i$ph = $rst$1$i;$v$2$i$ph = $v$1$i;
        break;
       } else {
        $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
       }
      }
      $rsize$2$i = $rsize$2$i$ph;$t$1$i = $t$1$i$ph;$v$2$i = $v$2$i$ph;
     }
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((27328 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((27328 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((27328 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((27328 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((27328 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((27328 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((27328 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((27328 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((27328 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L215: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((27328 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[27328>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[27328>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((27328 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((27328 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((27328 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((27328 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((27328 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((27328 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa137 = $487;
             label = 163;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 163) {
            $T$0$lcssa$i = $$lcssa137;
            break;
           }
           $494 = HEAP32[((27328 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L215;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((27328 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((27328 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((27328 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((27328 + 20|0))>>2] = $514;
   HEAP32[((27328 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((27328 + 8|0))>>2] = 0;
   HEAP32[((27328 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((27328 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((27328 + 12|0))>>2] = $528;
  $529 = HEAP32[((27328 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((27328 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[27800>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((27800 + 8|0))>>2] = $538;
    HEAP32[((27800 + 4|0))>>2] = $538;
    HEAP32[((27800 + 12|0))>>2] = -1;
    HEAP32[((27800 + 16|0))>>2] = -1;
    HEAP32[((27800 + 20|0))>>2] = 0;
    HEAP32[((27328 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[27800>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((27800 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((27328 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((27328 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((27328 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L279: do {
  if ($560) {
   $561 = HEAP32[((27328 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((27328 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 191;
     } else {
      $595 = HEAP32[((27328 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 200;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((27800 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((27328 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((27328 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 200;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L303: do {
    if ((label|0) == 200) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 211;
      break L279;
     }
    }
    else if ((label|0) == 201) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((27800 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L303;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 211;
      break L279;
     }
    }
   } while(0);
   $619 = HEAP32[((27328 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((27328 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $632 = HEAP32[((27328 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((27328 + 432|0))>>2] = $633;
  $634 = HEAP32[((27328 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((27328 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((27328 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L323: do {
   if ($637) {
    $638 = HEAP32[((27328 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((27328 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((27328 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((27328 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((27328 + 460|0))>>2] = 0;
    $641 = HEAP32[27800>>2]|0;
    HEAP32[((27328 + 36|0))>>2] = $641;
    HEAP32[((27328 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((27328 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((27328 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((27328 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((27328 + 24|0))>>2] = $654;
    HEAP32[((27328 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((27800 + 16|0))>>2]|0;
    HEAP32[((27328 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((27328 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 224;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      label = 229;
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 224) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((27328 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((27328 + 24|0))>>2] = $684;
       HEAP32[((27328 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((27800 + 16|0))>>2]|0;
       HEAP32[((27328 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $691 = HEAP32[((27328 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((27328 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((27328 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 235;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      label = 319;
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 235) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L352: do {
       if ($729) {
        $730 = HEAP32[((27328 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((27328 + 12|0))>>2] = $731;
        HEAP32[((27328 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((27328 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((27328 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((27328 + 8|0))>>2] = $737;
         HEAP32[((27328 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L360: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((27328 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[27328>>2]|0;
            $764 = $763 & $762;
            HEAP32[27328>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $789;$RP$0$i$i$ph = $788;
              }
             } else {
              $R$0$i$i$ph = $786;$RP$0$i$i$ph = $785;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $794 = (($R$0$i$i) + 16|0);
               $795 = HEAP32[$794>>2]|0;
               $796 = ($795|0)==(0|0);
               if ($796) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $795;$RP$0$i$i$be = $794;
               }
              } else {
               $R$0$i$i$be = $792;$RP$0$i$i$be = $791;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((27328 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((27328 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((27328 + 4|0))>>2] = $807;
             break L360;
            } else {
             $808 = HEAP32[((27328 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L360;
             }
            }
           } while(0);
           $815 = HEAP32[((27328 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((27328 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((27328 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[27328>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[27328>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((27328 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((27328 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((27328 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((27328 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((27328 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((27328 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $$lcssa110 = $904;
            label = 314;
            break;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          if ((label|0) == 314) {
           $T$0$lcssa$i26$i = $$lcssa110;
           break;
          }
          $911 = HEAP32[((27328 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L352;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((27328 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 319) {
    }
    $sp$0$i$i$i = ((27328 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((27328 + 24|0))>>2] = $953;
    HEAP32[((27328 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((27800 + 16|0))>>2]|0;
    HEAP32[((27328 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((27328 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((27328 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((27328 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((27328 + 448|0))+12>>2]|0;
    HEAP32[((27328 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((27328 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((27328 + 460|0))>>2] = 0;
    HEAP32[((27328 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((27328 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[27328>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[27328>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((27328 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((27328 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((27328 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((27328 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((27328 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((27328 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $$lcssa115 = $1043;
         label = 353;
         break;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa115;
        break;
       }
       $1050 = HEAP32[((27328 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L323;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((27328 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((27328 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((27328 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((27328 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((27328 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa73 = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0;
 var $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0;
 var $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((27328 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((27328 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((27328 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((27328 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[27328>>2]|0;
     $36 = $35 & $34;
     HEAP32[27328>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((27328 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((27328 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((27328 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((27328 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((27328 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((27328 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((27328 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((27328 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((27328 + 12|0))>>2] = $120;
   HEAP32[((27328 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((27328 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((27328 + 20|0))>>2] = 0;
   HEAP32[((27328 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((27328 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((27328 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((27328 + 8|0))>>2] = $128;
   HEAP32[((27328 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((27328 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((27328 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[27328>>2]|0;
     $152 = $151 & $150;
     HEAP32[27328>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((27328 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((27328 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((27328 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((27328 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((27328 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((27328 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((27328 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((27328 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((27328 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((27328 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((27328 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((27328 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[27328>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[27328>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((27328 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((27328 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((27328 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((27328 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((27328 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((27328 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa73 = $296;
       label = 137;
       break;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa73;
      break;
     }
     $303 = HEAP32[((27328 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((27328 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((27328 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((27328 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((27328 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((27328 + 32|0))>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
  $3 = $4&1;
  return ($3|0);
 }
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(6);
 $4 = $2;
 $3 = $4&1;
 return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$5$be$lcssa = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$8$ph = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa114 = $13;
   break;
  }
 }
 $16 = ($$lcssa114|0)==(45);
 do {
  if ((($$lcssa114|0) == 43) | (($$lcssa114|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa114;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 48;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (27824 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 48;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (27824 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa113 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa113;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$88 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 79;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 48;
  }
 }
 do {
  if ((label|0) == 48) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (28088 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (27824 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (27824 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $145 & $146;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa109 = $133;$$lcssa110 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa110;$152 = 0;$154 = $$lcssa109;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 79;
     break;
    }
    $159 = $154;$160 = $152;$164 = $150;
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (27824 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $289 = $165;$290 = $162;$c$5$be$lcssa = $c$5$be;
      break;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
    $$124 = $$125;$285 = $289;$286 = $290;$c$8 = $c$5$be$lcssa;
    label = 79;
    break;
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (27824 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (27824 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $195 & $196;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa111 = $183;$$lcssa112 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa112;$287 = $$lcssa111;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $209 = (___muldi3(($204|0),($202|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $291 = $204;$292 = $202;$c$8$ph = $c$755;
      break;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (27824 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $291 = $219;$292 = $220;$c$8$ph = $c$7$be;
      break;
     }
    }
    $$124 = $$125;$285 = $291;$286 = $292;$c$8 = $c$8$ph;
    label = 79;
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 79;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (27824 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (27824 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$012$i = 0, $$012$i$be = 0, $$012$i$lcssa = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$be$i$lcssa = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$be$i$lcssa = 0, $$3$lcssa$i = 0;
 var $$3127$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$lnz$0$i = 0, $$neg38$i = 0, $$old8 = 0;
 var $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0.0;
 var $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$2$ph44$i$lcssa = 0, $a$2$ph44$i$lcssa130 = 0, $a$2$ph44$i$ph = 0, $a$2$ph44$i131 = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0;
 var $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$0$i$be = 0, $c$0$i$lcssa = 0, $c$0$i$ph = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$i$be = 0, $c$2$i$ph = 0, $c$2$lcssa$i = 0;
 var $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$5$ph = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us$i$lcssa$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry1$1$us99$i$lcssa$lcssa = 0, $carry3$086$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0;
 var $denormal$031$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$ph$i$lcssa = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$0$us89$i$lcssa = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$1$ph$i$ph = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i$lcssa = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i$ph = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotdig$4$i$lcssa = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i$ph = 0, $gotrad$0$i14 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gotrad$2$i$lcssa = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$3$ph = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0;
 var $j$0126$i$lcssa = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$2$i$lcssa = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$2$i$lcssa = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0;
 var $k$5$us95$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us101$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $lnz$2$i$lcssa = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11119$i = 0, $or$cond16$i = 0;
 var $or$cond18$i = 0, $or$cond185$i = 0, $or$cond19$i = 0, $or$cond20$us$i = 0, $or$cond20$us100$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0;
 var $rp$2$ph42$i = 0, $rp$2$ph42$i$lcssa = 0, $rp$2$ph42$i$ph = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$3$ph40$i$ph = 0, $rp$482$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0;
 var $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$5$i$lcssa = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$4$i$lcssa = 0.0, $y$5$i = 0.0;
 var $z$0$i = 0, $z$1$ph43$i = 0, $z$1$ph43$i$lcssa = 0, $z$1$ph43$i$ph = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$1$us90$i$lcssa = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us$i$lcssa$lcssa = 0, $z$3$us102$i = 0, $z$3$us102$i$lcssa = 0, $z$3$us102$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$5$ph$i$ph = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa143 = $9;
   break;
  }
 }
 $12 = ($$lcssa143|0)==(45);
 do {
  if ((($$lcssa143|0) == 43) | (($$lcssa143|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa143;$sign$0 = 1;
  }
 } while(0);
 $c$174 = $c$0;$i$073 = 0;
 while(1) {
  $23 = $c$174 | 32;
  $24 = (28104 + ($i$073)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$174;$i$0$lcssa = $i$073;
   break;
  }
  $28 = ($i$073>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$174;
   }
  } while(0);
  $36 = (($i$073) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$174 = $c$2;$i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   if ($51) {
    $c$372 = $c$1$lcssa;$i$271 = 0;
    while(1) {
     $52 = $c$372 | 32;
     $53 = (28696 + ($i$271)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($52|0)==($55|0);
     if (!($56)) {
      $c$5$ph = $c$372;$i$3$ph = $i$271;
      break;
     }
     $57 = ($i$271>>>0)<(2);
     do {
      if ($57) {
       $58 = HEAP32[$0>>2]|0;
       $59 = HEAP32[$1>>2]|0;
       $60 = ($58>>>0)<($59>>>0);
       if ($60) {
        $61 = (($58) + 1|0);
        HEAP32[$0>>2] = $61;
        $62 = HEAP8[$58>>0]|0;
        $63 = $62&255;
        $c$4 = $63;
        break;
       } else {
        $64 = (___shgetc($f)|0);
        $c$4 = $64;
        break;
       }
      } else {
       $c$4 = $c$372;
      }
     } while(0);
     $65 = (($i$271) + 1)|0;
     $66 = ($65>>>0)<(3);
     if ($66) {
      $c$372 = $c$4;$i$271 = $65;
     } else {
      $c$5$ph = $c$4;$i$3$ph = $65;
      break;
     }
    }
    $c$5 = $c$5$ph;$i$3 = $i$3$ph;
   } else {
    $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
   }
   if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $74 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $74 = $73;
    }
    $75 = ($74|0)==(40);
    if (!($75)) {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $i$4 = 1;
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       $$lcssa = $88;$i$4$lcssa = $i$4;
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($$lcssa|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4$lcssa|0)==(0);
    $brmerge107 = $100 | $97;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$in = $i$4$lcssa;
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      break;
     } else {
      $$in = $102;
     }
    }
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $324 = HEAP32[$1>>2]|0;
       $325 = ($324|0)==(0|0);
       if ($325) {
        $c$6 = 48;
        break;
       }
       $326 = HEAP32[$0>>2]|0;
       $327 = (($326) + -1|0);
       HEAP32[$0>>2] = $327;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i$ph = $128;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i$ph = $129;
      }
      $c$0$i = $c$0$i$ph;$gotdig$0$i = 0;
      while(1) {
       if ((($c$0$i|0) == 46)) {
        $gotdig$0$i$lcssa116 = $gotdig$0$i;
        label = 78;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $c$0$i$lcssa = $c$0$i;$gotdig$0$i$lcssa = $gotdig$0$i;
        label = 88;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i$be = $135;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i$be = $136;
       }
       $c$0$i = $c$0$i$be;$gotdig$0$i = 1;
      }
      if ((label|0) == 78) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $156 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $156 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $157 = ($156|0)==(48);
         if ($157) {
          $152 = $154;$153 = $155;
         } else {
          $$lcssa114 = $156;$717 = $154;$718 = $155;
          break;
         }
        }
        $715 = $717;$716 = $718;$c$2$i$ph = $$lcssa114;$gotdig$2$i$ph = 1;$gotrad$0$i$ph = 1;
       } else {
        $715 = 0;$716 = 0;$c$2$i$ph = $c$1$ph$i;$gotdig$2$i$ph = $gotdig$0$i$lcssa116;$gotrad$0$i$ph = 1;
       }
      }
      else if ((label|0) == 88) {
       $715 = 0;$716 = 0;$c$2$i$ph = $c$0$i$lcssa;$gotdig$2$i$ph = $gotdig$0$i$lcssa;$gotrad$0$i$ph = 0;
      }
      $167 = 0;$169 = 0;$719 = $715;$720 = $716;$c$2$i = $c$2$i$ph;$gotdig$2$i = $gotdig$2$i$ph;$gotrad$0$i = $gotrad$0$i$ph;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
      L130: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 95;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond6$i = $162 | $163;
         if (!($or$cond6$i)) {
          $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break L130;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $721 = $169;$722 = $167;$723 = $169;$724 = $167;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L130;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 95;
          break;
         }
        }
       } while(0);
       if ((label|0) == 95) {
        label = 0;
        $168 = ($167|0)<(0);
        $170 = ($169>>>0)<(8);
        $171 = ($167|0)==(0);
        $172 = $171 & $170;
        $173 = $168 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($167|0)<(0);
          $177 = ($169>>>0)<(14);
          $178 = ($167|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond$i = $185 | $186;
          if ($or$cond$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($169|0),($167|0),1,0)|0);
        $190 = tempRet0;
        $721 = $719;$722 = $720;$723 = $189;$724 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $c$2$i$be = $196;
       } else {
        $197 = (___shgetc($f)|0);
        $c$2$i$be = $197;
       }
       $167 = $724;$169 = $723;$719 = $721;$720 = $722;$c$2$i = $c$2$i$be;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
      }
      $198 = ($gotdig$2$i$lcssa|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i$lcssa|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i$lcssa|0)==(0);
      $213 = $210 ? $212 : $211;
      $216 = $210 ? $215 : $214;
      $217 = ($215|0)<(0);
      $218 = ($212>>>0)<(8);
      $219 = ($215|0)==(0);
      $220 = $219 & $218;
      $221 = $217 | $220;
      if ($221) {
       $223 = $212;$224 = $215;$x$325$i = $x$0$i$lcssa;
       while(1) {
        $222 = $x$325$i << 4;
        $225 = (_i64Add(($223|0),($224|0),1,0)|0);
        $226 = tempRet0;
        $227 = ($226|0)<(0);
        $228 = ($225>>>0)<(8);
        $229 = ($226|0)==(0);
        $230 = $229 & $228;
        $231 = $227 | $230;
        if ($231) {
         $223 = $225;$224 = $226;$x$325$i = $222;
        } else {
         $$lcssa113 = $222;
         break;
        }
       }
       $x$3$lcssa$i = $$lcssa113;
      } else {
       $x$3$lcssa$i = $x$0$i$lcssa;
      }
      $232 = $c$2$lcssa$i | 32;
      $233 = ($232|0)==(112);
      do {
       if ($233) {
        $234 = (_scanexp($f,$pok)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(-2147483648);
        $238 = $236 & $237;
        if ($238) {
         $239 = ($pok|0)==(0);
         if ($239) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $240 = HEAP32[$1>>2]|0;
          $241 = ($240|0)==(0|0);
          if ($241) {
           $252 = 0;$253 = 0;
           break;
          }
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $252 = 0;$253 = 0;
          break;
         }
        } else {
         $252 = $234;$253 = $235;
        }
       } else {
        $244 = HEAP32[$1>>2]|0;
        $245 = ($244|0)==(0|0);
        if ($245) {
         $252 = 0;$253 = 0;
        } else {
         $246 = HEAP32[$0>>2]|0;
         $247 = (($246) + -1|0);
         HEAP32[$0>>2] = $247;
         $252 = 0;$253 = 0;
        }
       }
      } while(0);
      $248 = (_bitshift64Shl(($213|0),($216|0),2)|0);
      $249 = tempRet0;
      $250 = (_i64Add(($248|0),($249|0),-32,-1)|0);
      $251 = tempRet0;
      $254 = (_i64Add(($250|0),($251|0),($252|0),($253|0))|0);
      $255 = tempRet0;
      $256 = ($x$3$lcssa$i|0)==(0);
      if ($256) {
       $257 = (+($sign$0|0));
       $258 = $257 * 0.0;
       $$0 = $258;
       STACKTOP = sp;return (+$$0);
      }
      $259 = (0 - ($emin$0$ph))|0;
      $260 = ($255|0)>(0);
      $261 = ($254>>>0)>($259>>>0);
      $262 = ($255|0)==(0);
      $263 = $262 & $261;
      $264 = $260 | $263;
      if ($264) {
       $265 = (___errno_location()|0);
       HEAP32[$265>>2] = 34;
       $266 = (+($sign$0|0));
       $267 = $266 * 1.7976931348623157E+308;
       $268 = $267 * 1.7976931348623157E+308;
       $$0 = $268;
       STACKTOP = sp;return (+$$0);
      }
      $269 = (($emin$0$ph) + -106)|0;
      $270 = ($269|0)<(0);
      $271 = $270 << 31 >> 31;
      $272 = ($255|0)<($271|0);
      $273 = ($254>>>0)<($269>>>0);
      $274 = ($255|0)==($271|0);
      $275 = $274 & $273;
      $276 = $272 | $275;
      if ($276) {
       $278 = (___errno_location()|0);
       HEAP32[$278>>2] = 34;
       $279 = (+($sign$0|0));
       $280 = $279 * 2.2250738585072014E-308;
       $281 = $280 * 2.2250738585072014E-308;
       $$0 = $281;
       STACKTOP = sp;return (+$$0);
      }
      $277 = ($x$3$lcssa$i|0)>(-1);
      if ($277) {
       $286 = $254;$287 = $255;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
       while(1) {
        $282 = !($y$321$i >= 0.5);
        $283 = $x$420$i << 1;
        if ($282) {
         $$pn$i = $y$321$i;$x$5$i = $283;
        } else {
         $284 = $283 | 1;
         $285 = $y$321$i + -1.0;
         $$pn$i = $285;$x$5$i = $284;
        }
        $y$4$i = $y$321$i + $$pn$i;
        $288 = (_i64Add(($286|0),($287|0),-1,-1)|0);
        $289 = tempRet0;
        $290 = ($x$5$i|0)>(-1);
        if ($290) {
         $286 = $288;$287 = $289;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
        } else {
         $725 = $288;$726 = $289;$x$5$i$lcssa = $x$5$i;$y$4$i$lcssa = $y$4$i;
         break;
        }
       }
       $295 = $725;$296 = $726;$x$4$lcssa$i = $x$5$i$lcssa;$y$3$lcssa$i = $y$4$i$lcssa;
      } else {
       $295 = $254;$296 = $255;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
      }
      $291 = ($emin$0$ph|0)<(0);
      $292 = $291 << 31 >> 31;
      $293 = (_i64Subtract(32,0,($emin$0$ph|0),($292|0))|0);
      $294 = tempRet0;
      $297 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
      $298 = tempRet0;
      $299 = (0)>($298|0);
      $300 = ($bits$0$ph>>>0)>($297>>>0);
      $301 = (0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $304 = ($297|0)<(0);
       if ($304) {
        $$0711$i = 0;
        label = 143;
       } else {
        $$07$i = $297;
        label = 141;
       }
      } else {
       $$07$i = $bits$0$ph;
       label = 141;
      }
      if ((label|0) == 141) {
       $305 = ($$07$i|0)<(53);
       if ($305) {
        $$0711$i = $$07$i;
        label = 143;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 143) {
       $306 = (84 - ($$0711$i))|0;
       $307 = (+_scalbn(1.0,$306));
       $308 = (+($sign$0|0));
       $309 = (+_copysignl($307,$308));
       $$0712$i = $$0711$i;$$pre$phi$iZ2D = $308;$bias$0$i = $309;
      }
      $310 = ($$0712$i|0)<(32);
      $311 = $y$3$lcssa$i != 0.0;
      $or$cond4$i = $310 & $311;
      $312 = $x$4$lcssa$i & 1;
      $313 = ($312|0)==(0);
      $or$cond9$i = $or$cond4$i & $313;
      $314 = $or$cond9$i&1;
      $x$6$i = (($314) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
      $315 = (+($x$6$i>>>0));
      $316 = $$pre$phi$iZ2D * $315;
      $317 = $bias$0$i + $316;
      $318 = $$pre$phi$iZ2D * $y$5$i;
      $319 = $318 + $317;
      $320 = $319 - $bias$0$i;
      $321 = $320 != 0.0;
      if (!($321)) {
       $322 = (___errno_location()|0);
       HEAP32[$322>>2] = 34;
      }
      $323 = (+_scalbnl($320,$295));
      $$0 = $323;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $328 = (0 - ($sum$i))|0;
    $$012$i = $c$6;$gotdig$0$i12 = 0;
    while(1) {
     if ((($$012$i|0) == 46)) {
      $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
      label = 155;
      break;
     } else if (!((($$012$i|0) == 48))) {
      $$012$i$lcssa = $$012$i;$gotdig$0$i12$lcssa = $gotdig$0$i12;
      label = 165;
      break;
     }
     $329 = HEAP32[$0>>2]|0;
     $330 = HEAP32[$1>>2]|0;
     $331 = ($329>>>0)<($330>>>0);
     if ($331) {
      $332 = (($329) + 1|0);
      HEAP32[$0>>2] = $332;
      $333 = HEAP8[$329>>0]|0;
      $334 = $333&255;
      $$012$i$be = $334;
     } else {
      $335 = (___shgetc($f)|0);
      $$012$i$be = $335;
     }
     $$012$i = $$012$i$be;$gotdig$0$i12 = 1;
    }
    if ((label|0) == 155) {
     $336 = HEAP32[$0>>2]|0;
     $337 = HEAP32[$1>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = (($336) + 1|0);
      HEAP32[$0>>2] = $339;
      $340 = HEAP8[$336>>0]|0;
      $341 = $340&255;
      $$1$ph$i = $341;
     } else {
      $342 = (___shgetc($f)|0);
      $$1$ph$i = $342;
     }
     $343 = ($$1$ph$i|0)==(48);
     if ($343) {
      $344 = 0;$345 = 0;
      while(1) {
       $346 = (_i64Add(($344|0),($345|0),-1,-1)|0);
       $347 = tempRet0;
       $348 = HEAP32[$0>>2]|0;
       $349 = HEAP32[$1>>2]|0;
       $350 = ($348>>>0)<($349>>>0);
       if ($350) {
        $351 = (($348) + 1|0);
        HEAP32[$0>>2] = $351;
        $352 = HEAP8[$348>>0]|0;
        $353 = $352&255;
        $$1$be$i = $353;
       } else {
        $354 = (___shgetc($f)|0);
        $$1$be$i = $354;
       }
       $355 = ($$1$be$i|0)==(48);
       if ($355) {
        $344 = $346;$345 = $347;
       } else {
        $$1$be$i$lcssa = $$1$be$i;$729 = $346;$730 = $347;
        break;
       }
      }
      $$2$i = $$1$be$i$lcssa;$727 = $729;$728 = $730;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
     } else {
      $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa141;$gotrad$0$i14 = 1;
     }
    }
    else if ((label|0) == 165) {
     $$2$i = $$012$i$lcssa;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa;$gotrad$0$i14 = 0;
    }
    HEAP32[$x$i>>2] = 0;
    $356 = (($$2$i) + -48)|0;
    $357 = ($356>>>0)<(10);
    $358 = ($$2$i|0)==(46);
    $or$cond11119$i = $357 | $358;
    do {
     if ($or$cond11119$i) {
      $359 = (($x$i) + 496|0);
      $$3127$i = $$2$i;$362 = 0;$363 = 0;$731 = $358;$732 = $356;$733 = $727;$734 = $728;$gotdig$3123$i = $gotdig$2$i13;$gotrad$1124$i = $gotrad$0$i14;$j$0126$i = 0;$k$0125$i = 0;$lnz$0122$i = 0;
      L243: while(1) {
       do {
        if ($731) {
         $cond$i = ($gotrad$1124$i|0)==(0);
         if ($cond$i) {
          $735 = $362;$736 = $363;$737 = $362;$738 = $363;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = 1;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
         } else {
          $739 = $733;$740 = $734;$741 = $362;$742 = $363;$gotdig$3123$i$lcssa = $gotdig$3123$i;$j$0126$i$lcssa = $j$0126$i;$k$0125$i$lcssa = $k$0125$i;$lnz$0122$i$lcssa = $lnz$0122$i;
          label = 170;
          break L243;
         }
        } else {
         $361 = ($k$0125$i|0)<(125);
         $364 = (_i64Add(($362|0),($363|0),1,0)|0);
         $365 = tempRet0;
         $366 = ($$3127$i|0)!=(48);
         if (!($361)) {
          if (!($366)) {
           $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
           break;
          }
          $376 = HEAP32[$359>>2]|0;
          $377 = $376 | 1;
          HEAP32[$359>>2] = $377;
          $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
          break;
         }
         $$lnz$0$i = $366 ? $364 : $lnz$0122$i;
         $367 = ($j$0126$i|0)==(0);
         $368 = (($x$i) + ($k$0125$i<<2)|0);
         if ($367) {
          $storemerge$i = $732;
         } else {
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369*10)|0;
          $371 = (($$3127$i) + -48)|0;
          $372 = (($371) + ($370))|0;
          $storemerge$i = $372;
         }
         HEAP32[$368>>2] = $storemerge$i;
         $373 = (($j$0126$i) + 1)|0;
         $374 = ($373|0)==(9);
         $375 = $374&1;
         $$k$0$i = (($375) + ($k$0125$i))|0;
         $$14$i = $374 ? 0 : $373;
         $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $378 = HEAP32[$0>>2]|0;
       $379 = HEAP32[$1>>2]|0;
       $380 = ($378>>>0)<($379>>>0);
       if ($380) {
        $381 = (($378) + 1|0);
        HEAP32[$0>>2] = $381;
        $382 = HEAP8[$378>>0]|0;
        $383 = $382&255;
        $$3$be$i = $383;
       } else {
        $384 = (___shgetc($f)|0);
        $$3$be$i = $384;
       }
       $385 = (($$3$be$i) + -48)|0;
       $386 = ($385>>>0)<(10);
       $387 = ($$3$be$i|0)==(46);
       $or$cond11$i = $386 | $387;
       if ($or$cond11$i) {
        $$3127$i = $$3$be$i;$362 = $737;$363 = $738;$731 = $387;$732 = $385;$733 = $735;$734 = $736;$gotdig$3123$i = $gotdig$4$i;$gotrad$1124$i = $gotrad$2$i;$j$0126$i = $j$2$i;$k$0125$i = $k$2$i;$lnz$0122$i = $lnz$2$i;
       } else {
        $$3$be$i$lcssa = $$3$be$i;$748 = $737;$749 = $738;$750 = $735;$751 = $736;$gotdig$4$i$lcssa = $gotdig$4$i;$gotrad$2$i$lcssa = $gotrad$2$i;$j$2$i$lcssa = $j$2$i;$k$2$i$lcssa = $k$2$i;$lnz$2$i$lcssa = $lnz$2$i;
        label = 181;
        break;
       }
      }
      if ((label|0) == 170) {
       $360 = ($gotdig$3123$i$lcssa|0)!=(0);
       $743 = $741;$744 = $742;$745 = $739;$746 = $740;$747 = $360;$j$074$i = $j$0126$i$lcssa;$k$070$i = $k$0125$i$lcssa;$lnz$064$i = $lnz$0122$i$lcssa;
       label = 190;
       break;
      }
      else if ((label|0) == 181) {
       $$3$lcssa$i = $$3$be$i$lcssa;$389 = $750;$390 = $748;$392 = $751;$393 = $749;$gotdig$3$lcssa$i = $gotdig$4$i$lcssa;$gotrad$1$lcssa$i = $gotrad$2$i$lcssa;$j$0$lcssa$i = $j$2$i$lcssa;$k$0$lcssa$i = $k$2$i$lcssa;$lnz$0$lcssa$i = $lnz$2$i$lcssa;
       label = 182;
       break;
      }
     } else {
      $$3$lcssa$i = $$2$i;$389 = $727;$390 = 0;$392 = $728;$393 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 182;
     }
    } while(0);
    do {
     if ((label|0) == 182) {
      $388 = ($gotrad$1$lcssa$i|0)==(0);
      $391 = $388 ? $390 : $389;
      $394 = $388 ? $393 : $392;
      $395 = ($gotdig$3$lcssa$i|0)!=(0);
      $396 = $$3$lcssa$i | 32;
      $397 = ($396|0)==(101);
      $or$cond16$i = $395 & $397;
      if (!($or$cond16$i)) {
       $412 = ($$3$lcssa$i|0)>(-1);
       if ($412) {
        $743 = $390;$744 = $393;$745 = $391;$746 = $394;$747 = $395;$j$074$i = $j$0$lcssa$i;$k$070$i = $k$0$lcssa$i;$lnz$064$i = $lnz$0$lcssa$i;
        label = 190;
        break;
       } else {
        $752 = $390;$753 = $393;$754 = $395;$755 = $391;$756 = $394;$j$073$i = $j$0$lcssa$i;$k$069$i = $k$0$lcssa$i;$lnz$063$i = $lnz$0$lcssa$i;
        label = 192;
        break;
       }
      }
      $398 = (_scanexp($f,$pok)|0);
      $399 = tempRet0;
      $400 = ($398|0)==(0);
      $401 = ($399|0)==(-2147483648);
      $402 = $400 & $401;
      do {
       if ($402) {
        $403 = ($pok|0)==(0);
        if ($403) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $404 = HEAP32[$1>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $408 = 0;$409 = 0;
          break;
         }
         $406 = HEAP32[$0>>2]|0;
         $407 = (($406) + -1|0);
         HEAP32[$0>>2] = $407;
         $408 = 0;$409 = 0;
         break;
        }
       } else {
        $408 = $398;$409 = $399;
       }
      } while(0);
      $410 = (_i64Add(($408|0),($409|0),($391|0),($394|0))|0);
      $411 = tempRet0;
      $422 = $410;$424 = $390;$425 = $411;$427 = $393;$j$072$i = $j$0$lcssa$i;$k$068$i = $k$0$lcssa$i;$lnz$062$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 190) {
     $413 = HEAP32[$1>>2]|0;
     $414 = ($413|0)==(0|0);
     if ($414) {
      $752 = $743;$753 = $744;$754 = $747;$755 = $745;$756 = $746;$j$073$i = $j$074$i;$k$069$i = $k$070$i;$lnz$063$i = $lnz$064$i;
      label = 192;
     } else {
      $415 = HEAP32[$0>>2]|0;
      $416 = (($415) + -1|0);
      HEAP32[$0>>2] = $416;
      if ($747) {
       $422 = $745;$424 = $743;$425 = $746;$427 = $744;$j$072$i = $j$074$i;$k$068$i = $k$070$i;$lnz$062$i = $lnz$064$i;
      } else {
       label = 193;
      }
     }
    }
    if ((label|0) == 192) {
     if ($754) {
      $422 = $755;$424 = $752;$425 = $756;$427 = $753;$j$072$i = $j$073$i;$k$068$i = $k$069$i;$lnz$062$i = $lnz$063$i;
     } else {
      label = 193;
     }
    }
    if ((label|0) == 193) {
     $417 = (___errno_location()|0);
     HEAP32[$417>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $418 = HEAP32[$x$i>>2]|0;
    $419 = ($418|0)==(0);
    if ($419) {
     $420 = (+($sign$0|0));
     $421 = $420 * 0.0;
     $$0 = $421;
     STACKTOP = sp;return (+$$0);
    }
    $423 = ($422|0)==($424|0);
    $426 = ($425|0)==($427|0);
    $428 = $423 & $426;
    $429 = ($427|0)<(0);
    $430 = ($424>>>0)<(10);
    $431 = ($427|0)==(0);
    $432 = $431 & $430;
    $433 = $429 | $432;
    $or$cond$i17 = $428 & $433;
    if ($or$cond$i17) {
     $434 = ($bits$0$ph>>>0)>(30);
     $435 = $418 >>> $bits$0$ph;
     $436 = ($435|0)==(0);
     $or$cond18$i = $434 | $436;
     if ($or$cond18$i) {
      $437 = (+($sign$0|0));
      $438 = (+($418>>>0));
      $439 = $437 * $438;
      $$0 = $439;
      STACKTOP = sp;return (+$$0);
     }
    }
    $440 = (($emin$0$ph|0) / -2)&-1;
    $441 = ($440|0)<(0);
    $442 = $441 << 31 >> 31;
    $443 = ($425|0)>($442|0);
    $444 = ($422>>>0)>($440>>>0);
    $445 = ($425|0)==($442|0);
    $446 = $445 & $444;
    $447 = $443 | $446;
    if ($447) {
     $448 = (___errno_location()|0);
     HEAP32[$448>>2] = 34;
     $449 = (+($sign$0|0));
     $450 = $449 * 1.7976931348623157E+308;
     $451 = $450 * 1.7976931348623157E+308;
     $$0 = $451;
     STACKTOP = sp;return (+$$0);
    }
    $452 = (($emin$0$ph) + -106)|0;
    $453 = ($452|0)<(0);
    $454 = $453 << 31 >> 31;
    $455 = ($425|0)<($454|0);
    $456 = ($422>>>0)<($452>>>0);
    $457 = ($425|0)==($454|0);
    $458 = $457 & $456;
    $459 = $455 | $458;
    if ($459) {
     $460 = (___errno_location()|0);
     HEAP32[$460>>2] = 34;
     $461 = (+($sign$0|0));
     $462 = $461 * 2.2250738585072014E-308;
     $463 = $462 * 2.2250738585072014E-308;
     $$0 = $463;
     STACKTOP = sp;return (+$$0);
    }
    $464 = ($j$072$i|0)==(0);
    if ($464) {
     $k$3$i = $k$068$i;
    } else {
     $465 = ($j$072$i|0)<(9);
     if ($465) {
      $466 = (($x$i) + ($k$068$i<<2)|0);
      $$promoted$i = HEAP32[$466>>2]|0;
      $468 = $$promoted$i;$j$3115$i = $j$072$i;
      while(1) {
       $467 = ($468*10)|0;
       $469 = (($j$3115$i) + 1)|0;
       $exitcond$i = ($469|0)==(9);
       if ($exitcond$i) {
        $$lcssa133 = $467;
        break;
       } else {
        $468 = $467;$j$3115$i = $469;
       }
      }
      HEAP32[$466>>2] = $$lcssa133;
     }
     $470 = (($k$068$i) + 1)|0;
     $k$3$i = $470;
    }
    $471 = ($lnz$062$i|0)<(9);
    if ($471) {
     $472 = ($lnz$062$i|0)<=($422|0);
     $473 = ($422|0)<(18);
     $or$cond3$i = $472 & $473;
     if ($or$cond3$i) {
      $474 = ($422|0)==(9);
      if ($474) {
       $475 = (+($sign$0|0));
       $476 = HEAP32[$x$i>>2]|0;
       $477 = (+($476>>>0));
       $478 = $475 * $477;
       $$0 = $478;
       STACKTOP = sp;return (+$$0);
      }
      $479 = ($422|0)<(9);
      if ($479) {
       $480 = (+($sign$0|0));
       $481 = HEAP32[$x$i>>2]|0;
       $482 = (+($481>>>0));
       $483 = $480 * $482;
       $484 = (8 - ($422))|0;
       $485 = (28128 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (+($486|0));
       $488 = $483 / $487;
       $$0 = $488;
       STACKTOP = sp;return (+$$0);
      }
      $489 = Math_imul($422, -3)|0;
      $$neg38$i = (($bits$0$ph) + 27)|0;
      $490 = (($$neg38$i) + ($489))|0;
      $491 = ($490|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $492 = $$pre$i18 >>> $490;
      $493 = ($492|0)==(0);
      $or$cond185$i = $491 | $493;
      if ($or$cond185$i) {
       $494 = (+($sign$0|0));
       $495 = (+($$pre$i18>>>0));
       $496 = $494 * $495;
       $497 = (($422) + -10)|0;
       $498 = (28128 + ($497<<2)|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = (+($499|0));
       $501 = $496 * $500;
       $$0 = $501;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $502 = (($422|0) % 9)&-1;
    $503 = ($502|0)==(0);
    if ($503) {
     $a$2$ph44$i$ph = 0;$rp$2$ph42$i$ph = $422;$z$1$ph43$i$ph = $k$3$i;
    } else {
     $504 = ($422|0)>(-1);
     $505 = (($502) + 9)|0;
     $506 = $504 ? $502 : $505;
     $507 = (8 - ($506))|0;
     $508 = (28128 + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($k$3$i|0)==(0);
     if ($510) {
      $a$0$lcssa180$i = 0;$rp$0$lcssa181$i = $422;$z$0$i = 0;
     } else {
      $511 = (1000000000 / ($509|0))&-1;
      $a$0106$i = 0;$carry$0108$i = 0;$k$4107$i = 0;$rp$0105$i = $422;
      while(1) {
       $512 = (($x$i) + ($k$4107$i<<2)|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (($513>>>0) % ($509>>>0))&-1;
       $515 = (($513>>>0) / ($509>>>0))&-1;
       $516 = (($515) + ($carry$0108$i))|0;
       HEAP32[$512>>2] = $516;
       $517 = Math_imul($514, $511)|0;
       $518 = ($k$4107$i|0)==($a$0106$i|0);
       $519 = ($516|0)==(0);
       $or$cond19$i = $518 & $519;
       $520 = (($k$4107$i) + 1)|0;
       if ($or$cond19$i) {
        $521 = $520 & 127;
        $522 = (($rp$0105$i) + -9)|0;
        $a$1$i = $521;$rp$1$i19 = $522;
       } else {
        $a$1$i = $a$0106$i;$rp$1$i19 = $rp$0105$i;
       }
       $523 = ($520|0)==($k$3$i|0);
       if ($523) {
        $$lcssa132 = $517;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0106$i = $a$1$i;$carry$0108$i = $517;$k$4107$i = $520;$rp$0105$i = $rp$1$i19;
       }
      }
      $524 = ($$lcssa132|0)==(0);
      if ($524) {
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
      } else {
       $525 = (($k$3$i) + 1)|0;
       $526 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$526>>2] = $$lcssa132;
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $525;
      }
     }
     $527 = (9 - ($506))|0;
     $528 = (($527) + ($rp$0$lcssa181$i))|0;
     $a$2$ph44$i$ph = $a$0$lcssa180$i;$rp$2$ph42$i$ph = $528;$z$1$ph43$i$ph = $z$0$i;
    }
    $a$2$ph44$i = $a$2$ph44$i$ph;$e2$0$ph$i = 0;$rp$2$ph42$i = $rp$2$ph42$i$ph;$z$1$ph43$i = $z$1$ph43$i$ph;
    L338: while(1) {
     $529 = ($rp$2$ph42$i|0)<(18);
     $530 = (($x$i) + ($a$2$ph44$i<<2)|0);
     if ($529) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph43$i;
      while(1) {
       $532 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $532;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $533 = (($x$i) + ($k$5$us$i<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (_bitshift64Shl(($534|0),0,29)|0);
        $536 = tempRet0;
        $537 = (_i64Add(($535|0),($536|0),($carry1$0$us$i|0),0)|0);
        $538 = tempRet0;
        $539 = ($538>>>0)>(0);
        $540 = ($537>>>0)>(1000000000);
        $541 = ($538|0)==(0);
        $542 = $541 & $540;
        $543 = $539 | $542;
        if ($543) {
         $544 = (___udivdi3(($537|0),($538|0),1000000000,0)|0);
         $545 = tempRet0;
         $546 = (___uremdi3(($537|0),($538|0),1000000000,0)|0);
         $547 = tempRet0;
         $$sink$off0$us$i = $546;$carry1$1$us$i = $544;
        } else {
         $$sink$off0$us$i = $537;$carry1$1$us$i = 0;
        }
        HEAP32[$533>>2] = $$sink$off0$us$i;
        $548 = (($z$2$us$i) + 127)|0;
        $549 = $548 & 127;
        $550 = ($k$5$us$i|0)!=($549|0);
        $551 = ($k$5$us$i|0)==($a$2$ph44$i|0);
        $or$cond20$us$i = $550 | $551;
        if ($or$cond20$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $552 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $552 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $553 = (($k$5$us$i) + -1)|0;
        if ($551) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $553;$z$2$us$i = $z$3$us$i;
        }
       }
       $554 = (($e2$0$us$i) + -29)|0;
       $555 = ($carry1$1$us$i$lcssa|0)==(0);
       if ($555) {
        $e2$0$us$i = $554;$z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa126 = $554;$carry1$1$us$i$lcssa$lcssa = $carry1$1$us$i$lcssa;$z$3$us$i$lcssa$lcssa = $z$3$us$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa126;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa$lcssa;
     } else {
      $531 = ($rp$2$ph42$i|0)==(18);
      if (!($531)) {
       $a$2$ph44$i$lcssa = $a$2$ph44$i;$e2$0$ph$i$lcssa = $e2$0$ph$i;$rp$2$ph42$i$lcssa = $rp$2$ph42$i;$z$1$ph43$i$lcssa = $z$1$ph43$i;
       label = 240;
       break;
      }
      $e2$0$us89$i = $e2$0$ph$i;$z$1$us90$i = $z$1$ph43$i;
      while(1) {
       $556 = HEAP32[$530>>2]|0;
       $557 = ($556>>>0)<(9007199);
       if (!($557)) {
        $a$2$ph44$i$lcssa130 = $a$2$ph44$i;$e2$0$us89$i$lcssa = $e2$0$us89$i;$z$1$us90$i$lcssa = $z$1$us90$i;
        label = 239;
        break L338;
       }
       $558 = (($z$1$us90$i) + 127)|0;
       $carry1$0$us94$i = 0;$k$5$in$us93$i = $558;$z$2$us92$i = $z$1$us90$i;
       while(1) {
        $k$5$us95$i = $k$5$in$us93$i & 127;
        $559 = (($x$i) + ($k$5$us95$i<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = (_bitshift64Shl(($560|0),0,29)|0);
        $562 = tempRet0;
        $563 = (_i64Add(($561|0),($562|0),($carry1$0$us94$i|0),0)|0);
        $564 = tempRet0;
        $565 = ($564>>>0)>(0);
        $566 = ($563>>>0)>(1000000000);
        $567 = ($564|0)==(0);
        $568 = $567 & $566;
        $569 = $565 | $568;
        if ($569) {
         $570 = (___udivdi3(($563|0),($564|0),1000000000,0)|0);
         $571 = tempRet0;
         $572 = (___uremdi3(($563|0),($564|0),1000000000,0)|0);
         $573 = tempRet0;
         $$sink$off0$us98$i = $572;$carry1$1$us99$i = $570;
        } else {
         $$sink$off0$us98$i = $563;$carry1$1$us99$i = 0;
        }
        HEAP32[$559>>2] = $$sink$off0$us98$i;
        $574 = (($z$2$us92$i) + 127)|0;
        $575 = $574 & 127;
        $576 = ($k$5$us95$i|0)!=($575|0);
        $577 = ($k$5$us95$i|0)==($a$2$ph44$i|0);
        $or$cond20$us100$i = $576 | $577;
        if ($or$cond20$us100$i) {
         $z$3$us102$i = $z$2$us92$i;
        } else {
         $578 = ($$sink$off0$us98$i|0)==(0);
         $k$5$z$2$us101$i = $578 ? $k$5$us95$i : $z$2$us92$i;
         $z$3$us102$i = $k$5$z$2$us101$i;
        }
        $579 = (($k$5$us95$i) + -1)|0;
        if ($577) {
         $carry1$1$us99$i$lcssa = $carry1$1$us99$i;$z$3$us102$i$lcssa = $z$3$us102$i;
         break;
        } else {
         $carry1$0$us94$i = $carry1$1$us99$i;$k$5$in$us93$i = $579;$z$2$us92$i = $z$3$us102$i;
        }
       }
       $580 = (($e2$0$us89$i) + -29)|0;
       $581 = ($carry1$1$us99$i$lcssa|0)==(0);
       if ($581) {
        $e2$0$us89$i = $580;$z$1$us90$i = $z$3$us102$i$lcssa;
       } else {
        $$lcssa125 = $580;$carry1$1$us99$i$lcssa$lcssa = $carry1$1$us99$i$lcssa;$z$3$us102$i$lcssa$lcssa = $z$3$us102$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa125;$carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa$lcssa;
     }
     $582 = (($rp$2$ph42$i) + 9)|0;
     $583 = (($a$2$ph44$i) + 127)|0;
     $584 = $583 & 127;
     $585 = ($584|0)==($z$3$lcssa$lcssa$i|0);
     if ($585) {
      $586 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $587 = $586 & 127;
      $588 = (($x$i) + ($587<<2)|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $591 = $590 & 127;
      $592 = (($x$i) + ($591<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = $593 | $589;
      HEAP32[$592>>2] = $594;
      $z$4$i = $587;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $595 = (($x$i) + ($584<<2)|0);
     HEAP32[$595>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph44$i = $584;$e2$0$ph$i = $$lcssa55$i;$rp$2$ph42$i = $582;$z$1$ph43$i = $z$4$i;
    }
    if ((label|0) == 239) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa130;$e2$1$ph$i$ph = $e2$0$us89$i$lcssa;$rp$3$ph40$i$ph = 18;$z$5$ph$i$ph = $z$1$us90$i$lcssa;
    }
    else if ((label|0) == 240) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa;$e2$1$ph$i$ph = $e2$0$ph$i$lcssa;$rp$3$ph40$i$ph = $rp$2$ph42$i$lcssa;$z$5$ph$i$ph = $z$1$ph43$i$lcssa;
    }
    $a$3$ph$i = $a$2$ph44$i131;$e2$1$ph$i = $e2$1$ph$i$ph;$rp$3$ph40$i = $rp$3$ph40$i$ph;$z$5$ph$i = $z$5$ph$i$ph;
    L377: while(1) {
     $632 = (($z$5$ph$i) + 1)|0;
     $629 = $632 & 127;
     $633 = (($z$5$ph$i) + 127)|0;
     $634 = $633 & 127;
     $635 = (($x$i) + ($634<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph40$i;
     while(1) {
      $608 = ($rp$3$i$ph|0)==(18);
      $636 = ($rp$3$i$ph|0)>(27);
      $$21$i = $636 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$081$i = 0;
       while(1) {
        $598 = (($i$081$i) + ($a$3$i))|0;
        $599 = $598 & 127;
        $600 = ($599|0)==($z$5$ph$i|0);
        if ($600) {
         $i$1$i = 2;
         break;
        }
        $601 = (($x$i) + ($599<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = (28120 + ($i$081$i<<2)|0);
        $604 = HEAP32[$603>>2]|0;
        $605 = ($602>>>0)<($604>>>0);
        if ($605) {
         $i$1$i = 2;
         break;
        }
        $606 = ($602>>>0)>($604>>>0);
        $596 = (($i$081$i) + 1)|0;
        if ($606) {
         $i$1$i = $i$081$i;
         break;
        }
        $597 = ($596|0)<(2);
        if ($597) {
         $i$081$i = $596;
        } else {
         $i$1$i = $596;
         break;
        }
       }
       $607 = ($i$1$i|0)==(2);
       $or$cond7$i = $607 & $608;
       if ($or$cond7$i) {
        $$lcssa122 = $629;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
        break L377;
       }
       $611 = (($$21$i) + ($e2$1$i))|0;
       $612 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($612) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $611;
       } else {
        $$lcssa120 = $611;$a$3$i$lcssa119 = $a$3$i;
        break;
       }
      }
      $613 = 1 << $$21$i;
      $614 = (($613) + -1)|0;
      $615 = 1000000000 >>> $$21$i;
      $a$483$i = $a$3$i$lcssa119;$carry3$086$i = 0;$k$684$i = $a$3$i$lcssa119;$rp$482$i = $rp$3$i$ph;
      while(1) {
       $616 = (($x$i) + ($k$684$i<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & $614;
       $619 = $617 >>> $$21$i;
       $620 = (($619) + ($carry3$086$i))|0;
       HEAP32[$616>>2] = $620;
       $621 = Math_imul($618, $615)|0;
       $622 = ($k$684$i|0)==($a$483$i|0);
       $623 = ($620|0)==(0);
       $or$cond22$i = $622 & $623;
       $624 = (($k$684$i) + 1)|0;
       $625 = $624 & 127;
       $626 = (($rp$482$i) + -9)|0;
       $rp$5$i = $or$cond22$i ? $626 : $rp$482$i;
       $a$5$i = $or$cond22$i ? $625 : $a$483$i;
       $627 = ($625|0)==($z$5$ph$i|0);
       if ($627) {
        $$lcssa121 = $621;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$483$i = $a$5$i;$carry3$086$i = $621;$k$684$i = $625;$rp$482$i = $rp$5$i;
       }
      }
      $628 = ($$lcssa121|0)==(0);
      if (!($628)) {
       $630 = ($629|0)==($a$5$i$lcssa|0);
       if (!($630)) {
        $$lcssa120$lcssa = $$lcssa120;$$lcssa121$lcssa = $$lcssa121;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
        break;
       }
       $637 = HEAP32[$635>>2]|0;
       $638 = $637 | 1;
       HEAP32[$635>>2] = $638;
      }
      $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
     }
     $631 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$631>>2] = $$lcssa121$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa120$lcssa;$rp$3$ph40$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $629;
    }
    $609 = $a$3$i$lcssa & 127;
    $610 = ($609|0)==($z$5$ph$i$lcssa|0);
    if ($610) {
     $639 = (($$lcssa122) + -1)|0;
     $640 = (($x$i) + ($639<<2)|0);
     HEAP32[$640>>2] = 0;
     $z$7$i = $$lcssa122;
    } else {
     $z$7$i = $z$5$ph$i$lcssa;
    }
    $641 = (($x$i) + ($609<<2)|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = (+($642>>>0));
    $644 = (($a$3$i$lcssa) + 1)|0;
    $645 = $644 & 127;
    $646 = ($645|0)==($z$7$i|0);
    if ($646) {
     $705 = (($z$7$i) + 1)|0;
     $706 = $705 & 127;
     $707 = (($706) + -1)|0;
     $708 = (($x$i) + ($707<<2)|0);
     HEAP32[$708>>2] = 0;
     $z$7$1$i = $706;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $709 = $643 * 1.0E+9;
    $710 = (($x$i) + ($645<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (+($711>>>0));
    $713 = $709 + $712;
    $670 = (+($sign$0|0));
    $652 = $670 * $713;
    $690 = (($e2$1$i$lcssa) + 53)|0;
    $647 = (($690) - ($emin$0$ph))|0;
    $714 = ($647|0)<($bits$0$ph|0);
    if ($714) {
     $648 = ($647|0)<(0);
     if ($648) {
      $$01332$i = 0;$denormal$031$i = 1;
      label = 275;
     } else {
      $$013$i = $647;$denormal$0$i = 1;
      label = 274;
     }
    } else {
     $$013$i = $bits$0$ph;$denormal$0$i = 0;
     label = 274;
    }
    if ((label|0) == 274) {
     $649 = ($$013$i|0)<(53);
     if ($649) {
      $$01332$i = $$013$i;$denormal$031$i = $denormal$0$i;
      label = 275;
     } else {
      $$01333$i = $$013$i;$bias$0$i24 = 0.0;$denormal$030$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $652;
     }
    }
    if ((label|0) == 275) {
     $650 = (105 - ($$01332$i))|0;
     $651 = (+_scalbn(1.0,$650));
     $653 = (+_copysignl($651,$652));
     $654 = (53 - ($$01332$i))|0;
     $655 = (+_scalbn(1.0,$654));
     $656 = (+_fmodl($652,$655));
     $657 = $652 - $656;
     $658 = $653 + $657;
     $$01333$i = $$01332$i;$bias$0$i24 = $653;$denormal$030$i = $denormal$031$i;$frac$0$i = $656;$y$1$i23 = $658;
    }
    $659 = (($a$3$i$lcssa) + 2)|0;
    $660 = $659 & 127;
    $661 = ($660|0)==($z$7$1$i|0);
    do {
     if ($661) {
      $frac$2$i = $frac$0$i;
     } else {
      $662 = (($x$i) + ($660<<2)|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = ($663>>>0)<(500000000);
      do {
       if ($664) {
        $665 = ($663|0)==(0);
        if ($665) {
         $666 = (($a$3$i$lcssa) + 3)|0;
         $667 = $666 & 127;
         $668 = ($667|0)==($z$7$1$i|0);
         if ($668) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $669 = $670 * 0.25;
        $671 = $669 + $frac$0$i;
        $frac$1$i = $671;
       } else {
        $672 = ($663>>>0)>(500000000);
        if ($672) {
         $673 = $670 * 0.75;
         $674 = $673 + $frac$0$i;
         $frac$1$i = $674;
         break;
        }
        $675 = (($a$3$i$lcssa) + 3)|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$7$1$i|0);
        if ($677) {
         $678 = $670 * 0.5;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        } else {
         $680 = $670 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
       }
      } while(0);
      $682 = (53 - ($$01333$i))|0;
      $683 = ($682|0)>(1);
      if (!($683)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = (+_fmodl($frac$1$i,1.0));
      $685 = $684 != 0.0;
      if ($685) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $686 = $frac$1$i + 1.0;
      $frac$2$i = $686;
     }
    } while(0);
    $687 = $y$1$i23 + $frac$2$i;
    $688 = $687 - $bias$0$i24;
    $689 = $690 & 2147483647;
    $691 = (-2 - ($sum$i))|0;
    $692 = ($689|0)>($691|0);
    do {
     if ($692) {
      $693 = (+Math_abs((+$688)));
      $694 = !($693 >= 9007199254740992.0);
      if ($694) {
       $denormal$2$i = $denormal$030$i;$e2$2$i = $e2$1$i$lcssa;$y$2$i25 = $688;
      } else {
       $695 = ($denormal$030$i|0)!=(0);
       $696 = ($$01333$i|0)==($647|0);
       $or$cond23$i = $695 & $696;
       $denormal$1$i = $or$cond23$i ? 0 : $denormal$030$i;
       $697 = $688 * 0.5;
       $698 = (($e2$1$i$lcssa) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $698;$y$2$i25 = $697;
      }
      $699 = (($e2$2$i) + 50)|0;
      $700 = ($699|0)>($328|0);
      if (!($700)) {
       $701 = ($denormal$2$i|0)!=(0);
       $702 = $frac$2$i != 0.0;
       $or$cond9$i26 = $701 & $702;
       if (!($or$cond9$i26)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        break;
       }
      }
      $703 = (___errno_location()|0);
      HEAP32[$703>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
     } else {
      $e2$3$i = $e2$1$i$lcssa;$y$3$i = $688;
     }
    } while(0);
    $704 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $704;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $$lcssa47 = $44;
       break;
      }
     }
     $ex$0$lcssa = $$lcssa47;
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $$lcssa46 = $67;
       break;
      }
     }
     $ey$0$lcssa = $$lcssa46;
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   do {
    if ($82) {
     $154 = $93;$155 = $87;$156 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($154) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $155;$101 = $156;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $154 = $112;$155 = $106;$156 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa43 = $104;$$lcssa45 = $112;$157 = $106;$158 = $107;$159 = $102;$160 = $103;
       label = 27;
       break;
      }
     }
     if ((label|0) == 27) {
      $$lcssa7 = $$lcssa45;$113 = $159;$115 = $160;$152 = $157;$153 = $158;$ex$2$lcssa = $$lcssa43;
      break;
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$152 = $87;$153 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $153;$120 = $152;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $$lcssa41 = $130;$161 = $128;$162 = $129;
      break;
     }
    }
    $137 = $161;$138 = $162;$ex$3$lcssa = $$lcssa41;
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 28160;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 28160;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=28736+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-1,-1)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0, $s$15 = 0, $s$2 = 0, $s$2$ph = 0;
 var $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa47 = $8;$$lcssa48 = $9;$$lcssa49 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa48;$$lcssa = $$lcssa49;$s$0$lcssa = $$lcssa47;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 if ($18) {
  $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
  while(1) {
   $19 = HEAP32[$w$011>>2]|0;
   $20 = $19 ^ $17;
   $21 = (($20) + -16843009)|0;
   $22 = $20 & -2139062144;
   $23 = $22 ^ -2139062144;
   $24 = $23 & $21;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $$1$lcssa$ph = $$110;$w$0$lcssa$ph = $w$011;
    break;
   }
   $26 = (($w$011) + 4|0);
   $27 = (($$110) + -4)|0;
   $28 = ($27>>>0)>(3);
   if ($28) {
    $$110 = $27;$w$011 = $26;
   } else {
    $$1$lcssa$ph = $27;$w$0$lcssa$ph = $26;
    break;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;$w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
 }
 $29 = ($$1$lcssa|0)==(0);
 if ($29) {
  $$3 = 0;$s$2 = $w$0$lcssa;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((27328 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((27800 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((27328 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((27328 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((27328 + 24|0))>>2] = $36;
  HEAP32[((27328 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((27328 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((27328 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((27328 + 8|0))>>2] = $storemerge21;
  HEAP32[((27328 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((27328 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[27328>>2]|0;
    $88 = $87 & $86;
    HEAP32[27328>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((27328 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((27328 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((27328 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((27328 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((27328 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((27328 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa64 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$051 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0;
 var $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((27328 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((27328 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((27328 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((27328 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[27328>>2]|0;
     $32 = $31 & $30;
     HEAP32[27328>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((27328 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((27328 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((27328 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((27328 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((27328 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((27328 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((27328 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((27328 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((27328 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((27328 + 12|0))>>2] = $115;
   HEAP32[((27328 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((27328 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((27328 + 20|0))>>2] = 0;
   HEAP32[((27328 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((27328 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((27328 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((27328 + 8|0))>>2] = $123;
   HEAP32[((27328 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((27328 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[27328>>2]|0;
     $146 = $145 & $144;
     HEAP32[27328>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((27328 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((27328 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((27328 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((27328 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((27328 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((27328 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((27328 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((27328 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((27328 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[27328>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[27328>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((27328 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((27328 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((27328 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((27328 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((27328 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((27328 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$051 = $283;$T$050 = $275;
   while(1) {
    $291 = $K20$051 >>> 31;
    $292 = ((($T$050) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$050$lcssa = $T$050;
     break;
    }
    $285 = $K20$051 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa64 = $287;
     label = 134;
     break;
    } else {
     $K20$051 = $285;$T$050 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa64;
    break;
   }
   $294 = HEAP32[((27328 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$050$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((27328 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 }
 $c$111 = $c$0;$x$012 = 0;
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa17 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa17|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa17;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $98 = $60;$99 = $61;$c$2$be$lcssa = $c$2$be;
    break;
   }
  }
  $90 = $98;$91 = $99;$c$2$lcssa = $c$2$be$lcssa;
 } else {
  $90 = $$lcssa17;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph285 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0;
 var $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0, $$12$i$i = 0;
 var $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0, $$29$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be286 = 0, $$be287 = 0;
 var $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa106 = 0, $$lcssa106$ph = 0, $$lcssa283$i = 0, $$lcssa289 = 0, $$lcssa290 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa295 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa305 = 0;
 var $$lcssa306 = 0, $$lcssa307 = 0, $$lcssa308 = 0, $$lcssa309 = 0, $$lcssa310 = 0, $$lcssa311 = 0, $$lcssa312 = 0, $$lcssa314 = 0, $$lcssa315 = 0, $$lcssa316 = 0, $$lcssa317 = 0, $$lcssa318 = 0, $$lcssa319 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0.0, $$lcssa326 = 0;
 var $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa331 = 0, $$lcssa332 = 0, $$lcssa333 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0;
 var $$pre267 = 0, $$pre268 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0.0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $128$phi = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $584$phi = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $884$phi = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0;
 var $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0;
 var $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0;
 var $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0;
 var $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0;
 var $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0110 = 0, $fl$0110$ph = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0;
 var $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1186 = 0, $i$1230$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2217$i = 0, $i$3160 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0;
 var $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0;
 var $l$1$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0;
 var $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond277 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0;
 var $p$2$ = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0;
 var $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0;
 var $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa296 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8108$ph = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0163 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1044 = 0;$1045 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 426;
   break;
  }
  $1046 = $22;$26 = $23;
  while(1) {
   if ((($1046<<24>>24) == 37)) {
    $$lcssa = $26;
    label = 9;
    break;
   } else if ((($1046<<24>>24) == 0)) {
    $$lcssa289 = $26;
    label = 14;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1046 = $$pre;$26 = $25;
  }
  if ((label|0) == 9) {
   label = 0;
   $28 = $$lcssa;$z$0163 = $$lcssa;
   while(1) {
    $27 = (($28) + 1|0);
    $29 = HEAP8[$27>>0]|0;
    $30 = ($29<<24>>24)==(37);
    if (!($30)) {
     $$lcssa106$ph = $28;$z$0$lcssa$ph = $z$0163;
     break;
    }
    $31 = (($z$0163) + 1|0);
    $32 = (($28) + 2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(37);
    if ($34) {
     $28 = $32;$z$0163 = $31;
    } else {
     $$lcssa106$ph = $32;$z$0$lcssa$ph = $31;
     break;
    }
   }
   $$lcssa106 = $$lcssa106$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $$lcssa106 = $$lcssa289;$z$0$lcssa = $$lcssa289;
  }
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  L24: do {
   if ($38) {
    $39 = (($$lcssa106) + 1|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $isdigittmp = (($41) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $42 = (($$lcssa106) + 2|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)==(36);
     $45 = (($$lcssa106) + 3|0);
     $$92 = $44 ? $45 : $39;
     $$l10n$0 = $44 ? 1 : $l10n$0;
     $isdigittmp$ = $44 ? $isdigittmp : -1;
     $$pre267 = HEAP8[$$92>>0]|0;
     $47 = $$pre267;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$92;
    } else {
     $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
    }
    $46 = $47 << 24 >> 24;
    $48 = $46 & -32;
    $49 = ($48|0)==(32);
    if ($49) {
     $51 = $46;$56 = $47;$fl$0170 = 0;$storemerge8169 = $storemerge;
     while(1) {
      $50 = (($51) + -32)|0;
      $52 = 1 << $50;
      $53 = $52 & 75913;
      $54 = ($53|0)==(0);
      if ($54) {
       $$ph = $56;$fl$0110$ph = $fl$0170;$storemerge8108$ph = $storemerge8169;
       break;
      }
      $55 = $56 << 24 >> 24;
      $57 = (($55) + -32)|0;
      $58 = 1 << $57;
      $59 = $58 | $fl$0170;
      $60 = (($storemerge8169) + 1|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61 << 24 >> 24;
      $63 = $62 & -32;
      $64 = ($63|0)==(32);
      if ($64) {
       $51 = $62;$56 = $61;$fl$0170 = $59;$storemerge8169 = $60;
      } else {
       $$ph = $61;$fl$0110$ph = $59;$storemerge8108$ph = $60;
       break;
      }
     }
     $65 = $$ph;$fl$0110 = $fl$0110$ph;$storemerge8108 = $storemerge8108$ph;
    } else {
     $65 = $47;$fl$0110 = 0;$storemerge8108 = $storemerge;
    }
    $66 = ($65<<24>>24)==(42);
    do {
     if ($66) {
      $67 = (($storemerge8108) + 1|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $isdigittmp11 = (($69) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $70 = (($storemerge8108) + 2|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($71<<24>>24)==(36);
       if ($72) {
        $73 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$73>>2] = 10;
        $74 = HEAP8[$67>>0]|0;
        $75 = $74 << 24 >> 24;
        $76 = (($75) + -48)|0;
        $77 = (($nl_arg) + ($76<<3)|0);
        $78 = $77;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4)|0;
        $82 = $81;
        $83 = HEAP32[$82>>2]|0;
        $84 = (($storemerge8108) + 3|0);
        $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $85 = ($l10n$1|0)==(0);
       if (!($85)) {
        $$0$ph285 = -1;
        label = 449;
        break L1;
       }
       if (!($1)) {
        $99 = $67;$fl$1 = $fl$0110;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $86 = HEAP32[$arglist_current>>2]|0;
       $arglist_next = (($arglist_current) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $67;$w$0 = $86;
      }
      $87 = ($w$0|0)<(0);
      if ($87) {
       $88 = $fl$0110 | 8192;
       $89 = (0 - ($w$0))|0;
       $99 = $storemerge13;$fl$1 = $88;$l10n$3 = $l10n$2;$w$1 = $89;
      } else {
       $99 = $storemerge13;$fl$1 = $fl$0110;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $90 = $65 << 24 >> 24;
      $isdigittmp1$i = (($90) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $94 = $storemerge8108;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $91 = ($i$03$i*10)|0;
        $92 = (($91) + ($isdigittmp4$i))|0;
        $93 = (($94) + 1|0);
        $95 = HEAP8[$93>>0]|0;
        $96 = $95 << 24 >> 24;
        $isdigittmp$i = (($96) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $94 = $93;$i$03$i = $92;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa290 = $92;$$lcssa291 = $93;
         break;
        }
       }
       $97 = ($$lcssa290|0)<(0);
       if ($97) {
        $$0$ph285 = -1;
        label = 449;
        break L1;
       } else {
        $99 = $$lcssa291;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = $$lcssa290;
       }
      } else {
       $99 = $storemerge8108;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $98 = HEAP8[$99>>0]|0;
    $100 = ($98<<24>>24)==(46);
    do {
     if ($100) {
      $101 = (($99) + 1|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = ($102<<24>>24)==(42);
      if (!($103)) {
       $124 = $102 << 24 >> 24;
       $isdigittmp1$i28 = (($124) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $1047 = $101;$p$0 = 0;
        break;
       }
       $1048 = $101;$128 = $99;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $125 = ($i$03$i31*10)|0;
        $126 = (($125) + ($isdigittmp4$i30))|0;
        $127 = (($128) + 2|0);
        $129 = HEAP8[$127>>0]|0;
        $130 = $129 << 24 >> 24;
        $isdigittmp$i32 = (($130) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $128$phi = $1048;$1048 = $127;$i$03$i31 = $126;$isdigittmp4$i30 = $isdigittmp$i32;$128 = $128$phi;
        } else {
         $$lcssa292 = $126;$$lcssa293 = $127;
         break;
        }
       }
       $1047 = $$lcssa293;$p$0 = $$lcssa292;
       break;
      }
      $104 = (($99) + 2|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = $105 << 24 >> 24;
      $isdigittmp9 = (($106) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $107 = (($99) + 3|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = ($108<<24>>24)==(36);
       if ($109) {
        $110 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$110>>2] = 10;
        $111 = HEAP8[$104>>0]|0;
        $112 = $111 << 24 >> 24;
        $113 = (($112) + -48)|0;
        $114 = (($nl_arg) + ($113<<3)|0);
        $115 = $114;
        $116 = $115;
        $117 = HEAP32[$116>>2]|0;
        $118 = (($115) + 4)|0;
        $119 = $118;
        $120 = HEAP32[$119>>2]|0;
        $121 = (($99) + 4|0);
        $1047 = $121;$p$0 = $117;
        break;
       }
      }
      $122 = ($l10n$3|0)==(0);
      if (!($122)) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $123 = HEAP32[$arglist_current2>>2]|0;
       $arglist_next3 = (($arglist_current2) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $1047 = $104;$p$0 = $123;
      } else {
       $1047 = $104;$p$0 = 0;
      }
     } else {
      $1047 = $99;$p$0 = -1;
     }
    } while(0);
    $132 = $1047;$st$0 = 0;
    while(1) {
     $131 = HEAP8[$132>>0]|0;
     $133 = $131 << 24 >> 24;
     $134 = (($133) + -65)|0;
     $135 = ($134>>>0)>(57);
     if ($135) {
      label = 448;
      break L1;
     }
     $136 = (($132) + 1|0);
     $137 = ((28168 + (($st$0*58)|0)|0) + ($134)|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138&255;
     $140 = (($139) + -1)|0;
     $141 = ($140>>>0)<(8);
     if ($141) {
      $132 = $136;$st$0 = $139;
     } else {
      $$lcssa295 = $132;$$lcssa298 = $131;$$lcssa299 = $136;$$lcssa300 = $138;$$lcssa301 = $139;$st$0$lcssa296 = $st$0;
      break;
     }
    }
    $142 = ($$lcssa300<<24>>24)==(0);
    if ($142) {
     $$0$ph285 = -1;
     label = 449;
     break L1;
    }
    $143 = ($$lcssa300<<24>>24)==(19);
    $144 = ($argpos$0|0)>(-1);
    L74: do {
     if ($143) {
      if ($144) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      } else {
       $1049 = $1044;$1050 = $1045;
       label = 71;
      }
     } else {
      if ($144) {
       $145 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$145>>2] = $$lcssa301;
       $146 = (($nl_arg) + ($argpos$0<<3)|0);
       $147 = $146;
       $148 = $147;
       $149 = HEAP32[$148>>2]|0;
       $150 = (($147) + 4)|0;
       $151 = $150;
       $152 = HEAP32[$151>>2]|0;
       $1049 = $149;$1050 = $152;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph285 = 0;
       label = 449;
       break L1;
      }
      $153 = ($$lcssa300&255)>(20);
      if ($153) {
       $187 = $$lcssa298;$195 = $1044;$222 = $1045;
      } else {
       do {
        switch ($$lcssa301|0) {
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $160 = $arglist_current14;
         $161 = $160;
         $162 = HEAP32[$161>>2]|0;
         $163 = (($160) + 4)|0;
         $164 = $163;
         $165 = HEAP32[$164>>2]|0;
         $arglist_next15 = (($arglist_current14) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1051 = $165;$1052 = $162;
         label = 72;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $173 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $174 = $173&255;
         $175 = $174 << 24 >> 24;
         $176 = ($175|0)<(0);
         $177 = $176 << 31 >> 31;
         $sext = $173 << 24;
         $178 = $sext >> 24;
         $1051 = $177;$1052 = $178;
         label = 72;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $179 = HEAP32[$arglist_current26>>2]|0;
         $arglist_next27 = (($arglist_current26) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $179 & 255;
         $1051 = 0;$1052 = $$mask$i39;
         label = 72;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$183 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next33 = (($arglist_current32) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $183;$184 = HEAP32[tempDoublePtr>>2]|0;
         $185 = HEAP32[tempDoublePtr+4>>2]|0;
         $1049 = $184;$1050 = $185;
         label = 71;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $159 = HEAP32[$arglist_current11>>2]|0;
         $arglist_next12 = (($arglist_current11) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1051 = 0;$1052 = $159;
         label = 72;
         break L74;
         break;
        }
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $154 = HEAP32[$arglist_current5>>2]|0;
         $arglist_next6 = (($arglist_current5) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $155 = $154;
         $1051 = $1045;$1052 = $155;
         label = 72;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $166 = HEAP32[$arglist_current17>>2]|0;
         $arglist_next18 = (($arglist_current17) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $167 = $166&65535;
         $168 = $167 << 16 >> 16;
         $169 = ($168|0)<(0);
         $170 = $169 << 31 >> 31;
         $sext93 = $166 << 16;
         $171 = $sext93 >> 16;
         $1051 = $170;$1052 = $171;
         label = 72;
         break L74;
         break;
        }
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $156 = HEAP32[$arglist_current8>>2]|0;
         $arglist_next9 = (($arglist_current8) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $157 = ($156|0)<(0);
         $158 = $157 << 31 >> 31;
         $1051 = $158;$1052 = $156;
         label = 72;
         break L74;
         break;
        }
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $172 = HEAP32[$arglist_current20>>2]|0;
         $arglist_next21 = (($arglist_current20) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $172 & 65535;
         $1051 = 0;$1052 = $$mask1$i38;
         label = 72;
         break L74;
         break;
        }
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$180 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next30 = (($arglist_current29) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $180;$181 = HEAP32[tempDoublePtr>>2]|0;
         $182 = HEAP32[tempDoublePtr+4>>2]|0;
         $1051 = $182;$1052 = $181;
         label = 72;
         break L74;
         break;
        }
        default: {
         $1051 = $1045;$1052 = $1044;
         label = 72;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1051 = $1050;$1052 = $1049;
      label = 72;
     } else {
      $$be = $$lcssa299;$$be286 = $1049;$$be287 = $1050;$l$0$be = $37;$l10n$0$be = $l10n$3;
      break;
     }
    }
    if ((label|0) == 72) {
     label = 0;
     $$pre268 = HEAP8[$$lcssa295>>0]|0;
     $187 = $$pre268;$195 = $1052;$222 = $1051;
    }
    $186 = $187 << 24 >> 24;
    $188 = ($st$0$lcssa296|0)!=(0);
    $189 = $186 & 15;
    $190 = ($189|0)==(3);
    $or$cond15 = $188 & $190;
    $191 = $186 & -33;
    $t$0 = $or$cond15 ? $191 : $186;
    $192 = $fl$1 & 8192;
    $193 = ($192|0)==(0);
    $194 = $fl$1 & -65537;
    $fl$1$ = $193 ? $fl$1 : $194;
    L98: do {
     switch ($t$0|0) {
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $195;HEAP32[tempDoublePtr+4>>2] = $222;$360 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $361 = ($222|0)<(0);
      if ($361) {
       $362 = -$360;
       $$013$i = $362;$pl$0$i = 1;$prefix$0$i = 28656;
      } else {
       $363 = $fl$1$ & 2048;
       $364 = ($363|0)==(0);
       if ($364) {
        $365 = $fl$1$ & 1;
        $366 = ($365|0)==(0);
        $$$i = $366 ? ((28656 + 1|0)) : ((28656 + 6|0));
        $$013$i = $360;$pl$0$i = $365;$prefix$0$i = $$$i;
       } else {
        $$013$i = $360;$pl$0$i = 1;$prefix$0$i = ((28656 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$367 = HEAP32[tempDoublePtr>>2]|0;
      $368 = HEAP32[tempDoublePtr+4>>2]|0;
      $369 = $368 & 2146435072;
      $370 = ($369>>>0)<(2146435072);
      $371 = (0)<(0);
      $372 = ($369|0)==(2146435072);
      $373 = $372 & $371;
      $374 = $370 | $373;
      if (!($374)) {
       $375 = $t$0 & 32;
       $376 = ($375|0)!=(0);
       $377 = $376 ? 28680 : 28688;
       $378 = ($$013$i != $$013$i) | (0.0 != 0.0);
       if ($378) {
        $379 = $376 ? 28696 : 28704;
        $pl$1$i = 0;$s1$0$i = $379;
       } else {
        $pl$1$i = $pl$0$i;$s1$0$i = $377;
       }
       $380 = (($pl$1$i) + 3)|0;
       $381 = $fl$1$ & 8192;
       $382 = ($381|0)==(0);
       $383 = ($w$1|0)>($380|0);
       $or$cond$i43$i = $382 & $383;
       if ($or$cond$i43$i) {
        $384 = (($w$1) - ($380))|0;
        $385 = ($384>>>0)>(256);
        $386 = $385 ? 256 : $384;
        _memset(($pad$i|0),32,($386|0))|0;
        $387 = ($384>>>0)>(255);
        if ($387) {
         $$01$i45$i = $384;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $388 = (($$01$i45$i) + -256)|0;
          $389 = ($388>>>0)>(255);
          if ($389) {
           $$01$i45$i = $388;
          } else {
           break;
          }
         }
         $390 = $384 & 255;
         $$0$lcssa$i47$i = $390;
        } else {
         $$0$lcssa$i47$i = $384;
        }
        (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
       }
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       (___fwritex($s1$0$i,3,$f)|0);
       $391 = $fl$1$ & 73728;
       $392 = ($391|0)==(8192);
       $or$cond$i50$i = $392 & $383;
       if ($or$cond$i50$i) {
        $393 = (($w$1) - ($380))|0;
        $394 = ($393>>>0)>(256);
        $395 = $394 ? 256 : $393;
        _memset(($pad$i|0),32,($395|0))|0;
        $396 = ($393>>>0)>(255);
        if ($396) {
         $$01$i52$i = $393;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $397 = (($$01$i52$i) + -256)|0;
          $398 = ($397>>>0)>(255);
          if ($398) {
           $$01$i52$i = $397;
          } else {
           break;
          }
         }
         $399 = $393 & 255;
         $$0$lcssa$i54$i = $399;
        } else {
         $$0$lcssa$i54$i = $393;
        }
        (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
       }
       $w$$i = $383 ? $w$1 : $380;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $w$$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $400 = (+_frexpl($$013$i,$e2$i));
      $401 = $400 * 2.0;
      $402 = $401 != 0.0;
      if ($402) {
       $403 = HEAP32[$e2$i>>2]|0;
       $404 = (($403) + -1)|0;
       HEAP32[$e2$i>>2] = $404;
      }
      $405 = $t$0 | 32;
      $406 = ($405|0)==(97);
      if ($406) {
       $407 = $t$0 & 32;
       $408 = ($407|0)==(0);
       $409 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $408 ? $prefix$0$i : $409;
       $410 = $pl$0$i | 2;
       $411 = ($p$0>>>0)>(11);
       $412 = (12 - ($p$0))|0;
       $re$0$i = $411 ? 0 : $412;
       $413 = ($re$0$i|0)==(0);
       do {
        if ($413) {
         $$1$i = $401;
        } else {
         $re$1187$i = $re$0$i;$round$0186$i = 8.0;
         while(1) {
          $414 = (($re$1187$i) + -1)|0;
          $415 = $round$0186$i * 16.0;
          $416 = ($414|0)==(0);
          if ($416) {
           $$lcssa325 = $415;
           break;
          } else {
           $re$1187$i = $414;$round$0186$i = $415;
          }
         }
         $417 = HEAP8[$prefix$0$$i>>0]|0;
         $418 = ($417<<24>>24)==(45);
         if ($418) {
          $419 = -$401;
          $420 = $419 - $$lcssa325;
          $421 = $$lcssa325 + $420;
          $422 = -$421;
          $$1$i = $422;
          break;
         } else {
          $423 = $401 + $$lcssa325;
          $424 = $423 - $$lcssa325;
          $$1$i = $424;
          break;
         }
        }
       } while(0);
       $425 = HEAP32[$e2$i>>2]|0;
       $426 = ($425|0)<(0);
       $427 = (0 - ($425))|0;
       $428 = $426 ? $427 : $425;
       $429 = ($428|0)<(0);
       if ($429) {
        $430 = ($428|0)<(0);
        $431 = $430 << 31 >> 31;
        $$05$i$i = $7;$432 = $428;$433 = $431;
        while(1) {
         $434 = (___uremdi3(($432|0),($433|0),10,0)|0);
         $435 = tempRet0;
         $436 = $434 | 48;
         $437 = $436&255;
         $438 = (($$05$i$i) + -1|0);
         HEAP8[$438>>0] = $437;
         $439 = (___udivdi3(($432|0),($433|0),10,0)|0);
         $440 = tempRet0;
         $441 = ($433>>>0)>(9);
         $442 = ($432>>>0)>(4294967295);
         $443 = ($433|0)==(9);
         $444 = $443 & $442;
         $445 = $441 | $444;
         if ($445) {
          $$05$i$i = $438;$432 = $439;$433 = $440;
         } else {
          $$lcssa326 = $438;$1061 = $439;$1062 = $440;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa326;$$01$lcssa$off0$i$i = $1061;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $428;
       }
       $446 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($446) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $447 = (($y$03$i$i>>>0) % 10)&-1;
         $448 = $447 | 48;
         $449 = $448&255;
         $450 = (($$12$i$i) + -1|0);
         HEAP8[$450>>0] = $449;
         $451 = (($y$03$i$i>>>0) / 10)&-1;
         $452 = ($y$03$i$i>>>0)<(10);
         if ($452) {
          $$lcssa328 = $450;
          break;
         } else {
          $$12$i$i = $450;$y$03$i$i = $451;
         }
        }
        $$1$lcssa$i$i = $$lcssa328;
       }
       $453 = ($$1$lcssa$i$i|0)==($7|0);
       if ($453) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $454 = HEAP32[$e2$i>>2]|0;
       $455 = $454 >> 31;
       $456 = $455 & 2;
       $457 = (($456) + 43)|0;
       $458 = $457&255;
       $459 = (($estr$0$i) + -1|0);
       HEAP8[$459>>0] = $458;
       $460 = (($t$0) + 15)|0;
       $461 = $460&255;
       $462 = (($estr$0$i) + -2|0);
       HEAP8[$462>>0] = $461;
       $notrhs$i = ($p$0|0)<(1);
       do {
        if ($notrhs$i) {
         $463 = $fl$1$ & 8;
         $464 = ($463|0)==(0);
         if ($464) {
          $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
          while(1) {
           $465 = (~~(($$2$us$us$i)));
           $466 = (28712 + ($465)|0);
           $467 = HEAP8[$466>>0]|0;
           $468 = $467&255;
           $469 = $468 | $407;
           $470 = $469&255;
           $471 = (($s$0$us$us$i) + 1|0);
           HEAP8[$s$0$us$us$i>>0] = $470;
           $472 = (+($465|0));
           $473 = $$2$us$us$i - $472;
           $474 = $473 * 16.0;
           $475 = $471;
           $476 = (($475) - ($0))|0;
           $477 = ($476|0)!=(1);
           $notlhs$us$us$i = $474 == 0.0;
           $or$cond$i80 = $477 | $notlhs$us$us$i;
           if ($or$cond$i80) {
            $s$1$us$us$i = $471;
           } else {
            $478 = (($s$0$us$us$i) + 2|0);
            HEAP8[$471>>0] = 46;
            $s$1$us$us$i = $478;
           }
           $479 = $474 != 0.0;
           if ($479) {
            $$2$us$us$i = $474;$s$0$us$us$i = $s$1$us$us$i;
           } else {
            $s$1$us$us$i$lcssa = $s$1$us$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$us$i$lcssa;
          break;
         } else {
          $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
          while(1) {
           $480 = (~~(($$2$us$i)));
           $481 = (28712 + ($480)|0);
           $482 = HEAP8[$481>>0]|0;
           $483 = $482&255;
           $484 = $483 | $407;
           $485 = $484&255;
           $486 = (($s$0$us$i) + 1|0);
           HEAP8[$s$0$us$i>>0] = $485;
           $487 = (+($480|0));
           $488 = $$2$us$i - $487;
           $489 = $488 * 16.0;
           $490 = $486;
           $491 = (($490) - ($0))|0;
           $492 = ($491|0)==(1);
           if ($492) {
            $493 = (($s$0$us$i) + 2|0);
            HEAP8[$486>>0] = 46;
            $s$1$us$i = $493;
           } else {
            $s$1$us$i = $486;
           }
           $494 = $489 != 0.0;
           if ($494) {
            $$2$us$i = $489;$s$0$us$i = $s$1$us$i;
           } else {
            $s$1$us$i$lcssa = $s$1$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$i$lcssa;
          break;
         }
        } else {
         $$2$i = $$1$i;$s$0$i = $buf$i;
         while(1) {
          $495 = (~~(($$2$i)));
          $496 = (28712 + ($495)|0);
          $497 = HEAP8[$496>>0]|0;
          $498 = $497&255;
          $499 = $498 | $407;
          $500 = $499&255;
          $501 = (($s$0$i) + 1|0);
          HEAP8[$s$0$i>>0] = $500;
          $502 = (+($495|0));
          $503 = $$2$i - $502;
          $504 = $503 * 16.0;
          $505 = $501;
          $506 = (($505) - ($0))|0;
          $507 = ($506|0)==(1);
          if ($507) {
           $508 = (($s$0$i) + 2|0);
           HEAP8[$501>>0] = 46;
           $s$1$i = $508;
          } else {
           $s$1$i = $501;
          }
          $509 = $504 != 0.0;
          if ($509) {
           $$2$i = $504;$s$0$i = $s$1$i;
          } else {
           $s$1$i$lcssa = $s$1$i;
           break;
          }
         }
         $s$1$lcssa$i = $s$1$i$lcssa;
        }
       } while(0);
       $510 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $511 = (($11) + ($$pre308$i))|0;
       $512 = ($511|0)<($p$0|0);
       $or$cond277 = $510 & $512;
       $513 = $462;
       if ($or$cond277) {
        $514 = (($12) + ($p$0))|0;
        $515 = (($514) - ($513))|0;
        $l$0$i = $515;
       } else {
        $516 = (($10) - ($513))|0;
        $517 = (($516) + ($$pre308$i))|0;
        $l$0$i = $517;
       }
       $518 = (($l$0$i) + ($410))|0;
       $519 = $fl$1$ & 73728;
       $520 = ($519|0)==(0);
       $521 = ($w$1|0)>($518|0);
       $or$cond$i60$i = $520 & $521;
       if ($or$cond$i60$i) {
        $522 = (($w$1) - ($518))|0;
        $523 = ($522>>>0)>(256);
        $524 = $523 ? 256 : $522;
        _memset(($pad$i|0),32,($524|0))|0;
        $525 = ($522>>>0)>(255);
        if ($525) {
         $$01$i62$i = $522;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $526 = (($$01$i62$i) + -256)|0;
          $527 = ($526>>>0)>(255);
          if ($527) {
           $$01$i62$i = $526;
          } else {
           break;
          }
         }
         $528 = $522 & 255;
         $$0$lcssa$i64$i = $528;
        } else {
         $$0$lcssa$i64$i = $522;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$410,$f)|0);
       $529 = ($519|0)==(65536);
       $or$cond$i67$i = $529 & $521;
       if ($or$cond$i67$i) {
        $530 = (($w$1) - ($518))|0;
        $531 = ($530>>>0)>(256);
        $532 = $531 ? 256 : $530;
        _memset(($pad$i|0),48,($532|0))|0;
        $533 = ($530>>>0)>(255);
        if ($533) {
         $$01$i69$i = $530;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $534 = (($$01$i69$i) + -256)|0;
          $535 = ($534>>>0)>(255);
          if ($535) {
           $$01$i69$i = $534;
          } else {
           break;
          }
         }
         $536 = $530 & 255;
         $$0$lcssa$i71$i = $536;
        } else {
         $$0$lcssa$i71$i = $530;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $537 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$537,$f)|0);
       $538 = $462;
       $539 = (($9) - ($538))|0;
       $540 = (($l$0$i) - ($539))|0;
       $541 = (($540) - ($537))|0;
       $542 = ($541|0)>(0);
       if ($542) {
        $543 = ($541>>>0)>(256);
        $544 = $543 ? 256 : $541;
        _memset(($pad$i|0),48,($544|0))|0;
        $545 = ($541>>>0)>(255);
        if ($545) {
         $$01$i75$i = $541;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $546 = (($$01$i75$i) + -256)|0;
          $547 = ($546>>>0)>(255);
          if ($547) {
           $$01$i75$i = $546;
          } else {
           break;
          }
         }
         $548 = $541 & 255;
         $$0$lcssa$i77$i = $548;
        } else {
         $$0$lcssa$i77$i = $541;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($462,$539,$f)|0);
       $549 = ($519|0)==(8192);
       $or$cond$i80$i = $549 & $521;
       if ($or$cond$i80$i) {
        $550 = (($w$1) - ($518))|0;
        $551 = ($550>>>0)>(256);
        $552 = $551 ? 256 : $550;
        _memset(($pad$i|0),32,($552|0))|0;
        $553 = ($550>>>0)>(255);
        if ($553) {
         $$01$i82$i = $550;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $554 = (($$01$i82$i) + -256)|0;
          $555 = ($554>>>0)>(255);
          if ($555) {
           $$01$i82$i = $554;
          } else {
           break;
          }
         }
         $556 = $550 & 255;
         $$0$lcssa$i84$i = $556;
        } else {
         $$0$lcssa$i84$i = $550;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $521 ? $w$1 : $518;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $w$25$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $557 = ($p$0|0)<(0);
      $$p$i = $557 ? 6 : $p$0;
      if ($402) {
       $558 = $401 * 268435456.0;
       $559 = HEAP32[$e2$i>>2]|0;
       $560 = (($559) + -28)|0;
       HEAP32[$e2$i>>2] = $560;
       $$3$i = $558;$561 = $560;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $401;$561 = $$pre$i;
      }
      $562 = ($561|0)<(0);
      $$39$i = $562 ? $big$i : $13;
      $563 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $564 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $564;
       $565 = (($z$0$i) + 4|0);
       $566 = (+($564>>>0));
       $567 = $$4$i - $566;
       $568 = $567 * 1.0E+9;
       $569 = $568 != 0.0;
       if ($569) {
        $$4$i = $568;$z$0$i = $565;
       } else {
        $$lcssa302 = $565;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $570 = ($$pr$i|0)>(0);
      if ($570) {
       $571 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa302;
       while(1) {
        $572 = ($571|0)>(29);
        $573 = $572 ? 29 : $571;
        $d$0253$i = (($z$1260$i) + -4|0);
        $574 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($574) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $584 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $575 = HEAP32[$d$0255$i>>2]|0;
           $576 = (_bitshift64Shl(($575|0),0,($573|0))|0);
           $577 = tempRet0;
           $578 = (_i64Add(($576|0),($577|0),($carry$0254$i|0),0)|0);
           $579 = tempRet0;
           $580 = (___uremdi3(($578|0),($579|0),1000000000,0)|0);
           $581 = tempRet0;
           HEAP32[$d$0255$i>>2] = $580;
           $582 = (___udivdi3(($578|0),($579|0),1000000000,0)|0);
           $583 = tempRet0;
           $d$0$i = (($584) + -8|0);
           $585 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($585) {
            $$lcssa303 = $582;
            break;
           } else {
            $584$phi = $d$0255$i;$carry$0254$i = $582;$d$0255$i = $d$0$i;$584 = $584$phi;
           }
          }
          $586 = ($$lcssa303|0)==(0);
          if ($586) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $587 = (($a$1261$i) + -4|0);
          HEAP32[$587>>2] = $$lcssa303;
          $a$2$ph$i = $587;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $588 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($588)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $589 = (($z$2$i) + -4|0);
         $590 = HEAP32[$589>>2]|0;
         $591 = ($590|0)==(0);
         if ($591) {
          $z$2$i = $589;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $592 = HEAP32[$e2$i>>2]|0;
        $593 = (($592) - ($573))|0;
        HEAP32[$e2$i>>2] = $593;
        $594 = ($593|0)>(0);
        if ($594) {
         $571 = $593;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$lcssa304 = $593;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
         break;
        }
       }
       $$pr154$i = $$lcssa304;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa302;
      }
      $595 = ($$pr154$i|0)<(0);
      do {
       if ($595) {
        $596 = (($$p$i) + 25)|0;
        $597 = (($596|0) / 9)&-1;
        $598 = (($597) + 1)|0;
        $599 = ($405|0)==(102);
        if ($599) {
         $600 = (($$39$i) + ($598<<2)|0);
         $601 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $602 = ($601|0)<(-9);
          $603 = (0 - ($601))|0;
          $$26$us$i = $602 ? 9 : $603;
          $604 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($604) {
            $629 = 1 << $$26$us$i;
            $622 = (($629) + -1)|0;
            $626 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $620 = HEAP32[$d$1241$us$i>>2]|0;
             $621 = $620 & $622;
             $623 = $620 >>> $$26$us$i;
             $624 = (($623) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $624;
             $625 = Math_imul($621, $626)|0;
             $627 = (($d$1241$us$i) + 4|0);
             $628 = ($627>>>0)<($z$3247$us$i>>>0);
             if ($628) {
              $carry3$0242$us$i = $625;$d$1241$us$i = $627;
             } else {
              $$lcssa306 = $625;
              break;
             }
            }
            $608 = HEAP32[$a$3248$us$i>>2]|0;
            $609 = ($608|0)==(0);
            $610 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $609 ? $610 : $a$3248$us$i;
            $611 = ($$lcssa306|0)==(0);
            if ($611) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $612 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa306;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $612;
           } else {
            $605 = HEAP32[$a$3248$us$i>>2]|0;
            $606 = ($605|0)==(0);
            $607 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $606 ? $607 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $613 = $z$4$us$i;
          $614 = (($613) - ($563))|0;
          $615 = $614 >> 2;
          $616 = ($615|0)>($598|0);
          $$z$4$us$i = $616 ? $600 : $z$4$us$i;
          $617 = HEAP32[$e2$i>>2]|0;
          $618 = (($617) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $618;
          $619 = ($618|0)<(0);
          if ($619) {
           $601 = $618;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
           break;
          }
         }
         $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
         break;
        }
        $630 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        while(1) {
         $631 = ($630|0)<(-9);
         $632 = (0 - ($630))|0;
         $$26$i = $631 ? 9 : $632;
         $633 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($633) {
           $637 = 1 << $$26$i;
           $638 = (($637) + -1)|0;
           $639 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $640 = HEAP32[$d$1241$i>>2]|0;
            $641 = $640 & $638;
            $642 = $640 >>> $$26$i;
            $643 = (($642) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $643;
            $644 = Math_imul($641, $639)|0;
            $645 = (($d$1241$i) + 4|0);
            $646 = ($645>>>0)<($z$3247$i>>>0);
            if ($646) {
             $carry3$0242$i = $644;$d$1241$i = $645;
            } else {
             $$lcssa305 = $644;
             break;
            }
           }
           $647 = HEAP32[$a$3248$i>>2]|0;
           $648 = ($647|0)==(0);
           $649 = (($a$3248$i) + 4|0);
           $$a$3$i = $648 ? $649 : $a$3248$i;
           $650 = ($$lcssa305|0)==(0);
           if ($650) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $651 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa305;
           $$a$3312$i = $$a$3$i;$z$4$i = $651;
          } else {
           $634 = HEAP32[$a$3248$i>>2]|0;
           $635 = ($634|0)==(0);
           $636 = (($a$3248$i) + 4|0);
           $$a$3311$i = $635 ? $636 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $652 = $z$4$i;
         $653 = $$a$3312$i;
         $654 = (($652) - ($653))|0;
         $655 = $654 >> 2;
         $656 = ($655|0)>($598|0);
         if ($656) {
          $657 = (($$a$3312$i) + ($598<<2)|0);
          $z$5$i = $657;
         } else {
          $z$5$i = $z$4$i;
         }
         $658 = HEAP32[$e2$i>>2]|0;
         $659 = (($658) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $659;
         $660 = ($659|0)<(0);
         if ($660) {
          $630 = $659;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
          break;
         }
        }
        $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $661 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($661) {
        $662 = $a$3$lcssa$i;
        $663 = (($563) - ($662))|0;
        $664 = $663 >> 2;
        $665 = ($664*9)|0;
        $666 = HEAP32[$a$3$lcssa$i>>2]|0;
        $667 = ($666>>>0)<(10);
        if ($667) {
         $e$1$i = $665;
         break;
        }
        $e$0237$i = $665;$i$0236$i = 10;
        while(1) {
         $668 = ($i$0236$i*10)|0;
         $669 = (($e$0237$i) + 1)|0;
         $670 = ($666>>>0)<($668>>>0);
         if ($670) {
          $$lcssa307 = $669;
          break;
         } else {
          $e$0237$i = $669;$i$0236$i = $668;
         }
        }
        $e$1$i = $$lcssa307;
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $671 = ($405|0)!=(102);
      $672 = $671 ? $e$1$i : 0;
      $673 = (($$p$i) - ($672))|0;
      $674 = ($405|0)==(103);
      $675 = ($$p$i|0)!=(0);
      $$27$i = $674 & $675;
      $$neg159$i = $$27$i << 31 >> 31;
      $676 = (($673) + ($$neg159$i))|0;
      $677 = $z$3$lcssa$i;
      $678 = (($677) - ($563))|0;
      $679 = $678 >> 2;
      $680 = ($679*9)|0;
      $681 = (($680) + -9)|0;
      $682 = ($676|0)<($681|0);
      if ($682) {
       $683 = (($676) + 9216)|0;
       $684 = (($683|0) / 9)&-1;
       $$sum$i = (($684) + -1023)|0;
       $685 = (($$39$i) + ($$sum$i<<2)|0);
       $686 = (($683|0) % 9)&-1;
       $j$0229$i = (($686) + 1)|0;
       $687 = ($j$0229$i|0)<(9);
       if ($687) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $688 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $$lcssa308 = $688;
          break;
         } else {
          $i$1230$i = $688;$j$0231$i = $j$0$i;
         }
        }
        $i$1$lcssa$i = $$lcssa308;
       } else {
        $i$1$lcssa$i = 10;
       }
       $689 = HEAP32[$685>>2]|0;
       $690 = (($689>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $691 = ($690|0)==(0);
       if ($691) {
        $$sum21$i = (($684) + -1022)|0;
        $692 = (($$39$i) + ($$sum21$i<<2)|0);
        $693 = ($692|0)==($z$3$lcssa$i|0);
        if ($693) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $685;$e$3$i = $e$1$i;
        } else {
         label = 275;
        }
       } else {
        label = 275;
       }
       do {
        if ((label|0) == 275) {
         label = 0;
         $694 = (($689>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $695 = $694 & 1;
         $696 = ($695|0)==(0);
         $$28$i = $696 ? 9007199254740992.0 : 9007199254740994.0;
         $697 = (($i$1$lcssa$i|0) / 2)&-1;
         $698 = ($690>>>0)<($697>>>0);
         do {
          if ($698) {
           $small$0$i = 0.5;
          } else {
           $699 = ($690|0)==($697|0);
           if ($699) {
            $$sum22$i = (($684) + -1022)|0;
            $700 = (($$39$i) + ($$sum22$i<<2)|0);
            $701 = ($700|0)==($z$3$lcssa$i|0);
            if ($701) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $702 = ($pl$0$i|0)==(0);
         do {
          if ($702) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $703 = HEAP8[$prefix$0$i>>0]|0;
           $704 = ($703<<24>>24)==(45);
           if (!($704)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $705 = -$$28$i;
           $706 = -$small$0$i;
           $round6$1$i = $705;$small$1$i = $706;
          }
         } while(0);
         $707 = (($689) - ($690))|0;
         HEAP32[$685>>2] = $707;
         $708 = $round6$1$i + $small$1$i;
         $709 = $708 != $round6$1$i;
         if (!($709)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $685;$e$3$i = $e$1$i;
          break;
         }
         $710 = (($707) + ($i$1$lcssa$i))|0;
         HEAP32[$685>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $685;
          while(1) {
           $712 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $713 = ($712>>>0)<($a$5223$i>>>0);
           if ($713) {
            $714 = (($a$5223$i) + -4|0);
            HEAP32[$714>>2] = 0;
            $a$6$i = $714;
           } else {
            $a$6$i = $a$5223$i;
           }
           $715 = HEAP32[$712>>2]|0;
           $716 = (($715) + 1)|0;
           HEAP32[$712>>2] = $716;
           $717 = ($716>>>0)>(999999999);
           if ($717) {
            $a$5223$i = $a$6$i;$d$2222$i = $712;
           } else {
            $$lcssa309 = $712;$a$6$i$lcssa = $a$6$i;
            break;
           }
          }
          $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa309;
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $685;
         }
         $718 = $a$5$lcssa$i;
         $719 = (($563) - ($718))|0;
         $720 = $719 >> 2;
         $721 = ($720*9)|0;
         $722 = HEAP32[$a$5$lcssa$i>>2]|0;
         $723 = ($722>>>0)<(10);
         if ($723) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $721;
          break;
         }
         $e$2218$i = $721;$i$2217$i = 10;
         while(1) {
          $724 = ($i$2217$i*10)|0;
          $725 = (($e$2218$i) + 1)|0;
          $726 = ($722>>>0)<($724>>>0);
          if ($726) {
           $$lcssa310 = $725;
           break;
          } else {
           $e$2218$i = $725;$i$2217$i = $724;
          }
         }
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa310;
        }
       } while(0);
       $727 = (($d$3$i) + 4|0);
       $728 = ($z$3$lcssa$i>>>0)>($727>>>0);
       $$z$3$i = $728 ? $727 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $729 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $730 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($730)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $731 = (($z$6$i) + -4|0);
       $732 = HEAP32[$731>>2]|0;
       $733 = ($732|0)==(0);
       if ($733) {
        $z$6$i = $731;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($674) {
        $734 = ($$p$i|0)==(0);
        $735 = $734&1;
        $$$p$i = (($735) + ($$p$i))|0;
        $736 = ($$$p$i|0)>($e$4$ph$i|0);
        $737 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $736 & $737;
        if ($or$cond6$i) {
         $738 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $739 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $738;$$216$i = $739;
        } else {
         $740 = (($t$0) + -2)|0;
         $741 = (($$$p$i) + -1)|0;
         $$019$i = $740;$$216$i = $741;
        }
        $742 = $fl$1$ & 8;
        $743 = ($742|0)==(0);
        if (!($743)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $744 = (($z$6$i$lcssa) + -4|0);
          $745 = HEAP32[$744>>2]|0;
          $746 = ($745|0)==(0);
          if ($746) {
           $j$2$i = 9;
           break;
          }
          $747 = (($745>>>0) % 10)&-1;
          $748 = ($747|0)==(0);
          if (!($748)) {
           $j$2$i = 0;
           break;
          }
          $i$3213$i = 10;$j$1214$i = 0;
          while(1) {
           $749 = ($i$3213$i*10)|0;
           $750 = (($j$1214$i) + 1)|0;
           $751 = (($745>>>0) % ($749>>>0))&-1;
           $752 = ($751|0)==(0);
           if ($752) {
            $i$3213$i = $749;$j$1214$i = $750;
           } else {
            $$lcssa311 = $750;
            break;
           }
          }
          $j$2$i = $$lcssa311;
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $753 = $$019$i | 32;
        $754 = ($753|0)==(102);
        $755 = $z$6$i$lcssa;
        $756 = (($755) - ($563))|0;
        $757 = $756 >> 2;
        $758 = ($757*9)|0;
        $759 = (($758) + -9)|0;
        if ($754) {
         $760 = (($759) - ($j$2$i))|0;
         $761 = ($760|0)<(0);
         $$29$i = $761 ? 0 : $760;
         $762 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $762 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $763 = (($759) + ($e$4$ph$i))|0;
         $764 = (($763) - ($j$2$i))|0;
         $765 = ($764|0)<(0);
         $$31$i = $765 ? 0 : $764;
         $766 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $766 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $767 = ($$317$i|0)!=(0);
      if ($767) {
       $771 = 1;
      } else {
       $768 = $fl$1$ & 8;
       $769 = ($768|0)!=(0);
       $771 = $769;
      }
      $770 = $771&1;
      $772 = $$120$i | 32;
      $773 = ($772|0)==(102);
      if ($773) {
       $774 = ($e$4$ph$i|0)>(0);
       $775 = $774 ? $e$4$ph$i : 0;
       $$pn$i = $775;$estr$2$i = 0;
      } else {
       $776 = ($e$4$ph$i|0)<(0);
       $777 = $776 ? $729 : $e$4$ph$i;
       $778 = ($777|0)<(0);
       if ($778) {
        $779 = ($777|0)<(0);
        $780 = $779 << 31 >> 31;
        $$05$i87$i = $7;$781 = $777;$782 = $780;
        while(1) {
         $783 = (___uremdi3(($781|0),($782|0),10,0)|0);
         $784 = tempRet0;
         $785 = $783 | 48;
         $786 = $785&255;
         $787 = (($$05$i87$i) + -1|0);
         HEAP8[$787>>0] = $786;
         $788 = (___udivdi3(($781|0),($782|0),10,0)|0);
         $789 = tempRet0;
         $790 = ($782>>>0)>(9);
         $791 = ($781>>>0)>(4294967295);
         $792 = ($782|0)==(9);
         $793 = $792 & $791;
         $794 = $790 | $793;
         if ($794) {
          $$05$i87$i = $787;$781 = $788;$782 = $789;
         } else {
          $$lcssa312 = $787;$1063 = $788;$1064 = $789;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa312;$$01$lcssa$off0$i93$i = $1063;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $777;
       }
       $795 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($795) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $796 = (($y$03$i94$i>>>0) % 10)&-1;
         $797 = $796 | 48;
         $798 = $797&255;
         $799 = (($$12$i95$i) + -1|0);
         HEAP8[$799>>0] = $798;
         $800 = (($y$03$i94$i>>>0) / 10)&-1;
         $801 = ($y$03$i94$i>>>0)<(10);
         if ($801) {
          $$lcssa314 = $799;
          break;
         } else {
          $$12$i95$i = $799;$y$03$i94$i = $800;
         }
        }
        $estr$1$ph$i = $$lcssa314;
       }
       $802 = $estr$1$ph$i;
       $803 = (($9) - ($802))|0;
       $804 = ($803|0)<(2);
       if ($804) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $805 = (($estr$1209$i) + -1|0);
         HEAP8[$805>>0] = 48;
         $806 = $805;
         $807 = (($9) - ($806))|0;
         $808 = ($807|0)<(2);
         if ($808) {
          $estr$1209$i = $805;
         } else {
          $$lcssa315 = $805;
          break;
         }
        }
        $estr$1$lcssa$i = $$lcssa315;
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $809 = $e$4$ph$i >> 31;
       $810 = $809 & 2;
       $811 = (($810) + 43)|0;
       $812 = $811&255;
       $813 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$813>>0] = $812;
       $814 = $$120$i&255;
       $815 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$815>>0] = $814;
       $816 = $815;
       $817 = (($9) - ($816))|0;
       $$pn$i = $817;$estr$2$i = $815;
      }
      $818 = (($pl$0$i) + 1)|0;
      $819 = (($818) + ($$317$i))|0;
      $l$1$i = (($819) + ($770))|0;
      $820 = (($l$1$i) + ($$pn$i))|0;
      $821 = $fl$1$ & 73728;
      $822 = ($821|0)==(0);
      $823 = ($w$1|0)>($820|0);
      $or$cond$i101$i = $822 & $823;
      if ($or$cond$i101$i) {
       $824 = (($w$1) - ($820))|0;
       $825 = ($824>>>0)>(256);
       $826 = $825 ? 256 : $824;
       _memset(($pad$i|0),32,($826|0))|0;
       $827 = ($824>>>0)>(255);
       if ($827) {
        $$01$i103$i = $824;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $828 = (($$01$i103$i) + -256)|0;
         $829 = ($828>>>0)>(255);
         if ($829) {
          $$01$i103$i = $828;
         } else {
          break;
         }
        }
        $830 = $824 & 255;
        $$0$lcssa$i105$i = $830;
       } else {
        $$0$lcssa$i105$i = $824;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $831 = ($821|0)==(65536);
      $or$cond$i108$i = $831 & $823;
      if ($or$cond$i108$i) {
       $832 = (($w$1) - ($820))|0;
       $833 = ($832>>>0)>(256);
       $834 = $833 ? 256 : $832;
       _memset(($pad$i|0),48,($834|0))|0;
       $835 = ($832>>>0)>(255);
       if ($835) {
        $$01$i110$i = $832;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $836 = (($$01$i110$i) + -256)|0;
         $837 = ($836>>>0)>(255);
         if ($837) {
          $$01$i110$i = $836;
         } else {
          break;
         }
        }
        $838 = $832 & 255;
        $$0$lcssa$i112$i = $838;
       } else {
        $$0$lcssa$i112$i = $832;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      do {
       if ($773) {
        $839 = ($a$8$ph$i>>>0)>($$39$i>>>0);
        $r$0$a$8$i = $839 ? $$39$i : $a$8$ph$i;
        $840 = $563 ^ -1;
        $841 = $a$8$ph294$i ^ -1;
        $842 = ($840>>>0)>($841>>>0);
        $umax$i = $842 ? $840 : $841;
        $843 = (3 - ($umax$i))|0;
        $uglygep$i = (($$39$i) + 1|0);
        $uglygep296$i = $uglygep$i;
        $844 = ($843>>>0)>($uglygep296$i>>>0);
        $umax297$i = $844 ? $843 : $uglygep296$i;
        $umax297298299$i = $umax297$i;
        $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
        $uglygep300301$i = $uglygep300$i;
        $845 = $umax$i ^ -1;
        $d$4199$i = $r$0$a$8$i;
        while(1) {
         $846 = HEAP32[$d$4199$i>>2]|0;
         $847 = ($846|0)==(0);
         if ($847) {
          $$1$lcssa$i120$i = $14;
         } else {
          $$12$i118$i = $14;$y$03$i117$i = $846;
          while(1) {
           $848 = (($y$03$i117$i>>>0) % 10)&-1;
           $849 = $848 | 48;
           $850 = $849&255;
           $851 = (($$12$i118$i) + -1|0);
           HEAP8[$851>>0] = $850;
           $852 = (($y$03$i117$i>>>0) / 10)&-1;
           $853 = ($y$03$i117$i>>>0)<(10);
           if ($853) {
            $$lcssa319 = $851;
            break;
           } else {
            $$12$i118$i = $851;$y$03$i117$i = $852;
           }
          }
          $$1$lcssa$i120$i = $$lcssa319;
         }
         $854 = ($d$4199$i|0)==($r$0$a$8$i|0);
         do {
          if ($854) {
           $858 = ($$1$lcssa$i120$i|0)==($14|0);
           if (!($858)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $855 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
           if (!($855)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           $s7$0196$i = $$1$lcssa$i120$i;
           while(1) {
            $856 = (($s7$0196$i) + -1|0);
            HEAP8[$856>>0] = 48;
            $857 = ($856>>>0)>($buf$i>>>0);
            if ($857) {
             $s7$0196$i = $856;
            } else {
             $$lcssa320 = $856;
             break;
            }
           }
           $s7$1$i = $$lcssa320;
          }
         } while(0);
         $859 = $s7$1$i;
         $860 = (($15) - ($859))|0;
         (___fwritex($s7$1$i,$860,$f)|0);
         $861 = (($d$4199$i) + 4|0);
         $862 = ($861>>>0)>($$39$i>>>0);
         if ($862) {
          $$lcssa321 = $861;
          break;
         } else {
          $d$4199$i = $861;
         }
        }
        $863 = $uglygep300301$i & -4;
        $864 = (($863) + ($845))|0;
        $865 = $864;
        $$not$i = $767 ^ 1;
        $866 = $fl$1$ & 8;
        $867 = ($866|0)==(0);
        $or$cond35$i = $867 & $$not$i;
        if (!($or$cond35$i)) {
         (___fwritex(28728,1,$f)|0);
        }
        $868 = ($$lcssa321>>>0)<($z$6$i$lcssa>>>0);
        $869 = ($$317$i|0)>(0);
        $or$cond10191$i = $868 & $869;
        if ($or$cond10191$i) {
         $$418193$i = $$317$i;$884 = $865;$d$5192$i = $$lcssa321;
         while(1) {
          $870 = HEAP32[$d$5192$i>>2]|0;
          $871 = ($870|0)==(0);
          if ($871) {
           $s8$0188$i$ph = $14;
           label = 362;
          } else {
           $$12$i127$i = $14;$y$03$i126$i = $870;
           while(1) {
            $872 = (($y$03$i126$i>>>0) % 10)&-1;
            $873 = $872 | 48;
            $874 = $873&255;
            $875 = (($$12$i127$i) + -1|0);
            HEAP8[$875>>0] = $874;
            $876 = (($y$03$i126$i>>>0) / 10)&-1;
            $877 = ($y$03$i126$i>>>0)<(10);
            if ($877) {
             $$lcssa322 = $875;
             break;
            } else {
             $$12$i127$i = $875;$y$03$i126$i = $876;
            }
           }
           $878 = ($$lcssa322>>>0)>($buf$i>>>0);
           if ($878) {
            $s8$0188$i$ph = $$lcssa322;
            label = 362;
           } else {
            $s8$0$lcssa$i = $$lcssa322;
           }
          }
          if ((label|0) == 362) {
           label = 0;
           $s8$0188$i = $s8$0188$i$ph;
           while(1) {
            $879 = (($s8$0188$i) + -1|0);
            HEAP8[$879>>0] = 48;
            $880 = ($879>>>0)>($buf$i>>>0);
            if ($880) {
             $s8$0188$i = $879;
            } else {
             $$lcssa323 = $879;
             break;
            }
           }
           $s8$0$lcssa$i = $$lcssa323;
          }
          $881 = ($$418193$i|0)>(9);
          $882 = $881 ? 9 : $$418193$i;
          (___fwritex($s8$0$lcssa$i,$882,$f)|0);
          $883 = (($884) + 8|0);
          $885 = (($$418193$i) + -9)|0;
          $886 = ($883>>>0)<($z$6$i$lcssa>>>0);
          $887 = ($885|0)>(0);
          $or$cond10$i = $886 & $887;
          if ($or$cond10$i) {
           $884$phi = $d$5192$i;$$418193$i = $885;$d$5192$i = $883;$884 = $884$phi;
          } else {
           $$lcssa324 = $885;
           break;
          }
         }
         $$418$lcssa$i = $$lcssa324;
        } else {
         $$418$lcssa$i = $$317$i;
        }
        $888 = ($$418$lcssa$i|0)>(0);
        if (!($888)) {
         break;
        }
        $889 = ($$418$lcssa$i>>>0)>(256);
        $890 = $889 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($890|0))|0;
        $891 = ($$418$lcssa$i>>>0)>(255);
        if ($891) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $892 = (($$01$i134$i) + -256)|0;
          $893 = ($892>>>0)>(255);
          if ($893) {
           $$01$i134$i = $892;
          } else {
           break;
          }
         }
         $894 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $894;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       } else {
        $895 = (($a$8$ph$i) + 4|0);
        $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $895;
        $896 = ($$317$i|0)>(-1);
        do {
         if ($896) {
          $897 = $fl$1$ & 8;
          $898 = ($897|0)==(0);
          $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
          while(1) {
           $899 = HEAP32[$d$6204$i>>2]|0;
           $900 = ($899|0)==(0);
           if ($900) {
            label = 379;
           } else {
            $$12$i142$i = $14;$y$03$i141$i = $899;
            while(1) {
             $901 = (($y$03$i141$i>>>0) % 10)&-1;
             $902 = $901 | 48;
             $903 = $902&255;
             $904 = (($$12$i142$i) + -1|0);
             HEAP8[$904>>0] = $903;
             $905 = (($y$03$i141$i>>>0) / 10)&-1;
             $906 = ($y$03$i141$i>>>0)<(10);
             if ($906) {
              $$12$i142$i$lcssa = $$12$i142$i;$$lcssa316 = $904;
              break;
             } else {
              $$12$i142$i = $904;$y$03$i141$i = $905;
             }
            }
            $907 = ($$lcssa316|0)==($14|0);
            if ($907) {
             label = 379;
            } else {
             $1065 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa316;
            }
           }
           if ((label|0) == 379) {
            label = 0;
            HEAP8[$16>>0] = 48;
            $1065 = $14;$s9$0$i = $16;
           }
           $908 = ($d$6204$i|0)==($a$8$ph$i|0);
           do {
            if ($908) {
             (___fwritex($s9$0$i,1,$f)|0);
             $912 = ($$5205$i|0)<(1);
             $or$cond37$i = $912 & $898;
             if ($or$cond37$i) {
              $s9$2$i = $1065;
              break;
             }
             (___fwritex(28728,1,$f)|0);
             $s9$2$i = $1065;
            } else {
             $909 = ($s9$0$i>>>0)>($buf$i>>>0);
             if (!($909)) {
              $s9$2$i = $s9$0$i;
              break;
             }
             $s9$1200$i = $s9$0$i;
             while(1) {
              $910 = (($s9$1200$i) + -1|0);
              HEAP8[$910>>0] = 48;
              $911 = ($910>>>0)>($buf$i>>>0);
              if ($911) {
               $s9$1200$i = $910;
              } else {
               $$lcssa317 = $910;
               break;
              }
             }
             $s9$2$i = $$lcssa317;
            }
           } while(0);
           $913 = $s9$2$i;
           $914 = (($15) - ($913))|0;
           $915 = ($$5205$i|0)>($914|0);
           $$$5$i = $915 ? $914 : $$5205$i;
           (___fwritex($s9$2$i,$$$5$i,$f)|0);
           $916 = (($$5205$i) - ($914))|0;
           $917 = (($d$6204$i) + 4|0);
           $918 = ($917>>>0)<($z$6$$i>>>0);
           $919 = ($916|0)>(-1);
           $or$cond12$i = $918 & $919;
           if ($or$cond12$i) {
            $$5205$i = $916;$d$6204$i = $917;
           } else {
            $$lcssa318 = $916;
            break;
           }
          }
          $920 = ($$lcssa318|0)>(0);
          if (!($920)) {
           break;
          }
          $921 = ($$lcssa318>>>0)>(256);
          $922 = $921 ? 256 : $$lcssa318;
          _memset(($pad$i|0),48,($922|0))|0;
          $923 = ($$lcssa318>>>0)>(255);
          if ($923) {
           $$01$i149$i = $$lcssa318;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $924 = (($$01$i149$i) + -256)|0;
            $925 = ($924>>>0)>(255);
            if ($925) {
             $$01$i149$i = $924;
            } else {
             break;
            }
           }
           $926 = $$lcssa318 & 255;
           $$0$lcssa$i151$i = $926;
          } else {
           $$0$lcssa$i151$i = $$lcssa318;
          }
          (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
         }
        } while(0);
        $927 = $estr$2$i;
        $928 = (($9) - ($927))|0;
        (___fwritex($estr$2$i,$928,$f)|0);
       }
      } while(0);
      $929 = ($821|0)==(8192);
      $or$cond$i$i = $929 & $823;
      if ($or$cond$i$i) {
       $930 = (($w$1) - ($820))|0;
       $931 = ($930>>>0)>(256);
       $932 = $931 ? 256 : $930;
       _memset(($pad$i|0),32,($932|0))|0;
       $933 = ($930>>>0)>(255);
       if ($933) {
        $$01$i$i = $930;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $934 = (($$01$i$i) + -256)|0;
         $935 = ($934>>>0)>(255);
         if ($935) {
          $$01$i$i = $934;
         } else {
          break;
         }
        }
        $936 = $930 & 255;
        $$0$lcssa$i$i = $936;
       } else {
        $$0$lcssa$i$i = $930;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $823 ? $w$1 : $820;
      $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $w$38$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     case 117:  {
      $267 = $222;$269 = $195;$pl$0 = 0;$prefix$0 = 28632;
      label = 97;
      break;
     }
     case 105: case 100:  {
      $260 = ($222|0)<(0);
      if ($260) {
       $261 = (_i64Subtract(0,0,($195|0),($222|0))|0);
       $262 = tempRet0;
       $267 = $262;$269 = $261;$pl$0 = 1;$prefix$0 = 28632;
       label = 97;
       break L98;
      }
      $263 = $fl$1$ & 2048;
      $264 = ($263|0)==(0);
      if ($264) {
       $265 = $fl$1$ & 1;
       $266 = ($265|0)==(0);
       $$ = $266 ? 28632 : ((28632 + 2|0));
       $267 = $222;$269 = $195;$pl$0 = $265;$prefix$0 = $$;
       label = 97;
      } else {
       $267 = $222;$269 = $195;$pl$0 = 1;$prefix$0 = ((28632 + 1|0));
       label = 97;
      }
      break;
     }
     case 110:  {
      switch ($st$0$lcssa296|0) {
      case 0:  {
       $196 = $195;
       HEAP32[$196>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $197 = $195;
       HEAP32[$197>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 2:  {
       $198 = ($cnt$1|0)<(0);
       $199 = $198 << 31 >> 31;
       $200 = $195;
       $201 = $200;
       $202 = $201;
       HEAP32[$202>>2] = $cnt$1;
       $203 = (($201) + 4)|0;
       $204 = $203;
       HEAP32[$204>>2] = $199;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 3:  {
       $205 = $cnt$1&65535;
       $206 = $195;
       HEAP16[$206>>1] = $205;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $207 = $cnt$1&255;
       $208 = $195;
       HEAP8[$208>>0] = $207;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 6:  {
       $209 = $195;
       HEAP32[$209>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 7:  {
       $210 = ($cnt$1|0)<(0);
       $211 = $210 << 31 >> 31;
       $212 = $195;
       $213 = $212;
       $214 = $213;
       HEAP32[$214>>2] = $cnt$1;
       $215 = (($213) + 4)|0;
       $216 = $215;
       HEAP32[$216>>2] = $211;
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $$lcssa299;$$be286 = $195;$$be287 = $222;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     case 109:  {
      $310 = (___errno_location()|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = (_strerror(($311|0))|0);
      $a$1 = $312;
      label = 110;
      break;
     }
     case 115:  {
      $313 = $195;
      $314 = ($195|0)==(0);
      $$21 = $314 ? 28648 : $313;
      $a$1 = $$21;
      label = 110;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 83;
      break;
     }
     case 111:  {
      $243 = ($195|0)==(0);
      $244 = ($222|0)==(0);
      $245 = $243 & $244;
      if ($245) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$247 = $195;$251 = $222;
       while(1) {
        $246 = $247 & 7;
        $248 = $246 | 48;
        $249 = $248&255;
        $250 = (($$03$i49) + -1|0);
        HEAP8[$250>>0] = $249;
        $252 = (_bitshift64Lshr(($247|0),($251|0),3)|0);
        $253 = tempRet0;
        $254 = ($252|0)==(0);
        $255 = ($253|0)==(0);
        $256 = $254 & $255;
        if ($256) {
         $$lcssa332 = $250;
         break;
        } else {
         $$03$i49 = $250;$247 = $252;$251 = $253;
        }
       }
       $$0$lcssa$i52 = $$lcssa332;
      }
      $257 = $fl$1$ & 8;
      $258 = ($257|0)==(0);
      $or$cond19 = $258 | $245;
      $$25 = $or$cond19 ? 28632 : ((28632 + 5|0));
      $259 = $or$cond19&1;
      $$26 = $259 ^ 1;
      $297 = $195;$299 = $222;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 105;
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $195;
      HEAP32[$5>>2] = 0;
      $1057 = $wc;$1058 = $6;$p$4272 = -1;
      label = 115;
      break;
     }
     case 83:  {
      $321 = $195;
      $322 = ($p$0|0)==(0);
      if ($322) {
       $1059 = $195;$1060 = $321;$i$0$lcssa273 = 0;
       label = 120;
      } else {
       $1057 = $321;$1058 = $195;$p$4272 = $p$0;
       label = 115;
      }
      break;
     }
     case 99:  {
      $309 = $195&255;
      HEAP8[$4>>0] = $309;
      $1053 = $195;$1054 = $222;$a$2 = $4;$fl$6 = $194;$p$5 = 1;$pl$2 = 0;$prefix$2 = 28632;$z$2 = $2;
      break;
     }
     case 112:  {
      $217 = ($p$0>>>0)>(8);
      $218 = $217 ? $p$0 : 8;
      $219 = $fl$1$ | 8;
      $fl$3 = $219;$p$1 = $218;$t$1 = 120;
      label = 83;
      break;
     }
     default: {
      $1053 = $195;$1054 = $222;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 28632;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 83) {
      label = 0;
      $220 = $t$1 & 32;
      $221 = ($195|0)==(0);
      $223 = ($222|0)==(0);
      $224 = $221 & $223;
      if ($224) {
       $297 = $195;$299 = $222;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 28632;
       label = 105;
      } else {
       $$012$i = $2;$226 = $195;$233 = $222;
       while(1) {
        $225 = $226 & 15;
        $227 = (28712 + ($225)|0);
        $228 = HEAP8[$227>>0]|0;
        $229 = $228&255;
        $230 = $229 | $220;
        $231 = $230&255;
        $232 = (($$012$i) + -1|0);
        HEAP8[$232>>0] = $231;
        $234 = (_bitshift64Lshr(($226|0),($233|0),4)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(0);
        $238 = $236 & $237;
        if ($238) {
         $$lcssa333 = $232;
         break;
        } else {
         $$012$i = $232;$226 = $234;$233 = $235;
        }
       }
       $239 = $fl$3 & 8;
       $240 = ($239|0)==(0);
       if ($240) {
        $297 = $195;$299 = $222;$a$0 = $$lcssa333;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 28632;
        label = 105;
       } else {
        $241 = $t$1 >> 4;
        $242 = (28632 + ($241)|0);
        $297 = $195;$299 = $222;$a$0 = $$lcssa333;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
        label = 105;
       }
      }
     }
     else if ((label|0) == 97) {
      label = 0;
      $268 = ($267>>>0)>(0);
      $270 = ($269>>>0)>(4294967295);
      $271 = ($267|0)==(0);
      $272 = $271 & $270;
      $273 = $268 | $272;
      if ($273) {
       $$05$i = $2;$274 = $269;$275 = $267;
       while(1) {
        $276 = (___uremdi3(($274|0),($275|0),10,0)|0);
        $277 = tempRet0;
        $278 = $276 | 48;
        $279 = $278&255;
        $280 = (($$05$i) + -1|0);
        HEAP8[$280>>0] = $279;
        $281 = (___udivdi3(($274|0),($275|0),10,0)|0);
        $282 = tempRet0;
        $283 = ($275>>>0)>(9);
        $284 = ($274>>>0)>(4294967295);
        $285 = ($275|0)==(9);
        $286 = $285 & $284;
        $287 = $283 | $286;
        if ($287) {
         $$05$i = $280;$274 = $281;$275 = $282;
        } else {
         $$lcssa329 = $280;$1055 = $281;$1056 = $282;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa329;$$01$lcssa$off0$i = $1055;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $269;
      }
      $288 = ($$01$lcssa$off0$i|0)==(0);
      if ($288) {
       $297 = $269;$299 = $267;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $289 = (($y$03$i>>>0) % 10)&-1;
        $290 = $289 | 48;
        $291 = $290&255;
        $292 = (($$12$i) + -1|0);
        HEAP8[$292>>0] = $291;
        $293 = (($y$03$i>>>0) / 10)&-1;
        $294 = ($y$03$i>>>0)<(10);
        if ($294) {
         $$lcssa331 = $292;
         break;
        } else {
         $$12$i = $292;$y$03$i = $293;
        }
       }
       $297 = $269;$299 = $267;$a$0 = $$lcssa331;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      }
     }
     else if ((label|0) == 110) {
      label = 0;
      $315 = (_memchr($a$1,0,$p$0)|0);
      $316 = ($315|0)==(0|0);
      if ($316) {
       $317 = (($a$1) + ($p$0)|0);
       $1053 = $195;$1054 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 28632;$z$2 = $317;
       break;
      } else {
       $318 = $315;
       $319 = $a$1;
       $320 = (($318) - ($319))|0;
       $1053 = $195;$1054 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $320;$pl$2 = 0;$prefix$2 = 28632;$z$2 = $315;
       break;
      }
     }
     else if ((label|0) == 115) {
      label = 0;
      $i$0175 = 0;$l$1174 = 0;$ws$0176 = $1057;
      while(1) {
       $323 = HEAP32[$ws$0176>>2]|0;
       $324 = ($323|0)==(0);
       if ($324) {
        $i$0$lcssa = $i$0175;$l$2 = $l$1174;
        break;
       }
       $325 = (_wctomb($mb,$323)|0);
       $326 = ($325|0)<(0);
       $327 = (($p$4272) - ($i$0175))|0;
       $328 = ($325>>>0)>($327>>>0);
       $or$cond23 = $326 | $328;
       if ($or$cond23) {
        $i$0$lcssa = $i$0175;$l$2 = $325;
        break;
       }
       $329 = (($ws$0176) + 4|0);
       $330 = (($325) + ($i$0175))|0;
       $331 = ($p$4272>>>0)>($330>>>0);
       if ($331) {
        $i$0175 = $330;$l$1174 = $325;$ws$0176 = $329;
       } else {
        $i$0$lcssa = $330;$l$2 = $325;
        break;
       }
      }
      $332 = ($l$2|0)<(0);
      if ($332) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      } else {
       $1059 = $1058;$1060 = $1057;$i$0$lcssa273 = $i$0$lcssa;
       label = 120;
      }
     }
    } while(0);
    if ((label|0) == 105) {
     label = 0;
     $295 = ($p$2|0)>(-1);
     $296 = $fl$4 & -65537;
     $$fl$4 = $295 ? $296 : $fl$4;
     $298 = ($297|0)!=(0);
     $300 = ($299|0)!=(0);
     $301 = $298 | $300;
     $302 = ($p$2|0)!=(0);
     $or$cond = $301 | $302;
     if ($or$cond) {
      $303 = $a$0;
      $304 = (($3) - ($303))|0;
      $305 = $301&1;
      $306 = $305 ^ 1;
      $307 = (($306) + ($304))|0;
      $308 = ($p$2|0)>($307|0);
      $p$2$ = $308 ? $p$2 : $307;
      $1053 = $297;$1054 = $299;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1053 = $297;$1054 = $299;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 120) {
     label = 0;
     $333 = $fl$1$ & 73728;
     $334 = ($333|0)==(0);
     $335 = ($w$1|0)>($i$0$lcssa273|0);
     $or$cond$i65 = $334 & $335;
     if ($or$cond$i65) {
      $336 = (($w$1) - ($i$0$lcssa273))|0;
      $337 = ($336>>>0)>(256);
      $338 = $337 ? 256 : $336;
      _memset(($pad$i|0),32,($338|0))|0;
      $339 = ($336>>>0)>(255);
      if ($339) {
       $$01$i67 = $336;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $340 = (($$01$i67) + -256)|0;
        $341 = ($340>>>0)>(255);
        if ($341) {
         $$01$i67 = $340;
        } else {
         break;
        }
       }
       $342 = $336 & 255;
       $$0$lcssa$i69 = $342;
      } else {
       $$0$lcssa$i69 = $336;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $343 = ($i$0$lcssa273|0)==(0);
     if (!($343)) {
      $i$1186 = 0;$ws$1187 = $1060;
      while(1) {
       $344 = HEAP32[$ws$1187>>2]|0;
       $345 = ($344|0)==(0);
       if ($345) {
        break;
       }
       $346 = (_wctomb($mb,$344)|0);
       $347 = (($346) + ($i$1186))|0;
       $348 = ($347|0)>($i$0$lcssa273|0);
       if ($348) {
        break;
       }
       $349 = (($ws$1187) + 4|0);
       (___fwritex($mb,$346,$f)|0);
       $350 = ($347>>>0)<($i$0$lcssa273>>>0);
       if ($350) {
        $i$1186 = $347;$ws$1187 = $349;
       } else {
        break;
       }
      }
     }
     $351 = ($333|0)==(8192);
     $or$cond$i72 = $351 & $335;
     if ($or$cond$i72) {
      $352 = (($w$1) - ($i$0$lcssa273))|0;
      $353 = ($352>>>0)>(256);
      $354 = $353 ? 256 : $352;
      _memset(($pad$i|0),32,($354|0))|0;
      $355 = ($352>>>0)>(255);
      if ($355) {
       $$01$i74 = $352;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $356 = (($$01$i74) + -256)|0;
        $357 = ($356>>>0)>(255);
        if ($357) {
         $$01$i74 = $356;
        } else {
         break;
        }
       }
       $358 = $352 & 255;
       $$0$lcssa$i76 = $358;
      } else {
       $$0$lcssa$i76 = $352;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $359 = $335 ? $w$1 : $i$0$lcssa273;
     $$be = $$lcssa299;$$be286 = $1059;$$be287 = $222;$l$0$be = $359;$l10n$0$be = $l10n$3;
     break;
    }
    $937 = $z$2;
    $938 = $a$2;
    $939 = (($937) - ($938))|0;
    $940 = ($p$5|0)<($939|0);
    $$p$5 = $940 ? $939 : $p$5;
    $941 = (($pl$2) + ($$p$5))|0;
    $942 = ($w$1|0)<($941|0);
    $w$2 = $942 ? $941 : $w$1;
    $943 = $fl$6 & 73728;
    $944 = ($943|0)==(0);
    $945 = ($w$2|0)>($941|0);
    $or$cond$i82 = $944 & $945;
    if ($or$cond$i82) {
     $946 = (($w$2) - ($941))|0;
     $947 = ($946>>>0)>(256);
     $948 = $947 ? 256 : $946;
     _memset(($pad$i|0),32,($948|0))|0;
     $949 = ($946>>>0)>(255);
     if ($949) {
      $$01$i84 = $946;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $950 = (($$01$i84) + -256)|0;
       $951 = ($950>>>0)>(255);
       if ($951) {
        $$01$i84 = $950;
       } else {
        break;
       }
      }
      $952 = $946 & 255;
      $$0$lcssa$i86 = $952;
     } else {
      $$0$lcssa$i86 = $946;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $953 = ($943|0)==(65536);
    $or$cond$i58 = $953 & $945;
    if ($or$cond$i58) {
     $954 = (($w$2) - ($941))|0;
     $955 = ($954>>>0)>(256);
     $956 = $955 ? 256 : $954;
     _memset(($pad$i|0),48,($956|0))|0;
     $957 = ($954>>>0)>(255);
     if ($957) {
      $$01$i60 = $954;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $958 = (($$01$i60) + -256)|0;
       $959 = ($958>>>0)>(255);
       if ($959) {
        $$01$i60 = $958;
       } else {
        break;
       }
      }
      $960 = $954 & 255;
      $$0$lcssa$i62 = $960;
     } else {
      $$0$lcssa$i62 = $954;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $961 = ($$p$5|0)>($939|0);
    if ($961) {
     $962 = (($$p$5) - ($939))|0;
     $963 = ($962>>>0)>(256);
     $964 = $963 ? 256 : $962;
     _memset(($pad$i|0),48,($964|0))|0;
     $965 = ($962>>>0)>(255);
     if ($965) {
      $$01$i45 = $962;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $966 = (($$01$i45) + -256)|0;
       $967 = ($966>>>0)>(255);
       if ($967) {
        $$01$i45 = $966;
       } else {
        break;
       }
      }
      $968 = $962 & 255;
      $$0$lcssa$i47 = $968;
     } else {
      $$0$lcssa$i47 = $962;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$939,$f)|0);
    $969 = ($943|0)==(8192);
    $or$cond$i = $969 & $945;
    if ($or$cond$i) {
     $970 = (($w$2) - ($941))|0;
     $971 = ($970>>>0)>(256);
     $972 = $971 ? 256 : $970;
     _memset(($pad$i|0),32,($972|0))|0;
     $973 = ($970>>>0)>(255);
     if ($973) {
      $$01$i = $970;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $974 = (($$01$i) + -256)|0;
       $975 = ($974>>>0)>(255);
       if ($975) {
        $$01$i = $974;
       } else {
        break;
       }
      }
      $976 = $970 & 255;
      $$0$lcssa$i = $976;
     } else {
      $$0$lcssa$i = $970;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
     $$be = $$lcssa299;$$be286 = $1053;$$be287 = $1054;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    } else {
     $$be = $$lcssa299;$$be286 = $1053;$$be287 = $1054;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    }
   } else {
    $$be = $$lcssa106;$$be286 = $1044;$$be287 = $1045;$l$0$be = $37;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1044 = $$be286;$1045 = $$be287;$23 = $$be;$cnt$0 = $cnt$1;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 426) {
  $977 = ($f|0)==(0|0);
  if (!($977)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $978 = ($l10n$0$lcssa|0)==(0);
  if ($978) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2162 = 1;
  while(1) {
   $979 = (($nl_type) + ($i$2162<<2)|0);
   $980 = HEAP32[$979>>2]|0;
   $981 = ($980|0)==(0);
   if ($981) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $982 = (($nl_arg) + ($i$2162<<3)|0);
   $983 = ($980>>>0)>(20);
   L610: do {
    if (!($983)) {
     do {
      switch ($980|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $984 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$982>>2] = $984;
       break L610;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $986 = ($985|0)<(0);
       $987 = $986 << 31 >> 31;
       $988 = $982;
       $989 = $988;
       HEAP32[$989>>2] = $985;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L610;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $993 = $982;
       $994 = $993;
       HEAP32[$994>>2] = $992;
       $995 = (($993) + 4)|0;
       $996 = $995;
       HEAP32[$996>>2] = 0;
       break L610;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $997 = $arglist_current44;
       $998 = $997;
       $999 = HEAP32[$998>>2]|0;
       $1000 = (($997) + 4)|0;
       $1001 = $1000;
       $1002 = HEAP32[$1001>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1003 = $982;
       $1004 = $1003;
       HEAP32[$1004>>2] = $999;
       $1005 = (($1003) + 4)|0;
       $1006 = $1005;
       HEAP32[$1006>>2] = $1002;
       break L610;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1007 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1008 = $1007&65535;
       $1009 = $1008 << 16 >> 16;
       $1010 = ($1009|0)<(0);
       $1011 = $1010 << 31 >> 31;
       $1012 = $982;
       $1013 = $1012;
       HEAP32[$1013>>2] = $1009;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = $1011;
       break L610;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1016 & 65535;
       $1017 = $982;
       $1018 = $1017;
       HEAP32[$1018>>2] = $$mask1$i;
       $1019 = (($1017) + 4)|0;
       $1020 = $1019;
       HEAP32[$1020>>2] = 0;
       break L610;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1021 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1022 = $1021&255;
       $1023 = $1022 << 24 >> 24;
       $1024 = ($1023|0)<(0);
       $1025 = $1024 << 31 >> 31;
       $1026 = $982;
       $1027 = $1026;
       HEAP32[$1027>>2] = $1023;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = $1025;
       break L610;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1030 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1030 & 255;
       $1031 = $982;
       $1032 = $1031;
       HEAP32[$1032>>2] = $$mask$i;
       $1033 = (($1031) + 4)|0;
       $1034 = $1033;
       HEAP32[$1034>>2] = 0;
       break L610;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1035 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$982>>3] = $1035;
       break L610;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$982>>3] = $1036;
       break L610;
       break;
      }
      default: {
       break L610;
      }
      }
     } while(0);
    }
   } while(0);
   $1037 = (($i$2162) + 1)|0;
   $1038 = ($1037|0)<(10);
   if ($1038) {
    $i$2162 = $1037;
   } else {
    label = 447;
    break;
   }
  }
  if ((label|0) == 447) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3160 = $i$2162$lcssa;
  while(1) {
   $1041 = (($nl_type) + ($i$3160<<2)|0);
   $1042 = HEAP32[$1041>>2]|0;
   $1043 = ($1042|0)==(0);
   $1039 = (($i$3160) + 1)|0;
   if (!($1043)) {
    $$0$ph = -1;
    break;
   }
   $1040 = ($1039|0)<(10);
   if ($1040) {
    $i$3160 = $1039;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 448) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 449) {
  $$0 = $$0$ph285;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  return FUNCTION_TABLE_iiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&511](a1|0,+a2,+a3,+a4);
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iiiiiiiiidiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=+a9; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0;
  return FUNCTION_TABLE_iiiiiiiiidiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,+a9,a10|0,a11|0,a12|0,a13|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
  FUNCTION_TABLE_viiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&511](a1|0,a2|0,a3|0,+a4);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_iiiiiiiiiii(5);return 0; }
function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(7); }
function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(8);return 0; }
function b9(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0; }
function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
function b10(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(10); }
function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(11); }
function b12(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(12); }
function b13(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13); }
function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = +p8;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0; nullFunc_iiiiiiiiidiiii(14);return 0; }
function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(15); }
function b16(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(16); }
function b17(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(17); }
function b18(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(18); }
function b19(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(19);return 0; }
function b20(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(20);return 0; }
function b21(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(21);return +0; }
function b22() { ; nullFunc_i(22);return 0; }
function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
function b23(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(23);return 0; }
function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
function b24(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(24); }
function b25(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(25); }
function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
function b26() { ; nullFunc_v(26); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
function b27(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(27);return 0; }
function b28(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(28); }
function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,__ZN6VTFLib8CVTFFile15SetBumpmapScaleEf,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN6VTFLib2IO7Writers13CMemoryWriter5CloseEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcED0Ev
,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev
,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3
,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED1Ev
,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev
,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3
,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3
,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev
,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN6VTFLib8CVTFFile16ComputeResourcesEv,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZN6VTFLib8CVTFFile7DestroyEv,b3,b3,__ZN6VTFLib2IO7Writers13CMemoryWriterD2Ev,b3,__ZN6VTFLib8CVTFFileD2Ev,__ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEED2Ev,__ZN6VTFLib11Diagnostics6CErrorD2Ev,__ZN6VTFLib8CVTFFileC2Ev,b3,__ZNSt3__114__split_bufferIPN6VTFLib8CVTFFileERNS_9allocatorIS3_EEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_freelocale__wrapper,b3,b3,__ZNSt3__112__do_nothingEPv,b3
,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3
,b3,b3,b3,b3,b3,___cxx_global_array_dtor108,b3,___cxx_global_array_dtor93,b3,___cxx_global_array_dtor69,___cxx_global_array_dtor45,___cxx_global_array_dtor42,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_free,b3
,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,__ZN6squish10ClusterFit9Compress3EPv,__ZN6squish10ClusterFit9Compress4EPv,b4,__ZN6squish8RangeFit9Compress3EPv,__ZN6squish8RangeFit9Compress4EPv,__ZN6squish15SingleColourFit9Compress3EPv,__ZN6squish15SingleColourFit9Compress4EPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4
,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4
,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4
,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZN6VTFLib8CVTFFile13SetStartFrameEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPN6VTFLib8CVTFFileENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b4,__ZNSt3__18ios_base4initEPv,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc
,b4,b4,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNSt3__18ios_base5clearEj,b4,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b4,b4,__ZNKSt3__18ios_base6getlocEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,b4,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_
,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj
,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN6VTFLib8CVTFFile6CreateEjjjjj17tagVTFImageFormathhh,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,__ZNK6VTFLib2IO7Writers13CMemoryWriter6OpenedEv,__ZN6VTFLib2IO7Writers13CMemoryWriter4OpenEv,b6,__ZNK6VTFLib2IO7Writers13CMemoryWriter13GetStreamSizeEv,__ZNK6VTFLib2IO7Writers13CMemoryWriter16GetStreamPointerEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__111__stdoutbufIwE4syncEv
,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,b6
,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b6,b6,b6,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__119__iostream_category4nameEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6
,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6
,b6,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b6,b6,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b6,b6,b6,b6,b6,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6
,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6,b6,__ZNKSt8bad_cast4whatEv,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Znaj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZN6VTFLib8CVTFFile17GenerateThumbnailEv,__ZN6VTFLib8CVTFFile17GenerateSphereMapEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK6VTFLib8CVTFFile20GetSupportsResourcesEv,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b6,b6,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6
,__Znwj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_uselocale__wrapper,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_wcslen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viddd = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,__ZN6VTFLib8CVTFFile15SetReflectivityEfff,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiiiiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_
,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_iiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN6VTFLib2IO7Writers13CMemoryWriter4SeekElj,b9,__ZN6VTFLib2IO7Writers13CMemoryWriter5WriteEPvj,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b9,b9,b9
,b9,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b9,b9,b9,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b9,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b9,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b9,b9,b9,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b9,b9
,b9,b9,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b9,b9,b9,b9,b9,b9,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b9,b9,b9,b9,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b9,b9,b9,b9,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b9,b9,b9,b9
,b9,b9,b9,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b9,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b9,b9,__ZNKSt3__15ctypeIcE9do_narrowEcc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZNKSt3__15ctypeIwE5do_isEtw,b9,b9,b9,b9,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b9,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b9,b9,__ZNKSt3__15ctypeIwE9do_narrowEwc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b9,b9,b9,b9,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b9,b9,b9,b9,b9,b9,b9,b9,_sn_write,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_newlocale__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,_wcrtomb,b9,b9,_mbtowc,_mbrlen,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_vasprintf,b9,b9
,_do_read,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b10,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_viiiiid = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b11
,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viiiiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b12,b12,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b12,b12,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b13,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b13,b13,b13,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv
,b13,b13,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b13,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b13,b13,b13,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b13,b13,b13,b13,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,b13,b13,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,__ZN6VTFLib8CVTFFile24ComputeImageReflectivityEPhjjRfS2_S2_,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iiiiiiiiidiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN6VTFLib8CVTFFile18ConvertToNormalMapEPhS1_jj18tagVTFKernelFilter28tagVTFHeightConversionMethod23tagVTFNormalAlphaResulthfhhhh,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_viiiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt
,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b15,b15,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b15,b15,b15,b15,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b15,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b15,b15,b15
,b15,b15,b15,b15,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b15,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b15,b15,b15,b15,b15,b15,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b15,b15,b15,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b15,b15,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b15,b15,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiiiiid = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b16,b16,b16,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe];
var FUNCTION_TABLE_viiiiiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viiiiiiiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b18,b18,b18,b18,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b18,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18];
var FUNCTION_TABLE_iii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN6VTFLib2IO7Writers13CMemoryWriter5WriteEc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b19,__ZNSt3__111__stdoutbufIwE8overflowEj,b19,b19,b19,b19,b19,__ZNSt3__110__stdinbufIwE9pbackfailEj,b19,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b19,__ZNSt3__111__stdoutbufIcE8overflowEi,b19
,b19,b19,b19,b19,__ZNSt3__110__stdinbufIcE9pbackfailEi,b19,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,__ZNKSt3__15ctypeIcE10do_toupperEc,b19,__ZNKSt3__15ctypeIcE10do_tolowerEc,b19,__ZNKSt3__15ctypeIcE8do_widenEc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE10do_toupperEw,b19,__ZNKSt3__15ctypeIwE10do_tolowerEw,b19,__ZNKSt3__15ctypeIwE8do_widenEc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN6VTFLib8CVTFFile12IsPowerOfTwoEj,__ZN6VTFLib8CVTFFile14NextPowerOfTwoEj,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNK6VTFLib8CVTFFile4SaveEPNS_2IO7Writers7IWriterE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__16locale9use_facetERNS0_2idE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_isxdigit_l,_isdigit_l,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b19,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_iiiiii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b20,b20,b20,b20,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b20,b20,b20,b20,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b20,b20,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b20,b20,b20,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b20,b20,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_
,b20,b20,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b20,b20,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNK6VTFLib8CVTFFile7GetDataEjjjj,__ZN6VTFLib8CVTFFile19ConvertFromRGBA8888EPhS1_jj17tagVTFImageFormat
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,_wcsnrtombs
,b20,_mbsnrtowcs,b20];
var FUNCTION_TABLE_diii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_i = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__16__clocEv,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__16locale5__imp12make_classicEv,b22,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b22,b22,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,___cxa_get_globals_fast,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_iiiii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b23,b23,b23,b23,b23,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN6VTFLib8CVTFFile16ComputeImageSizeEjjj17tagVTFImageFormat,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b23,b23,b23,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b23,b23,b23,b23,b23,b23,b23,b23,b23,_mbsrtowcs,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,_catgets__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,_mbrtowc,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_viiid = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN6VTFLib8CVTFFile17CorrectImageGammaEPhjjf,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];
var FUNCTION_TABLE_viii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__114error_category23default_error_conditionEi,b25,b25,__ZNKSt3__119__iostream_category7messageEi,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,___cxa_throw__wrapper,b25,b25,b25,b25,__ZN6VTFLib11Diagnostics6CError3SetEPKch,b25,b25
,b25,b25,b25,b25,__ZN6VTFLib8CVTFFile7SetFlagE15tagVTFImageFlagh,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b25,b25,b25,b25,b25,b25
,b25,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b25,b25,b25,b25,b25,b25,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_v = [b26,b26,b26,___cxa_pure_virtual__wrapper,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZL25default_terminate_handlerv,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,___cxa_end_catch__wrapper,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,___cxa_rethrow__wrapper,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZSt17__throw_bad_allocv,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_iiiiiiiii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b27,b27,b27,b27,b27,b27,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b27
,b27,b27,b27,b27,b27,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN6VTFLib8CVTFFile6ResizeEPhS1_jjjj18tagVTFMipmapFilter19tagVTFSharpenFilter,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27];
var FUNCTION_TABLE_viiii = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__Z11ToLuminanceRtS_S_S_,__Z13FromLuminanceRtS_S_S_,__Z12ToBlueScreenRtS_S_S_,__Z14FromBlueScreenRtS_S_S_,__Z6ToFP16RtS_S_S_,__Z8FromFP16RtS_S_S_,b28,b28,b28,b28,b28,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b28,b28,b28,b28,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b28,b28,b28,b28,b28,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b28,b28,b28,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b28,b28,b28,___assert_fail__wrapper,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _realloc: _realloc, _vlImageGetSize: _vlImageGetSize, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _fromData: _fromData, _bitshift64Lshr: _bitshift64Lshr, _vlImageSaveLump: _vlImageSaveLump, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_VTFLib_cpp: __GLOBAL__sub_I_VTFLib_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viddd: dynCall_viddd, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiiiiiiiidiiii: dynCall_iiiiiiiiidiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viiid: dynCall_viiid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__vlImageGetSize = asm["_vlImageGetSize"]; asm["_vlImageGetSize"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vlImageGetSize.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__fromData = asm["_fromData"]; asm["_fromData"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fromData.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__vlImageSaveLump = asm["_vlImageSaveLump"]; asm["_vlImageSaveLump"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vlImageSaveLump.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__sub_I_VTFLib_cpp = asm["__GLOBAL__sub_I_VTFLib_cpp"]; asm["__GLOBAL__sub_I_VTFLib_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_VTFLib_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _vlImageGetSize = Module["_vlImageGetSize"] = asm["_vlImageGetSize"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _fromData = Module["_fromData"] = asm["_fromData"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _vlImageSaveLump = Module["_vlImageSaveLump"] = asm["_vlImageSaveLump"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__sub_I_VTFLib_cpp = Module["__GLOBAL__sub_I_VTFLib_cpp"] = asm["__GLOBAL__sub_I_VTFLib_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiiiiiiiidiiii = Module["dynCall_iiiiiiiiidiiii"] = asm["dynCall_iiiiiiiiidiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



